<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/list.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook_gr.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>


<h2>Library Functions</h2>
<div class="notebook">
<ul>
<li ><a href="../FncLib_idx.htm" class="function" target="_top">metrics</a></li>
<li><a href="FncLib_a.htm" class="function" target="list">a</a></li>
<li><a href="FncLib_c.htm" class="function" target="list">c</a></li>
<li><a href="FncLib_d.htm" class="function" target="list">d</a></li>
<li><a href="FncLib_e.htm" class="function" target="list">e</a></li>
<li><a href="FncLib_f.htm" class="function" target="list">f</a></li>
<li><a href="FncLib_g.htm" class="function" target="list">g</a></li>
<li><a href="FncLib_h.htm" class="function" target="list">h</a></li>
<li><a href="FncLib_i.htm" class="function" target="list">i</a></li>
<li><a href="FncLib_l.htm" class="function" target="list">l</a></li>
<li><a href="FncLib_m.htm" class="function" target="list">m</a></li>
<li><a href="FncLib_p.htm" class="function" target="list">p</a></li>
<li><a href="FncLib_r.htm" class="function" target="list">r</a></li>
<li><a href="FncLib_s.htm" class="function" target="list">s</a></li>
<li><a href="FncLib_t.htm" class="function" target="list">t</a></li>
<li><a href="FncLib_u.htm" class="function" target="list">u</a></li>
<li><a href="FncLib__.htm" class="function" target="list">@</a></li>
<li id="current"><a href="FncLib_ky.htm" class="function" target="list">key</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre>
</pre>
<h4><a name=xref>Graph Symbols</a></h4>
<img align=middle width=300 height=316 border=0 src="../htm/Fn_ky.png" alt="symbol key for graphs">
<pre>
</pre>
<h4><a name="def"></a>Graph Descriptions</h4>
<p>
<em>Cross Reference</em> -- Cross reference graph shows immediate calling hierachy of function
<p>
<em>Flow Chart</em> -- Flow chart shows internal program logic of function
<pre>
</pre>
<h4><a name="def"></a>Metrics Descriptions</h4>
<p>
<em>Fan In</em> -- Number of functions in the source files loaded into the project that call or read the function, either directly or through function pointers
<p>
<em>Transitive Fan In</em> -- Number of functions in the source files loaded into the project that transitively call or read the function, including calls through function pointers
<pre>
</pre>
<h4><a name="def"></a>Source Checks</h4>
<p>
<em>Built-In Operators</em> -- Indicates that the number of built-in operators in an expression exceeds a user-specified threshold
<p>
<em>Functions in Expression</em> -- Indicates that the number of function calls in an expression exceeds a user-specified threshold
<p>
<em>Unclear Subexpression</em> -- Flags a subexpression that is potentially not written as intended.  Includes comparisons that can be statically evaluated like unsigned variables and negative numbers.  Catches typical suspicious relational operator uses and potential lack of parenthesis. (EX: x && y | z)
<p>
<em>Conversion Issue</em> -- Flags a conversion that could lose precision or rely on non-portable interpretations of arithmetic or pointers.  This includes mixing of signed and unsigned operands when it can lead to portability problems.  Also includes right-shifts of signed operands. (EX: int x; unsigned y; x = y;)
<p>
<em>Old Style Allocator</em> -- Flags the use of an old style memory allocator, such as malloc, realloc, calloc or free, in a C++ program.
<p>
<em>Suspicious Assignment</em> -- Flags a suspicious assignment in a conditional expression or argument list, where the assignment might actually be intended as a comparison
<p>
<em>Array Partially Zeroed</em> -- Flags an array variable initialized by a single "0".  Zeros should probably be specified for all array elements.
<p>
<em>Array Partially Initialized</em> -- Flags an array variable initialized with fewer values than the dimension of the array
<p>
<em>Needs Compound Statement</em> -- Flags a potentially missing compound statement (braces).  This includes possible errors caused by a dangling else or by a statement mistakenly disassociated from a while or for
<p>
<em>Missing Default Case</em> -- Flags a switch statement that does not have a default case
<p>
<em>Unterminated Case</em> -- Flags a case in a switch statement that is not terminated by an explicit transfer of control, such as a break statement
<p>
<em>Jump Statement</em> -- Flags a goto, break or continue statement that makes control flow more difficult to understand
<p>
<em>Return Ignored</em> -- Flags a statement that ignores the result of either a function call or any other expression where the computation is not stored.  This typically indicates that error results are being ignored
<p>
<em>Portability Problem</em> -- Flags certain language extensions that are incompatible with ISO C or ISO C++, such as Diab extension for sizeof and GNU extension for aggregate literals
<p>
<em>K&R Declarator</em> -- Flags a function declarator that uses old style K&R syntax, which is no longer valid in C++
<p>
<em>Potential Static Function</em> -- Indicates that a function is only called from within the file where it is defined, but is not declared static
<p>
<em>Missing/Mismatched Func Decl</em> -- Indicates an inconsistency between the declaration of a function and the parameters used in a function call.  This is mostly effective for C, where prototypes are missing or inconsistent
<p>
<em>Missing Return Type</em> -- Flags a function declaration that does not specify the return type
<p>
<em>Variable Num of Args</em> -- Flags a function that has a variable number of arguments
<p>
<em>Unused Global</em> -- Indicates that a global variable is never used in the source files loaded into the project
<p>
<em>Unused Static</em> -- Indicates that a static variable is never used
<p>
<em>Unused Local</em> -- Indicates that a local variable is never used
<p>
<em>Problematic Constructor</em> -- Flags a problematic definition in a class constructor. This includes virtual function calls from the constructor and initialization order problems
<p>
<em>No Constructor</em> -- Indicates that a class does not have a constructor.  Best practices recommend that explicit constructors always be defined in order to avoid problems in initializing the class objects
</body>
</html>
