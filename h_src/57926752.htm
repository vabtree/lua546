<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lmem.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57926752.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/57926752.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/57926752.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/57926752.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/57926752.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/57926752.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/57926752.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57926752.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/57926752.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lmem.c $</a>
<a id=3></a><a  class="comments">** Interface to Memory Manager</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/57926684.htm" class="macro">lmem_c</a>
<a id=8></a>#define <a href="../h_src/57926548.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;stddef.h&gt;

<a id=15></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=17></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=18></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=19></a>#include &quot;<a href="../h_src/57630112.htm" class="file">lgc.h</a>&quot;
<a id=20></a>#include &quot;<a href="../h_src/57496896.htm" class="file">lmem.h</a>&quot;
<a id=21></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;



<a id=26></a><a  class="comments">/*</a>
<a id=27></a><a  class="comments">** About the realloc function:</a>
<a id=28></a><a  class="comments">** void *frealloc (void *ud, void *ptr, size_t osize, size_t nsize);</a>
<a id=29></a><a  class="comments">** ('osize' is the old size, 'nsize' is the new size)</a>
<a id=30></a><a  class="comments">**</a>
<a id=31></a><a  class="comments">** - frealloc(ud, p, x, 0) frees the block 'p' and returns NULL.</a>
<a id=32></a><a  class="comments">** Particularly, frealloc(ud, NULL, 0, 0) does nothing,</a>
<a id=33></a><a  class="comments">** which is equivalent to free(NULL) in ISO C.</a>
<a id=34></a><a  class="comments">**</a>
<a id=35></a><a  class="comments">** - frealloc(ud, NULL, x, s) creates a new block of size 's'</a>
<a id=36></a><a  class="comments">** (no matter 'x'). Returns NULL if it cannot create the new block.</a>
<a id=37></a><a  class="comments">**</a>
<a id=38></a><a  class="comments">** - otherwise, frealloc(ud, b, x, y) reallocates the block 'b' from</a>
<a id=39></a><a  class="comments">** size 'x' to size 'y'. Returns NULL if it cannot reallocate the</a>
<a id=40></a><a  class="comments">** block to the new size.</a>
<a id=41></a><a  class="comments">*/</a>


<a id=44></a><a  class="comments">/*</a>
<a id=45></a><a  class="comments">** Macro to call the allocation function.</a>
<a id=46></a><a  class="comments">*/</a>
<a id=47></a>#define <a href="../h_src/57926412.htm" class="macro">callfrealloc</a>(g,block,os,ns)    ((*g-&gt;frealloc)(g-&gt;ud, block, os, ns))


<a id=50></a><a  class="comments">/*</a>
<a id=51></a><a  class="comments">** When an allocation fails, it will try again after an emergency</a>
<a id=52></a><a  class="comments">** collection, except when it cannot run a collection.  The GC should</a>
<a id=53></a><a  class="comments">** not be called while the state is not fully built, as the collector</a>
<a id=54></a><a  class="comments">** is not yet fully initialized. Also, it should not be called when</a>
<a id=55></a><a  class="comments">** 'gcstopem' is true, because then the interpreter is in the middle of</a>
<a id=56></a><a  class="comments">** a collection step.</a>
<a id=57></a><a  class="comments">*/</a>
<a id=58></a>#define <a href="../h_src/57926276.htm" class="macro">cantryagain</a>(g)	(completestate(g) &amp;&amp; !g-&gt;gcstopem)




<a id=63></a>#if defined(<a href="../h_src/57926140.htm" class="macro">EMERGENCYGCTESTS</a>)
<a id=64></a><a  class="comments">/*</a>
<a id=65></a><a  class="comments">** First allocation will fail except when freeing a block (frees never</a>
<a id=66></a><a  class="comments">** fail) and when it cannot try again; this fail will trigger 'tryagain'</a>
<a id=67></a><a  class="comments">** and a full GC cycle at every allocation.</a>
<a id=68></a><a  class="comments">*/</a>
static void *firsttry (global_State *g, void *block, size_t os, size_t ns) {
  if (ns &gt; 0 &amp;&amp; cantryagain(g))
<a id=71></a>    return NULL;  <a  class="comments">/* fail */</a>
<a id=72></a>  else  <a  class="comments">/* normal allocation */</a>
    return callfrealloc(g, block, os, ns);
}
#else
<a id=76></a>#define <a href="../h_src/57926004.htm" class="macro">firsttry</a>(g,block,os,ns)    callfrealloc(g, block, os, ns)
#endif





<a id=83></a><a  class="comments">/*</a>
<a id=84></a><a  class="comments">** {==================================================================</a>
<a id=85></a><a  class="comments">** Functions to allocate/deallocate arrays for the Parser</a>
<a id=86></a><a  class="comments">** ===================================================================</a>
<a id=87></a><a  class="comments">*/</a>

<a id=89></a><a  class="comments">/*</a>
<a id=90></a><a  class="comments">** Minimum size for arrays during parsing, to avoid overhead of</a>
<a id=91></a><a  class="comments">** reallocating to size 1, then 2, and then 4. All these arrays</a>
<a id=92></a><a  class="comments">** will be reallocated to exact sizes or erased when parsing ends.</a>
<a id=93></a><a  class="comments">*/</a>
<a id=94></a>#define <a href="../h_src/57925868.htm" class="macro">MINSIZEARRAY</a>	4


<a id=97></a>void *<a href="../h_src/57656564.htm" class="function">luaM_growaux_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57925732.htm" class="localvar">L</a>, void *<a href="../h_src/57925596.htm" class="localvar">block</a>, int <a href="../h_src/57925460.htm" class="localvar">nelems</a>, int *<a href="../h_src/57925324.htm" class="localvar">psize</a>,
<a id=98></a>                     int <a href="../h_src/57925188.htm" class="localvar">size_elems</a>, int <a href="../h_src/57925052.htm" class="localvar">limit</a>, const char *<a href="../h_src/57924916.htm" class="localvar">what</a>) {
<a id=99></a>  void *<a href="../h_src/57924780.htm" class="localvar">newblock</a>;
<a id=100></a>  int <a href="../h_src/57924644.htm" class="localvar">size</a> = *<a href="../h_src/57925324.htm" class="localvar">psize</a>;
<a id=101></a>  if (<a href="../h_src/57925460.htm" class="localvar">nelems</a> + 1 &lt;= <a href="../h_src/57924644.htm" class="localvar">size</a>)  <a  class="comments">/* does one extra element still fit? */</a>
<a id=102></a>    return <a href="../h_src/57925596.htm" class="localvar">block</a>;  <a  class="comments">/* nothing to be done */</a>
<a id=103></a>  if (<a href="../h_src/57924644.htm" class="localvar">size</a> &gt;= <a href="../h_src/57925052.htm" class="localvar">limit</a> / 2) {  <a  class="comments">/* cannot double it? */</a>
<a id=104></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57924644.htm" class="localvar">size</a> &gt;= <a href="../h_src/57925052.htm" class="localvar">limit</a>))  <a  class="comments">/* cannot grow even a little? */</a>
<a id=105></a>      <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57925732.htm" class="localvar">L</a>, &quot;too many %s (limit is %d)&quot;, <a href="../h_src/57924916.htm" class="localvar">what</a>, <a href="../h_src/57925052.htm" class="localvar">limit</a>);
<a id=106></a>    <a href="../h_src/57924644.htm" class="localvar">size</a> = <a href="../h_src/57925052.htm" class="localvar">limit</a>;  <a  class="comments">/* still have at least one free place */</a>
  }
  else {
<a id=109></a>    <a href="../h_src/57924644.htm" class="localvar">size</a> *= 2;
<a id=110></a>    if (<a href="../h_src/57924644.htm" class="localvar">size</a> &lt; <a href="../h_src/57925868.htm" class="macro">MINSIZEARRAY</a>)
<a id=111></a>      <a href="../h_src/57924644.htm" class="localvar">size</a> = <a href="../h_src/57925868.htm" class="macro">MINSIZEARRAY</a>;  <a  class="comments">/* minimum size */</a>
  }
<a id=113></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(nelems + 1 &lt;= size &amp;&amp; size &lt;= limit);
<a id=114></a>  <a  class="comments">/* 'limit' ensures that multiplication will not overflow */</a>
<a id=115></a>  <a href="../h_src/57924780.htm" class="localvar">newblock</a> = <a href="../h_src/57656700.htm" class="function">luaM_saferealloc_</a>(<a href="../h_src/57925732.htm" class="localvar">L</a>, <a href="../h_src/57925596.htm" class="localvar">block</a>, <a href="../h_src/57546400.htm" class="macro">cast_sizet</a>(*<a href="../h_src/57925324.htm" class="localvar">psize</a>) * <a href="../h_src/57925188.htm" class="localvar">size_elems</a>,
<a id=116></a>                                         <a href="../h_src/57546400.htm" class="macro">cast_sizet</a>(<a href="../h_src/57924644.htm" class="localvar">size</a>) * <a href="../h_src/57925188.htm" class="localvar">size_elems</a>);
<a id=117></a>  *<a href="../h_src/57925324.htm" class="localvar">psize</a> = <a href="../h_src/57924644.htm" class="localvar">size</a>;  <a  class="comments">/* update only when everything else is OK */</a>
<a id=118></a>  return <a href="../h_src/57924780.htm" class="localvar">newblock</a>;
}


<a id=122></a><a  class="comments">/*</a>
<a id=123></a><a  class="comments">** In prototypes, the size of the array is also its number of</a>
<a id=124></a><a  class="comments">** elements (to save memory). So, if it cannot shrink an array</a>
<a id=125></a><a  class="comments">** to its number of elements, the only option is to raise an</a>
<a id=126></a><a  class="comments">** error.</a>
<a id=127></a><a  class="comments">*/</a>
<a id=128></a>void *<a href="../h_src/57656496.htm" class="function">luaM_shrinkvector_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57924508.htm" class="localvar">L</a>, void *<a href="../h_src/57924372.htm" class="localvar">block</a>, int *<a href="../h_src/57924236.htm" class="localvar">size</a>,
<a id=129></a>                          int <a href="../h_src/57924100.htm" class="localvar">final_n</a>, int <a href="../h_src/57923964.htm" class="localvar">size_elem</a>) {
<a id=130></a>  void *<a href="../h_src/57923828.htm" class="localvar">newblock</a>;
<a id=131></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57923692.htm" class="localvar">oldsize</a> = <a href="../h_src/57546400.htm" class="macro">cast_sizet</a>((*<a href="../h_src/57924236.htm" class="localvar">size</a>) * <a href="../h_src/57923964.htm" class="localvar">size_elem</a>);
<a id=132></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57923556.htm" class="localvar">newsize</a> = <a href="../h_src/57546400.htm" class="macro">cast_sizet</a>(<a href="../h_src/57924100.htm" class="localvar">final_n</a> * <a href="../h_src/57923964.htm" class="localvar">size_elem</a>);
<a id=133></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(newsize &lt;= oldsize);
<a id=134></a>  <a href="../h_src/57923828.htm" class="localvar">newblock</a> = <a href="../h_src/57656700.htm" class="function">luaM_saferealloc_</a>(<a href="../h_src/57924508.htm" class="localvar">L</a>, <a href="../h_src/57924372.htm" class="localvar">block</a>, <a href="../h_src/57923692.htm" class="localvar">oldsize</a>, <a href="../h_src/57923556.htm" class="localvar">newsize</a>);
<a id=135></a>  *<a href="../h_src/57924236.htm" class="localvar">size</a> = <a href="../h_src/57924100.htm" class="localvar">final_n</a>;
<a id=136></a>  return <a href="../h_src/57923828.htm" class="localvar">newblock</a>;
}

<a id=139></a><a  class="comments">/* }================================================================== */</a>


<a id=142></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57656836.htm" class="function">luaM_toobig</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57923420.htm" class="localvar">L</a>) {
<a id=143></a>  <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57923420.htm" class="localvar">L</a>, &quot;memory allocation error: block too big&quot;);
}


<a id=147></a><a  class="comments">/*</a>
<a id=148></a><a  class="comments">** Free memory</a>
<a id=149></a><a  class="comments">*/</a>
<a id=150></a>void <a href="../h_src/57656632.htm" class="function">luaM_free_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57923284.htm" class="localvar">L</a>, void *<a href="../h_src/57923148.htm" class="localvar">block</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57923012.htm" class="localvar">osize</a>) {
<a id=151></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57922876.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57923284.htm" class="localvar">L</a>);
<a id=152></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>((osize == 0) == (block == NULL));
<a id=153></a>  <a href="../h_src/57926412.htm" class="macro">callfrealloc</a>(<a href="../h_src/57922876.htm" class="localvar">g</a>, <a href="../h_src/57923148.htm" class="localvar">block</a>, <a href="../h_src/57923012.htm" class="localvar">osize</a>, 0);
<a id=154></a>  <a href="../h_src/57922876.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> -= <a href="../h_src/57923012.htm" class="localvar">osize</a>;
}


<a id=158></a><a  class="comments">/*</a>
<a id=159></a><a  class="comments">** In case of allocation fail, this function will do an emergency</a>
<a id=160></a><a  class="comments">** collection to free some memory and then try the allocation again.</a>
<a id=161></a><a  class="comments">*/</a>
<a id=162></a>static void *<a href="../h_src/57922740.htm" class="function">tryagain</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57922604.htm" class="localvar">L</a>, void *<a href="../h_src/57922468.htm" class="localvar">block</a>,
<a id=163></a>                       <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57922332.htm" class="localvar">osize</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57922196.htm" class="localvar">nsize</a>) {
<a id=164></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57922060.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57922604.htm" class="localvar">L</a>);
<a id=165></a>  if (<a href="../h_src/57926276.htm" class="macro">cantryagain</a>(<a href="../h_src/57922060.htm" class="localvar">g</a>)) {
<a id=166></a>    <a href="../h_src/57620660.htm" class="function">luaC_fullgc</a>(<a href="../h_src/57922604.htm" class="localvar">L</a>, 1);  <a  class="comments">/* try to free some memory... */</a>
<a id=167></a>    return <a href="../h_src/57926412.htm" class="macro">callfrealloc</a>(<a href="../h_src/57922060.htm" class="localvar">g</a>, <a href="../h_src/57922468.htm" class="localvar">block</a>, <a href="../h_src/57922332.htm" class="localvar">osize</a>, <a href="../h_src/57922196.htm" class="localvar">nsize</a>);  <a  class="comments">/* try again */</a>
  }
<a id=169></a>  else return NULL;  <a  class="comments">/* cannot run an emergency collection */</a>
}


<a id=173></a><a  class="comments">/*</a>
<a id=174></a><a  class="comments">** Generic allocation routine.</a>
<a id=175></a><a  class="comments">*/</a>
<a id=176></a>void *<a href="../h_src/57656768.htm" class="function">luaM_realloc_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57921924.htm" class="localvar">L</a>, void *<a href="../h_src/57921788.htm" class="localvar">block</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57921652.htm" class="localvar">osize</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57921516.htm" class="localvar">nsize</a>) {
<a id=177></a>  void *<a href="../h_src/57921380.htm" class="localvar">newblock</a>;
<a id=178></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57921244.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57921924.htm" class="localvar">L</a>);
<a id=179></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>((osize == 0) == (block == NULL));
<a id=180></a>  <a href="../h_src/57921380.htm" class="localvar">newblock</a> = <a href="../h_src/57926004.htm" class="macro">firsttry</a>(<a href="../h_src/57921244.htm" class="localvar">g</a>, <a href="../h_src/57921788.htm" class="localvar">block</a>, <a href="../h_src/57921652.htm" class="localvar">osize</a>, <a href="../h_src/57921516.htm" class="localvar">nsize</a>);
<a id=181></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57921380.htm" class="localvar">newblock</a> == NULL &amp;&amp; <a href="../h_src/57921516.htm" class="localvar">nsize</a> &gt; 0)) {
<a id=182></a>    <a href="../h_src/57921380.htm" class="localvar">newblock</a> = <a href="../h_src/57922740.htm" class="function">tryagain</a>(<a href="../h_src/57921924.htm" class="localvar">L</a>, <a href="../h_src/57921788.htm" class="localvar">block</a>, <a href="../h_src/57921652.htm" class="localvar">osize</a>, <a href="../h_src/57921516.htm" class="localvar">nsize</a>);
<a id=183></a>    if (<a href="../h_src/57921380.htm" class="localvar">newblock</a> == NULL)  <a  class="comments">/* still no memory? */</a>
<a id=184></a>      return NULL;  <a  class="comments">/* do not update 'GCdebt' */</a>
  }
<a id=186></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>((nsize == 0) == (newblock == NULL));
<a id=187></a>  <a href="../h_src/57921244.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> = (<a href="../h_src/57921244.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> + <a href="../h_src/57921516.htm" class="localvar">nsize</a>) - <a href="../h_src/57921652.htm" class="localvar">osize</a>;
<a id=188></a>  return <a href="../h_src/57921380.htm" class="localvar">newblock</a>;
}


<a id=192></a>void *<a href="../h_src/57656700.htm" class="function">luaM_saferealloc_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57921108.htm" class="localvar">L</a>, void *<a href="../h_src/57920972.htm" class="localvar">block</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57920836.htm" class="localvar">osize</a>,
<a id=193></a>                                                    <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57920700.htm" class="localvar">nsize</a>) {
<a id=194></a>  void *<a href="../h_src/57920564.htm" class="localvar">newblock</a> = <a href="../h_src/57656768.htm" class="function">luaM_realloc_</a>(<a href="../h_src/57921108.htm" class="localvar">L</a>, <a href="../h_src/57920972.htm" class="localvar">block</a>, <a href="../h_src/57920836.htm" class="localvar">osize</a>, <a href="../h_src/57920700.htm" class="localvar">nsize</a>);
<a id=195></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57920564.htm" class="localvar">newblock</a> == NULL &amp;&amp; <a href="../h_src/57920700.htm" class="localvar">nsize</a> &gt; 0))  <a  class="comments">/* allocation failed? */</a>
<a id=196></a>    <a href="../h_src/57496556.htm" class="macro">luaM_error</a>(<a href="../h_src/57921108.htm" class="localvar">L</a>);
<a id=197></a>  return <a href="../h_src/57920564.htm" class="localvar">newblock</a>;
}


<a id=201></a>void *<a href="../h_src/57656428.htm" class="function">luaM_malloc_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57920428.htm" class="localvar">L</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57920292.htm" class="localvar">size</a>, int <a href="../h_src/57920156.htm" class="localvar">tag</a>) {
<a id=202></a>  if (<a href="../h_src/57920292.htm" class="localvar">size</a> == 0)
<a id=203></a>    return NULL;  <a  class="comments">/* that's all */</a>
  else {
<a id=205></a>    <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57920020.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57920428.htm" class="localvar">L</a>);
<a id=206></a>    void *<a href="../h_src/57919884.htm" class="localvar">newblock</a> = <a href="../h_src/57926004.htm" class="macro">firsttry</a>(<a href="../h_src/57920020.htm" class="localvar">g</a>, NULL, <a href="../h_src/57920156.htm" class="localvar">tag</a>, <a href="../h_src/57920292.htm" class="localvar">size</a>);
<a id=207></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57919884.htm" class="localvar">newblock</a> == NULL)) {
<a id=208></a>      <a href="../h_src/57919884.htm" class="localvar">newblock</a> = <a href="../h_src/57922740.htm" class="function">tryagain</a>(<a href="../h_src/57920428.htm" class="localvar">L</a>, NULL, <a href="../h_src/57920156.htm" class="localvar">tag</a>, <a href="../h_src/57920292.htm" class="localvar">size</a>);
<a id=209></a>      if (<a href="../h_src/57919884.htm" class="localvar">newblock</a> == NULL)
<a id=210></a>        <a href="../h_src/57496556.htm" class="macro">luaM_error</a>(<a href="../h_src/57920428.htm" class="localvar">L</a>);
    }
<a id=212></a>    <a href="../h_src/57920020.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> += <a href="../h_src/57920292.htm" class="localvar">size</a>;
<a id=213></a>    return <a href="../h_src/57919884.htm" class="localvar">newblock</a>;
  }
}
</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

