<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lcode.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57706720.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/57706720.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/57706720.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/57706720.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/57706720.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/57706720.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/57706720.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57706720.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/57706720.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lcode.c $</a>
<a id=3></a><a  class="comments">** Code generator for Lua</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/57706652.htm" class="macro">lcode_c</a>
<a id=8></a>#define <a href="../h_src/57706516.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;float.h&gt;
#include &lt;limits.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

<a id=18></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=20></a>#include &quot;<a href="../h_src/57706380.htm" class="file">lcode.h</a>&quot;
<a id=21></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=23></a>#include &quot;<a href="../h_src/57630112.htm" class="file">lgc.h</a>&quot;
<a id=24></a>#include &quot;<a href="../h_src/57706040.htm" class="file">llex.h</a>&quot;
<a id=25></a>#include &quot;<a href="../h_src/57496896.htm" class="file">lmem.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=27></a>#include &quot;<a href="../h_src/57699512.htm" class="file">lopcodes.h</a>&quot;
<a id=28></a>#include &quot;<a href="../h_src/57683056.htm" class="file">lparser.h</a>&quot;
<a id=29></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;
<a id=30></a>#include &quot;<a href="../h_src/57618348.htm" class="file">ltable.h</a>&quot;
<a id=31></a>#include &quot;<a href="../h_src/57614676.htm" class="file">lvm.h</a>&quot;


<a id=34></a><a  class="comments">/* Maximum number of registers in a Lua function (must fit in 8 bits) */</a>
<a id=35></a>#define <a href="../h_src/57668708.htm" class="macro">MAXREGS</a>		255


<a id=38></a>#define <a href="../h_src/57668572.htm" class="macro">hasjumps</a>(e)	((e)-&gt;t != (e)-&gt;f)


<a id=41></a>static int <a href="../h_src/57668436.htm" class="function">codesJ</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *fs, <a href="../h_src/57684756.htm" class="type">OpCode</a> o, int sj, int k);



<a id=45></a><a  class="comments">/* semantic error */</a>
<a id=46></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57668776.htm" class="function">luaK_semerror</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57668300.htm" class="localvar">ls</a>, const char *<a href="../h_src/57668164.htm" class="localvar">msg</a>) {
<a id=47></a>  <a href="../h_src/57668300.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> = 0;  <a  class="comments">/* remove &quot;near &lt;token&gt;&quot; from final message */</a>
<a id=48></a>  <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/57668300.htm" class="localvar">ls</a>, <a href="../h_src/57668164.htm" class="localvar">msg</a>);
}


<a id=52></a><a  class="comments">/*</a>
<a id=53></a><a  class="comments">** If expression is a numeric constant, fills 'v' with its value</a>
<a id=54></a><a  class="comments">** and returns 1. Otherwise, returns 0.</a>
<a id=55></a><a  class="comments">*/</a>
<a id=56></a>static int <a href="../h_src/57668028.htm" class="function">tonumeral</a> (const <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57667892.htm" class="localvar">e</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57667756.htm" class="localvar">v</a>) {
<a id=57></a>  if (<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57667892.htm" class="localvar">e</a>))
<a id=58></a>    return 0;  <a  class="comments">/* not a numeral */</a>
<a id=59></a>  switch (<a href="../h_src/57667892.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=60></a>    case <a href="../h_src/57682308.htm" class="variable">VKINT</a>:
<a id=61></a>      if (<a href="../h_src/57667756.htm" class="localvar">v</a>) <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57667756.htm" class="localvar">v</a>, <a href="../h_src/57667892.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>);
      return 1;
<a id=63></a>    case <a href="../h_src/57682376.htm" class="variable">VKFLT</a>:
<a id=64></a>      if (<a href="../h_src/57667756.htm" class="localvar">v</a>) <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57667756.htm" class="localvar">v</a>, <a href="../h_src/57667892.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680540.htm" class="variable">nval</a>);
      return 1;
    default: return 0;
  }
}


<a id=71></a><a  class="comments">/*</a>
<a id=72></a><a  class="comments">** Get the constant value from a constant expression</a>
<a id=73></a><a  class="comments">*/</a>
<a id=74></a>static <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57667348.htm" class="function">const2val</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57667212.htm" class="localvar">fs</a>, const <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57667076.htm" class="localvar">e</a>) {
<a id=75></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e-&gt;k == VCONST);
<a id=76></a>  return &amp;<a href="../h_src/57667212.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676732.htm" class="variable">arr</a>[<a href="../h_src/57667076.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>].<a href="../h_src/57678024.htm" class="variable">k</a>;
}


<a id=80></a><a  class="comments">/*</a>
<a id=81></a><a  class="comments">** If expression is a constant, fills 'v' with its value</a>
<a id=82></a><a  class="comments">** and returns 1. Otherwise, returns 0.</a>
<a id=83></a><a  class="comments">*/</a>
<a id=84></a>int <a href="../h_src/57670884.htm" class="function">luaK_exp2const</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57666940.htm" class="localvar">fs</a>, const <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57666804.htm" class="localvar">e</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57666668.htm" class="localvar">v</a>) {
<a id=85></a>  if (<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57666804.htm" class="localvar">e</a>))
<a id=86></a>    return 0;  <a  class="comments">/* not a constant */</a>
<a id=87></a>  switch (<a href="../h_src/57666804.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=88></a>    case <a href="../h_src/57682512.htm" class="variable">VFALSE</a>:
<a id=89></a>      <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(<a href="../h_src/57666668.htm" class="localvar">v</a>);
      return 1;
<a id=91></a>    case <a href="../h_src/57682580.htm" class="variable">VTRUE</a>:
<a id=92></a>      <a href="../h_src/57529128.htm" class="macro">setbtvalue</a>(<a href="../h_src/57666668.htm" class="localvar">v</a>);
      return 1;
<a id=94></a>    case <a href="../h_src/57682648.htm" class="variable">VNIL</a>:
<a id=95></a>      <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57666668.htm" class="localvar">v</a>);
      return 1;
<a id=97></a>    case <a href="../h_src/57682240.htm" class="variable">VKSTR</a>: {
<a id=98></a>      <a href="../h_src/57524232.htm" class="macro">setsvalue</a>(<a href="../h_src/57666940.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/57666668.htm" class="localvar">v</a>, <a href="../h_src/57666804.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680472.htm" class="variable">strval</a>);
      return 1;
    }
<a id=101></a>    case <a href="../h_src/57681968.htm" class="variable">VCONST</a>: {
<a id=102></a>      <a href="../h_src/57533684.htm" class="macro">setobj</a>(<a href="../h_src/57666940.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/57666668.htm" class="localvar">v</a>, <a href="../h_src/57667348.htm" class="function">const2val</a>(<a href="../h_src/57666940.htm" class="localvar">fs</a>, <a href="../h_src/57666804.htm" class="localvar">e</a>));
      return 1;
    }
<a id=105></a>    default: return <a href="../h_src/57668028.htm" class="function">tonumeral</a>(<a href="../h_src/57666804.htm" class="localvar">e</a>, <a href="../h_src/57666668.htm" class="localvar">v</a>);
  }
}


<a id=110></a><a  class="comments">/*</a>
<a id=111></a><a  class="comments">** Return the previous instruction of the current code. If there</a>
<a id=112></a><a  class="comments">** may be a jump target between the current instruction and the</a>
<a id=113></a><a  class="comments">** previous one, return an invalid instruction (to avoid wrong</a>
<a id=114></a><a  class="comments">** optimizations).</a>
<a id=115></a><a  class="comments">*/</a>
<a id=116></a>static <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57665988.htm" class="function">previousinstruction</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57665852.htm" class="localvar">fs</a>) {
<a id=117></a>  static const <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57665716.htm" class="localvar">invalidinstruction</a> = ~(<a href="../h_src/57545108.htm" class="type">Instruction</a>)0;
<a id=118></a>  if (<a href="../h_src/57665852.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a> &gt; <a href="../h_src/57665852.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675440.htm" class="variable">lasttarget</a>)
<a id=119></a>    return &amp;<a href="../h_src/57665852.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57665852.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a> - 1];  <a  class="comments">/* previous instruction */</a>
  else
<a id=121></a>    return <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57545108.htm" class="type">Instruction</a>*, &amp;<a href="../h_src/57665716.htm" class="localvar">invalidinstruction</a>);
}


<a id=125></a><a  class="comments">/*</a>
<a id=126></a><a  class="comments">** Create a OP_LOADNIL instruction, but try to optimize: if the previous</a>
<a id=127></a><a  class="comments">** instruction is also OP_LOADNIL and ranges are compatible, adjust</a>
<a id=128></a><a  class="comments">** range of previous instruction instead of emitting a new one. (For</a>
<a id=129></a><a  class="comments">** instance, 'local a; local b' will generate a single opcode.)</a>
<a id=130></a><a  class="comments">*/</a>
<a id=131></a>void <a href="../h_src/57670748.htm" class="function">luaK_nil</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57665580.htm" class="localvar">fs</a>, int <a href="../h_src/57665444.htm" class="localvar">from</a>, int <a href="../h_src/57665308.htm" class="localvar">n</a>) {
<a id=132></a>  int <a href="../h_src/57665172.htm" class="localvar">l</a> = <a href="../h_src/57665444.htm" class="localvar">from</a> + <a href="../h_src/57665308.htm" class="localvar">n</a> - 1;  <a  class="comments">/* last register to set nil */</a>
<a id=133></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57665036.htm" class="localvar">previous</a> = <a href="../h_src/57665988.htm" class="function">previousinstruction</a>(<a href="../h_src/57665580.htm" class="localvar">fs</a>);
<a id=134></a>  if (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*<a href="../h_src/57665036.htm" class="localvar">previous</a>) == <a href="../h_src/57689992.htm" class="variable">OP_LOADNIL</a>) {  <a  class="comments">/* previous is LOADNIL? */</a>
<a id=135></a>    int <a href="../h_src/57664900.htm" class="localvar">pfrom</a> = <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(*<a href="../h_src/57665036.htm" class="localvar">previous</a>);  <a  class="comments">/* get previous range */</a>
<a id=136></a>    int <a href="../h_src/57664764.htm" class="localvar">pl</a> = <a href="../h_src/57664900.htm" class="localvar">pfrom</a> + <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(*<a href="../h_src/57665036.htm" class="localvar">previous</a>);
<a id=137></a>    if ((<a href="../h_src/57664900.htm" class="localvar">pfrom</a> &lt;= <a href="../h_src/57665444.htm" class="localvar">from</a> &amp;&amp; <a href="../h_src/57665444.htm" class="localvar">from</a> &lt;= <a href="../h_src/57664764.htm" class="localvar">pl</a> + 1) ||
<a id=138></a>        (<a href="../h_src/57665444.htm" class="localvar">from</a> &lt;= <a href="../h_src/57664900.htm" class="localvar">pfrom</a> &amp;&amp; <a href="../h_src/57664900.htm" class="localvar">pfrom</a> &lt;= <a href="../h_src/57665172.htm" class="localvar">l</a> + 1)) {  <a  class="comments">/* can connect both? */</a>
<a id=139></a>      if (<a href="../h_src/57664900.htm" class="localvar">pfrom</a> &lt; <a href="../h_src/57665444.htm" class="localvar">from</a>) <a href="../h_src/57665444.htm" class="localvar">from</a> = <a href="../h_src/57664900.htm" class="localvar">pfrom</a>;  <a  class="comments">/* from = min(from, pfrom) */</a>
<a id=140></a>      if (<a href="../h_src/57664764.htm" class="localvar">pl</a> &gt; <a href="../h_src/57665172.htm" class="localvar">l</a>) <a href="../h_src/57665172.htm" class="localvar">l</a> = <a href="../h_src/57664764.htm" class="localvar">pl</a>;  <a  class="comments">/* l = max(l, pl) */</a>
<a id=141></a>      <a href="../h_src/57693936.htm" class="macro">SETARG_A</a>(*<a href="../h_src/57665036.htm" class="localvar">previous</a>, <a href="../h_src/57665444.htm" class="localvar">from</a>);
<a id=142></a>      <a href="../h_src/57693528.htm" class="macro">SETARG_B</a>(*<a href="../h_src/57665036.htm" class="localvar">previous</a>, <a href="../h_src/57665172.htm" class="localvar">l</a> - <a href="../h_src/57665444.htm" class="localvar">from</a>);
      return;
<a id=144></a>    }  <a  class="comments">/* else go through */</a>
  }
<a id=146></a>  <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57665580.htm" class="localvar">fs</a>, <a href="../h_src/57689992.htm" class="variable">OP_LOADNIL</a>, <a href="../h_src/57665444.htm" class="localvar">from</a>, <a href="../h_src/57665308.htm" class="localvar">n</a> - 1, 0);  <a  class="comments">/* else no optimization */</a>
}


<a id=150></a><a  class="comments">/*</a>
<a id=151></a><a  class="comments">** Gets the destination address of a jump instruction. Used to traverse</a>
<a id=152></a><a  class="comments">** a list of jumps.</a>
<a id=153></a><a  class="comments">*/</a>
<a id=154></a>static int <a href="../h_src/57664628.htm" class="function">getjump</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57664492.htm" class="localvar">fs</a>, int <a href="../h_src/57664356.htm" class="localvar">pc</a>) {
<a id=155></a>  int <a href="../h_src/57664220.htm" class="localvar">offset</a> = <a href="../h_src/57691760.htm" class="macro">GETARG_sJ</a>(<a href="../h_src/57664492.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57664356.htm" class="localvar">pc</a>]);
<a id=156></a>  if (<a href="../h_src/57664220.htm" class="localvar">offset</a> == <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>)  <a  class="comments">/* point to itself represents end of list */</a>
<a id=157></a>    return <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;  <a  class="comments">/* end of list */</a>
  else
<a id=159></a>    return (<a href="../h_src/57664356.htm" class="localvar">pc</a>+1)+<a href="../h_src/57664220.htm" class="localvar">offset</a>;  <a  class="comments">/* turn offset into absolute position */</a>
}


<a id=163></a><a  class="comments">/*</a>
<a id=164></a><a  class="comments">** Fix jump instruction at position 'pc' to jump to 'dest'.</a>
<a id=165></a><a  class="comments">** (Jump addresses are relative in Lua)</a>
<a id=166></a><a  class="comments">*/</a>
<a id=167></a>static void <a href="../h_src/57664084.htm" class="function">fixjump</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57663948.htm" class="localvar">fs</a>, int <a href="../h_src/57663812.htm" class="localvar">pc</a>, int <a href="../h_src/57663676.htm" class="localvar">dest</a>) {
<a id=168></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57663540.htm" class="localvar">jmp</a> = &amp;<a href="../h_src/57663948.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57663812.htm" class="localvar">pc</a>];
<a id=169></a>  int <a href="../h_src/57663404.htm" class="localvar">offset</a> = <a href="../h_src/57663676.htm" class="localvar">dest</a> - (<a href="../h_src/57663812.htm" class="localvar">pc</a> + 1);
<a id=170></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(dest != <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>);
<a id=171></a>  if (!(-<a href="../h_src/57695976.htm" class="macro">OFFSET_sJ</a> &lt;= <a href="../h_src/57663404.htm" class="localvar">offset</a> &amp;&amp; <a href="../h_src/57663404.htm" class="localvar">offset</a> &lt;= <a href="../h_src/57696112.htm" class="macro">MAXARG_sJ</a> - <a href="../h_src/57695976.htm" class="macro">OFFSET_sJ</a>))
<a id=172></a>    <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/57663948.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>, &quot;control structure too long&quot;);
<a id=173></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*jmp) == OP_JMP);
<a id=174></a>  <a href="../h_src/57691624.htm" class="macro">SETARG_sJ</a>(*<a href="../h_src/57663540.htm" class="localvar">jmp</a>, <a href="../h_src/57663404.htm" class="localvar">offset</a>);
}


<a id=178></a><a  class="comments">/*</a>
<a id=179></a><a  class="comments">** Concatenate jump-list 'l2' into jump-list 'l1'</a>
<a id=180></a><a  class="comments">*/</a>
<a id=181></a>void <a href="../h_src/57669320.htm" class="function">luaK_concat</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57663268.htm" class="localvar">fs</a>, int *<a href="../h_src/57663132.htm" class="localvar">l1</a>, int <a href="../h_src/57662996.htm" class="localvar">l2</a>) {
<a id=182></a>  if (<a href="../h_src/57662996.htm" class="localvar">l2</a> == <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>) return;  <a  class="comments">/* nothing to concatenate? */</a>
<a id=183></a>  else if (*<a href="../h_src/57663132.htm" class="localvar">l1</a> == <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>)  <a  class="comments">/* no original list? */</a>
<a id=184></a>    *<a href="../h_src/57663132.htm" class="localvar">l1</a> = <a href="../h_src/57662996.htm" class="localvar">l2</a>;  <a  class="comments">/* 'l1' points to 'l2' */</a>
  else {
<a id=186></a>    int <a href="../h_src/57662860.htm" class="localvar">list</a> = *<a href="../h_src/57663132.htm" class="localvar">l1</a>;
<a id=187></a>    int <a href="../h_src/57662724.htm" class="localvar">next</a>;
<a id=188></a>    while ((<a href="../h_src/57662724.htm" class="localvar">next</a> = <a href="../h_src/57664628.htm" class="function">getjump</a>(<a href="../h_src/57663268.htm" class="localvar">fs</a>, <a href="../h_src/57662860.htm" class="localvar">list</a>)) != <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>)  <a  class="comments">/* find last element */</a>
<a id=189></a>      <a href="../h_src/57662860.htm" class="localvar">list</a> = <a href="../h_src/57662724.htm" class="localvar">next</a>;
<a id=190></a>    <a href="../h_src/57664084.htm" class="function">fixjump</a>(<a href="../h_src/57663268.htm" class="localvar">fs</a>, <a href="../h_src/57662860.htm" class="localvar">list</a>, <a href="../h_src/57662996.htm" class="localvar">l2</a>);  <a  class="comments">/* last element links to 'l2' */</a>
  }
}


<a id=195></a><a  class="comments">/*</a>
<a id=196></a><a  class="comments">** Create a jump instruction and return its position, so its destination</a>
<a id=197></a><a  class="comments">** can be fixed later (with 'fixjump').</a>
<a id=198></a><a  class="comments">*/</a>
<a id=199></a>int <a href="../h_src/57669592.htm" class="function">luaK_jump</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57662588.htm" class="localvar">fs</a>) {
<a id=200></a>  return <a href="../h_src/57668436.htm" class="function">codesJ</a>(<a href="../h_src/57662588.htm" class="localvar">fs</a>, <a href="../h_src/57686728.htm" class="variable">OP_JMP</a>, <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>, 0);
}


<a id=204></a><a  class="comments">/*</a>
<a id=205></a><a  class="comments">** Code a 'return' instruction</a>
<a id=206></a><a  class="comments">*/</a>
<a id=207></a>void <a href="../h_src/57669524.htm" class="function">luaK_ret</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57662452.htm" class="localvar">fs</a>, int <a href="../h_src/57662316.htm" class="localvar">first</a>, int <a href="../h_src/57662180.htm" class="localvar">nret</a>) {
<a id=208></a>  <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57662044.htm" class="localvar">op</a>;
<a id=209></a>  switch (<a href="../h_src/57662180.htm" class="localvar">nret</a>) {
<a id=210></a>    case 0: <a href="../h_src/57662044.htm" class="localvar">op</a> = <a href="../h_src/57685708.htm" class="variable">OP_RETURN0</a>; break;
<a id=211></a>    case 1: <a href="../h_src/57662044.htm" class="localvar">op</a> = <a href="../h_src/57685640.htm" class="variable">OP_RETURN1</a>; break;
<a id=212></a>    default: <a href="../h_src/57662044.htm" class="localvar">op</a> = <a href="../h_src/57685776.htm" class="variable">OP_RETURN</a>; break;
  }
<a id=214></a>  <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57662452.htm" class="localvar">fs</a>, <a href="../h_src/57662044.htm" class="localvar">op</a>, <a href="../h_src/57662316.htm" class="localvar">first</a>, <a href="../h_src/57662180.htm" class="localvar">nret</a> + 1, 0);
}


<a id=218></a><a  class="comments">/*</a>
<a id=219></a><a  class="comments">** Code a &quot;conditional jump&quot;, that is, a test or comparison opcode</a>
<a id=220></a><a  class="comments">** followed by a jump. Return jump position.</a>
<a id=221></a><a  class="comments">*/</a>
<a id=222></a>static int <a href="../h_src/57661908.htm" class="function">condjump</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57661772.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57661636.htm" class="localvar">op</a>, int <a href="../h_src/57661500.htm" class="localvar">A</a>, int <a href="../h_src/57661364.htm" class="localvar">B</a>, int <a href="../h_src/57661228.htm" class="localvar">C</a>, int <a href="../h_src/57661092.htm" class="localvar">k</a>) {
<a id=223></a>  <a href="../h_src/57671088.htm" class="function">luaK_codeABCk</a>(<a href="../h_src/57661772.htm" class="localvar">fs</a>, <a href="../h_src/57661636.htm" class="localvar">op</a>, <a href="../h_src/57661500.htm" class="localvar">A</a>, <a href="../h_src/57661364.htm" class="localvar">B</a>, <a href="../h_src/57661228.htm" class="localvar">C</a>, <a href="../h_src/57661092.htm" class="localvar">k</a>);
<a id=224></a>  return <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/57661772.htm" class="localvar">fs</a>);
}


<a id=228></a><a  class="comments">/*</a>
<a id=229></a><a  class="comments">** returns current 'pc' and marks it as a jump target (to avoid wrong</a>
<a id=230></a><a  class="comments">** optimizations with consecutive instructions not in the same basic block).</a>
<a id=231></a><a  class="comments">*/</a>
<a id=232></a>int <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57660956.htm" class="localvar">fs</a>) {
<a id=233></a>  <a href="../h_src/57660956.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675440.htm" class="variable">lasttarget</a> = <a href="../h_src/57660956.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>;
<a id=234></a>  return <a href="../h_src/57660956.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>;
}


<a id=238></a><a  class="comments">/*</a>
<a id=239></a><a  class="comments">** Returns the position of the instruction &quot;controlling&quot; a given</a>
<a id=240></a><a  class="comments">** jump (that is, its condition), or the jump itself if it is</a>
<a id=241></a><a  class="comments">** unconditional.</a>
<a id=242></a><a  class="comments">*/</a>
<a id=243></a>static <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57660820.htm" class="function">getjumpcontrol</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57660684.htm" class="localvar">fs</a>, int <a href="../h_src/57660548.htm" class="localvar">pc</a>) {
<a id=244></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57660412.htm" class="localvar">pi</a> = &amp;<a href="../h_src/57660684.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57660548.htm" class="localvar">pc</a>];
<a id=245></a>  if (<a href="../h_src/57660548.htm" class="localvar">pc</a> &gt;= 1 &amp;&amp; <a href="../h_src/57684144.htm" class="macro">testTMode</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*(<a href="../h_src/57660412.htm" class="localvar">pi</a>-1))))
<a id=246></a>    return <a href="../h_src/57660412.htm" class="localvar">pi</a>-1;
  else
<a id=248></a>    return <a href="../h_src/57660412.htm" class="localvar">pi</a>;
}


<a id=252></a><a  class="comments">/*</a>
<a id=253></a><a  class="comments">** Patch destination register for a TESTSET instruction.</a>
<a id=254></a><a  class="comments">** If instruction in position 'node' is not a TESTSET, return 0 (&quot;fails&quot;).</a>
<a id=255></a><a  class="comments">** Otherwise, if 'reg' is not 'NO_REG', set it as the destination</a>
<a id=256></a><a  class="comments">** register. Otherwise, change instruction to a simple 'TEST' (produces</a>
<a id=257></a><a  class="comments">** no register value)</a>
<a id=258></a><a  class="comments">*/</a>
<a id=259></a>static int <a href="../h_src/57660276.htm" class="function">patchtestreg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57660140.htm" class="localvar">fs</a>, int <a href="../h_src/57660004.htm" class="localvar">node</a>, int <a href="../h_src/57659868.htm" class="localvar">reg</a>) {
<a id=260></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57659732.htm" class="localvar">i</a> = <a href="../h_src/57660820.htm" class="function">getjumpcontrol</a>(<a href="../h_src/57660140.htm" class="localvar">fs</a>, <a href="../h_src/57660004.htm" class="localvar">node</a>);
<a id=261></a>  if (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*<a href="../h_src/57659732.htm" class="localvar">i</a>) != <a href="../h_src/57685980.htm" class="variable">OP_TESTSET</a>)
<a id=262></a>    return 0;  <a  class="comments">/* cannot patch other instructions */</a>
<a id=263></a>  if (<a href="../h_src/57659868.htm" class="localvar">reg</a> != <a href="../h_src/57690672.htm" class="macro">NO_REG</a> &amp;&amp; <a href="../h_src/57659868.htm" class="localvar">reg</a> != <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(*<a href="../h_src/57659732.htm" class="localvar">i</a>))
<a id=264></a>    <a href="../h_src/57693936.htm" class="macro">SETARG_A</a>(*<a href="../h_src/57659732.htm" class="localvar">i</a>, <a href="../h_src/57659868.htm" class="localvar">reg</a>);
  else {
<a id=266></a>     <a  class="comments">/* no register to put value or register already has the value;</a>
<a id=267></a><a  class="comments">        change instruction to simple test */</a>
<a id=268></a>    *<a href="../h_src/57659732.htm" class="localvar">i</a> = <a href="../h_src/57691488.htm" class="macro">CREATE_ABCk</a>(<a href="../h_src/57686048.htm" class="variable">OP_TEST</a>, <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(*<a href="../h_src/57659732.htm" class="localvar">i</a>), 0, 0, <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(*<a href="../h_src/57659732.htm" class="localvar">i</a>));
  }
  return 1;
}


<a id=274></a><a  class="comments">/*</a>
<a id=275></a><a  class="comments">** Traverse a list of tests ensuring no one produces a value</a>
<a id=276></a><a  class="comments">*/</a>
<a id=277></a>static void <a href="../h_src/57659596.htm" class="function">removevalues</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57659460.htm" class="localvar">fs</a>, int <a href="../h_src/57659324.htm" class="localvar">list</a>) {
<a id=278></a>  for (; <a href="../h_src/57659324.htm" class="localvar">list</a> != <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>; <a href="../h_src/57659324.htm" class="localvar">list</a> = <a href="../h_src/57664628.htm" class="function">getjump</a>(<a href="../h_src/57659460.htm" class="localvar">fs</a>, <a href="../h_src/57659324.htm" class="localvar">list</a>))
<a id=279></a>      <a href="../h_src/57660276.htm" class="function">patchtestreg</a>(<a href="../h_src/57659460.htm" class="localvar">fs</a>, <a href="../h_src/57659324.htm" class="localvar">list</a>, <a href="../h_src/57690672.htm" class="macro">NO_REG</a>);
}


<a id=283></a><a  class="comments">/*</a>
<a id=284></a><a  class="comments">** Traverse a list of tests, patching their destination address and</a>
<a id=285></a><a  class="comments">** registers: tests producing values jump to 'vtarget' (and put their</a>
<a id=286></a><a  class="comments">** values in 'reg'), other tests jump to 'dtarget'.</a>
<a id=287></a><a  class="comments">*/</a>
<a id=288></a>static void <a href="../h_src/57659188.htm" class="function">patchlistaux</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57659052.htm" class="localvar">fs</a>, int <a href="../h_src/57658916.htm" class="localvar">list</a>, int <a href="../h_src/57658780.htm" class="localvar">vtarget</a>, int <a href="../h_src/57658644.htm" class="localvar">reg</a>,
<a id=289></a>                          int <a href="../h_src/57658508.htm" class="localvar">dtarget</a>) {
<a id=290></a>  while (<a href="../h_src/57658916.htm" class="localvar">list</a> != <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>) {
<a id=291></a>    int <a href="../h_src/57658372.htm" class="localvar">next</a> = <a href="../h_src/57664628.htm" class="function">getjump</a>(<a href="../h_src/57659052.htm" class="localvar">fs</a>, <a href="../h_src/57658916.htm" class="localvar">list</a>);
<a id=292></a>    if (<a href="../h_src/57660276.htm" class="function">patchtestreg</a>(<a href="../h_src/57659052.htm" class="localvar">fs</a>, <a href="../h_src/57658916.htm" class="localvar">list</a>, <a href="../h_src/57658644.htm" class="localvar">reg</a>))
<a id=293></a>      <a href="../h_src/57664084.htm" class="function">fixjump</a>(<a href="../h_src/57659052.htm" class="localvar">fs</a>, <a href="../h_src/57658916.htm" class="localvar">list</a>, <a href="../h_src/57658780.htm" class="localvar">vtarget</a>);
    else
<a id=295></a>      <a href="../h_src/57664084.htm" class="function">fixjump</a>(<a href="../h_src/57659052.htm" class="localvar">fs</a>, <a href="../h_src/57658916.htm" class="localvar">list</a>, <a href="../h_src/57658508.htm" class="localvar">dtarget</a>);  <a  class="comments">/* jump to default target */</a>
<a id=296></a>    <a href="../h_src/57658916.htm" class="localvar">list</a> = <a href="../h_src/57658372.htm" class="localvar">next</a>;
  }
}


<a id=301></a><a  class="comments">/*</a>
<a id=302></a><a  class="comments">** Path all jumps in 'list' to jump to 'target'.</a>
<a id=303></a><a  class="comments">** (The assert means that we cannot fix a jump to a forward address</a>
<a id=304></a><a  class="comments">** because we only know addresses once code is generated.)</a>
<a id=305></a><a  class="comments">*/</a>
<a id=306></a>void <a href="../h_src/57669456.htm" class="function">luaK_patchlist</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57658236.htm" class="localvar">fs</a>, int <a href="../h_src/57658100.htm" class="localvar">list</a>, int <a href="../h_src/57657964.htm" class="localvar">target</a>) {
<a id=307></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(target &lt;= fs-&gt;pc);
<a id=308></a>  <a href="../h_src/57659188.htm" class="function">patchlistaux</a>(<a href="../h_src/57658236.htm" class="localvar">fs</a>, <a href="../h_src/57658100.htm" class="localvar">list</a>, <a href="../h_src/57657964.htm" class="localvar">target</a>, <a href="../h_src/57690672.htm" class="macro">NO_REG</a>, <a href="../h_src/57657964.htm" class="localvar">target</a>);
}


<a id=312></a>void <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57657828.htm" class="localvar">fs</a>, int <a href="../h_src/57657692.htm" class="localvar">list</a>) {
<a id=313></a>  int <a href="../h_src/57657556.htm" class="localvar">hr</a> = <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a>(<a href="../h_src/57657828.htm" class="localvar">fs</a>);  <a  class="comments">/* mark &quot;here&quot; as a jump target */</a>
<a id=314></a>  <a href="../h_src/57669456.htm" class="function">luaK_patchlist</a>(<a href="../h_src/57657828.htm" class="localvar">fs</a>, <a href="../h_src/57657692.htm" class="localvar">list</a>, <a href="../h_src/57657556.htm" class="localvar">hr</a>);
}


<a id=318></a><a  class="comments">/* limit for difference between lines in relative line info. */</a>
<a id=319></a>#define <a href="../h_src/57657420.htm" class="macro">LIMLINEDIFF</a>	0x80


<a id=322></a><a  class="comments">/*</a>
<a id=323></a><a  class="comments">** Save line info for a new instruction. If difference from last line</a>
<a id=324></a><a  class="comments">** does not fit in a byte, of after that many instructions, save a new</a>
<a id=325></a><a  class="comments">** absolute line info; (in that case, the special value 'ABSLINEINFO'</a>
<a id=326></a><a  class="comments">** in 'lineinfo' signals the existence of this absolute information.)</a>
<a id=327></a><a  class="comments">** Otherwise, store the difference from last line in 'lineinfo'.</a>
<a id=328></a><a  class="comments">*/</a>
<a id=329></a>static void <a href="../h_src/57817260.htm" class="function">savelineinfo</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57817124.htm" class="localvar">fs</a>, <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57816988.htm" class="localvar">f</a>, int <a href="../h_src/57816852.htm" class="localvar">line</a>) {
<a id=330></a>  int <a href="../h_src/57816716.htm" class="localvar">linedif</a> = <a href="../h_src/57816852.htm" class="localvar">line</a> - <a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675372.htm" class="variable">previousline</a>;
<a id=331></a>  int <a href="../h_src/57816580.htm" class="localvar">pc</a> = <a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a> - 1;  <a  class="comments">/* last instruction coded */</a>
<a id=332></a>  if (<a href="../h_aa/57816444.htm" class="libfunc">abs</a>(<a href="../h_src/57816716.htm" class="localvar">linedif</a>) &gt;= <a href="../h_src/57657420.htm" class="macro">LIMLINEDIFF</a> || <a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674692.htm" class="variable">iwthabs</a>++ &gt;= <a href="../h_src/57636096.htm" class="macro">MAXIWTHABS</a>) {
<a id=333></a>    <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/57816988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>, <a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675168.htm" class="variable">nabslineinfo</a>,
<a id=334></a>                    <a href="../h_src/57816988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515324.htm" class="variable">sizeabslineinfo</a>, <a href="../h_src/57516344.htm" class="type">AbsLineInfo</a>, <a href="../h_src/57549800.htm" class="macro">MAX_INT</a>, &quot;lines&quot;);
<a id=335></a>    <a href="../h_src/57816988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>[<a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675168.htm" class="variable">nabslineinfo</a>].<a href="../h_src/57516480.htm" class="variable">pc</a> = <a href="../h_src/57816580.htm" class="localvar">pc</a>;
<a id=336></a>    <a href="../h_src/57816988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>[<a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675168.htm" class="variable">nabslineinfo</a>++].<a href="../h_src/57516412.htm" class="variable">line</a> = <a href="../h_src/57816852.htm" class="localvar">line</a>;
<a id=337></a>    <a href="../h_src/57816716.htm" class="localvar">linedif</a> = <a href="../h_src/57636368.htm" class="macro">ABSLINEINFO</a>;  <a  class="comments">/* signal that there is absolute information */</a>
<a id=338></a>    <a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674692.htm" class="variable">iwthabs</a> = 1;  <a  class="comments">/* restart counter */</a>
  }
<a id=340></a>  <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/57816988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>, <a href="../h_src/57816580.htm" class="localvar">pc</a>, <a href="../h_src/57816988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515528.htm" class="variable">sizelineinfo</a>, <a href="../h_src/57550412.htm" class="type">ls_byte</a>,
<a id=341></a>                  <a href="../h_src/57549800.htm" class="macro">MAX_INT</a>, &quot;opcodes&quot;);
<a id=342></a>  <a href="../h_src/57816988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>[<a href="../h_src/57816580.htm" class="localvar">pc</a>] = <a href="../h_src/57816716.htm" class="localvar">linedif</a>;
<a id=343></a>  <a href="../h_src/57817124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675372.htm" class="variable">previousline</a> = <a href="../h_src/57816852.htm" class="localvar">line</a>;  <a  class="comments">/* last line saved */</a>
}


<a id=347></a><a  class="comments">/*</a>
<a id=348></a><a  class="comments">** Remove line information from the last instruction.</a>
<a id=349></a><a  class="comments">** If line information for that instruction is absolute, set 'iwthabs'</a>
<a id=350></a><a  class="comments">** above its max to force the new (replacing) instruction to have</a>
<a id=351></a><a  class="comments">** absolute line info, too.</a>
<a id=352></a><a  class="comments">*/</a>
<a id=353></a>static void <a href="../h_src/57816376.htm" class="function">removelastlineinfo</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57816240.htm" class="localvar">fs</a>) {
<a id=354></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57816104.htm" class="localvar">f</a> = <a href="../h_src/57816240.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=355></a>  int <a href="../h_src/57815968.htm" class="localvar">pc</a> = <a href="../h_src/57816240.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a> - 1;  <a  class="comments">/* last instruction coded */</a>
<a id=356></a>  if (<a href="../h_src/57816104.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>[<a href="../h_src/57815968.htm" class="localvar">pc</a>] != <a href="../h_src/57636368.htm" class="macro">ABSLINEINFO</a>) {  <a  class="comments">/* relative line info? */</a>
<a id=357></a>    <a href="../h_src/57816240.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675372.htm" class="variable">previousline</a> -= <a href="../h_src/57816104.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>[<a href="../h_src/57815968.htm" class="localvar">pc</a>];  <a  class="comments">/* correct last line saved */</a>
<a id=358></a>    <a href="../h_src/57816240.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674692.htm" class="variable">iwthabs</a>--;  <a  class="comments">/* undo previous increment */</a>
  }
<a id=360></a>  else {  <a  class="comments">/* absolute line information */</a>
<a id=361></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(f-&gt;abslineinfo[fs-&gt;nabslineinfo - 1].pc == pc);
<a id=362></a>    <a href="../h_src/57816240.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675168.htm" class="variable">nabslineinfo</a>--;  <a  class="comments">/* remove it */</a>
<a id=363></a>    <a href="../h_src/57816240.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674692.htm" class="variable">iwthabs</a> = <a href="../h_src/57636096.htm" class="macro">MAXIWTHABS</a> + 1;  <a  class="comments">/* force next line info to be absolute */</a>
  }
}


<a id=368></a><a  class="comments">/*</a>
<a id=369></a><a  class="comments">** Remove the last instruction created, correcting line information</a>
<a id=370></a><a  class="comments">** accordingly.</a>
<a id=371></a><a  class="comments">*/</a>
<a id=372></a>static void <a href="../h_src/57815832.htm" class="function">removelastinstruction</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57815696.htm" class="localvar">fs</a>) {
<a id=373></a>  <a href="../h_src/57816376.htm" class="function">removelastlineinfo</a>(<a href="../h_src/57815696.htm" class="localvar">fs</a>);
<a id=374></a>  <a href="../h_src/57815696.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>--;
}


<a id=378></a><a  class="comments">/*</a>
<a id=379></a><a  class="comments">** Emit instruction 'i', checking for array sizes and saving also its</a>
<a id=380></a><a  class="comments">** line information. Return 'i' position.</a>
<a id=381></a><a  class="comments">*/</a>
<a id=382></a>int <a href="../h_src/57671292.htm" class="function">luaK_code</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57815560.htm" class="localvar">fs</a>, <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57815424.htm" class="localvar">i</a>) {
<a id=383></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57815288.htm" class="localvar">f</a> = <a href="../h_src/57815560.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=384></a>  <a  class="comments">/* put new instruction in code array */</a>
<a id=385></a>  <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/57815560.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/57815288.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>, <a href="../h_src/57815560.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>, <a href="../h_src/57815288.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515596.htm" class="variable">sizecode</a>, <a href="../h_src/57545108.htm" class="type">Instruction</a>,
<a id=386></a>                  <a href="../h_src/57549800.htm" class="macro">MAX_INT</a>, &quot;opcodes&quot;);
<a id=387></a>  <a href="../h_src/57815288.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57815560.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>++] = <a href="../h_src/57815424.htm" class="localvar">i</a>;
<a id=388></a>  <a href="../h_src/57817260.htm" class="function">savelineinfo</a>(<a href="../h_src/57815560.htm" class="localvar">fs</a>, <a href="../h_src/57815288.htm" class="localvar">f</a>, <a href="../h_src/57815560.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57701484.htm" class="variable">lastline</a>);
<a id=389></a>  return <a href="../h_src/57815560.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a> - 1;  <a  class="comments">/* index of new instruction */</a>
}


<a id=393></a><a  class="comments">/*</a>
<a id=394></a><a  class="comments">** Format and emit an 'iABC' instruction. (Assertions check consistency</a>
<a id=395></a><a  class="comments">** of parameters versus opcode.)</a>
<a id=396></a><a  class="comments">*/</a>
<a id=397></a>int <a href="../h_src/57671088.htm" class="function">luaK_codeABCk</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57815152.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57815016.htm" class="localvar">o</a>, int <a href="../h_src/57814880.htm" class="localvar">a</a>, int <a href="../h_src/57814744.htm" class="localvar">b</a>, int <a href="../h_src/57814608.htm" class="localvar">c</a>, int <a href="../h_src/57814472.htm" class="localvar">k</a>) {
<a id=398></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57684416.htm" class="macro">getOpMode</a>(o) == iABC);
<a id=399></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(a &lt;= <a href="../h_src/57695840.htm" class="macro">MAXARG_A</a> &amp;&amp; b &lt;= <a href="../h_src/57695704.htm" class="macro">MAXARG_B</a> &amp;&amp;
<a id=400></a>             c &lt;= <a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> &amp;&amp; (k &amp; ~1) == 0);
<a id=401></a>  return <a href="../h_src/57671292.htm" class="function">luaK_code</a>(<a href="../h_src/57815152.htm" class="localvar">fs</a>, <a href="../h_src/57691488.htm" class="macro">CREATE_ABCk</a>(<a href="../h_src/57815016.htm" class="localvar">o</a>, <a href="../h_src/57814880.htm" class="localvar">a</a>, <a href="../h_src/57814744.htm" class="localvar">b</a>, <a href="../h_src/57814608.htm" class="localvar">c</a>, <a href="../h_src/57814472.htm" class="localvar">k</a>));
}


<a id=405></a><a  class="comments">/*</a>
<a id=406></a><a  class="comments">** Format and emit an 'iABx' instruction.</a>
<a id=407></a><a  class="comments">*/</a>
<a id=408></a>int <a href="../h_src/57671224.htm" class="function">luaK_codeABx</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57814336.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57814200.htm" class="localvar">o</a>, int <a href="../h_src/57814064.htm" class="localvar">a</a>, unsigned int <a href="../h_src/57813928.htm" class="localvar">bc</a>) {
<a id=409></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57684416.htm" class="macro">getOpMode</a>(o) == iABx);
<a id=410></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(a &lt;= <a href="../h_src/57695840.htm" class="macro">MAXARG_A</a> &amp;&amp; bc &lt;= <a href="../h_src/57696520.htm" class="macro">MAXARG_Bx</a>);
<a id=411></a>  return <a href="../h_src/57671292.htm" class="function">luaK_code</a>(<a href="../h_src/57814336.htm" class="localvar">fs</a>, <a href="../h_src/57691352.htm" class="macro">CREATE_ABx</a>(<a href="../h_src/57814200.htm" class="localvar">o</a>, <a href="../h_src/57814064.htm" class="localvar">a</a>, <a href="../h_src/57813928.htm" class="localvar">bc</a>));
}


<a id=415></a><a  class="comments">/*</a>
<a id=416></a><a  class="comments">** Format and emit an 'iAsBx' instruction.</a>
<a id=417></a><a  class="comments">*/</a>
<a id=418></a>int <a href="../h_src/57671156.htm" class="function">luaK_codeAsBx</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57813792.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57813656.htm" class="localvar">o</a>, int <a href="../h_src/57813520.htm" class="localvar">a</a>, int <a href="../h_src/57813384.htm" class="localvar">bc</a>) {
<a id=419></a>  unsigned int <a href="../h_src/57813248.htm" class="localvar">b</a> = <a href="../h_src/57813384.htm" class="localvar">bc</a> + <a href="../h_src/57696384.htm" class="macro">OFFSET_sBx</a>;
<a id=420></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57684416.htm" class="macro">getOpMode</a>(o) == iAsBx);
<a id=421></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(a &lt;= <a href="../h_src/57695840.htm" class="macro">MAXARG_A</a> &amp;&amp; b &lt;= <a href="../h_src/57696520.htm" class="macro">MAXARG_Bx</a>);
<a id=422></a>  return <a href="../h_src/57671292.htm" class="function">luaK_code</a>(<a href="../h_src/57813792.htm" class="localvar">fs</a>, <a href="../h_src/57691352.htm" class="macro">CREATE_ABx</a>(<a href="../h_src/57813656.htm" class="localvar">o</a>, <a href="../h_src/57813520.htm" class="localvar">a</a>, <a href="../h_src/57813248.htm" class="localvar">b</a>));
}


<a id=426></a><a  class="comments">/*</a>
<a id=427></a><a  class="comments">** Format and emit an 'isJ' instruction.</a>
<a id=428></a><a  class="comments">*/</a>
<a id=429></a>static int <a href="../h_src/57668436.htm" class="function">codesJ</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57813112.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57812976.htm" class="localvar">o</a>, int <a href="../h_src/57812840.htm" class="localvar">sj</a>, int <a href="../h_src/57812704.htm" class="localvar">k</a>) {
<a id=430></a>  unsigned int <a href="../h_src/57812568.htm" class="localvar">j</a> = <a href="../h_src/57812840.htm" class="localvar">sj</a> + <a href="../h_src/57695976.htm" class="macro">OFFSET_sJ</a>;
<a id=431></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57684416.htm" class="macro">getOpMode</a>(o) == isJ);
<a id=432></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(j &lt;= <a href="../h_src/57696112.htm" class="macro">MAXARG_sJ</a> &amp;&amp; (k &amp; ~1) == 0);
<a id=433></a>  return <a href="../h_src/57671292.htm" class="function">luaK_code</a>(<a href="../h_src/57813112.htm" class="localvar">fs</a>, <a href="../h_src/57691080.htm" class="macro">CREATE_sJ</a>(<a href="../h_src/57812976.htm" class="localvar">o</a>, <a href="../h_src/57812568.htm" class="localvar">j</a>, <a href="../h_src/57812704.htm" class="localvar">k</a>));
}


<a id=437></a><a  class="comments">/*</a>
<a id=438></a><a  class="comments">** Emit an &quot;extra argument&quot; instruction (format 'iAx')</a>
<a id=439></a><a  class="comments">*/</a>
<a id=440></a>static int <a href="../h_src/57812432.htm" class="function">codeextraarg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57812296.htm" class="localvar">fs</a>, int <a href="../h_src/57812160.htm" class="localvar">a</a>) {
<a id=441></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(a &lt;= <a href="../h_src/57696248.htm" class="macro">MAXARG_Ax</a>);
<a id=442></a>  return <a href="../h_src/57671292.htm" class="function">luaK_code</a>(<a href="../h_src/57812296.htm" class="localvar">fs</a>, <a href="../h_src/57691216.htm" class="macro">CREATE_Ax</a>(<a href="../h_src/57684960.htm" class="variable">OP_EXTRAARG</a>, <a href="../h_src/57812160.htm" class="localvar">a</a>));
}


<a id=446></a><a  class="comments">/*</a>
<a id=447></a><a  class="comments">** Emit a &quot;load constant&quot; instruction, using either 'OP_LOADK'</a>
<a id=448></a><a  class="comments">** (if constant index 'k' fits in 18 bits) or an 'OP_LOADKX'</a>
<a id=449></a><a  class="comments">** instruction with &quot;extra argument&quot;.</a>
<a id=450></a><a  class="comments">*/</a>
<a id=451></a>static int <a href="../h_src/57812024.htm" class="function">luaK_codek</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57811888.htm" class="localvar">fs</a>, int <a href="../h_src/57811752.htm" class="localvar">reg</a>, int <a href="../h_src/57811616.htm" class="localvar">k</a>) {
<a id=452></a>  if (<a href="../h_src/57811616.htm" class="localvar">k</a> &lt;= <a href="../h_src/57696520.htm" class="macro">MAXARG_Bx</a>)
<a id=453></a>    return <a href="../h_src/57671224.htm" class="function">luaK_codeABx</a>(<a href="../h_src/57811888.htm" class="localvar">fs</a>, <a href="../h_src/57690332.htm" class="variable">OP_LOADK</a>, <a href="../h_src/57811752.htm" class="localvar">reg</a>, <a href="../h_src/57811616.htm" class="localvar">k</a>);
  else {
<a id=455></a>    int <a href="../h_src/57811480.htm" class="localvar">p</a> = <a href="../h_src/57671224.htm" class="function">luaK_codeABx</a>(<a href="../h_src/57811888.htm" class="localvar">fs</a>, <a href="../h_src/57690264.htm" class="variable">OP_LOADKX</a>, <a href="../h_src/57811752.htm" class="localvar">reg</a>, 0);
<a id=456></a>    <a href="../h_src/57812432.htm" class="function">codeextraarg</a>(<a href="../h_src/57811888.htm" class="localvar">fs</a>, <a href="../h_src/57811616.htm" class="localvar">k</a>);
<a id=457></a>    return <a href="../h_src/57811480.htm" class="localvar">p</a>;
  }
}


<a id=462></a><a  class="comments">/*</a>
<a id=463></a><a  class="comments">** Check register-stack level, keeping track of its maximum size</a>
<a id=464></a><a  class="comments">** in field 'maxstacksize'</a>
<a id=465></a><a  class="comments">*/</a>
<a id=466></a>void <a href="../h_src/57670612.htm" class="function">luaK_checkstack</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57811344.htm" class="localvar">fs</a>, int <a href="../h_src/57811208.htm" class="localvar">n</a>) {
<a id=467></a>  int <a href="../h_src/57811072.htm" class="localvar">newstack</a> = <a href="../h_src/57811344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> + <a href="../h_src/57811208.htm" class="localvar">n</a>;
<a id=468></a>  if (<a href="../h_src/57811072.htm" class="localvar">newstack</a> &gt; <a href="../h_src/57811344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515800.htm" class="variable">maxstacksize</a>) {
<a id=469></a>    if (<a href="../h_src/57811072.htm" class="localvar">newstack</a> &gt;= <a href="../h_src/57668708.htm" class="macro">MAXREGS</a>)
<a id=470></a>      <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/57811344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>,
        &quot;function or expression needs too many registers&quot;);
<a id=472></a>    <a href="../h_src/57811344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515800.htm" class="variable">maxstacksize</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/57811072.htm" class="localvar">newstack</a>);
  }
}


<a id=477></a><a  class="comments">/*</a>
<a id=478></a><a  class="comments">** Reserve 'n' registers in register stack</a>
<a id=479></a><a  class="comments">*/</a>
<a id=480></a>void <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57810936.htm" class="localvar">fs</a>, int <a href="../h_src/57810800.htm" class="localvar">n</a>) {
<a id=481></a>  <a href="../h_src/57670612.htm" class="function">luaK_checkstack</a>(<a href="../h_src/57810936.htm" class="localvar">fs</a>, <a href="../h_src/57810800.htm" class="localvar">n</a>);
<a id=482></a>  <a href="../h_src/57810936.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> += <a href="../h_src/57810800.htm" class="localvar">n</a>;
}


<a id=486></a><a  class="comments">/*</a>
<a id=487></a><a  class="comments">** Free register 'reg', if it is neither a constant index nor</a>
<a id=488></a><a  class="comments">** a local variable.</a>
<a id=489></a><a  class="comments">)</a>
<a id=490></a><a  class="comments">*/</a>
<a id=491></a>static void <a href="../h_src/57810664.htm" class="function">freereg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57810528.htm" class="localvar">fs</a>, int <a href="../h_src/57810392.htm" class="localvar">reg</a>) {
<a id=492></a>  if (<a href="../h_src/57810392.htm" class="localvar">reg</a> &gt;= <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/57810528.htm" class="localvar">fs</a>)) {
<a id=493></a>    <a href="../h_src/57810528.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>--;
<a id=494></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(reg == fs-&gt;freereg);
  }
}


<a id=499></a><a  class="comments">/*</a>
<a id=500></a><a  class="comments">** Free two registers in proper order</a>
<a id=501></a><a  class="comments">*/</a>
<a id=502></a>static void <a href="../h_src/57810256.htm" class="function">freeregs</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57810120.htm" class="localvar">fs</a>, int <a href="../h_src/57809984.htm" class="localvar">r1</a>, int <a href="../h_src/57809848.htm" class="localvar">r2</a>) {
<a id=503></a>  if (<a href="../h_src/57809984.htm" class="localvar">r1</a> &gt; <a href="../h_src/57809848.htm" class="localvar">r2</a>) {
<a id=504></a>    <a href="../h_src/57810664.htm" class="function">freereg</a>(<a href="../h_src/57810120.htm" class="localvar">fs</a>, <a href="../h_src/57809984.htm" class="localvar">r1</a>);
<a id=505></a>    <a href="../h_src/57810664.htm" class="function">freereg</a>(<a href="../h_src/57810120.htm" class="localvar">fs</a>, <a href="../h_src/57809848.htm" class="localvar">r2</a>);
  }
  else {
<a id=508></a>    <a href="../h_src/57810664.htm" class="function">freereg</a>(<a href="../h_src/57810120.htm" class="localvar">fs</a>, <a href="../h_src/57809848.htm" class="localvar">r2</a>);
<a id=509></a>    <a href="../h_src/57810664.htm" class="function">freereg</a>(<a href="../h_src/57810120.htm" class="localvar">fs</a>, <a href="../h_src/57809984.htm" class="localvar">r1</a>);
  }
}


<a id=514></a><a  class="comments">/*</a>
<a id=515></a><a  class="comments">** Free register used by expression 'e' (if any)</a>
<a id=516></a><a  class="comments">*/</a>
<a id=517></a>static void <a href="../h_src/57809712.htm" class="function">freeexp</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57809576.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57809440.htm" class="localvar">e</a>) {
<a id=518></a>  if (<a href="../h_src/57809440.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>)
<a id=519></a>    <a href="../h_src/57810664.htm" class="function">freereg</a>(<a href="../h_src/57809576.htm" class="localvar">fs</a>, <a href="../h_src/57809440.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>);
}


<a id=523></a><a  class="comments">/*</a>
<a id=524></a><a  class="comments">** Free registers used by expressions 'e1' and 'e2' (if any) in proper</a>
<a id=525></a><a  class="comments">** order.</a>
<a id=526></a><a  class="comments">*/</a>
<a id=527></a>static void <a href="../h_src/57809304.htm" class="function">freeexps</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57809168.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57809032.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57808896.htm" class="localvar">e2</a>) {
<a id=528></a>  int <a href="../h_src/57808760.htm" class="localvar">r1</a> = (<a href="../h_src/57809032.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>) ? <a href="../h_src/57809032.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> : -1;
<a id=529></a>  int <a href="../h_src/57808624.htm" class="localvar">r2</a> = (<a href="../h_src/57808896.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>) ? <a href="../h_src/57808896.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> : -1;
<a id=530></a>  <a href="../h_src/57810256.htm" class="function">freeregs</a>(<a href="../h_src/57809168.htm" class="localvar">fs</a>, <a href="../h_src/57808760.htm" class="localvar">r1</a>, <a href="../h_src/57808624.htm" class="localvar">r2</a>);
}


<a id=534></a><a  class="comments">/*</a>
<a id=535></a><a  class="comments">** Add constant 'v' to prototype's list of constants (field 'k').</a>
<a id=536></a><a  class="comments">** Use scanner's table to cache position of constants in constant list</a>
<a id=537></a><a  class="comments">** and try to reuse constants. Because some values should not be used</a>
<a id=538></a><a  class="comments">** as keys (nil cannot be a key, integer keys can collapse with float</a>
<a id=539></a><a  class="comments">** keys), the caller must provide a useful 'key' for indexing the cache.</a>
<a id=540></a><a  class="comments">** Note that all functions share the same table, so entering or exiting</a>
<a id=541></a><a  class="comments">** a function can make some indices wrong.</a>
<a id=542></a><a  class="comments">*/</a>
<a id=543></a>static int <a href="../h_src/57808488.htm" class="function">addk</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57808352.htm" class="localvar">fs</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57808216.htm" class="localvar">key</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57808080.htm" class="localvar">v</a>) {
<a id=544></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57807944.htm" class="localvar">val</a>;
<a id=545></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57807808.htm" class="localvar">L</a> = <a href="../h_src/57808352.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>;
<a id=546></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57807672.htm" class="localvar">f</a> = <a href="../h_src/57808352.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=547></a>  const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57807536.htm" class="localvar">idx</a> = <a href="../h_src/57616784.htm" class="function">luaH_get</a>(<a href="../h_src/57808352.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700668.htm" class="variable">h</a>, <a href="../h_src/57808216.htm" class="localvar">key</a>);  <a  class="comments">/* query scanner table */</a>
<a id=548></a>  int <a href="../h_src/57807400.htm" class="localvar">k</a>, <a href="../h_src/57807264.htm" class="localvar">oldsize</a>;
<a id=549></a>  if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57807536.htm" class="localvar">idx</a>)) {  <a  class="comments">/* is there an index there? */</a>
<a id=550></a>    <a href="../h_src/57807400.htm" class="localvar">k</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57807536.htm" class="localvar">idx</a>));
<a id=551></a>    <a  class="comments">/* correct value? (warning: must distinguish floats from integers!) */</a>
<a id=552></a>    if (<a href="../h_src/57807400.htm" class="localvar">k</a> &lt; <a href="../h_src/57808352.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675304.htm" class="variable">nk</a> &amp;&amp; <a href="../h_src/57534636.htm" class="macro">ttypetag</a>(&amp;<a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57807400.htm" class="localvar">k</a>]) == <a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/57808080.htm" class="localvar">v</a>) &amp;&amp;
<a id=553></a>                      <a href="../h_src/57612432.htm" class="macro">luaV_rawequalobj</a>(&amp;<a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57807400.htm" class="localvar">k</a>], <a href="../h_src/57808080.htm" class="localvar">v</a>))
<a id=554></a>      return <a href="../h_src/57807400.htm" class="localvar">k</a>;  <a  class="comments">/* reuse index */</a>
  }
<a id=556></a>  <a  class="comments">/* constant not found; create a new entry */</a>
<a id=557></a>  <a href="../h_src/57807264.htm" class="localvar">oldsize</a> = <a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515664.htm" class="variable">sizek</a>;
<a id=558></a>  <a href="../h_src/57807400.htm" class="localvar">k</a> = <a href="../h_src/57808352.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675304.htm" class="variable">nk</a>;
<a id=559></a>  <a  class="comments">/* numerical value does not need GC barrier;</a>
<a id=560></a><a  class="comments">     table has no metatable, so it does not need to invalidate cache */</a>
<a id=561></a>  <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/57807944.htm" class="localvar">val</a>, <a href="../h_src/57807400.htm" class="localvar">k</a>);
<a id=562></a>  <a href="../h_src/57616580.htm" class="function">luaH_finishset</a>(<a href="../h_src/57807808.htm" class="localvar">L</a>, <a href="../h_src/57808352.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700668.htm" class="variable">h</a>, <a href="../h_src/57808216.htm" class="localvar">key</a>, <a href="../h_src/57807536.htm" class="localvar">idx</a>, &amp;<a href="../h_src/57807944.htm" class="localvar">val</a>);
<a id=563></a>  <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/57807808.htm" class="localvar">L</a>, <a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>, <a href="../h_src/57807400.htm" class="localvar">k</a>, <a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515664.htm" class="variable">sizek</a>, <a href="../h_src/57535384.htm" class="type">TValue</a>, <a href="../h_src/57696248.htm" class="macro">MAXARG_Ax</a>, &quot;constants&quot;);
<a id=564></a>  while (<a href="../h_src/57807264.htm" class="localvar">oldsize</a> &lt; <a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515664.htm" class="variable">sizek</a>) <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(&amp;<a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57807264.htm" class="localvar">oldsize</a>++]);
<a id=565></a>  <a href="../h_src/57533684.htm" class="macro">setobj</a>(<a href="../h_src/57807808.htm" class="localvar">L</a>, &amp;<a href="../h_src/57807672.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57807400.htm" class="localvar">k</a>], <a href="../h_src/57808080.htm" class="localvar">v</a>);
<a id=566></a>  <a href="../h_src/57808352.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675304.htm" class="variable">nk</a>++;
<a id=567></a>  <a href="../h_src/57621340.htm" class="macro">luaC_barrier</a>(<a href="../h_src/57807808.htm" class="localvar">L</a>, <a href="../h_src/57807672.htm" class="localvar">f</a>, <a href="../h_src/57808080.htm" class="localvar">v</a>);
<a id=568></a>  return <a href="../h_src/57807400.htm" class="localvar">k</a>;
}


<a id=572></a><a  class="comments">/*</a>
<a id=573></a><a  class="comments">** Add a string to list of constants and return its index.</a>
<a id=574></a><a  class="comments">*/</a>
<a id=575></a>static int <a href="../h_src/57806720.htm" class="function">stringK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57806584.htm" class="localvar">fs</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57806448.htm" class="localvar">s</a>) {
<a id=576></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57806312.htm" class="localvar">o</a>;
<a id=577></a>  <a href="../h_src/57524232.htm" class="macro">setsvalue</a>(<a href="../h_src/57806584.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &amp;<a href="../h_src/57806312.htm" class="localvar">o</a>, <a href="../h_src/57806448.htm" class="localvar">s</a>);
<a id=578></a>  return <a href="../h_src/57808488.htm" class="function">addk</a>(<a href="../h_src/57806584.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57806312.htm" class="localvar">o</a>, &amp;<a href="../h_src/57806312.htm" class="localvar">o</a>);  <a  class="comments">/* use string itself as key */</a>
}


<a id=582></a><a  class="comments">/*</a>
<a id=583></a><a  class="comments">** Add an integer to list of constants and return its index.</a>
<a id=584></a><a  class="comments">*/</a>
<a id=585></a>static int <a href="../h_src/57805904.htm" class="function">luaK_intK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57805768.htm" class="localvar">fs</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57805632.htm" class="localvar">n</a>) {
<a id=586></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57805496.htm" class="localvar">o</a>;
<a id=587></a>  <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/57805496.htm" class="localvar">o</a>, <a href="../h_src/57805632.htm" class="localvar">n</a>);
<a id=588></a>  return <a href="../h_src/57808488.htm" class="function">addk</a>(<a href="../h_src/57805768.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57805496.htm" class="localvar">o</a>, &amp;<a href="../h_src/57805496.htm" class="localvar">o</a>);  <a  class="comments">/* use integer itself as key */</a>
}

<a id=591></a><a  class="comments">/*</a>
<a id=592></a><a  class="comments">** Add a float to list of constants and return its index. Floats</a>
<a id=593></a><a  class="comments">** with integral values need a different key, to avoid collision</a>
<a id=594></a><a  class="comments">** with actual integers. To that, we add to the number its smaller</a>
<a id=595></a><a  class="comments">** power-of-two fraction that is still significant in its scale.</a>
<a id=596></a><a  class="comments">** For doubles, that would be 1/2^52.</a>
<a id=597></a><a  class="comments">** (This method is not bulletproof: there may be another float</a>
<a id=598></a><a  class="comments">** with that value, and for floats larger than 2^53 the result is</a>
<a id=599></a><a  class="comments">** still an integer. At worst, this only wastes an entry with</a>
<a id=600></a><a  class="comments">** a duplicate.)</a>
<a id=601></a><a  class="comments">*/</a>
<a id=602></a>static int <a href="../h_src/57805224.htm" class="function">luaK_numberK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57805088.htm" class="localvar">fs</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57804952.htm" class="localvar">r</a>) {
<a id=603></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57804816.htm" class="localvar">o</a>;
<a id=604></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57804680.htm" class="localvar">ik</a>;
<a id=605></a>  <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(&amp;<a href="../h_src/57804816.htm" class="localvar">o</a>, <a href="../h_src/57804952.htm" class="localvar">r</a>);
<a id=606></a>  if (!<a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/57804952.htm" class="localvar">r</a>, &amp;<a href="../h_src/57804680.htm" class="localvar">ik</a>, <a href="../h_src/57613520.htm" class="variable">F2Ieq</a>))  <a  class="comments">/* not an integral value? */</a>
<a id=607></a>    return <a href="../h_src/57808488.htm" class="function">addk</a>(<a href="../h_src/57805088.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57804816.htm" class="localvar">o</a>, &amp;<a href="../h_src/57804816.htm" class="localvar">o</a>);  <a  class="comments">/* use number itself as key */</a>
<a id=608></a>  else {  <a  class="comments">/* must build an alternative key */</a>
<a id=609></a>    const int <a href="../h_src/57804408.htm" class="localvar">nbm</a> = <a href="../h_src/57451868.htm" class="macro">l_floatatt</a>(MANT_DIG);
<a id=610></a>    const <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57804204.htm" class="localvar">q</a> = <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(<a href="../h_aa/57804272.htm" class="libfunc">ldexp</a>)(<a href="../h_src/57449148.htm" class="macro">l_mathop</a>(1.0), -<a href="../h_src/57804408.htm" class="localvar">nbm</a> + 1);
<a id=611></a>    const <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57804068.htm" class="localvar">k</a> = (<a href="../h_src/57804680.htm" class="localvar">ik</a> == 0) ? <a href="../h_src/57804204.htm" class="localvar">q</a> : <a href="../h_src/57804952.htm" class="localvar">r</a> + <a href="../h_src/57804952.htm" class="localvar">r</a>*<a href="../h_src/57804204.htm" class="localvar">q</a>;  <a  class="comments">/* new key */</a>
<a id=612></a>    <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57803932.htm" class="localvar">kv</a>;
<a id=613></a>    <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(&amp;<a href="../h_src/57803932.htm" class="localvar">kv</a>, <a href="../h_src/57804068.htm" class="localvar">k</a>);
<a id=614></a>    <a  class="comments">/* result is not an integral value, unless value is too large */</a>
<a id=615></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!luaV_flttointeger(k, &amp;ik, F2Ieq) ||
<a id=616></a>                <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(fabs)(r) &gt;= <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(1e6));
<a id=617></a>    return <a href="../h_src/57808488.htm" class="function">addk</a>(<a href="../h_src/57805088.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57803932.htm" class="localvar">kv</a>, &amp;<a href="../h_src/57804816.htm" class="localvar">o</a>);
  }
}


<a id=622></a><a  class="comments">/*</a>
<a id=623></a><a  class="comments">** Add a false to list of constants and return its index.</a>
<a id=624></a><a  class="comments">*/</a>
<a id=625></a>static int <a href="../h_src/57803660.htm" class="function">boolF</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57803524.htm" class="localvar">fs</a>) {
<a id=626></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57803388.htm" class="localvar">o</a>;
<a id=627></a>  <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(&amp;<a href="../h_src/57803388.htm" class="localvar">o</a>);
<a id=628></a>  return <a href="../h_src/57808488.htm" class="function">addk</a>(<a href="../h_src/57803524.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57803388.htm" class="localvar">o</a>, &amp;<a href="../h_src/57803388.htm" class="localvar">o</a>);  <a  class="comments">/* use boolean itself as key */</a>
}


<a id=632></a><a  class="comments">/*</a>
<a id=633></a><a  class="comments">** Add a true to list of constants and return its index.</a>
<a id=634></a><a  class="comments">*/</a>
<a id=635></a>static int <a href="../h_src/57803252.htm" class="function">boolT</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57803116.htm" class="localvar">fs</a>) {
<a id=636></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57802980.htm" class="localvar">o</a>;
<a id=637></a>  <a href="../h_src/57529128.htm" class="macro">setbtvalue</a>(&amp;<a href="../h_src/57802980.htm" class="localvar">o</a>);
<a id=638></a>  return <a href="../h_src/57808488.htm" class="function">addk</a>(<a href="../h_src/57803116.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57802980.htm" class="localvar">o</a>, &amp;<a href="../h_src/57802980.htm" class="localvar">o</a>);  <a  class="comments">/* use boolean itself as key */</a>
}


<a id=642></a><a  class="comments">/*</a>
<a id=643></a><a  class="comments">** Add nil to list of constants and return its index.</a>
<a id=644></a><a  class="comments">*/</a>
<a id=645></a>static int <a href="../h_src/57802844.htm" class="function">nilK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57802708.htm" class="localvar">fs</a>) {
<a id=646></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57802572.htm" class="localvar">k</a>, <a href="../h_src/57802436.htm" class="localvar">v</a>;
<a id=647></a>  <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(&amp;<a href="../h_src/57802436.htm" class="localvar">v</a>);
<a id=648></a>  <a  class="comments">/* cannot use nil as key; instead use table itself to represent nil */</a>
<a id=649></a>  <a href="../h_src/57507028.htm" class="macro">sethvalue</a>(<a href="../h_src/57802708.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &amp;<a href="../h_src/57802572.htm" class="localvar">k</a>, <a href="../h_src/57802708.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700668.htm" class="variable">h</a>);
<a id=650></a>  return <a href="../h_src/57808488.htm" class="function">addk</a>(<a href="../h_src/57802708.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57802572.htm" class="localvar">k</a>, &amp;<a href="../h_src/57802436.htm" class="localvar">v</a>);
}


<a id=654></a><a  class="comments">/*</a>
<a id=655></a><a  class="comments">** Check whether 'i' can be stored in an 'sC' operand. Equivalent to</a>
<a id=656></a><a  class="comments">** (0 &lt;= int2sC(i) &amp;&amp; int2sC(i) &lt;= MAXARG_C) but without risk of</a>
<a id=657></a><a  class="comments">** overflows in the hidden addition inside 'int2sC'.</a>
<a id=658></a><a  class="comments">*/</a>
<a id=659></a>static int <a href="../h_src/57802028.htm" class="function">fitsC</a> (<a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57801892.htm" class="localvar">i</a>) {
<a id=660></a>  return (<a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/57801892.htm" class="localvar">i</a>) + <a href="../h_src/57695432.htm" class="macro">OFFSET_sC</a> &lt;= <a href="../h_src/57547080.htm" class="macro">cast_uint</a>(<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a>));
}


<a id=664></a><a  class="comments">/*</a>
<a id=665></a><a  class="comments">** Check whether 'i' can be stored in an 'sBx' operand.</a>
<a id=666></a><a  class="comments">*/</a>
<a id=667></a>static int <a href="../h_src/57801756.htm" class="function">fitsBx</a> (<a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57801620.htm" class="localvar">i</a>) {
<a id=668></a>  return (-<a href="../h_src/57696384.htm" class="macro">OFFSET_sBx</a> &lt;= <a href="../h_src/57801620.htm" class="localvar">i</a> &amp;&amp; <a href="../h_src/57801620.htm" class="localvar">i</a> &lt;= <a href="../h_src/57696520.htm" class="macro">MAXARG_Bx</a> - <a href="../h_src/57696384.htm" class="macro">OFFSET_sBx</a>);
}


<a id=672></a>void <a href="../h_src/57670544.htm" class="function">luaK_int</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57801484.htm" class="localvar">fs</a>, int <a href="../h_src/57801348.htm" class="localvar">reg</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57801212.htm" class="localvar">i</a>) {
<a id=673></a>  if (<a href="../h_src/57801756.htm" class="function">fitsBx</a>(<a href="../h_src/57801212.htm" class="localvar">i</a>))
<a id=674></a>    <a href="../h_src/57671156.htm" class="function">luaK_codeAsBx</a>(<a href="../h_src/57801484.htm" class="localvar">fs</a>, <a href="../h_src/57690468.htm" class="variable">OP_LOADI</a>, <a href="../h_src/57801348.htm" class="localvar">reg</a>, <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57801212.htm" class="localvar">i</a>));
  else
<a id=676></a>    <a href="../h_src/57812024.htm" class="function">luaK_codek</a>(<a href="../h_src/57801484.htm" class="localvar">fs</a>, <a href="../h_src/57801348.htm" class="localvar">reg</a>, <a href="../h_src/57805904.htm" class="function">luaK_intK</a>(<a href="../h_src/57801484.htm" class="localvar">fs</a>, <a href="../h_src/57801212.htm" class="localvar">i</a>));
}


<a id=680></a>static void <a href="../h_src/57801076.htm" class="function">luaK_float</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57800940.htm" class="localvar">fs</a>, int <a href="../h_src/57800804.htm" class="localvar">reg</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57800668.htm" class="localvar">f</a>) {
<a id=681></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57800532.htm" class="localvar">fi</a>;
<a id=682></a>  if (<a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/57800668.htm" class="localvar">f</a>, &amp;<a href="../h_src/57800532.htm" class="localvar">fi</a>, <a href="../h_src/57613520.htm" class="variable">F2Ieq</a>) &amp;&amp; <a href="../h_src/57801756.htm" class="function">fitsBx</a>(<a href="../h_src/57800532.htm" class="localvar">fi</a>))
<a id=683></a>    <a href="../h_src/57671156.htm" class="function">luaK_codeAsBx</a>(<a href="../h_src/57800940.htm" class="localvar">fs</a>, <a href="../h_src/57690400.htm" class="variable">OP_LOADF</a>, <a href="../h_src/57800804.htm" class="localvar">reg</a>, <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57800532.htm" class="localvar">fi</a>));
  else
<a id=685></a>    <a href="../h_src/57812024.htm" class="function">luaK_codek</a>(<a href="../h_src/57800940.htm" class="localvar">fs</a>, <a href="../h_src/57800804.htm" class="localvar">reg</a>, <a href="../h_src/57805224.htm" class="function">luaK_numberK</a>(<a href="../h_src/57800940.htm" class="localvar">fs</a>, <a href="../h_src/57800668.htm" class="localvar">f</a>));
}


<a id=689></a><a  class="comments">/*</a>
<a id=690></a><a  class="comments">** Convert a constant in 'v' into an expression description 'e'</a>
<a id=691></a><a  class="comments">*/</a>
<a id=692></a>static void <a href="../h_src/57800396.htm" class="function">const2exp</a> (<a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57800260.htm" class="localvar">v</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57800124.htm" class="localvar">e</a>) {
<a id=693></a>  switch (<a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/57800260.htm" class="localvar">v</a>)) {
<a id=694></a>    case <a href="../h_src/57527088.htm" class="macro">LUA_VNUMINT</a>:
<a id=695></a>      <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682308.htm" class="variable">VKINT</a>; <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57800260.htm" class="localvar">v</a>);
      break;
<a id=697></a>    case <a href="../h_src/57526952.htm" class="macro">LUA_VNUMFLT</a>:
<a id=698></a>      <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682376.htm" class="variable">VKFLT</a>; <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680540.htm" class="variable">nval</a> = <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/57800260.htm" class="localvar">v</a>);
      break;
<a id=700></a>    case <a href="../h_src/57530080.htm" class="macro">LUA_VFALSE</a>:
<a id=701></a>      <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682512.htm" class="variable">VFALSE</a>;
      break;
<a id=703></a>    case <a href="../h_src/57529944.htm" class="macro">LUA_VTRUE</a>:
<a id=704></a>      <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682580.htm" class="variable">VTRUE</a>;
      break;
<a id=706></a>    case <a href="../h_src/57531576.htm" class="macro">LUA_VNIL</a>:
<a id=707></a>      <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682648.htm" class="variable">VNIL</a>;
      break;
<a id=709></a>    case <a href="../h_src/57525184.htm" class="macro">LUA_VSHRSTR</a>:  case <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>:
<a id=710></a>      <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682240.htm" class="variable">VKSTR</a>; <a href="../h_src/57800124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680472.htm" class="variable">strval</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/57800260.htm" class="localvar">v</a>);
      break;
<a id=712></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);
  }
}


<a id=717></a><a  class="comments">/*</a>
<a id=718></a><a  class="comments">** Fix an expression to return the number of results 'nresults'.</a>
<a id=719></a><a  class="comments">** 'e' must be a multi-ret expression (function call or vararg).</a>
<a id=720></a><a  class="comments">*/</a>
<a id=721></a>void <a href="../h_src/57669728.htm" class="function">luaK_setreturns</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57799988.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57799852.htm" class="localvar">e</a>, int <a href="../h_src/57799716.htm" class="localvar">nresults</a>) {
<a id=722></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57799580.htm" class="localvar">pc</a> = &amp;<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(<a href="../h_src/57799988.htm" class="localvar">fs</a>, <a href="../h_src/57799852.htm" class="localvar">e</a>);
<a id=723></a>  if (<a href="../h_src/57799852.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681492.htm" class="variable">VCALL</a>)  <a  class="comments">/* expression is an open function call? */</a>
<a id=724></a>    <a href="../h_src/57693120.htm" class="macro">SETARG_C</a>(*<a href="../h_src/57799580.htm" class="localvar">pc</a>, <a href="../h_src/57799716.htm" class="localvar">nresults</a> + 1);
  else {
<a id=726></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e-&gt;k == VVARARG);
<a id=727></a>    <a href="../h_src/57693120.htm" class="macro">SETARG_C</a>(*<a href="../h_src/57799580.htm" class="localvar">pc</a>, <a href="../h_src/57799716.htm" class="localvar">nresults</a> + 1);
<a id=728></a>    <a href="../h_src/57693936.htm" class="macro">SETARG_A</a>(*<a href="../h_src/57799580.htm" class="localvar">pc</a>, <a href="../h_src/57799988.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>);
<a id=729></a>    <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/57799988.htm" class="localvar">fs</a>, 1);
  }
}


<a id=734></a><a  class="comments">/*</a>
<a id=735></a><a  class="comments">** Convert a VKSTR to a VK</a>
<a id=736></a><a  class="comments">*/</a>
<a id=737></a>static void <a href="../h_src/57799444.htm" class="function">str2K</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57799308.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57799172.htm" class="localvar">e</a>) {
<a id=738></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e-&gt;k == VKSTR);
<a id=739></a>  <a href="../h_src/57799172.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57806720.htm" class="function">stringK</a>(<a href="../h_src/57799308.htm" class="localvar">fs</a>, <a href="../h_src/57799172.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680472.htm" class="variable">strval</a>);
<a id=740></a>  <a href="../h_src/57799172.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682444.htm" class="variable">VK</a>;
}


<a id=744></a><a  class="comments">/*</a>
<a id=745></a><a  class="comments">** Fix an expression to return one result.</a>
<a id=746></a><a  class="comments">** If expression is not a multi-ret expression (function call or</a>
<a id=747></a><a  class="comments">** vararg), it already returns one result, so nothing needs to be done.</a>
<a id=748></a><a  class="comments">** Function calls become VNONRELOC expressions (as its result comes</a>
<a id=749></a><a  class="comments">** fixed in the base register of the call), while vararg expressions</a>
<a id=750></a><a  class="comments">** become VRELOC (as OP_VARARG puts its results where it wants).</a>
<a id=751></a><a  class="comments">** (Calls are created returning one result, so that does not need</a>
<a id=752></a><a  class="comments">** to be fixed.)</a>
<a id=753></a><a  class="comments">*/</a>
<a id=754></a>void <a href="../h_src/57669660.htm" class="function">luaK_setoneret</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57799036.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57798900.htm" class="localvar">e</a>) {
<a id=755></a>  if (<a href="../h_src/57798900.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681492.htm" class="variable">VCALL</a>) {  <a  class="comments">/* expression is an open function call? */</a>
<a id=756></a>    <a  class="comments">/* already returns 1 value */</a>
<a id=757></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(fs, e)) == 2);
<a id=758></a>    <a href="../h_src/57798900.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>;  <a  class="comments">/* result has fixed position */</a>
<a id=759></a>    <a href="../h_src/57798900.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(<a href="../h_src/57799036.htm" class="localvar">fs</a>, <a href="../h_src/57798900.htm" class="localvar">e</a>));
  }
<a id=761></a>  else if (<a href="../h_src/57798900.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681424.htm" class="variable">VVARARG</a>) {
<a id=762></a>    <a href="../h_src/57693120.htm" class="macro">SETARG_C</a>(<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(<a href="../h_src/57799036.htm" class="localvar">fs</a>, <a href="../h_src/57798900.htm" class="localvar">e</a>), 2);
<a id=763></a>    <a href="../h_src/57798900.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;  <a  class="comments">/* can relocate its simple result */</a>
  }
}


<a id=768></a><a  class="comments">/*</a>
<a id=769></a><a  class="comments">** Ensure that expression 'e' is not a variable (nor a &lt;const&gt;).</a>
<a id=770></a><a  class="comments">** (Expression still may have jump lists.)</a>
<a id=771></a><a  class="comments">*/</a>
<a id=772></a>void <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57798628.htm" class="localvar">e</a>) {
<a id=773></a>  switch (<a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=774></a>    case <a href="../h_src/57681968.htm" class="variable">VCONST</a>: {
<a id=775></a>      <a href="../h_src/57800396.htm" class="function">const2exp</a>(<a href="../h_src/57667348.htm" class="function">const2val</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>), <a href="../h_src/57798628.htm" class="localvar">e</a>);
      break;
    }
<a id=778></a>    case <a href="../h_src/57682104.htm" class="variable">VLOCAL</a>: {  <a  class="comments">/* already in a register */</a>
<a id=779></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a>;
<a id=780></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>;  <a  class="comments">/* becomes a non-relocatable value */</a>
      break;
    }
<a id=783></a>    case <a href="../h_src/57682036.htm" class="variable">VUPVAL</a>: {  <a  class="comments">/* move value to some (pending) register */</a>
<a id=784></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57689924.htm" class="variable">OP_GETUPVAL</a>, 0, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, 0);
<a id=785></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;
      break;
    }
<a id=788></a>    case <a href="../h_src/57681832.htm" class="variable">VINDEXUP</a>: {
<a id=789></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57689788.htm" class="variable">OP_GETTABUP</a>, 0, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>);
<a id=790></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;
      break;
    }
<a id=793></a>    case <a href="../h_src/57681764.htm" class="variable">VINDEXI</a>: {
<a id=794></a>      <a href="../h_src/57810664.htm" class="function">freereg</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>);
<a id=795></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57689652.htm" class="variable">OP_GETI</a>, 0, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>);
<a id=796></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;
      break;
    }
<a id=799></a>    case <a href="../h_src/57681696.htm" class="variable">VINDEXSTR</a>: {
<a id=800></a>      <a href="../h_src/57810664.htm" class="function">freereg</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>);
<a id=801></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57689584.htm" class="variable">OP_GETFIELD</a>, 0, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>);
<a id=802></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;
      break;
    }
<a id=805></a>    case <a href="../h_src/57681900.htm" class="variable">VINDEXED</a>: {
<a id=806></a>      <a href="../h_src/57810256.htm" class="function">freeregs</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>);
<a id=807></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57689720.htm" class="variable">OP_GETTABLE</a>, 0, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>);
<a id=808></a>      <a href="../h_src/57798628.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;
      break;
    }
<a id=811></a>    case <a href="../h_src/57681424.htm" class="variable">VVARARG</a>: case <a href="../h_src/57681492.htm" class="variable">VCALL</a>: {
<a id=812></a>      <a href="../h_src/57669660.htm" class="function">luaK_setoneret</a>(<a href="../h_src/57798764.htm" class="localvar">fs</a>, <a href="../h_src/57798628.htm" class="localvar">e</a>);
      break;
    }
<a id=815></a>    default: break;  <a  class="comments">/* there is one value available (somewhere) */</a>
  }
}


<a id=820></a><a  class="comments">/*</a>
<a id=821></a><a  class="comments">** Ensure expression value is in register 'reg', making 'e' a</a>
<a id=822></a><a  class="comments">** non-relocatable expression.</a>
<a id=823></a><a  class="comments">** (Expression still may have jump lists.)</a>
<a id=824></a><a  class="comments">*/</a>
<a id=825></a>static void <a href="../h_src/57798492.htm" class="function">discharge2reg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57798220.htm" class="localvar">e</a>, int <a href="../h_src/57798084.htm" class="localvar">reg</a>) {
<a id=826></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57798220.htm" class="localvar">e</a>);
<a id=827></a>  switch (<a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=828></a>    case <a href="../h_src/57682648.htm" class="variable">VNIL</a>: {
<a id=829></a>      <a href="../h_src/57670748.htm" class="function">luaK_nil</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>, 1);
      break;
    }
<a id=832></a>    case <a href="../h_src/57682512.htm" class="variable">VFALSE</a>: {
<a id=833></a>      <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57690196.htm" class="variable">OP_LOADFALSE</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>, 0, 0);
      break;
    }
<a id=836></a>    case <a href="../h_src/57682580.htm" class="variable">VTRUE</a>: {
<a id=837></a>      <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57690060.htm" class="variable">OP_LOADTRUE</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>, 0, 0);
      break;
    }
<a id=840></a>    case <a href="../h_src/57682240.htm" class="variable">VKSTR</a>: {
<a id=841></a>      <a href="../h_src/57799444.htm" class="function">str2K</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57798220.htm" class="localvar">e</a>);
<a id=842></a>    }  <a  class="comments">/* FALLTHROUGH */</a>
<a id=843></a>    case <a href="../h_src/57682444.htm" class="variable">VK</a>: {
<a id=844></a>      <a href="../h_src/57812024.htm" class="function">luaK_codek</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>, <a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>);
      break;
    }
<a id=847></a>    case <a href="../h_src/57682376.htm" class="variable">VKFLT</a>: {
<a id=848></a>      <a href="../h_src/57801076.htm" class="function">luaK_float</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>, <a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680540.htm" class="variable">nval</a>);
      break;
    }
<a id=851></a>    case <a href="../h_src/57682308.htm" class="variable">VKINT</a>: {
<a id=852></a>      <a href="../h_src/57670544.htm" class="function">luaK_int</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>, <a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>);
      break;
    }
<a id=855></a>    case <a href="../h_src/57681560.htm" class="variable">VRELOC</a>: {
<a id=856></a>      <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57797948.htm" class="localvar">pc</a> = &amp;<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57798220.htm" class="localvar">e</a>);
<a id=857></a>      <a href="../h_src/57693936.htm" class="macro">SETARG_A</a>(*<a href="../h_src/57797948.htm" class="localvar">pc</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>);  <a  class="comments">/* instruction will put result in 'reg' */</a>
      break;
    }
<a id=860></a>    case <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>: {
<a id=861></a>      if (<a href="../h_src/57798084.htm" class="localvar">reg</a> != <a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>)
<a id=862></a>        <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57798356.htm" class="localvar">fs</a>, <a href="../h_src/57690536.htm" class="variable">OP_MOVE</a>, <a href="../h_src/57798084.htm" class="localvar">reg</a>, <a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, 0);
      break;
    }
    default: {
<a id=866></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e-&gt;k == VJMP);
<a id=867></a>      return;  <a  class="comments">/* nothing to do... */</a>
    }
  }
<a id=870></a>  <a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57798084.htm" class="localvar">reg</a>;
<a id=871></a>  <a href="../h_src/57798220.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>;
}


<a id=875></a><a  class="comments">/*</a>
<a id=876></a><a  class="comments">** Ensure expression value is in a register, making 'e' a</a>
<a id=877></a><a  class="comments">** non-relocatable expression.</a>
<a id=878></a><a  class="comments">** (Expression still may have jump lists.)</a>
<a id=879></a><a  class="comments">*/</a>
<a id=880></a>static void <a href="../h_src/57797812.htm" class="function">discharge2anyreg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57797676.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57797540.htm" class="localvar">e</a>) {
<a id=881></a>  if (<a href="../h_src/57797540.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> != <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>) {  <a  class="comments">/* no fixed register yet? */</a>
<a id=882></a>    <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/57797676.htm" class="localvar">fs</a>, 1);  <a  class="comments">/* get a register */</a>
<a id=883></a>    <a href="../h_src/57798492.htm" class="function">discharge2reg</a>(<a href="../h_src/57797676.htm" class="localvar">fs</a>, <a href="../h_src/57797540.htm" class="localvar">e</a>, <a href="../h_src/57797676.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>-1);  <a  class="comments">/* put value there */</a>
  }
}


<a id=888></a>static int <a href="../h_src/57797404.htm" class="function">code_loadbool</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57797268.htm" class="localvar">fs</a>, int <a href="../h_src/57797132.htm" class="localvar">A</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57796996.htm" class="localvar">op</a>) {
<a id=889></a>  <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a>(<a href="../h_src/57797268.htm" class="localvar">fs</a>);  <a  class="comments">/* those instructions may be jump targets */</a>
<a id=890></a>  return <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57797268.htm" class="localvar">fs</a>, <a href="../h_src/57796996.htm" class="localvar">op</a>, <a href="../h_src/57797132.htm" class="localvar">A</a>, 0, 0);
}


<a id=894></a><a  class="comments">/*</a>
<a id=895></a><a  class="comments">** check whether list has any jump that do not produce a value</a>
<a id=896></a><a  class="comments">** or produce an inverted value</a>
<a id=897></a><a  class="comments">*/</a>
<a id=898></a>static int <a href="../h_src/57796860.htm" class="function">need_value</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57796724.htm" class="localvar">fs</a>, int <a href="../h_src/57796588.htm" class="localvar">list</a>) {
<a id=899></a>  for (; <a href="../h_src/57796588.htm" class="localvar">list</a> != <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>; <a href="../h_src/57796588.htm" class="localvar">list</a> = <a href="../h_src/57664628.htm" class="function">getjump</a>(<a href="../h_src/57796724.htm" class="localvar">fs</a>, <a href="../h_src/57796588.htm" class="localvar">list</a>)) {
<a id=900></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57796452.htm" class="localvar">i</a> = *<a href="../h_src/57660820.htm" class="function">getjumpcontrol</a>(<a href="../h_src/57796724.htm" class="localvar">fs</a>, <a href="../h_src/57796588.htm" class="localvar">list</a>);
<a id=901></a>    if (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/57796452.htm" class="localvar">i</a>) != <a href="../h_src/57685980.htm" class="variable">OP_TESTSET</a>) return 1;
  }
<a id=903></a>  return 0;  <a  class="comments">/* not found */</a>
}


<a id=907></a><a  class="comments">/*</a>
<a id=908></a><a  class="comments">** Ensures final expression result (which includes results from its</a>
<a id=909></a><a  class="comments">** jump lists) is in register 'reg'.</a>
<a id=910></a><a  class="comments">** If expression has jumps, need to patch these jumps either to</a>
<a id=911></a><a  class="comments">** its final position or to &quot;load&quot; instructions (for those tests</a>
<a id=912></a><a  class="comments">** that do not produce values).</a>
<a id=913></a><a  class="comments">*/</a>
<a id=914></a>static void <a href="../h_src/57796316.htm" class="function">exp2reg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57796044.htm" class="localvar">e</a>, int <a href="../h_src/57795908.htm" class="localvar">reg</a>) {
<a id=915></a>  <a href="../h_src/57798492.htm" class="function">discharge2reg</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57796044.htm" class="localvar">e</a>, <a href="../h_src/57795908.htm" class="localvar">reg</a>);
<a id=916></a>  if (<a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681628.htm" class="variable">VJMP</a>)  <a  class="comments">/* expression itself is a test? */</a>
<a id=917></a>    <a href="../h_src/57669320.htm" class="function">luaK_concat</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>, <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>);  <a  class="comments">/* put this jump in 't' list */</a>
<a id=918></a>  if (<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57796044.htm" class="localvar">e</a>)) {
<a id=919></a>    int <a href="../h_src/57795772.htm" class="localvar">final</a>;  <a  class="comments">/* position after whole expression */</a>
<a id=920></a>    int <a href="../h_src/57795636.htm" class="localvar">p_f</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;  <a  class="comments">/* position of an eventual LOAD false */</a>
<a id=921></a>    int <a href="../h_src/57795500.htm" class="localvar">p_t</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;  <a  class="comments">/* position of an eventual LOAD true */</a>
<a id=922></a>    if (<a href="../h_src/57796860.htm" class="function">need_value</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>) || <a href="../h_src/57796860.htm" class="function">need_value</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>)) {
<a id=923></a>      int <a href="../h_src/57795364.htm" class="localvar">fj</a> = (<a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681628.htm" class="variable">VJMP</a>) ? <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a> : <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>);
<a id=924></a>      <a href="../h_src/57795636.htm" class="localvar">p_f</a> = <a href="../h_src/57797404.htm" class="function">code_loadbool</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57795908.htm" class="localvar">reg</a>, <a href="../h_src/57690128.htm" class="variable">OP_LFALSESKIP</a>);  <a  class="comments">/* skip next inst. */</a>
<a id=925></a>      <a href="../h_src/57795500.htm" class="localvar">p_t</a> = <a href="../h_src/57797404.htm" class="function">code_loadbool</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57795908.htm" class="localvar">reg</a>, <a href="../h_src/57690060.htm" class="variable">OP_LOADTRUE</a>);
<a id=926></a>      <a  class="comments">/* jump around these booleans if 'e' is not a test */</a>
<a id=927></a>      <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57795364.htm" class="localvar">fj</a>);
    }
<a id=929></a>    <a href="../h_src/57795772.htm" class="localvar">final</a> = <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>);
<a id=930></a>    <a href="../h_src/57659188.htm" class="function">patchlistaux</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>, <a href="../h_src/57795772.htm" class="localvar">final</a>, <a href="../h_src/57795908.htm" class="localvar">reg</a>, <a href="../h_src/57795636.htm" class="localvar">p_f</a>);
<a id=931></a>    <a href="../h_src/57659188.htm" class="function">patchlistaux</a>(<a href="../h_src/57796180.htm" class="localvar">fs</a>, <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>, <a href="../h_src/57795772.htm" class="localvar">final</a>, <a href="../h_src/57795908.htm" class="localvar">reg</a>, <a href="../h_src/57795500.htm" class="localvar">p_t</a>);
  }
<a id=933></a>  <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a> = <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;
<a id=934></a>  <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57795908.htm" class="localvar">reg</a>;
<a id=935></a>  <a href="../h_src/57796044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>;
}


<a id=939></a><a  class="comments">/*</a>
<a id=940></a><a  class="comments">** Ensures final expression result is in next available register.</a>
<a id=941></a><a  class="comments">*/</a>
<a id=942></a>void <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57795228.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57795092.htm" class="localvar">e</a>) {
<a id=943></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57795228.htm" class="localvar">fs</a>, <a href="../h_src/57795092.htm" class="localvar">e</a>);
<a id=944></a>  <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57795228.htm" class="localvar">fs</a>, <a href="../h_src/57795092.htm" class="localvar">e</a>);
<a id=945></a>  <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/57795228.htm" class="localvar">fs</a>, 1);
<a id=946></a>  <a href="../h_src/57796316.htm" class="function">exp2reg</a>(<a href="../h_src/57795228.htm" class="localvar">fs</a>, <a href="../h_src/57795092.htm" class="localvar">e</a>, <a href="../h_src/57795228.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> - 1);
}


<a id=950></a><a  class="comments">/*</a>
<a id=951></a><a  class="comments">** Ensures final expression result is in some (any) register</a>
<a id=952></a><a  class="comments">** and return that register.</a>
<a id=953></a><a  class="comments">*/</a>
<a id=954></a>int <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57794956.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57794820.htm" class="localvar">e</a>) {
<a id=955></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57794956.htm" class="localvar">fs</a>, <a href="../h_src/57794820.htm" class="localvar">e</a>);
<a id=956></a>  if (<a href="../h_src/57794820.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>) {  <a  class="comments">/* expression already has a register? */</a>
<a id=957></a>    if (!<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57794820.htm" class="localvar">e</a>))  <a  class="comments">/* no jumps? */</a>
<a id=958></a>      return <a href="../h_src/57794820.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* result is already in a register */</a>
<a id=959></a>    if (<a href="../h_src/57794820.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> &gt;= <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/57794956.htm" class="localvar">fs</a>)) {  <a  class="comments">/* reg. is not a local? */</a>
<a id=960></a>      <a href="../h_src/57796316.htm" class="function">exp2reg</a>(<a href="../h_src/57794956.htm" class="localvar">fs</a>, <a href="../h_src/57794820.htm" class="localvar">e</a>, <a href="../h_src/57794820.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>);  <a  class="comments">/* put final result in it */</a>
<a id=961></a>      return <a href="../h_src/57794820.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;
    }
<a id=963></a>    <a  class="comments">/* else expression has jumps and cannot change its register</a>
<a id=964></a><a  class="comments">       to hold the jump values, because it is a local variable.</a>
<a id=965></a><a  class="comments">       Go through to the default case. */</a>
  }
<a id=967></a>  <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/57794956.htm" class="localvar">fs</a>, <a href="../h_src/57794820.htm" class="localvar">e</a>);  <a  class="comments">/* default: use next available register */</a>
<a id=968></a>  return <a href="../h_src/57794820.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;
}


<a id=972></a><a  class="comments">/*</a>
<a id=973></a><a  class="comments">** Ensures final expression result is either in a register</a>
<a id=974></a><a  class="comments">** or in an upvalue.</a>
<a id=975></a><a  class="comments">*/</a>
<a id=976></a>void <a href="../h_src/57670340.htm" class="function">luaK_exp2anyregup</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57794684.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57794548.htm" class="localvar">e</a>) {
<a id=977></a>  if (<a href="../h_src/57794548.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> != <a href="../h_src/57682036.htm" class="variable">VUPVAL</a> || <a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57794548.htm" class="localvar">e</a>))
<a id=978></a>    <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57794684.htm" class="localvar">fs</a>, <a href="../h_src/57794548.htm" class="localvar">e</a>);
}


<a id=982></a><a  class="comments">/*</a>
<a id=983></a><a  class="comments">** Ensures final expression result is either in a register</a>
<a id=984></a><a  class="comments">** or it is a constant.</a>
<a id=985></a><a  class="comments">*/</a>
<a id=986></a>void <a href="../h_src/57670204.htm" class="function">luaK_exp2val</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57794412.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57794276.htm" class="localvar">e</a>) {
<a id=987></a>  if (<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57794276.htm" class="localvar">e</a>))
<a id=988></a>    <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57794412.htm" class="localvar">fs</a>, <a href="../h_src/57794276.htm" class="localvar">e</a>);
  else
<a id=990></a>    <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57794412.htm" class="localvar">fs</a>, <a href="../h_src/57794276.htm" class="localvar">e</a>);
}


<a id=994></a><a  class="comments">/*</a>
<a id=995></a><a  class="comments">** Try to make 'e' a K expression with an index in the range of R/K</a>
<a id=996></a><a  class="comments">** indices. Return true iff succeeded.</a>
<a id=997></a><a  class="comments">*/</a>
<a id=998></a>static int <a href="../h_src/57794140.htm" class="function">luaK_exp2K</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57794004.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57793868.htm" class="localvar">e</a>) {
<a id=999></a>  if (!<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57793868.htm" class="localvar">e</a>)) {
<a id=1000></a>    int <a href="../h_src/57793732.htm" class="localvar">info</a>;
<a id=1001></a>    switch (<a href="../h_src/57793868.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {  <a  class="comments">/* move constants to 'k' */</a>
<a id=1002></a>      case <a href="../h_src/57682580.htm" class="variable">VTRUE</a>: <a href="../h_src/57793732.htm" class="localvar">info</a> = <a href="../h_src/57803252.htm" class="function">boolT</a>(<a href="../h_src/57794004.htm" class="localvar">fs</a>); break;
<a id=1003></a>      case <a href="../h_src/57682512.htm" class="variable">VFALSE</a>: <a href="../h_src/57793732.htm" class="localvar">info</a> = <a href="../h_src/57803660.htm" class="function">boolF</a>(<a href="../h_src/57794004.htm" class="localvar">fs</a>); break;
<a id=1004></a>      case <a href="../h_src/57682648.htm" class="variable">VNIL</a>: <a href="../h_src/57793732.htm" class="localvar">info</a> = <a href="../h_src/57802844.htm" class="function">nilK</a>(<a href="../h_src/57794004.htm" class="localvar">fs</a>); break;
<a id=1005></a>      case <a href="../h_src/57682308.htm" class="variable">VKINT</a>: <a href="../h_src/57793732.htm" class="localvar">info</a> = <a href="../h_src/57805904.htm" class="function">luaK_intK</a>(<a href="../h_src/57794004.htm" class="localvar">fs</a>, <a href="../h_src/57793868.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>); break;
<a id=1006></a>      case <a href="../h_src/57682376.htm" class="variable">VKFLT</a>: <a href="../h_src/57793732.htm" class="localvar">info</a> = <a href="../h_src/57805224.htm" class="function">luaK_numberK</a>(<a href="../h_src/57794004.htm" class="localvar">fs</a>, <a href="../h_src/57793868.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680540.htm" class="variable">nval</a>); break;
<a id=1007></a>      case <a href="../h_src/57682240.htm" class="variable">VKSTR</a>: <a href="../h_src/57793732.htm" class="localvar">info</a> = <a href="../h_src/57806720.htm" class="function">stringK</a>(<a href="../h_src/57794004.htm" class="localvar">fs</a>, <a href="../h_src/57793868.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680472.htm" class="variable">strval</a>); break;
<a id=1008></a>      case <a href="../h_src/57682444.htm" class="variable">VK</a>: <a href="../h_src/57793732.htm" class="localvar">info</a> = <a href="../h_src/57793868.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>; break;
<a id=1009></a>      default: return 0;  <a  class="comments">/* not a constant */</a>
    }
<a id=1011></a>    if (<a href="../h_src/57793732.htm" class="localvar">info</a> &lt;= <a href="../h_src/57690808.htm" class="macro">MAXINDEXRK</a>) {  <a  class="comments">/* does constant fit in 'argC'? */</a>
<a id=1012></a>      <a href="../h_src/57793868.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682444.htm" class="variable">VK</a>;  <a  class="comments">/* make expression a 'K' expression */</a>
<a id=1013></a>      <a href="../h_src/57793868.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57793732.htm" class="localvar">info</a>;
      return 1;
    }
  }
<a id=1017></a>  <a  class="comments">/* else, expression doesn't fit; leave it unchanged */</a>
  return 0;
}


<a id=1022></a><a  class="comments">/*</a>
<a id=1023></a><a  class="comments">** Ensures final expression result is in a valid R/K index</a>
<a id=1024></a><a  class="comments">** (that is, it is either in a register or in 'k' with an index</a>
<a id=1025></a><a  class="comments">** in the range of R/K indices).</a>
<a id=1026></a><a  class="comments">** Returns 1 iff expression is K.</a>
<a id=1027></a><a  class="comments">*/</a>
<a id=1028></a>int <a href="../h_src/57670136.htm" class="function">luaK_exp2RK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57793596.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57793460.htm" class="localvar">e</a>) {
<a id=1029></a>  if (<a href="../h_src/57794140.htm" class="function">luaK_exp2K</a>(<a href="../h_src/57793596.htm" class="localvar">fs</a>, <a href="../h_src/57793460.htm" class="localvar">e</a>))
    return 1;
<a id=1031></a>  else {  <a  class="comments">/* not a constant in the right range: put it in a register */</a>
<a id=1032></a>    <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57793596.htm" class="localvar">fs</a>, <a href="../h_src/57793460.htm" class="localvar">e</a>);
    return 0;
  }
}


<a id=1038></a>static void <a href="../h_src/57793324.htm" class="function">codeABRK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57793188.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57793052.htm" class="localvar">o</a>, int <a href="../h_src/57792916.htm" class="localvar">a</a>, int <a href="../h_src/57792780.htm" class="localvar">b</a>,
<a id=1039></a>                      <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57792644.htm" class="localvar">ec</a>) {
<a id=1040></a>  int <a href="../h_src/57792508.htm" class="localvar">k</a> = <a href="../h_src/57670136.htm" class="function">luaK_exp2RK</a>(<a href="../h_src/57793188.htm" class="localvar">fs</a>, <a href="../h_src/57792644.htm" class="localvar">ec</a>);
<a id=1041></a>  <a href="../h_src/57671088.htm" class="function">luaK_codeABCk</a>(<a href="../h_src/57793188.htm" class="localvar">fs</a>, <a href="../h_src/57793052.htm" class="localvar">o</a>, <a href="../h_src/57792916.htm" class="localvar">a</a>, <a href="../h_src/57792780.htm" class="localvar">b</a>, <a href="../h_src/57792644.htm" class="localvar">ec</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, <a href="../h_src/57792508.htm" class="localvar">k</a>);
}


<a id=1045></a><a  class="comments">/*</a>
<a id=1046></a><a  class="comments">** Generate code to store result of expression 'ex' into variable 'var'.</a>
<a id=1047></a><a  class="comments">*/</a>
<a id=1048></a>void <a href="../h_src/57669796.htm" class="function">luaK_storevar</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57792236.htm" class="localvar">var</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57792100.htm" class="localvar">ex</a>) {
<a id=1049></a>  switch (<a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=1050></a>    case <a href="../h_src/57682104.htm" class="variable">VLOCAL</a>: {
<a id=1051></a>      <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>);
<a id=1052></a>      <a href="../h_src/57796316.htm" class="function">exp2reg</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a>);  <a  class="comments">/* compute 'ex' into proper place */</a>
      return;
    }
<a id=1055></a>    case <a href="../h_src/57682036.htm" class="variable">VUPVAL</a>: {
<a id=1056></a>      int <a href="../h_src/57791964.htm" class="localvar">e</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>);
<a id=1057></a>      <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57689856.htm" class="variable">OP_SETUPVAL</a>, <a href="../h_src/57791964.htm" class="localvar">e</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, 0);
      break;
    }
<a id=1060></a>    case <a href="../h_src/57681832.htm" class="variable">VINDEXUP</a>: {
<a id=1061></a>      <a href="../h_src/57793324.htm" class="function">codeABRK</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57689516.htm" class="variable">OP_SETTABUP</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>);
      break;
    }
<a id=1064></a>    case <a href="../h_src/57681764.htm" class="variable">VINDEXI</a>: {
<a id=1065></a>      <a href="../h_src/57793324.htm" class="function">codeABRK</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57689380.htm" class="variable">OP_SETI</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>);
      break;
    }
<a id=1068></a>    case <a href="../h_src/57681696.htm" class="variable">VINDEXSTR</a>: {
<a id=1069></a>      <a href="../h_src/57793324.htm" class="function">codeABRK</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57689312.htm" class="variable">OP_SETFIELD</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>);
      break;
    }
<a id=1072></a>    case <a href="../h_src/57681900.htm" class="variable">VINDEXED</a>: {
<a id=1073></a>      <a href="../h_src/57793324.htm" class="function">codeABRK</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57689448.htm" class="variable">OP_SETTABLE</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a>, <a href="../h_src/57792236.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>);
      break;
    }
<a id=1076></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);  <a  class="comments">/* invalid var kind to store */</a>
  }
<a id=1078></a>  <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57792372.htm" class="localvar">fs</a>, <a href="../h_src/57792100.htm" class="localvar">ex</a>);
}


<a id=1082></a><a  class="comments">/*</a>
<a id=1083></a><a  class="comments">** Emit SELF instruction (convert expression 'e' into 'e:key(e,').</a>
<a id=1084></a><a  class="comments">*/</a>
<a id=1085></a>void <a href="../h_src/57670068.htm" class="function">luaK_self</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57791828.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57791692.htm" class="localvar">e</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57791556.htm" class="localvar">key</a>) {
<a id=1086></a>  int <a href="../h_src/57791420.htm" class="localvar">ereg</a>;
<a id=1087></a>  <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57791828.htm" class="localvar">fs</a>, <a href="../h_src/57791692.htm" class="localvar">e</a>);
<a id=1088></a>  <a href="../h_src/57791420.htm" class="localvar">ereg</a> = <a href="../h_src/57791692.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* register where 'e' was placed */</a>
<a id=1089></a>  <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57791828.htm" class="localvar">fs</a>, <a href="../h_src/57791692.htm" class="localvar">e</a>);
<a id=1090></a>  <a href="../h_src/57791692.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57791828.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>;  <a  class="comments">/* base register for op_self */</a>
<a id=1091></a>  <a href="../h_src/57791692.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>;  <a  class="comments">/* self expression has a fixed register */</a>
<a id=1092></a>  <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/57791828.htm" class="localvar">fs</a>, 2);  <a  class="comments">/* function and 'self' produced by op_self */</a>
<a id=1093></a>  <a href="../h_src/57793324.htm" class="function">codeABRK</a>(<a href="../h_src/57791828.htm" class="localvar">fs</a>, <a href="../h_src/57689176.htm" class="variable">OP_SELF</a>, <a href="../h_src/57791692.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, <a href="../h_src/57791420.htm" class="localvar">ereg</a>, <a href="../h_src/57791556.htm" class="localvar">key</a>);
<a id=1094></a>  <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57791828.htm" class="localvar">fs</a>, <a href="../h_src/57791556.htm" class="localvar">key</a>);
}


<a id=1098></a><a  class="comments">/*</a>
<a id=1099></a><a  class="comments">** Negate condition 'e' (where 'e' is a comparison).</a>
<a id=1100></a><a  class="comments">*/</a>
<a id=1101></a>static void <a href="../h_src/57791284.htm" class="function">negatecondition</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57791148.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57791012.htm" class="localvar">e</a>) {
<a id=1102></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57790876.htm" class="localvar">pc</a> = <a href="../h_src/57660820.htm" class="function">getjumpcontrol</a>(<a href="../h_src/57791148.htm" class="localvar">fs</a>, <a href="../h_src/57791012.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>);
<a id=1103></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57684144.htm" class="macro">testTMode</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*pc)) &amp;&amp; <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*pc) != OP_TESTSET &amp;&amp;
<a id=1104></a>                                           <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*pc) != OP_TEST);
<a id=1105></a>  <a href="../h_src/57692712.htm" class="macro">SETARG_k</a>(*<a href="../h_src/57790876.htm" class="localvar">pc</a>, (<a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(*<a href="../h_src/57790876.htm" class="localvar">pc</a>) ^ 1));
}


<a id=1109></a><a  class="comments">/*</a>
<a id=1110></a><a  class="comments">** Emit instruction to jump if 'e' is 'cond' (that is, if 'cond'</a>
<a id=1111></a><a  class="comments">** is true, code will jump if 'e' is true.) Return jump position.</a>
<a id=1112></a><a  class="comments">** Optimize when 'e' is 'not' something, inverting the condition</a>
<a id=1113></a><a  class="comments">** and removing the 'not'.</a>
<a id=1114></a><a  class="comments">*/</a>
<a id=1115></a>static int <a href="../h_src/57790740.htm" class="function">jumponcond</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57790604.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57790468.htm" class="localvar">e</a>, int <a href="../h_src/57790332.htm" class="localvar">cond</a>) {
<a id=1116></a>  if (<a href="../h_src/57790468.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681560.htm" class="variable">VRELOC</a>) {
<a id=1117></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57790196.htm" class="localvar">ie</a> = <a href="../h_src/57671700.htm" class="macro">getinstruction</a>(<a href="../h_src/57790604.htm" class="localvar">fs</a>, <a href="../h_src/57790468.htm" class="localvar">e</a>);
<a id=1118></a>    if (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/57790196.htm" class="localvar">ie</a>) == <a href="../h_src/57687068.htm" class="variable">OP_NOT</a>) {
<a id=1119></a>      <a href="../h_src/57815832.htm" class="function">removelastinstruction</a>(<a href="../h_src/57790604.htm" class="localvar">fs</a>);  <a  class="comments">/* remove previous OP_NOT */</a>
<a id=1120></a>      return <a href="../h_src/57661908.htm" class="function">condjump</a>(<a href="../h_src/57790604.htm" class="localvar">fs</a>, <a href="../h_src/57686048.htm" class="variable">OP_TEST</a>, <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/57790196.htm" class="localvar">ie</a>), 0, 0, !<a href="../h_src/57790332.htm" class="localvar">cond</a>);
    }
<a id=1122></a>    <a  class="comments">/* else go through */</a>
  }
<a id=1124></a>  <a href="../h_src/57797812.htm" class="function">discharge2anyreg</a>(<a href="../h_src/57790604.htm" class="localvar">fs</a>, <a href="../h_src/57790468.htm" class="localvar">e</a>);
<a id=1125></a>  <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57790604.htm" class="localvar">fs</a>, <a href="../h_src/57790468.htm" class="localvar">e</a>);
<a id=1126></a>  return <a href="../h_src/57661908.htm" class="function">condjump</a>(<a href="../h_src/57790604.htm" class="localvar">fs</a>, <a href="../h_src/57685980.htm" class="variable">OP_TESTSET</a>, <a href="../h_src/57690672.htm" class="macro">NO_REG</a>, <a href="../h_src/57790468.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, 0, <a href="../h_src/57790332.htm" class="localvar">cond</a>);
}


<a id=1130></a><a  class="comments">/*</a>
<a id=1131></a><a  class="comments">** Emit code to go through if 'e' is true, jump otherwise.</a>
<a id=1132></a><a  class="comments">*/</a>
<a id=1133></a>void <a href="../h_src/57669932.htm" class="function">luaK_goiftrue</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57790060.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57789924.htm" class="localvar">e</a>) {
<a id=1134></a>  int <a href="../h_src/57789788.htm" class="localvar">pc</a>;  <a  class="comments">/* pc of new jump */</a>
<a id=1135></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57790060.htm" class="localvar">fs</a>, <a href="../h_src/57789924.htm" class="localvar">e</a>);
<a id=1136></a>  switch (<a href="../h_src/57789924.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=1137></a>    case <a href="../h_src/57681628.htm" class="variable">VJMP</a>: {  <a  class="comments">/* condition? */</a>
<a id=1138></a>      <a href="../h_src/57791284.htm" class="function">negatecondition</a>(<a href="../h_src/57790060.htm" class="localvar">fs</a>, <a href="../h_src/57789924.htm" class="localvar">e</a>);  <a  class="comments">/* jump when it is false */</a>
<a id=1139></a>      <a href="../h_src/57789788.htm" class="localvar">pc</a> = <a href="../h_src/57789924.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* save jump position */</a>
      break;
    }
<a id=1142></a>    case <a href="../h_src/57682444.htm" class="variable">VK</a>: case <a href="../h_src/57682376.htm" class="variable">VKFLT</a>: case <a href="../h_src/57682308.htm" class="variable">VKINT</a>: case <a href="../h_src/57682240.htm" class="variable">VKSTR</a>: case <a href="../h_src/57682580.htm" class="variable">VTRUE</a>: {
<a id=1143></a>      <a href="../h_src/57789788.htm" class="localvar">pc</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;  <a  class="comments">/* always true; do nothing */</a>
      break;
    }
    default: {
<a id=1147></a>      <a href="../h_src/57789788.htm" class="localvar">pc</a> = <a href="../h_src/57790740.htm" class="function">jumponcond</a>(<a href="../h_src/57790060.htm" class="localvar">fs</a>, <a href="../h_src/57789924.htm" class="localvar">e</a>, 0);  <a  class="comments">/* jump when false */</a>
      break;
    }
  }
<a id=1151></a>  <a href="../h_src/57669320.htm" class="function">luaK_concat</a>(<a href="../h_src/57790060.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57789924.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>, <a href="../h_src/57789788.htm" class="localvar">pc</a>);  <a  class="comments">/* insert new jump in false list */</a>
<a id=1152></a>  <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/57790060.htm" class="localvar">fs</a>, <a href="../h_src/57789924.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>);  <a  class="comments">/* true list jumps to here (to go through) */</a>
<a id=1153></a>  <a href="../h_src/57789924.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;
}


<a id=1157></a><a  class="comments">/*</a>
<a id=1158></a><a  class="comments">** Emit code to go through if 'e' is false, jump otherwise.</a>
<a id=1159></a><a  class="comments">*/</a>
<a id=1160></a>void <a href="../h_src/57669864.htm" class="function">luaK_goiffalse</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57789652.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57789516.htm" class="localvar">e</a>) {
<a id=1161></a>  int <a href="../h_src/57789380.htm" class="localvar">pc</a>;  <a  class="comments">/* pc of new jump */</a>
<a id=1162></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57789652.htm" class="localvar">fs</a>, <a href="../h_src/57789516.htm" class="localvar">e</a>);
<a id=1163></a>  switch (<a href="../h_src/57789516.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=1164></a>    case <a href="../h_src/57681628.htm" class="variable">VJMP</a>: {
<a id=1165></a>      <a href="../h_src/57789380.htm" class="localvar">pc</a> = <a href="../h_src/57789516.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* already jump if true */</a>
      break;
    }
<a id=1168></a>    case <a href="../h_src/57682648.htm" class="variable">VNIL</a>: case <a href="../h_src/57682512.htm" class="variable">VFALSE</a>: {
<a id=1169></a>      <a href="../h_src/57789380.htm" class="localvar">pc</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;  <a  class="comments">/* always false; do nothing */</a>
      break;
    }
    default: {
<a id=1173></a>      <a href="../h_src/57789380.htm" class="localvar">pc</a> = <a href="../h_src/57790740.htm" class="function">jumponcond</a>(<a href="../h_src/57789652.htm" class="localvar">fs</a>, <a href="../h_src/57789516.htm" class="localvar">e</a>, 1);  <a  class="comments">/* jump if true */</a>
      break;
    }
  }
<a id=1177></a>  <a href="../h_src/57669320.htm" class="function">luaK_concat</a>(<a href="../h_src/57789652.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57789516.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>, <a href="../h_src/57789380.htm" class="localvar">pc</a>);  <a  class="comments">/* insert new jump in 't' list */</a>
<a id=1178></a>  <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/57789652.htm" class="localvar">fs</a>, <a href="../h_src/57789516.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>);  <a  class="comments">/* false list jumps to here (to go through) */</a>
<a id=1179></a>  <a href="../h_src/57789516.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;
}


<a id=1183></a><a  class="comments">/*</a>
<a id=1184></a><a  class="comments">** Code 'not e', doing constant folding.</a>
<a id=1185></a><a  class="comments">*/</a>
<a id=1186></a>static void <a href="../h_src/57789244.htm" class="function">codenot</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57789108.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57788972.htm" class="localvar">e</a>) {
<a id=1187></a>  switch (<a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=1188></a>    case <a href="../h_src/57682648.htm" class="variable">VNIL</a>: case <a href="../h_src/57682512.htm" class="variable">VFALSE</a>: {
<a id=1189></a>      <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682580.htm" class="variable">VTRUE</a>;  <a  class="comments">/* true == not nil == not false */</a>
      break;
    }
<a id=1192></a>    case <a href="../h_src/57682444.htm" class="variable">VK</a>: case <a href="../h_src/57682376.htm" class="variable">VKFLT</a>: case <a href="../h_src/57682308.htm" class="variable">VKINT</a>: case <a href="../h_src/57682240.htm" class="variable">VKSTR</a>: case <a href="../h_src/57682580.htm" class="variable">VTRUE</a>: {
<a id=1193></a>      <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682512.htm" class="variable">VFALSE</a>;  <a  class="comments">/* false == not &quot;x&quot; == not 0.5 == not 1 == not true */</a>
      break;
    }
<a id=1196></a>    case <a href="../h_src/57681628.htm" class="variable">VJMP</a>: {
<a id=1197></a>      <a href="../h_src/57791284.htm" class="function">negatecondition</a>(<a href="../h_src/57789108.htm" class="localvar">fs</a>, <a href="../h_src/57788972.htm" class="localvar">e</a>);
      break;
    }
<a id=1200></a>    case <a href="../h_src/57681560.htm" class="variable">VRELOC</a>:
<a id=1201></a>    case <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>: {
<a id=1202></a>      <a href="../h_src/57797812.htm" class="function">discharge2anyreg</a>(<a href="../h_src/57789108.htm" class="localvar">fs</a>, <a href="../h_src/57788972.htm" class="localvar">e</a>);
<a id=1203></a>      <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57789108.htm" class="localvar">fs</a>, <a href="../h_src/57788972.htm" class="localvar">e</a>);
<a id=1204></a>      <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57789108.htm" class="localvar">fs</a>, <a href="../h_src/57687068.htm" class="variable">OP_NOT</a>, 0, <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, 0);
<a id=1205></a>      <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;
      break;
    }
<a id=1208></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);  <a  class="comments">/* cannot happen */</a>
  }
<a id=1210></a>  <a  class="comments">/* interchange true and false lists */</a>
<a id=1211></a>  { int <a href="../h_src/57788836.htm" class="localvar">temp</a> = <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>; <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a> = <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>; <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a> = <a href="../h_src/57788836.htm" class="localvar">temp</a>; }
<a id=1212></a>  <a href="../h_src/57659596.htm" class="function">removevalues</a>(<a href="../h_src/57789108.htm" class="localvar">fs</a>, <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>);  <a  class="comments">/* values are useless when negated */</a>
<a id=1213></a>  <a href="../h_src/57659596.htm" class="function">removevalues</a>(<a href="../h_src/57789108.htm" class="localvar">fs</a>, <a href="../h_src/57788972.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>);
}


<a id=1217></a><a  class="comments">/*</a>
<a id=1218></a><a  class="comments">** Check whether expression 'e' is a small literal string</a>
<a id=1219></a><a  class="comments">*/</a>
<a id=1220></a>static int <a href="../h_src/57788700.htm" class="function">isKstr</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57788564.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57788428.htm" class="localvar">e</a>) {
<a id=1221></a>  return (<a href="../h_src/57788428.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682444.htm" class="variable">VK</a> &amp;&amp; !<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57788428.htm" class="localvar">e</a>) &amp;&amp; <a href="../h_src/57788428.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> &lt;= <a href="../h_src/57695704.htm" class="macro">MAXARG_B</a> &amp;&amp;
<a id=1222></a>          <a href="../h_src/57524776.htm" class="macro">ttisshrstring</a>(&amp;<a href="../h_src/57788564.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57788428.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>]));
}

<a id=1225></a><a  class="comments">/*</a>
<a id=1226></a><a  class="comments">** Check whether expression 'e' is a literal integer.</a>
<a id=1227></a><a  class="comments">*/</a>
<a id=1228></a>int <a href="../h_src/57671020.htm" class="function">luaK_isKint</a> (<a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57788292.htm" class="localvar">e</a>) {
<a id=1229></a>  return (<a href="../h_src/57788292.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682308.htm" class="variable">VKINT</a> &amp;&amp; !<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57788292.htm" class="localvar">e</a>));
}


<a id=1233></a><a  class="comments">/*</a>
<a id=1234></a><a  class="comments">** Check whether expression 'e' is a literal integer in</a>
<a id=1235></a><a  class="comments">** proper range to fit in register C</a>
<a id=1236></a><a  class="comments">*/</a>
<a id=1237></a>static int <a href="../h_src/57788156.htm" class="function">isCint</a> (<a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57788020.htm" class="localvar">e</a>) {
<a id=1238></a>  return <a href="../h_src/57671020.htm" class="function">luaK_isKint</a>(<a href="../h_src/57788020.htm" class="localvar">e</a>) &amp;&amp; (<a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/57788020.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>) &lt;= <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a>));
}


<a id=1242></a><a  class="comments">/*</a>
<a id=1243></a><a  class="comments">** Check whether expression 'e' is a literal integer in</a>
<a id=1244></a><a  class="comments">** proper range to fit in register sC</a>
<a id=1245></a><a  class="comments">*/</a>
<a id=1246></a>static int <a href="../h_src/57787884.htm" class="function">isSCint</a> (<a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57787748.htm" class="localvar">e</a>) {
<a id=1247></a>  return <a href="../h_src/57671020.htm" class="function">luaK_isKint</a>(<a href="../h_src/57787748.htm" class="localvar">e</a>) &amp;&amp; <a href="../h_src/57802028.htm" class="function">fitsC</a>(<a href="../h_src/57787748.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>);
}


<a id=1251></a><a  class="comments">/*</a>
<a id=1252></a><a  class="comments">** Check whether expression 'e' is a literal integer or float in</a>
<a id=1253></a><a  class="comments">** proper range to fit in a register (sB or sC).</a>
<a id=1254></a><a  class="comments">*/</a>
<a id=1255></a>static int <a href="../h_src/57787612.htm" class="function">isSCnumber</a> (<a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57787476.htm" class="localvar">e</a>, int *<a href="../h_src/57787340.htm" class="localvar">pi</a>, int *<a href="../h_src/57787204.htm" class="localvar">isfloat</a>) {
<a id=1256></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57787068.htm" class="localvar">i</a>;
<a id=1257></a>  if (<a href="../h_src/57787476.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682308.htm" class="variable">VKINT</a>)
<a id=1258></a>    <a href="../h_src/57787068.htm" class="localvar">i</a> = <a href="../h_src/57787476.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>;
<a id=1259></a>  else if (<a href="../h_src/57787476.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682376.htm" class="variable">VKFLT</a> &amp;&amp; <a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/57787476.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680540.htm" class="variable">nval</a>, &amp;<a href="../h_src/57787068.htm" class="localvar">i</a>, <a href="../h_src/57613520.htm" class="variable">F2Ieq</a>))
<a id=1260></a>    *<a href="../h_src/57787204.htm" class="localvar">isfloat</a> = 1;
  else
<a id=1262></a>    return 0;  <a  class="comments">/* not a number */</a>
<a id=1263></a>  if (!<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(<a href="../h_src/57787476.htm" class="localvar">e</a>) &amp;&amp; <a href="../h_src/57802028.htm" class="function">fitsC</a>(<a href="../h_src/57787068.htm" class="localvar">i</a>)) {
<a id=1264></a>    *<a href="../h_src/57787340.htm" class="localvar">pi</a> = <a href="../h_src/57695296.htm" class="macro">int2sC</a>(<a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57787068.htm" class="localvar">i</a>));
    return 1;
  }
  else
    return 0;
}


<a id=1272></a><a  class="comments">/*</a>
<a id=1273></a><a  class="comments">** Create expression 't[k]'. 't' must have its final result already in a</a>
<a id=1274></a><a  class="comments">** register or upvalue. Upvalues can only be indexed by literal strings.</a>
<a id=1275></a><a  class="comments">** Keys can be literal strings in the constant table or arbitrary</a>
<a id=1276></a><a  class="comments">** values in registers.</a>
<a id=1277></a><a  class="comments">*/</a>
<a id=1278></a>void <a href="../h_src/57670000.htm" class="function">luaK_indexed</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57786932.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57786796.htm" class="localvar">t</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57786660.htm" class="localvar">k</a>) {
<a id=1279></a>  if (<a href="../h_src/57786660.htm" class="localvar">k</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682240.htm" class="variable">VKSTR</a>)
<a id=1280></a>    <a href="../h_src/57799444.htm" class="function">str2K</a>(<a href="../h_src/57786932.htm" class="localvar">fs</a>, <a href="../h_src/57786660.htm" class="localvar">k</a>);
<a id=1281></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57668572.htm" class="macro">hasjumps</a>(t) &amp;&amp;
             (t-&gt;k == VLOCAL || t-&gt;k == VNONRELOC || t-&gt;k == VUPVAL));
<a id=1283></a>  if (<a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682036.htm" class="variable">VUPVAL</a> &amp;&amp; !<a href="../h_src/57788700.htm" class="function">isKstr</a>(<a href="../h_src/57786932.htm" class="localvar">fs</a>, <a href="../h_src/57786660.htm" class="localvar">k</a>))  <a  class="comments">/* upvalue indexed by non 'Kstr'? */</a>
<a id=1284></a>    <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57786932.htm" class="localvar">fs</a>, <a href="../h_src/57786796.htm" class="localvar">t</a>);  <a  class="comments">/* put it in a register */</a>
<a id=1285></a>  if (<a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682036.htm" class="variable">VUPVAL</a>) {
<a id=1286></a>    <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a> = <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* upvalue index */</a>
<a id=1287></a>    <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a> = <a href="../h_src/57786660.htm" class="localvar">k</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* literal string */</a>
<a id=1288></a>    <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681832.htm" class="variable">VINDEXUP</a>;
  }
  else {
<a id=1291></a>    <a  class="comments">/* register index of the table */</a>
<a id=1292></a>    <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a> = (<a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682104.htm" class="variable">VLOCAL</a>) ? <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a>: <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;
<a id=1293></a>    if (<a href="../h_src/57788700.htm" class="function">isKstr</a>(<a href="../h_src/57786932.htm" class="localvar">fs</a>, <a href="../h_src/57786660.htm" class="localvar">k</a>)) {
<a id=1294></a>      <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a> = <a href="../h_src/57786660.htm" class="localvar">k</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* literal string */</a>
<a id=1295></a>      <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681696.htm" class="variable">VINDEXSTR</a>;
    }
<a id=1297></a>    else if (<a href="../h_src/57788156.htm" class="function">isCint</a>(<a href="../h_src/57786660.htm" class="localvar">k</a>)) {
<a id=1298></a>      <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57786660.htm" class="localvar">k</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>);  <a  class="comments">/* int. constant in proper range */</a>
<a id=1299></a>      <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681764.htm" class="variable">VINDEXI</a>;
    }
    else {
<a id=1302></a>      <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57786932.htm" class="localvar">fs</a>, <a href="../h_src/57786660.htm" class="localvar">k</a>);  <a  class="comments">/* register */</a>
<a id=1303></a>      <a href="../h_src/57786796.htm" class="localvar">t</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681900.htm" class="variable">VINDEXED</a>;
    }
  }
}


<a id=1309></a><a  class="comments">/*</a>
<a id=1310></a><a  class="comments">** Return false if folding can raise an error.</a>
<a id=1311></a><a  class="comments">** Bitwise operations need operands convertible to integers; division</a>
<a id=1312></a><a  class="comments">** operations cannot have 0 as divisor.</a>
<a id=1313></a><a  class="comments">*/</a>
<a id=1314></a>static int <a href="../h_src/57786524.htm" class="function">validop</a> (int <a href="../h_src/57786388.htm" class="localvar">op</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57786252.htm" class="localvar">v1</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57786116.htm" class="localvar">v2</a>) {
<a id=1315></a>  switch (<a href="../h_src/57786388.htm" class="localvar">op</a>) {
<a id=1316></a>    case <a href="../h_src/57436840.htm" class="macro">LUA_OPBAND</a>: case <a href="../h_src/57436704.htm" class="macro">LUA_OPBOR</a>: case <a href="../h_src/57436568.htm" class="macro">LUA_OPBXOR</a>:
<a id=1317></a>    case <a href="../h_src/57436432.htm" class="macro">LUA_OPSHL</a>: case <a href="../h_src/57436296.htm" class="macro">LUA_OPSHR</a>: case <a href="../h_src/57436024.htm" class="macro">LUA_OPBNOT</a>: {  <a  class="comments">/* conversion errors */</a>
<a id=1318></a>      <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57785980.htm" class="localvar">i</a>;
<a id=1319></a>      return (<a href="../h_src/57611276.htm" class="function">luaV_tointegerns</a>(<a href="../h_src/57786252.htm" class="localvar">v1</a>, &amp;<a href="../h_src/57785980.htm" class="localvar">i</a>, <a href="../h_src/57613656.htm" class="macro">LUA_FLOORN2I</a>) &amp;&amp;
<a id=1320></a>              <a href="../h_src/57611276.htm" class="function">luaV_tointegerns</a>(<a href="../h_src/57786116.htm" class="localvar">v2</a>, &amp;<a href="../h_src/57785980.htm" class="localvar">i</a>, <a href="../h_src/57613656.htm" class="macro">LUA_FLOORN2I</a>));
    }
<a id=1322></a>    case <a href="../h_src/57437112.htm" class="macro">LUA_OPDIV</a>: case <a href="../h_src/57436976.htm" class="macro">LUA_OPIDIV</a>: case <a href="../h_src/57437384.htm" class="macro">LUA_OPMOD</a>:  <a  class="comments">/* division by 0 */</a>
<a id=1323></a>      return (<a href="../h_src/57526408.htm" class="macro">nvalue</a>(<a href="../h_src/57786116.htm" class="localvar">v2</a>) != 0);
<a id=1324></a>    default: return 1;  <a  class="comments">/* everything else is valid */</a>
  }
}


<a id=1329></a><a  class="comments">/*</a>
<a id=1330></a><a  class="comments">** Try to &quot;constant-fold&quot; an operation; return 1 iff successful.</a>
<a id=1331></a><a  class="comments">** (In this case, 'e1' has the final result.)</a>
<a id=1332></a><a  class="comments">*/</a>
<a id=1333></a>static int <a href="../h_src/57785844.htm" class="function">constfolding</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57785708.htm" class="localvar">fs</a>, int <a href="../h_src/57785572.htm" class="localvar">op</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57785436.htm" class="localvar">e1</a>,
<a id=1334></a>                                        const <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57785300.htm" class="localvar">e2</a>) {
<a id=1335></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57785164.htm" class="localvar">v1</a>, <a href="../h_src/57785028.htm" class="localvar">v2</a>, <a href="../h_src/57784892.htm" class="localvar">res</a>;
<a id=1336></a>  if (!<a href="../h_src/57668028.htm" class="function">tonumeral</a>(<a href="../h_src/57785436.htm" class="localvar">e1</a>, &amp;<a href="../h_src/57785164.htm" class="localvar">v1</a>) || !<a href="../h_src/57668028.htm" class="function">tonumeral</a>(<a href="../h_src/57785300.htm" class="localvar">e2</a>, &amp;<a href="../h_src/57785028.htm" class="localvar">v2</a>) || !<a href="../h_src/57786524.htm" class="function">validop</a>(<a href="../h_src/57785572.htm" class="localvar">op</a>, &amp;<a href="../h_src/57785164.htm" class="localvar">v1</a>, &amp;<a href="../h_src/57785028.htm" class="localvar">v2</a>))
<a id=1337></a>    return 0;  <a  class="comments">/* non-numeric operands or not safe to fold */</a>
<a id=1338></a>  <a href="../h_src/57501792.htm" class="function">luaO_rawarith</a>(<a href="../h_src/57785708.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/57785572.htm" class="localvar">op</a>, &amp;<a href="../h_src/57785164.htm" class="localvar">v1</a>, &amp;<a href="../h_src/57785028.htm" class="localvar">v2</a>, &amp;<a href="../h_src/57784892.htm" class="localvar">res</a>);  <a  class="comments">/* does operation */</a>
<a id=1339></a>  if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(&amp;<a href="../h_src/57784892.htm" class="localvar">res</a>)) {
<a id=1340></a>    <a href="../h_src/57785436.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682308.htm" class="variable">VKINT</a>;
<a id=1341></a>    <a href="../h_src/57785436.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(&amp;<a href="../h_src/57784892.htm" class="localvar">res</a>);
  }
<a id=1343></a>  else {  <a  class="comments">/* folds neither NaN nor 0.0 (to avoid problems with -0.0) */</a>
<a id=1344></a>    <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57784756.htm" class="localvar">n</a> = <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(&amp;<a href="../h_src/57784892.htm" class="localvar">res</a>);
<a id=1345></a>    if (<a href="../h_src/57538784.htm" class="macro">luai_numisnan</a>(<a href="../h_src/57784756.htm" class="localvar">n</a>) || <a href="../h_src/57784756.htm" class="localvar">n</a> == 0)
      return 0;
<a id=1347></a>    <a href="../h_src/57785436.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682376.htm" class="variable">VKFLT</a>;
<a id=1348></a>    <a href="../h_src/57785436.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680540.htm" class="variable">nval</a> = <a href="../h_src/57784756.htm" class="localvar">n</a>;
  }
  return 1;
}


<a id=1354></a><a  class="comments">/*</a>
<a id=1355></a><a  class="comments">** Convert a BinOpr to an OpCode  (ORDER OPR - ORDER OP)</a>
<a id=1356></a><a  class="comments">*/</a>
<a id=1357></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57784620.htm" class="function">binopr2op</a> (<a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57784484.htm" class="localvar">opr</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57784348.htm" class="localvar">baser</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57784212.htm" class="localvar">base</a>) {
<a id=1358></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(baser &lt;= opr &amp;&amp;
            ((baser == OPR_ADD &amp;&amp; opr &lt;= OPR_SHR) ||
             (baser == OPR_LT &amp;&amp; opr &lt;= OPR_LE)));
<a id=1361></a>  return <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57684756.htm" class="type">OpCode</a>, (<a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57784484.htm" class="localvar">opr</a>) - <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57784348.htm" class="localvar">baser</a>)) + <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57784212.htm" class="localvar">base</a>));
}


<a id=1365></a><a  class="comments">/*</a>
<a id=1366></a><a  class="comments">** Convert a UnOpr to an OpCode  (ORDER OPR - ORDER OP)</a>
<a id=1367></a><a  class="comments">*/</a>
<a id=1368></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57784076.htm" class="function">unopr2op</a> (<a href="../h_src/57671768.htm" class="type">UnOpr</a> <a href="../h_src/57783940.htm" class="localvar">opr</a>) {
<a id=1369></a>  return <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57684756.htm" class="type">OpCode</a>, (<a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57783940.htm" class="localvar">opr</a>) - <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57672244.htm" class="variable">OPR_MINUS</a>)) +
<a id=1370></a>                                       <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57687204.htm" class="variable">OP_UNM</a>));
}


<a id=1374></a><a  class="comments">/*</a>
<a id=1375></a><a  class="comments">** Convert a BinOpr to a tag method  (ORDER OPR - ORDER TM)</a>
<a id=1376></a><a  class="comments">*/</a>
<a id=1377></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/57783804.htm" class="function">binopr2TM</a> (<a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57783668.htm" class="localvar">opr</a>) {
<a id=1378></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(OPR_ADD &lt;= opr &amp;&amp; opr &lt;= OPR_SHR);
<a id=1379></a>  return <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57499004.htm" class="type">TMS</a>, (<a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57783668.htm" class="localvar">opr</a>) - <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57674216.htm" class="variable">OPR_ADD</a>)) + <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57500500.htm" class="variable">TM_ADD</a>));
}


<a id=1383></a><a  class="comments">/*</a>
<a id=1384></a><a  class="comments">** Emit code for unary expressions that &quot;produce values&quot;</a>
<a id=1385></a><a  class="comments">** (everything but 'not').</a>
<a id=1386></a><a  class="comments">** Expression to produce final result will be encoded in 'e'.</a>
<a id=1387></a><a  class="comments">*/</a>
<a id=1388></a>static void <a href="../h_src/57783532.htm" class="function">codeunexpval</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57783396.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57783260.htm" class="localvar">op</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57783124.htm" class="localvar">e</a>, int <a href="../h_src/57782988.htm" class="localvar">line</a>) {
<a id=1389></a>  int <a href="../h_src/57782852.htm" class="localvar">r</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57783396.htm" class="localvar">fs</a>, <a href="../h_src/57783124.htm" class="localvar">e</a>);  <a  class="comments">/* opcodes operate only on registers */</a>
<a id=1390></a>  <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57783396.htm" class="localvar">fs</a>, <a href="../h_src/57783124.htm" class="localvar">e</a>);
<a id=1391></a>  <a href="../h_src/57783124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57783396.htm" class="localvar">fs</a>, <a href="../h_src/57783260.htm" class="localvar">op</a>, 0, <a href="../h_src/57782852.htm" class="localvar">r</a>, 0);  <a  class="comments">/* generate opcode */</a>
<a id=1392></a>  <a href="../h_src/57783124.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;  <a  class="comments">/* all those operations are relocatable */</a>
<a id=1393></a>  <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/57783396.htm" class="localvar">fs</a>, <a href="../h_src/57782988.htm" class="localvar">line</a>);
}


<a id=1397></a><a  class="comments">/*</a>
<a id=1398></a><a  class="comments">** Emit code for binary expressions that &quot;produce values&quot;</a>
<a id=1399></a><a  class="comments">** (everything but logical operators 'and'/'or' and comparison</a>
<a id=1400></a><a  class="comments">** operators).</a>
<a id=1401></a><a  class="comments">** Expression to produce final result will be encoded in 'e1'.</a>
<a id=1402></a><a  class="comments">*/</a>
<a id=1403></a>static void <a href="../h_src/57782716.htm" class="function">finishbinexpval</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57782580.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57782444.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57782308.htm" class="localvar">e2</a>,
<a id=1404></a>                             <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57782172.htm" class="localvar">op</a>, int <a href="../h_src/57782036.htm" class="localvar">v2</a>, int <a href="../h_src/57781900.htm" class="localvar">flip</a>, int <a href="../h_src/57781764.htm" class="localvar">line</a>,
<a id=1405></a>                             <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57781628.htm" class="localvar">mmop</a>, <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/57781492.htm" class="localvar">event</a>) {
<a id=1406></a>  int <a href="../h_src/57781356.htm" class="localvar">v1</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57782580.htm" class="localvar">fs</a>, <a href="../h_src/57782444.htm" class="localvar">e1</a>);
<a id=1407></a>  int <a href="../h_src/57781220.htm" class="localvar">pc</a> = <a href="../h_src/57671088.htm" class="function">luaK_codeABCk</a>(<a href="../h_src/57782580.htm" class="localvar">fs</a>, <a href="../h_src/57782172.htm" class="localvar">op</a>, 0, <a href="../h_src/57781356.htm" class="localvar">v1</a>, <a href="../h_src/57782036.htm" class="localvar">v2</a>, 0);
<a id=1408></a>  <a href="../h_src/57809304.htm" class="function">freeexps</a>(<a href="../h_src/57782580.htm" class="localvar">fs</a>, <a href="../h_src/57782444.htm" class="localvar">e1</a>, <a href="../h_src/57782308.htm" class="localvar">e2</a>);
<a id=1409></a>  <a href="../h_src/57782444.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57781220.htm" class="localvar">pc</a>;
<a id=1410></a>  <a href="../h_src/57782444.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681560.htm" class="variable">VRELOC</a>;  <a  class="comments">/* all those operations are relocatable */</a>
<a id=1411></a>  <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/57782580.htm" class="localvar">fs</a>, <a href="../h_src/57781764.htm" class="localvar">line</a>);
<a id=1412></a>  <a href="../h_src/57671088.htm" class="function">luaK_codeABCk</a>(<a href="../h_src/57782580.htm" class="localvar">fs</a>, <a href="../h_src/57781628.htm" class="localvar">mmop</a>, <a href="../h_src/57781356.htm" class="localvar">v1</a>, <a href="../h_src/57782036.htm" class="localvar">v2</a>, <a href="../h_src/57781492.htm" class="localvar">event</a>, <a href="../h_src/57781900.htm" class="localvar">flip</a>);  <a  class="comments">/* to call metamethod */</a>
<a id=1413></a>  <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/57782580.htm" class="localvar">fs</a>, <a href="../h_src/57781764.htm" class="localvar">line</a>);
}


<a id=1417></a><a  class="comments">/*</a>
<a id=1418></a><a  class="comments">** Emit code for binary expressions that &quot;produce values&quot; over</a>
<a id=1419></a><a  class="comments">** two registers.</a>
<a id=1420></a><a  class="comments">*/</a>
<a id=1421></a>static void <a href="../h_src/57781084.htm" class="function">codebinexpval</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57780948.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57780812.htm" class="localvar">opr</a>,
<a id=1422></a>                           <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57780676.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57780540.htm" class="localvar">e2</a>, int <a href="../h_src/57780404.htm" class="localvar">line</a>) {
<a id=1423></a>  <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57780268.htm" class="localvar">op</a> = <a href="../h_src/57784620.htm" class="function">binopr2op</a>(<a href="../h_src/57780812.htm" class="localvar">opr</a>, <a href="../h_src/57674216.htm" class="variable">OPR_ADD</a>, <a href="../h_src/57688224.htm" class="variable">OP_ADD</a>);
<a id=1424></a>  int <a href="../h_src/57780132.htm" class="localvar">v2</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57780948.htm" class="localvar">fs</a>, <a href="../h_src/57780540.htm" class="localvar">e2</a>);  <a  class="comments">/* make sure 'e2' is in a register */</a>
<a id=1425></a>  <a  class="comments">/* 'e1' must be already in a register or it is a constant */</a>
<a id=1426></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>((VNIL &lt;= e1-&gt;k &amp;&amp; e1-&gt;k &lt;= VKSTR) ||
             e1-&gt;k == VNONRELOC || e1-&gt;k == VRELOC);
<a id=1428></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(OP_ADD &lt;= op &amp;&amp; op &lt;= OP_SHR);
<a id=1429></a>  <a href="../h_src/57782716.htm" class="function">finishbinexpval</a>(<a href="../h_src/57780948.htm" class="localvar">fs</a>, <a href="../h_src/57780676.htm" class="localvar">e1</a>, <a href="../h_src/57780540.htm" class="localvar">e2</a>, <a href="../h_src/57780268.htm" class="localvar">op</a>, <a href="../h_src/57780132.htm" class="localvar">v2</a>, 0, <a href="../h_src/57780404.htm" class="localvar">line</a>, <a href="../h_src/57687408.htm" class="variable">OP_MMBIN</a>, <a href="../h_src/57783804.htm" class="function">binopr2TM</a>(<a href="../h_src/57780812.htm" class="localvar">opr</a>));
}


<a id=1433></a><a  class="comments">/*</a>
<a id=1434></a><a  class="comments">** Code binary operators with immediate operands.</a>
<a id=1435></a><a  class="comments">*/</a>
<a id=1436></a>static void <a href="../h_src/57779996.htm" class="function">codebini</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57779860.htm" class="localvar">fs</a>, <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57779724.htm" class="localvar">op</a>,
<a id=1437></a>                       <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57779588.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57779452.htm" class="localvar">e2</a>, int <a href="../h_src/57779316.htm" class="localvar">flip</a>, int <a href="../h_src/57779180.htm" class="localvar">line</a>,
<a id=1438></a>                       <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/57779044.htm" class="localvar">event</a>) {
<a id=1439></a>  int <a href="../h_src/57778908.htm" class="localvar">v2</a> = <a href="../h_src/57695296.htm" class="macro">int2sC</a>(<a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57779452.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>));  <a  class="comments">/* immediate operand */</a>
<a id=1440></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e2-&gt;k == VKINT);
<a id=1441></a>  <a href="../h_src/57782716.htm" class="function">finishbinexpval</a>(<a href="../h_src/57779860.htm" class="localvar">fs</a>, <a href="../h_src/57779588.htm" class="localvar">e1</a>, <a href="../h_src/57779452.htm" class="localvar">e2</a>, <a href="../h_src/57779724.htm" class="localvar">op</a>, <a href="../h_src/57778908.htm" class="localvar">v2</a>, <a href="../h_src/57779316.htm" class="localvar">flip</a>, <a href="../h_src/57779180.htm" class="localvar">line</a>, <a href="../h_src/57687340.htm" class="variable">OP_MMBINI</a>, <a href="../h_src/57779044.htm" class="localvar">event</a>);
}


<a id=1445></a><a  class="comments">/*</a>
<a id=1446></a><a  class="comments">** Code binary operators with K operand.</a>
<a id=1447></a><a  class="comments">*/</a>
<a id=1448></a>static void <a href="../h_src/57778772.htm" class="function">codebinK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57778636.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57778500.htm" class="localvar">opr</a>,
<a id=1449></a>                      <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57778364.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57778228.htm" class="localvar">e2</a>, int <a href="../h_src/57778092.htm" class="localvar">flip</a>, int <a href="../h_src/57777956.htm" class="localvar">line</a>) {
<a id=1450></a>  <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/57777820.htm" class="localvar">event</a> = <a href="../h_src/57783804.htm" class="function">binopr2TM</a>(<a href="../h_src/57778500.htm" class="localvar">opr</a>);
<a id=1451></a>  int <a href="../h_src/57777684.htm" class="localvar">v2</a> = <a href="../h_src/57778228.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* K index */</a>
<a id=1452></a>  <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57777548.htm" class="localvar">op</a> = <a href="../h_src/57784620.htm" class="function">binopr2op</a>(<a href="../h_src/57778500.htm" class="localvar">opr</a>, <a href="../h_src/57674216.htm" class="variable">OPR_ADD</a>, <a href="../h_src/57689040.htm" class="variable">OP_ADDK</a>);
<a id=1453></a>  <a href="../h_src/57782716.htm" class="function">finishbinexpval</a>(<a href="../h_src/57778636.htm" class="localvar">fs</a>, <a href="../h_src/57778364.htm" class="localvar">e1</a>, <a href="../h_src/57778228.htm" class="localvar">e2</a>, <a href="../h_src/57777548.htm" class="localvar">op</a>, <a href="../h_src/57777684.htm" class="localvar">v2</a>, <a href="../h_src/57778092.htm" class="localvar">flip</a>, <a href="../h_src/57777956.htm" class="localvar">line</a>, <a href="../h_src/57687272.htm" class="variable">OP_MMBINK</a>, <a href="../h_src/57777820.htm" class="localvar">event</a>);
}


<a id=1457></a><a  class="comments">/* Try to code a binary operator negating its second operand.</a>
<a id=1458></a><a  class="comments">** For the metamethod, 2nd operand must keep its original value.</a>
<a id=1459></a><a  class="comments">*/</a>
<a id=1460></a>static int <a href="../h_src/57777412.htm" class="function">finishbinexpneg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57777276.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57777140.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57777004.htm" class="localvar">e2</a>,
<a id=1461></a>                             <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57776868.htm" class="localvar">op</a>, int <a href="../h_src/57776732.htm" class="localvar">line</a>, <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/57776596.htm" class="localvar">event</a>) {
<a id=1462></a>  if (!<a href="../h_src/57671020.htm" class="function">luaK_isKint</a>(<a href="../h_src/57777004.htm" class="localvar">e2</a>))
<a id=1463></a>    return 0;  <a  class="comments">/* not an integer constant */</a>
  else {
<a id=1465></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57776460.htm" class="localvar">i2</a> = <a href="../h_src/57777004.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a>;
<a id=1466></a>    if (!(<a href="../h_src/57802028.htm" class="function">fitsC</a>(<a href="../h_src/57776460.htm" class="localvar">i2</a>) &amp;&amp; <a href="../h_src/57802028.htm" class="function">fitsC</a>(-<a href="../h_src/57776460.htm" class="localvar">i2</a>)))
<a id=1467></a>      return 0;  <a  class="comments">/* not in the proper range */</a>
<a id=1468></a>    else {  <a  class="comments">/* operating a small integer constant */</a>
<a id=1469></a>      int <a href="../h_src/57776324.htm" class="localvar">v2</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57776460.htm" class="localvar">i2</a>);
<a id=1470></a>      <a href="../h_src/57782716.htm" class="function">finishbinexpval</a>(<a href="../h_src/57777276.htm" class="localvar">fs</a>, <a href="../h_src/57777140.htm" class="localvar">e1</a>, <a href="../h_src/57777004.htm" class="localvar">e2</a>, <a href="../h_src/57776868.htm" class="localvar">op</a>, <a href="../h_src/57695296.htm" class="macro">int2sC</a>(-<a href="../h_src/57776324.htm" class="localvar">v2</a>), 0, <a href="../h_src/57776732.htm" class="localvar">line</a>, <a href="../h_src/57687340.htm" class="variable">OP_MMBINI</a>, <a href="../h_src/57776596.htm" class="localvar">event</a>);
<a id=1471></a>      <a  class="comments">/* correct metamethod argument */</a>
<a id=1472></a>      <a href="../h_src/57693528.htm" class="macro">SETARG_B</a>(<a href="../h_src/57777276.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57777276.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a> - 1], <a href="../h_src/57695296.htm" class="macro">int2sC</a>(<a href="../h_src/57776324.htm" class="localvar">v2</a>));
<a id=1473></a>      return 1;  <a  class="comments">/* successfully coded */</a>
    }
  }
}


<a id=1479></a>static void <a href="../h_src/57776188.htm" class="function">swapexps</a> (<a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57776052.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57775916.htm" class="localvar">e2</a>) {
<a id=1480></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57775780.htm" class="localvar">temp</a> = *<a href="../h_src/57776052.htm" class="localvar">e1</a>; *<a href="../h_src/57776052.htm" class="localvar">e1</a> = *<a href="../h_src/57775916.htm" class="localvar">e2</a>; *<a href="../h_src/57775916.htm" class="localvar">e2</a> = <a href="../h_src/57775780.htm" class="localvar">temp</a>;  <a  class="comments">/* swap 'e1' and 'e2' */</a>
}


<a id=1484></a><a  class="comments">/*</a>
<a id=1485></a><a  class="comments">** Code binary operators with no constant operand.</a>
<a id=1486></a><a  class="comments">*/</a>
<a id=1487></a>static void <a href="../h_src/57775644.htm" class="function">codebinNoK</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57775508.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57775372.htm" class="localvar">opr</a>,
<a id=1488></a>                        <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57775236.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57775100.htm" class="localvar">e2</a>, int <a href="../h_src/57774964.htm" class="localvar">flip</a>, int <a href="../h_src/57774828.htm" class="localvar">line</a>) {
<a id=1489></a>  if (<a href="../h_src/57774964.htm" class="localvar">flip</a>)
<a id=1490></a>    <a href="../h_src/57776188.htm" class="function">swapexps</a>(<a href="../h_src/57775236.htm" class="localvar">e1</a>, <a href="../h_src/57775100.htm" class="localvar">e2</a>);  <a  class="comments">/* back to original order */</a>
<a id=1491></a>  <a href="../h_src/57781084.htm" class="function">codebinexpval</a>(<a href="../h_src/57775508.htm" class="localvar">fs</a>, <a href="../h_src/57775372.htm" class="localvar">opr</a>, <a href="../h_src/57775236.htm" class="localvar">e1</a>, <a href="../h_src/57775100.htm" class="localvar">e2</a>, <a href="../h_src/57774828.htm" class="localvar">line</a>);  <a  class="comments">/* use standard operators */</a>
}


<a id=1495></a><a  class="comments">/*</a>
<a id=1496></a><a  class="comments">** Code arithmetic operators ('+', '-', ...). If second operand is a</a>
<a id=1497></a><a  class="comments">** constant in the proper range, use variant opcodes with K operands.</a>
<a id=1498></a><a  class="comments">*/</a>
<a id=1499></a>static void <a href="../h_src/57774692.htm" class="function">codearith</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57774556.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57774420.htm" class="localvar">opr</a>,
<a id=1500></a>                       <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57774284.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57774148.htm" class="localvar">e2</a>, int <a href="../h_src/57774012.htm" class="localvar">flip</a>, int <a href="../h_src/57773876.htm" class="localvar">line</a>) {
<a id=1501></a>  if (<a href="../h_src/57668028.htm" class="function">tonumeral</a>(<a href="../h_src/57774148.htm" class="localvar">e2</a>, NULL) &amp;&amp; <a href="../h_src/57794140.htm" class="function">luaK_exp2K</a>(<a href="../h_src/57774556.htm" class="localvar">fs</a>, <a href="../h_src/57774148.htm" class="localvar">e2</a>))  <a  class="comments">/* K operand? */</a>
<a id=1502></a>    <a href="../h_src/57778772.htm" class="function">codebinK</a>(<a href="../h_src/57774556.htm" class="localvar">fs</a>, <a href="../h_src/57774420.htm" class="localvar">opr</a>, <a href="../h_src/57774284.htm" class="localvar">e1</a>, <a href="../h_src/57774148.htm" class="localvar">e2</a>, <a href="../h_src/57774012.htm" class="localvar">flip</a>, <a href="../h_src/57773876.htm" class="localvar">line</a>);
<a id=1503></a>  else  <a  class="comments">/* 'e2' is neither an immediate nor a K operand */</a>
<a id=1504></a>    <a href="../h_src/57775644.htm" class="function">codebinNoK</a>(<a href="../h_src/57774556.htm" class="localvar">fs</a>, <a href="../h_src/57774420.htm" class="localvar">opr</a>, <a href="../h_src/57774284.htm" class="localvar">e1</a>, <a href="../h_src/57774148.htm" class="localvar">e2</a>, <a href="../h_src/57774012.htm" class="localvar">flip</a>, <a href="../h_src/57773876.htm" class="localvar">line</a>);
}


<a id=1508></a><a  class="comments">/*</a>
<a id=1509></a><a  class="comments">** Code commutative operators ('+', '*'). If first operand is a</a>
<a id=1510></a><a  class="comments">** numeric constant, change order of operands to try to use an</a>
<a id=1511></a><a  class="comments">** immediate or K operator.</a>
<a id=1512></a><a  class="comments">*/</a>
<a id=1513></a>static void <a href="../h_src/57773740.htm" class="function">codecommutative</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57773604.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57773468.htm" class="localvar">op</a>,
<a id=1514></a>                             <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57773332.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57773196.htm" class="localvar">e2</a>, int <a href="../h_src/57773060.htm" class="localvar">line</a>) {
<a id=1515></a>  int <a href="../h_src/57772924.htm" class="localvar">flip</a> = 0;
<a id=1516></a>  if (<a href="../h_src/57668028.htm" class="function">tonumeral</a>(<a href="../h_src/57773332.htm" class="localvar">e1</a>, NULL)) {  <a  class="comments">/* is first operand a numeric constant? */</a>
<a id=1517></a>    <a href="../h_src/57776188.htm" class="function">swapexps</a>(<a href="../h_src/57773332.htm" class="localvar">e1</a>, <a href="../h_src/57773196.htm" class="localvar">e2</a>);  <a  class="comments">/* change order */</a>
<a id=1518></a>    <a href="../h_src/57772924.htm" class="localvar">flip</a> = 1;
  }
<a id=1520></a>  if (<a href="../h_src/57773468.htm" class="localvar">op</a> == <a href="../h_src/57674216.htm" class="variable">OPR_ADD</a> &amp;&amp; <a href="../h_src/57787884.htm" class="function">isSCint</a>(<a href="../h_src/57773196.htm" class="localvar">e2</a>))  <a  class="comments">/* immediate operand? */</a>
<a id=1521></a>    <a href="../h_src/57779996.htm" class="function">codebini</a>(<a href="../h_src/57773604.htm" class="localvar">fs</a>, <a href="../h_src/57689108.htm" class="variable">OP_ADDI</a>, <a href="../h_src/57773332.htm" class="localvar">e1</a>, <a href="../h_src/57773196.htm" class="localvar">e2</a>, <a href="../h_src/57772924.htm" class="localvar">flip</a>, <a href="../h_src/57773060.htm" class="localvar">line</a>, <a href="../h_src/57500500.htm" class="variable">TM_ADD</a>);
  else
<a id=1523></a>    <a href="../h_src/57774692.htm" class="function">codearith</a>(<a href="../h_src/57773604.htm" class="localvar">fs</a>, <a href="../h_src/57773468.htm" class="localvar">op</a>, <a href="../h_src/57773332.htm" class="localvar">e1</a>, <a href="../h_src/57773196.htm" class="localvar">e2</a>, <a href="../h_src/57772924.htm" class="localvar">flip</a>, <a href="../h_src/57773060.htm" class="localvar">line</a>);
}


<a id=1527></a><a  class="comments">/*</a>
<a id=1528></a><a  class="comments">** Code bitwise operations; they are all commutative, so the function</a>
<a id=1529></a><a  class="comments">** tries to put an integer constant as the 2nd operand (a K operand).</a>
<a id=1530></a><a  class="comments">*/</a>
<a id=1531></a>static void <a href="../h_src/57772788.htm" class="function">codebitwise</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57772652.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57772516.htm" class="localvar">opr</a>,
<a id=1532></a>                         <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57772380.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57772244.htm" class="localvar">e2</a>, int <a href="../h_src/57772108.htm" class="localvar">line</a>) {
<a id=1533></a>  int <a href="../h_src/57771972.htm" class="localvar">flip</a> = 0;
<a id=1534></a>  if (<a href="../h_src/57772380.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682308.htm" class="variable">VKINT</a>) {
<a id=1535></a>    <a href="../h_src/57776188.htm" class="function">swapexps</a>(<a href="../h_src/57772380.htm" class="localvar">e1</a>, <a href="../h_src/57772244.htm" class="localvar">e2</a>);  <a  class="comments">/* 'e2' will be the constant operand */</a>
<a id=1536></a>    <a href="../h_src/57771972.htm" class="localvar">flip</a> = 1;
  }
<a id=1538></a>  if (<a href="../h_src/57772244.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682308.htm" class="variable">VKINT</a> &amp;&amp; <a href="../h_src/57794140.htm" class="function">luaK_exp2K</a>(<a href="../h_src/57772652.htm" class="localvar">fs</a>, <a href="../h_src/57772244.htm" class="localvar">e2</a>))  <a  class="comments">/* K operand? */</a>
<a id=1539></a>    <a href="../h_src/57778772.htm" class="function">codebinK</a>(<a href="../h_src/57772652.htm" class="localvar">fs</a>, <a href="../h_src/57772516.htm" class="localvar">opr</a>, <a href="../h_src/57772380.htm" class="localvar">e1</a>, <a href="../h_src/57772244.htm" class="localvar">e2</a>, <a href="../h_src/57771972.htm" class="localvar">flip</a>, <a href="../h_src/57772108.htm" class="localvar">line</a>);
<a id=1540></a>  else  <a  class="comments">/* no constants */</a>
<a id=1541></a>    <a href="../h_src/57775644.htm" class="function">codebinNoK</a>(<a href="../h_src/57772652.htm" class="localvar">fs</a>, <a href="../h_src/57772516.htm" class="localvar">opr</a>, <a href="../h_src/57772380.htm" class="localvar">e1</a>, <a href="../h_src/57772244.htm" class="localvar">e2</a>, <a href="../h_src/57771972.htm" class="localvar">flip</a>, <a href="../h_src/57772108.htm" class="localvar">line</a>);
}


<a id=1545></a><a  class="comments">/*</a>
<a id=1546></a><a  class="comments">** Emit code for order comparisons. When using an immediate operand,</a>
<a id=1547></a><a  class="comments">** 'isfloat' tells whether the original value was a float.</a>
<a id=1548></a><a  class="comments">*/</a>
<a id=1549></a>static void <a href="../h_src/57771836.htm" class="function">codeorder</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57771700.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57771564.htm" class="localvar">opr</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57771428.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57771292.htm" class="localvar">e2</a>) {
<a id=1550></a>  int <a href="../h_src/57771156.htm" class="localvar">r1</a>, <a href="../h_src/57771020.htm" class="localvar">r2</a>;
<a id=1551></a>  int <a href="../h_src/57770884.htm" class="localvar">im</a>;
<a id=1552></a>  int <a href="../h_src/57770748.htm" class="localvar">isfloat</a> = 0;
<a id=1553></a>  <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57770612.htm" class="localvar">op</a>;
<a id=1554></a>  if (<a href="../h_src/57787612.htm" class="function">isSCnumber</a>(<a href="../h_src/57771292.htm" class="localvar">e2</a>, &amp;<a href="../h_src/57770884.htm" class="localvar">im</a>, &amp;<a href="../h_src/57770748.htm" class="localvar">isfloat</a>)) {
<a id=1555></a>    <a  class="comments">/* use immediate operand */</a>
<a id=1556></a>    <a href="../h_src/57771156.htm" class="localvar">r1</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57771700.htm" class="localvar">fs</a>, <a href="../h_src/57771428.htm" class="localvar">e1</a>);
<a id=1557></a>    <a href="../h_src/57771020.htm" class="localvar">r2</a> = <a href="../h_src/57770884.htm" class="localvar">im</a>;
<a id=1558></a>    <a href="../h_src/57770612.htm" class="localvar">op</a> = <a href="../h_src/57784620.htm" class="function">binopr2op</a>(<a href="../h_src/57771564.htm" class="localvar">opr</a>, <a href="../h_src/57673264.htm" class="variable">OPR_LT</a>, <a href="../h_src/57686320.htm" class="variable">OP_LTI</a>);
  }
<a id=1560></a>  else if (<a href="../h_src/57787612.htm" class="function">isSCnumber</a>(<a href="../h_src/57771428.htm" class="localvar">e1</a>, &amp;<a href="../h_src/57770884.htm" class="localvar">im</a>, &amp;<a href="../h_src/57770748.htm" class="localvar">isfloat</a>)) {
<a id=1561></a>    <a  class="comments">/* transform (A &lt; B) to (B &gt; A) and (A &lt;= B) to (B &gt;= A) */</a>
<a id=1562></a>    <a href="../h_src/57771156.htm" class="localvar">r1</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57771700.htm" class="localvar">fs</a>, <a href="../h_src/57771292.htm" class="localvar">e2</a>);
<a id=1563></a>    <a href="../h_src/57771020.htm" class="localvar">r2</a> = <a href="../h_src/57770884.htm" class="localvar">im</a>;
<a id=1564></a>    <a href="../h_src/57770612.htm" class="localvar">op</a> = <a href="../h_src/57784620.htm" class="function">binopr2op</a>(<a href="../h_src/57771564.htm" class="localvar">opr</a>, <a href="../h_src/57673264.htm" class="variable">OPR_LT</a>, <a href="../h_src/57686184.htm" class="variable">OP_GTI</a>);
  }
<a id=1566></a>  else {  <a  class="comments">/* regular case, compare two registers */</a>
<a id=1567></a>    <a href="../h_src/57771156.htm" class="localvar">r1</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57771700.htm" class="localvar">fs</a>, <a href="../h_src/57771428.htm" class="localvar">e1</a>);
<a id=1568></a>    <a href="../h_src/57771020.htm" class="localvar">r2</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57771700.htm" class="localvar">fs</a>, <a href="../h_src/57771292.htm" class="localvar">e2</a>);
<a id=1569></a>    <a href="../h_src/57770612.htm" class="localvar">op</a> = <a href="../h_src/57784620.htm" class="function">binopr2op</a>(<a href="../h_src/57771564.htm" class="localvar">opr</a>, <a href="../h_src/57673264.htm" class="variable">OPR_LT</a>, <a href="../h_src/57686592.htm" class="variable">OP_LT</a>);
  }
<a id=1571></a>  <a href="../h_src/57809304.htm" class="function">freeexps</a>(<a href="../h_src/57771700.htm" class="localvar">fs</a>, <a href="../h_src/57771428.htm" class="localvar">e1</a>, <a href="../h_src/57771292.htm" class="localvar">e2</a>);
<a id=1572></a>  <a href="../h_src/57771428.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57661908.htm" class="function">condjump</a>(<a href="../h_src/57771700.htm" class="localvar">fs</a>, <a href="../h_src/57770612.htm" class="localvar">op</a>, <a href="../h_src/57771156.htm" class="localvar">r1</a>, <a href="../h_src/57771020.htm" class="localvar">r2</a>, <a href="../h_src/57770748.htm" class="localvar">isfloat</a>, 1);
<a id=1573></a>  <a href="../h_src/57771428.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681628.htm" class="variable">VJMP</a>;
}


<a id=1577></a><a  class="comments">/*</a>
<a id=1578></a><a  class="comments">** Emit code for equality comparisons ('==', '~=').</a>
<a id=1579></a><a  class="comments">** 'e1' was already put as RK by 'luaK_infix'.</a>
<a id=1580></a><a  class="comments">*/</a>
<a id=1581></a>static void <a href="../h_src/57770476.htm" class="function">codeeq</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57770340.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57770204.htm" class="localvar">opr</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57770068.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57769932.htm" class="localvar">e2</a>) {
<a id=1582></a>  int <a href="../h_src/57769796.htm" class="localvar">r1</a>, <a href="../h_src/57769660.htm" class="localvar">r2</a>;
<a id=1583></a>  int <a href="../h_src/57769524.htm" class="localvar">im</a>;
<a id=1584></a>  int <a href="../h_src/57769388.htm" class="localvar">isfloat</a> = 0;  <a  class="comments">/* not needed here, but kept for symmetry */</a>
<a id=1585></a>  <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57769252.htm" class="localvar">op</a>;
<a id=1586></a>  if (<a href="../h_src/57770068.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> != <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>) {
<a id=1587></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e1-&gt;k == VK || e1-&gt;k == VKINT || e1-&gt;k == VKFLT);
<a id=1588></a>    <a href="../h_src/57776188.htm" class="function">swapexps</a>(<a href="../h_src/57770068.htm" class="localvar">e1</a>, <a href="../h_src/57769932.htm" class="localvar">e2</a>);
  }
<a id=1590></a>  <a href="../h_src/57769796.htm" class="localvar">r1</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57770340.htm" class="localvar">fs</a>, <a href="../h_src/57770068.htm" class="localvar">e1</a>);  <a  class="comments">/* 1st expression must be in register */</a>
<a id=1591></a>  if (<a href="../h_src/57787612.htm" class="function">isSCnumber</a>(<a href="../h_src/57769932.htm" class="localvar">e2</a>, &amp;<a href="../h_src/57769524.htm" class="localvar">im</a>, &amp;<a href="../h_src/57769388.htm" class="localvar">isfloat</a>)) {
<a id=1592></a>    <a href="../h_src/57769252.htm" class="localvar">op</a> = <a href="../h_src/57686388.htm" class="variable">OP_EQI</a>;
<a id=1593></a>    <a href="../h_src/57769660.htm" class="localvar">r2</a> = <a href="../h_src/57769524.htm" class="localvar">im</a>;  <a  class="comments">/* immediate operand */</a>
  }
<a id=1595></a>  else if (<a href="../h_src/57670136.htm" class="function">luaK_exp2RK</a>(<a href="../h_src/57770340.htm" class="localvar">fs</a>, <a href="../h_src/57769932.htm" class="localvar">e2</a>)) {  <a  class="comments">/* 2nd expression is constant? */</a>
<a id=1596></a>    <a href="../h_src/57769252.htm" class="localvar">op</a> = <a href="../h_src/57686456.htm" class="variable">OP_EQK</a>;
<a id=1597></a>    <a href="../h_src/57769660.htm" class="localvar">r2</a> = <a href="../h_src/57769932.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* constant index */</a>
  }
  else {
<a id=1600></a>    <a href="../h_src/57769252.htm" class="localvar">op</a> = <a href="../h_src/57686660.htm" class="variable">OP_EQ</a>;  <a  class="comments">/* will compare two registers */</a>
<a id=1601></a>    <a href="../h_src/57769660.htm" class="localvar">r2</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57770340.htm" class="localvar">fs</a>, <a href="../h_src/57769932.htm" class="localvar">e2</a>);
  }
<a id=1603></a>  <a href="../h_src/57809304.htm" class="function">freeexps</a>(<a href="../h_src/57770340.htm" class="localvar">fs</a>, <a href="../h_src/57770068.htm" class="localvar">e1</a>, <a href="../h_src/57769932.htm" class="localvar">e2</a>);
<a id=1604></a>  <a href="../h_src/57770068.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/57661908.htm" class="function">condjump</a>(<a href="../h_src/57770340.htm" class="localvar">fs</a>, <a href="../h_src/57769252.htm" class="localvar">op</a>, <a href="../h_src/57769796.htm" class="localvar">r1</a>, <a href="../h_src/57769660.htm" class="localvar">r2</a>, <a href="../h_src/57769388.htm" class="localvar">isfloat</a>, (<a href="../h_src/57770204.htm" class="localvar">opr</a> == <a href="../h_src/57673332.htm" class="variable">OPR_EQ</a>));
<a id=1605></a>  <a href="../h_src/57770068.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681628.htm" class="variable">VJMP</a>;
}


<a id=1609></a><a  class="comments">/*</a>
<a id=1610></a><a  class="comments">** Apply prefix operation 'op' to expression 'e'.</a>
<a id=1611></a><a  class="comments">*/</a>
<a id=1612></a>void <a href="../h_src/57669184.htm" class="function">luaK_prefix</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57769116.htm" class="localvar">fs</a>, <a href="../h_src/57671768.htm" class="type">UnOpr</a> <a href="../h_src/57768980.htm" class="localvar">opr</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57768844.htm" class="localvar">e</a>, int <a href="../h_src/57768708.htm" class="localvar">line</a>) {
<a id=1613></a>  static const <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57768572.htm" class="localvar">ef</a> = {<a href="../h_src/57682308.htm" class="variable">VKINT</a>, {0}, <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>, <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>};
<a id=1614></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57769116.htm" class="localvar">fs</a>, <a href="../h_src/57768844.htm" class="localvar">e</a>);
<a id=1615></a>  switch (<a href="../h_src/57768980.htm" class="localvar">opr</a>) {
<a id=1616></a>    case <a href="../h_src/57672244.htm" class="variable">OPR_MINUS</a>: case <a href="../h_src/57672176.htm" class="variable">OPR_BNOT</a>:  <a  class="comments">/* use 'ef' as fake 2nd operand */</a>
<a id=1617></a>      if (<a href="../h_src/57785844.htm" class="function">constfolding</a>(<a href="../h_src/57769116.htm" class="localvar">fs</a>, <a href="../h_src/57768980.htm" class="localvar">opr</a> + <a href="../h_src/57436160.htm" class="macro">LUA_OPUNM</a>, <a href="../h_src/57768844.htm" class="localvar">e</a>, &amp;<a href="../h_src/57768572.htm" class="localvar">ef</a>))
        break;
<a id=1619></a>      <a  class="comments">/* else */</a> <a  class="comments">/* FALLTHROUGH */</a>
<a id=1620></a>    case <a href="../h_src/57672040.htm" class="variable">OPR_LEN</a>:
<a id=1621></a>      <a href="../h_src/57783532.htm" class="function">codeunexpval</a>(<a href="../h_src/57769116.htm" class="localvar">fs</a>, <a href="../h_src/57784076.htm" class="function">unopr2op</a>(<a href="../h_src/57768980.htm" class="localvar">opr</a>), <a href="../h_src/57768844.htm" class="localvar">e</a>, <a href="../h_src/57768708.htm" class="localvar">line</a>);
      break;
<a id=1623></a>    case <a href="../h_src/57672108.htm" class="variable">OPR_NOT</a>: <a href="../h_src/57789244.htm" class="function">codenot</a>(<a href="../h_src/57769116.htm" class="localvar">fs</a>, <a href="../h_src/57768844.htm" class="localvar">e</a>); break;
<a id=1624></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);
  }
}


<a id=1629></a><a  class="comments">/*</a>
<a id=1630></a><a  class="comments">** Process 1st operand 'v' of binary operation 'op' before reading</a>
<a id=1631></a><a  class="comments">** 2nd operand.</a>
<a id=1632></a><a  class="comments">*/</a>
<a id=1633></a>void <a href="../h_src/57669116.htm" class="function">luaK_infix</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57768300.htm" class="localvar">op</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57768164.htm" class="localvar">v</a>) {
<a id=1634></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57768164.htm" class="localvar">v</a>);
<a id=1635></a>  switch (<a href="../h_src/57768300.htm" class="localvar">op</a>) {
<a id=1636></a>    case <a href="../h_src/57672924.htm" class="variable">OPR_AND</a>: {
<a id=1637></a>      <a href="../h_src/57669932.htm" class="function">luaK_goiftrue</a>(<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57768164.htm" class="localvar">v</a>);  <a  class="comments">/* go ahead only if 'v' is true */</a>
      break;
    }
<a id=1640></a>    case <a href="../h_src/57672856.htm" class="variable">OPR_OR</a>: {
<a id=1641></a>      <a href="../h_src/57669864.htm" class="function">luaK_goiffalse</a>(<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57768164.htm" class="localvar">v</a>);  <a  class="comments">/* go ahead only if 'v' is false */</a>
      break;
    }
<a id=1644></a>    case <a href="../h_src/57673400.htm" class="variable">OPR_CONCAT</a>: {
<a id=1645></a>      <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57768164.htm" class="localvar">v</a>);  <a  class="comments">/* operand must be on the stack */</a>
      break;
    }
<a id=1648></a>    case <a href="../h_src/57674216.htm" class="variable">OPR_ADD</a>: case <a href="../h_src/57674148.htm" class="variable">OPR_SUB</a>:
<a id=1649></a>    case <a href="../h_src/57674080.htm" class="variable">OPR_MUL</a>: case <a href="../h_src/57673876.htm" class="variable">OPR_DIV</a>: case <a href="../h_src/57673808.htm" class="variable">OPR_IDIV</a>:
<a id=1650></a>    case <a href="../h_src/57674012.htm" class="variable">OPR_MOD</a>: case <a href="../h_src/57673944.htm" class="variable">OPR_POW</a>:
<a id=1651></a>    case <a href="../h_src/57673740.htm" class="variable">OPR_BAND</a>: case <a href="../h_src/57673672.htm" class="variable">OPR_BOR</a>: case <a href="../h_src/57673604.htm" class="variable">OPR_BXOR</a>:
<a id=1652></a>    case <a href="../h_src/57673536.htm" class="variable">OPR_SHL</a>: case <a href="../h_src/57673468.htm" class="variable">OPR_SHR</a>: {
<a id=1653></a>      if (!<a href="../h_src/57668028.htm" class="function">tonumeral</a>(<a href="../h_src/57768164.htm" class="localvar">v</a>, NULL))
<a id=1654></a>        <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57768164.htm" class="localvar">v</a>);
<a id=1655></a>      <a  class="comments">/* else keep numeral, which may be folded or used as an immediate</a>
<a id=1656></a><a  class="comments">         operand */</a>
      break;
    }
<a id=1659></a>    case <a href="../h_src/57673332.htm" class="variable">OPR_EQ</a>: case <a href="../h_src/57673128.htm" class="variable">OPR_NE</a>: {
<a id=1660></a>      if (!<a href="../h_src/57668028.htm" class="function">tonumeral</a>(<a href="../h_src/57768164.htm" class="localvar">v</a>, NULL))
<a id=1661></a>        <a href="../h_src/57670136.htm" class="function">luaK_exp2RK</a>(<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57768164.htm" class="localvar">v</a>);
<a id=1662></a>      <a  class="comments">/* else keep numeral, which may be an immediate operand */</a>
      break;
    }
<a id=1665></a>    case <a href="../h_src/57673264.htm" class="variable">OPR_LT</a>: case <a href="../h_src/57673196.htm" class="variable">OPR_LE</a>:
<a id=1666></a>    case <a href="../h_src/57673060.htm" class="variable">OPR_GT</a>: case <a href="../h_src/57672992.htm" class="variable">OPR_GE</a>: {
<a id=1667></a>      int <a href="../h_src/57768028.htm" class="localvar">dummy</a>, <a href="../h_src/57767892.htm" class="localvar">dummy2</a>;
<a id=1668></a>      if (!<a href="../h_src/57787612.htm" class="function">isSCnumber</a>(<a href="../h_src/57768164.htm" class="localvar">v</a>, &amp;<a href="../h_src/57768028.htm" class="localvar">dummy</a>, &amp;<a href="../h_src/57767892.htm" class="localvar">dummy2</a>))
<a id=1669></a>        <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57768436.htm" class="localvar">fs</a>, <a href="../h_src/57768164.htm" class="localvar">v</a>);
<a id=1670></a>      <a  class="comments">/* else keep numeral, which may be an immediate operand */</a>
      break;
    }
<a id=1673></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);
  }
}

<a id=1677></a><a  class="comments">/*</a>
<a id=1678></a><a  class="comments">** Create code for '(e1 .. e2)'.</a>
<a id=1679></a><a  class="comments">** For '(e1 .. e2.1 .. e2.2)' (which is '(e1 .. (e2.1 .. e2.2))',</a>
<a id=1680></a><a  class="comments">** because concatenation is right associative), merge both CONCATs.</a>
<a id=1681></a><a  class="comments">*/</a>
<a id=1682></a>static void <a href="../h_src/57767756.htm" class="function">codeconcat</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57767620.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57767484.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57767348.htm" class="localvar">e2</a>, int <a href="../h_src/57767212.htm" class="localvar">line</a>) {
<a id=1683></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57767076.htm" class="localvar">ie2</a> = <a href="../h_src/57665988.htm" class="function">previousinstruction</a>(<a href="../h_src/57767620.htm" class="localvar">fs</a>);
<a id=1684></a>  if (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*<a href="../h_src/57767076.htm" class="localvar">ie2</a>) == <a href="../h_src/57686932.htm" class="variable">OP_CONCAT</a>) {  <a  class="comments">/* is 'e2' a concatenation? */</a>
<a id=1685></a>    int <a href="../h_src/57766940.htm" class="localvar">n</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(*<a href="../h_src/57767076.htm" class="localvar">ie2</a>);  <a  class="comments">/* # of elements concatenated in 'e2' */</a>
<a id=1686></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e1-&gt;u.info + 1 == <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(*ie2));
<a id=1687></a>    <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57767620.htm" class="localvar">fs</a>, <a href="../h_src/57767348.htm" class="localvar">e2</a>);
<a id=1688></a>    <a href="../h_src/57693936.htm" class="macro">SETARG_A</a>(*<a href="../h_src/57767076.htm" class="localvar">ie2</a>, <a href="../h_src/57767484.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>);  <a  class="comments">/* correct first element ('e1') */</a>
<a id=1689></a>    <a href="../h_src/57693528.htm" class="macro">SETARG_B</a>(*<a href="../h_src/57767076.htm" class="localvar">ie2</a>, <a href="../h_src/57766940.htm" class="localvar">n</a> + 1);  <a  class="comments">/* will concatenate one more element */</a>
  }
<a id=1691></a>  else {  <a  class="comments">/* 'e2' is not a concatenation */</a>
<a id=1692></a>    <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57767620.htm" class="localvar">fs</a>, <a href="../h_src/57686932.htm" class="variable">OP_CONCAT</a>, <a href="../h_src/57767484.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, 2, 0);  <a  class="comments">/* new concat opcode */</a>
<a id=1693></a>    <a href="../h_src/57809712.htm" class="function">freeexp</a>(<a href="../h_src/57767620.htm" class="localvar">fs</a>, <a href="../h_src/57767348.htm" class="localvar">e2</a>);
<a id=1694></a>    <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/57767620.htm" class="localvar">fs</a>, <a href="../h_src/57767212.htm" class="localvar">line</a>);
  }
}


<a id=1699></a><a  class="comments">/*</a>
<a id=1700></a><a  class="comments">** Finalize code for binary operation, after reading 2nd operand.</a>
<a id=1701></a><a  class="comments">*/</a>
<a id=1702></a>void <a href="../h_src/57669048.htm" class="function">luaK_posfix</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/57766668.htm" class="localvar">opr</a>,
<a id=1703></a>                  <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57766396.htm" class="localvar">e2</a>, int <a href="../h_src/57766260.htm" class="localvar">line</a>) {
<a id=1704></a>  <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>);
<a id=1705></a>  if (<a href="../h_src/57672516.htm" class="macro">foldbinop</a>(<a href="../h_src/57766668.htm" class="localvar">opr</a>) &amp;&amp; <a href="../h_src/57785844.htm" class="function">constfolding</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a> + <a href="../h_src/57437792.htm" class="macro">LUA_OPADD</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>))
<a id=1706></a>    return;  <a  class="comments">/* done by folding */</a>
<a id=1707></a>  switch (<a href="../h_src/57766668.htm" class="localvar">opr</a>) {
<a id=1708></a>    case <a href="../h_src/57672924.htm" class="variable">OPR_AND</a>: {
<a id=1709></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e1-&gt;t == <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>);  <a  class="comments">/* list closed by 'luaK_infix' */</a>
<a id=1710></a>      <a href="../h_src/57669320.htm" class="function">luaK_concat</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57766396.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a>);
<a id=1711></a>      *<a href="../h_src/57766532.htm" class="localvar">e1</a> = *<a href="../h_src/57766396.htm" class="localvar">e2</a>;
      break;
    }
<a id=1714></a>    case <a href="../h_src/57672856.htm" class="variable">OPR_OR</a>: {
<a id=1715></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e1-&gt;f == <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>);  <a  class="comments">/* list closed by 'luaK_infix' */</a>
<a id=1716></a>      <a href="../h_src/57669320.htm" class="function">luaK_concat</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57766396.htm" class="localvar">e2</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a>);
<a id=1717></a>      *<a href="../h_src/57766532.htm" class="localvar">e1</a> = *<a href="../h_src/57766396.htm" class="localvar">e2</a>;
      break;
    }
<a id=1720></a>    case <a href="../h_src/57673400.htm" class="variable">OPR_CONCAT</a>: {  <a  class="comments">/* e1 .. e2 */</a>
<a id=1721></a>      <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>);
<a id=1722></a>      <a href="../h_src/57767756.htm" class="function">codeconcat</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, <a href="../h_src/57766260.htm" class="localvar">line</a>);
      break;
    }
<a id=1725></a>    case <a href="../h_src/57674216.htm" class="variable">OPR_ADD</a>: case <a href="../h_src/57674080.htm" class="variable">OPR_MUL</a>: {
<a id=1726></a>      <a href="../h_src/57773740.htm" class="function">codecommutative</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, <a href="../h_src/57766260.htm" class="localvar">line</a>);
      break;
    }
<a id=1729></a>    case <a href="../h_src/57674148.htm" class="variable">OPR_SUB</a>: {
<a id=1730></a>      if (<a href="../h_src/57777412.htm" class="function">finishbinexpneg</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, <a href="../h_src/57689108.htm" class="variable">OP_ADDI</a>, <a href="../h_src/57766260.htm" class="localvar">line</a>, <a href="../h_src/57500432.htm" class="variable">TM_SUB</a>))
<a id=1731></a>        break; <a  class="comments">/* coded as (r1 + -I) */</a>
<a id=1732></a>      <a  class="comments">/* ELSE */</a>
<a id=1733></a>    }  <a  class="comments">/* FALLTHROUGH */</a>
<a id=1734></a>    case <a href="../h_src/57673876.htm" class="variable">OPR_DIV</a>: case <a href="../h_src/57673808.htm" class="variable">OPR_IDIV</a>: case <a href="../h_src/57674012.htm" class="variable">OPR_MOD</a>: case <a href="../h_src/57673944.htm" class="variable">OPR_POW</a>: {
<a id=1735></a>      <a href="../h_src/57774692.htm" class="function">codearith</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, 0, <a href="../h_src/57766260.htm" class="localvar">line</a>);
      break;
    }
<a id=1738></a>    case <a href="../h_src/57673740.htm" class="variable">OPR_BAND</a>: case <a href="../h_src/57673672.htm" class="variable">OPR_BOR</a>: case <a href="../h_src/57673604.htm" class="variable">OPR_BXOR</a>: {
<a id=1739></a>      <a href="../h_src/57772788.htm" class="function">codebitwise</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, <a href="../h_src/57766260.htm" class="localvar">line</a>);
      break;
    }
<a id=1742></a>    case <a href="../h_src/57673536.htm" class="variable">OPR_SHL</a>: {
<a id=1743></a>      if (<a href="../h_src/57787884.htm" class="function">isSCint</a>(<a href="../h_src/57766532.htm" class="localvar">e1</a>)) {
<a id=1744></a>        <a href="../h_src/57776188.htm" class="function">swapexps</a>(<a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>);
<a id=1745></a>        <a href="../h_src/57779996.htm" class="function">codebini</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57688292.htm" class="variable">OP_SHLI</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, 1, <a href="../h_src/57766260.htm" class="localvar">line</a>, <a href="../h_src/57499820.htm" class="variable">TM_SHL</a>);  <a  class="comments">/* I &lt;&lt; r2 */</a>
      }
<a id=1747></a>      else if (<a href="../h_src/57777412.htm" class="function">finishbinexpneg</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, <a href="../h_src/57688360.htm" class="variable">OP_SHRI</a>, <a href="../h_src/57766260.htm" class="localvar">line</a>, <a href="../h_src/57499820.htm" class="variable">TM_SHL</a>)) {
<a id=1748></a>        <a  class="comments">/* coded as (r1 &gt;&gt; -I) */</a>;
      }
<a id=1750></a>      else  <a  class="comments">/* regular case (two registers) */</a>
<a id=1751></a>       <a href="../h_src/57781084.htm" class="function">codebinexpval</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, <a href="../h_src/57766260.htm" class="localvar">line</a>);
      break;
    }
<a id=1754></a>    case <a href="../h_src/57673468.htm" class="variable">OPR_SHR</a>: {
<a id=1755></a>      if (<a href="../h_src/57787884.htm" class="function">isSCint</a>(<a href="../h_src/57766396.htm" class="localvar">e2</a>))
<a id=1756></a>        <a href="../h_src/57779996.htm" class="function">codebini</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57688360.htm" class="variable">OP_SHRI</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, 0, <a href="../h_src/57766260.htm" class="localvar">line</a>, <a href="../h_src/57499752.htm" class="variable">TM_SHR</a>);  <a  class="comments">/* r1 &gt;&gt; I */</a>
<a id=1757></a>      else  <a  class="comments">/* regular case (two registers) */</a>
<a id=1758></a>        <a href="../h_src/57781084.htm" class="function">codebinexpval</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>, <a href="../h_src/57766260.htm" class="localvar">line</a>);
      break;
    }
<a id=1761></a>    case <a href="../h_src/57673332.htm" class="variable">OPR_EQ</a>: case <a href="../h_src/57673128.htm" class="variable">OPR_NE</a>: {
<a id=1762></a>      <a href="../h_src/57770476.htm" class="function">codeeq</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>);
      break;
    }
<a id=1765></a>    case <a href="../h_src/57673060.htm" class="variable">OPR_GT</a>: case <a href="../h_src/57672992.htm" class="variable">OPR_GE</a>: {
<a id=1766></a>      <a  class="comments">/* '(a &gt; b)' &lt;=&gt; '(b &lt; a)';  '(a &gt;= b)' &lt;=&gt; '(b &lt;= a)' */</a>
<a id=1767></a>      <a href="../h_src/57776188.htm" class="function">swapexps</a>(<a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>);
<a id=1768></a>      <a href="../h_src/57766668.htm" class="localvar">opr</a> = <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57672584.htm" class="type">BinOpr</a>, (<a href="../h_src/57766668.htm" class="localvar">opr</a> - <a href="../h_src/57673060.htm" class="variable">OPR_GT</a>) + <a href="../h_src/57673264.htm" class="variable">OPR_LT</a>);
<a id=1769></a>    }  <a  class="comments">/* FALLTHROUGH */</a>
<a id=1770></a>    case <a href="../h_src/57673264.htm" class="variable">OPR_LT</a>: case <a href="../h_src/57673196.htm" class="variable">OPR_LE</a>: {
<a id=1771></a>      <a href="../h_src/57771836.htm" class="function">codeorder</a>(<a href="../h_src/57766804.htm" class="localvar">fs</a>, <a href="../h_src/57766668.htm" class="localvar">opr</a>, <a href="../h_src/57766532.htm" class="localvar">e1</a>, <a href="../h_src/57766396.htm" class="localvar">e2</a>);
      break;
    }
<a id=1774></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);
  }
}


<a id=1779></a><a  class="comments">/*</a>
<a id=1780></a><a  class="comments">** Change line information associated with current position, by removing</a>
<a id=1781></a><a  class="comments">** previous info and adding it again with new line.</a>
<a id=1782></a><a  class="comments">*/</a>
<a id=1783></a>void <a href="../h_src/57670816.htm" class="function">luaK_fixline</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57766124.htm" class="localvar">fs</a>, int <a href="../h_src/57765988.htm" class="localvar">line</a>) {
<a id=1784></a>  <a href="../h_src/57816376.htm" class="function">removelastlineinfo</a>(<a href="../h_src/57766124.htm" class="localvar">fs</a>);
<a id=1785></a>  <a href="../h_src/57817260.htm" class="function">savelineinfo</a>(<a href="../h_src/57766124.htm" class="localvar">fs</a>, <a href="../h_src/57766124.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>, <a href="../h_src/57765988.htm" class="localvar">line</a>);
}


<a id=1789></a>void <a href="../h_src/57668980.htm" class="function">luaK_settablesize</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57765852.htm" class="localvar">fs</a>, int <a href="../h_src/57765716.htm" class="localvar">pc</a>, int <a href="../h_src/57765580.htm" class="localvar">ra</a>, int <a href="../h_src/57765444.htm" class="localvar">asize</a>, int <a href="../h_src/57765308.htm" class="localvar">hsize</a>) {
<a id=1790></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57765172.htm" class="localvar">inst</a> = &amp;<a href="../h_src/57765852.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57765716.htm" class="localvar">pc</a>];
<a id=1791></a>  int <a href="../h_src/57765036.htm" class="localvar">rb</a> = (<a href="../h_src/57765308.htm" class="localvar">hsize</a> != 0) ? <a href="../h_src/57501860.htm" class="function">luaO_ceillog2</a>(<a href="../h_src/57765308.htm" class="localvar">hsize</a>) + 1 : 0;  <a  class="comments">/* hash size */</a>
<a id=1792></a>  int <a href="../h_src/57764900.htm" class="localvar">extra</a> = <a href="../h_src/57765444.htm" class="localvar">asize</a> / (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);  <a  class="comments">/* higher bits of array size */</a>
<a id=1793></a>  int <a href="../h_src/57764764.htm" class="localvar">rc</a> = <a href="../h_src/57765444.htm" class="localvar">asize</a> % (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);  <a  class="comments">/* lower bits of array size */</a>
<a id=1794></a>  int <a href="../h_src/57764628.htm" class="localvar">k</a> = (<a href="../h_src/57764900.htm" class="localvar">extra</a> &gt; 0);  <a  class="comments">/* true iff needs extra argument */</a>
<a id=1795></a>  *<a href="../h_src/57765172.htm" class="localvar">inst</a> = <a href="../h_src/57691488.htm" class="macro">CREATE_ABCk</a>(<a href="../h_src/57689244.htm" class="variable">OP_NEWTABLE</a>, <a href="../h_src/57765580.htm" class="localvar">ra</a>, <a href="../h_src/57765036.htm" class="localvar">rb</a>, <a href="../h_src/57764764.htm" class="localvar">rc</a>, <a href="../h_src/57764628.htm" class="localvar">k</a>);
<a id=1796></a>  *(<a href="../h_src/57765172.htm" class="localvar">inst</a> + 1) = <a href="../h_src/57691216.htm" class="macro">CREATE_Ax</a>(<a href="../h_src/57684960.htm" class="variable">OP_EXTRAARG</a>, <a href="../h_src/57764900.htm" class="localvar">extra</a>);
}


<a id=1800></a><a  class="comments">/*</a>
<a id=1801></a><a  class="comments">** Emit a SETLIST instruction.</a>
<a id=1802></a><a  class="comments">** 'base' is register that keeps table;</a>
<a id=1803></a><a  class="comments">** 'nelems' is #table plus those to be stored now;</a>
<a id=1804></a><a  class="comments">** 'tostore' is number of values (in registers 'base + 1',...) to add to</a>
<a id=1805></a><a  class="comments">** table (or LUA_MULTRET to add up to stack top).</a>
<a id=1806></a><a  class="comments">*/</a>
<a id=1807></a>void <a href="../h_src/57668912.htm" class="function">luaK_setlist</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57764492.htm" class="localvar">fs</a>, int <a href="../h_src/57764356.htm" class="localvar">base</a>, int <a href="../h_src/57764220.htm" class="localvar">nelems</a>, int <a href="../h_src/57764084.htm" class="localvar">tostore</a>) {
<a id=1808></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(tostore != 0 &amp;&amp; tostore &lt;= <a href="../h_src/57683192.htm" class="macro">LFIELDS_PER_FLUSH</a>);
<a id=1809></a>  if (<a href="../h_src/57764084.htm" class="localvar">tostore</a> == <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>)
<a id=1810></a>    <a href="../h_src/57764084.htm" class="localvar">tostore</a> = 0;
<a id=1811></a>  if (<a href="../h_src/57764220.htm" class="localvar">nelems</a> &lt;= <a href="../h_src/57695568.htm" class="macro">MAXARG_C</a>)
<a id=1812></a>    <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57764492.htm" class="localvar">fs</a>, <a href="../h_src/57685232.htm" class="variable">OP_SETLIST</a>, <a href="../h_src/57764356.htm" class="localvar">base</a>, <a href="../h_src/57764084.htm" class="localvar">tostore</a>, <a href="../h_src/57764220.htm" class="localvar">nelems</a>);
  else {
<a id=1814></a>    int <a href="../h_src/57763948.htm" class="localvar">extra</a> = <a href="../h_src/57764220.htm" class="localvar">nelems</a> / (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);
<a id=1815></a>    <a href="../h_src/57764220.htm" class="localvar">nelems</a> %= (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);
<a id=1816></a>    <a href="../h_src/57671088.htm" class="function">luaK_codeABCk</a>(<a href="../h_src/57764492.htm" class="localvar">fs</a>, <a href="../h_src/57685232.htm" class="variable">OP_SETLIST</a>, <a href="../h_src/57764356.htm" class="localvar">base</a>, <a href="../h_src/57764084.htm" class="localvar">tostore</a>, <a href="../h_src/57764220.htm" class="localvar">nelems</a>, 1);
<a id=1817></a>    <a href="../h_src/57812432.htm" class="function">codeextraarg</a>(<a href="../h_src/57764492.htm" class="localvar">fs</a>, <a href="../h_src/57763948.htm" class="localvar">extra</a>);
  }
<a id=1819></a>  <a href="../h_src/57764492.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> = <a href="../h_src/57764356.htm" class="localvar">base</a> + 1;  <a  class="comments">/* free registers with list values */</a>
}


<a id=1823></a><a  class="comments">/*</a>
<a id=1824></a><a  class="comments">** return the final target of a jump (skipping jumps to jumps)</a>
<a id=1825></a><a  class="comments">*/</a>
<a id=1826></a>static int <a href="../h_src/57763812.htm" class="function">finaltarget</a> (<a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57763676.htm" class="localvar">code</a>, int <a href="../h_src/57763540.htm" class="localvar">i</a>) {
<a id=1827></a>  int <a href="../h_src/57763404.htm" class="localvar">count</a>;
<a id=1828></a>  for (<a href="../h_src/57763404.htm" class="localvar">count</a> = 0; <a href="../h_src/57763404.htm" class="localvar">count</a> &lt; 100; <a href="../h_src/57763404.htm" class="localvar">count</a>++) {  <a  class="comments">/* avoid infinite loops */</a>
<a id=1829></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57763268.htm" class="localvar">pc</a> = <a href="../h_src/57763676.htm" class="localvar">code</a>[<a href="../h_src/57763540.htm" class="localvar">i</a>];
<a id=1830></a>    if (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/57763268.htm" class="localvar">pc</a>) != <a href="../h_src/57686728.htm" class="variable">OP_JMP</a>)
      break;
     else
<a id=1833></a>       <a href="../h_src/57763540.htm" class="localvar">i</a> += <a href="../h_src/57691760.htm" class="macro">GETARG_sJ</a>(<a href="../h_src/57763268.htm" class="localvar">pc</a>) + 1;
  }
<a id=1835></a>  return <a href="../h_src/57763540.htm" class="localvar">i</a>;
}


<a id=1839></a><a  class="comments">/*</a>
<a id=1840></a><a  class="comments">** Do a final pass over the code of a function, doing small peephole</a>
<a id=1841></a><a  class="comments">** optimizations and adjustments.</a>
<a id=1842></a><a  class="comments">*/</a>
<a id=1843></a>void <a href="../h_src/57668844.htm" class="function">luaK_finish</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57763132.htm" class="localvar">fs</a>) {
<a id=1844></a>  int <a href="../h_src/57762996.htm" class="localvar">i</a>;
<a id=1845></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57762860.htm" class="localvar">p</a> = <a href="../h_src/57763132.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=1846></a>  for (<a href="../h_src/57762996.htm" class="localvar">i</a> = 0; <a href="../h_src/57762996.htm" class="localvar">i</a> &lt; <a href="../h_src/57763132.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>; <a href="../h_src/57762996.htm" class="localvar">i</a>++) {
<a id=1847></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57762724.htm" class="localvar">pc</a> = &amp;<a href="../h_src/57762860.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57762996.htm" class="localvar">i</a>];
<a id=1848></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(i == 0 || <a href="../h_src/57683600.htm" class="macro">isOT</a>(*(pc - 1)) == <a href="../h_src/57683464.htm" class="macro">isIT</a>(*pc));
<a id=1849></a>    switch (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*<a href="../h_src/57762724.htm" class="localvar">pc</a>)) {
<a id=1850></a>      case <a href="../h_src/57685708.htm" class="variable">OP_RETURN0</a>: case <a href="../h_src/57685640.htm" class="variable">OP_RETURN1</a>: {
<a id=1851></a>        if (!(<a href="../h_src/57763132.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674624.htm" class="variable">needclose</a> || <a href="../h_src/57762860.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>))
<a id=1852></a>          break;  <a  class="comments">/* no extra work */</a>
<a id=1853></a>        <a  class="comments">/* else use OP_RETURN to do the extra work */</a>
<a id=1854></a>        <a href="../h_src/57694616.htm" class="macro">SET_OPCODE</a>(*<a href="../h_src/57762724.htm" class="localvar">pc</a>, <a href="../h_src/57685776.htm" class="variable">OP_RETURN</a>);
<a id=1855></a>      }  <a  class="comments">/* FALLTHROUGH */</a>
<a id=1856></a>      case <a href="../h_src/57685776.htm" class="variable">OP_RETURN</a>: case <a href="../h_src/57685844.htm" class="variable">OP_TAILCALL</a>: {
<a id=1857></a>        if (<a href="../h_src/57763132.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674624.htm" class="variable">needclose</a>)
<a id=1858></a>          <a href="../h_src/57692712.htm" class="macro">SETARG_k</a>(*<a href="../h_src/57762724.htm" class="localvar">pc</a>, 1);  <a  class="comments">/* signal that it needs to close */</a>
<a id=1859></a>        if (<a href="../h_src/57762860.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>)
<a id=1860></a>          <a href="../h_src/57693120.htm" class="macro">SETARG_C</a>(*<a href="../h_src/57762724.htm" class="localvar">pc</a>, <a href="../h_src/57762860.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a> + 1);  <a  class="comments">/* signal that it is vararg */</a>
        break;
      }
<a id=1863></a>      case <a href="../h_src/57686728.htm" class="variable">OP_JMP</a>: {
<a id=1864></a>        int <a href="../h_src/57762588.htm" class="localvar">target</a> = <a href="../h_src/57763812.htm" class="function">finaltarget</a>(<a href="../h_src/57762860.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>, <a href="../h_src/57762996.htm" class="localvar">i</a>);
<a id=1865></a>        <a href="../h_src/57664084.htm" class="function">fixjump</a>(<a href="../h_src/57763132.htm" class="localvar">fs</a>, <a href="../h_src/57762996.htm" class="localvar">i</a>, <a href="../h_src/57762588.htm" class="localvar">target</a>);
        break;
      }
      default: break;
    }
  }
}
</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

