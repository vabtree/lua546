<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lstrlib.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/143344164.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/143344164.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/143344164.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/143344164.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/143344164.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/143344164.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/143344164.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/143344164.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/143344164.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lstrlib.c $</a>
<a id=3></a><a  class="comments">** Standard library for string operations and pattern-matching</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/143344096.htm" class="macro">lstrlib_c</a>
<a id=8></a>#define <a href="../h_src/143343960.htm" class="macro">LUA_LIB</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;ctype.h&gt;
#include &lt;float.h&gt;
#include &lt;limits.h&gt;
#include &lt;locale.h&gt;
#include &lt;math.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

<a id=23></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=25></a>#include &quot;<a href="../h_src/57422356.htm" class="file">lauxlib.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57410932.htm" class="file">lualib.h</a>&quot;


<a id=29></a><a  class="comments">/*</a>
<a id=30></a><a  class="comments">** maximum number of captures that a pattern can do during</a>
<a id=31></a><a  class="comments">** pattern-matching. This limit is arbitrary, but must fit in</a>
<a id=32></a><a  class="comments">** an unsigned char.</a>
<a id=33></a><a  class="comments">*/</a>
<a id=34></a>#if !defined(<a href="../h_src/143343824.htm" class="macro">LUA_MAXCAPTURES</a>)
<a id=35></a>#define <a href="../h_src/143343688.htm" class="macro">LUA_MAXCAPTURES</a>		32
#endif


<a id=39></a><a  class="comments">/* macro to 'unsign' a character */</a>
<a id=40></a>#define <a href="../h_src/143343552.htm" class="macro">uchar</a>(c)	((unsigned char)(c))


<a id=43></a><a  class="comments">/*</a>
<a id=44></a><a  class="comments">** Some sizes are better limited to fit in 'int', but must also fit in</a>
<a id=45></a><a  class="comments">** 'size_t'. (We assume that 'lua_Integer' cannot be smaller than 'int'.)</a>
<a id=46></a><a  class="comments">*/</a>
<a id=47></a>#define <a href="../h_src/143343416.htm" class="macro">MAX_SIZET</a>	((size_t)(~(size_t)0))

<a id=49></a>#define <a href="../h_src/143343280.htm" class="macro">MAXSIZE</a>  \
	(sizeof(size_t) &lt; sizeof(int) ? MAX_SIZET : (size_t)(INT_MAX))




<a id=55></a>static int <a href="../h_src/143343144.htm" class="function">str_len</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143343008.htm" class="localvar">L</a>) {
<a id=56></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143342872.htm" class="localvar">l</a>;
<a id=57></a>  <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143343008.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143342872.htm" class="localvar">l</a>);
<a id=58></a>  <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143343008.htm" class="localvar">L</a>, (<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)<a href="../h_src/143342872.htm" class="localvar">l</a>);
  return 1;
}


<a id=63></a><a  class="comments">/*</a>
<a id=64></a><a  class="comments">** translate a relative initial string position</a>
<a id=65></a><a  class="comments">** (negative means back from end): clip result to [1, inf).</a>
<a id=66></a><a  class="comments">** The length of any string in Lua must fit in a lua_Integer,</a>
<a id=67></a><a  class="comments">** so there are no overflows in the casts.</a>
<a id=68></a><a  class="comments">** The inverted comparison avoids a possible overflow</a>
<a id=69></a><a  class="comments">** computing '-pos'.</a>
<a id=70></a><a  class="comments">*/</a>
<a id=71></a>static <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143342736.htm" class="function">posrelatI</a> (<a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143342600.htm" class="localvar">pos</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143342464.htm" class="localvar">len</a>) {
<a id=72></a>  if (<a href="../h_src/143342600.htm" class="localvar">pos</a> &gt; 0)
<a id=73></a>    return (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143342600.htm" class="localvar">pos</a>;
<a id=74></a>  else if (<a href="../h_src/143342600.htm" class="localvar">pos</a> == 0)
    return 1;
<a id=76></a>  else if (<a href="../h_src/143342600.htm" class="localvar">pos</a> &lt; -(<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)<a href="../h_src/143342464.htm" class="localvar">len</a>)  <a  class="comments">/* inverted comparison */</a>
<a id=77></a>    return 1;  <a  class="comments">/* clip to 1 */</a>
<a id=78></a>  else return <a href="../h_src/143342464.htm" class="localvar">len</a> + (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143342600.htm" class="localvar">pos</a> + 1;
}


<a id=82></a><a  class="comments">/*</a>
<a id=83></a><a  class="comments">** Gets an optional ending string position from argument 'arg',</a>
<a id=84></a><a  class="comments">** with default value 'def'.</a>
<a id=85></a><a  class="comments">** Negative means back from end: clip result to [0, len]</a>
<a id=86></a><a  class="comments">*/</a>
<a id=87></a>static <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143342328.htm" class="function">getendpos</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143342192.htm" class="localvar">L</a>, int <a href="../h_src/143342056.htm" class="localvar">arg</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143341920.htm" class="localvar">def</a>,
<a id=88></a>                         <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143341784.htm" class="localvar">len</a>) {
<a id=89></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143341648.htm" class="localvar">pos</a> = <a href="../h_src/57419908.htm" class="function">luaL_optinteger</a>(<a href="../h_src/143342192.htm" class="localvar">L</a>, <a href="../h_src/143342056.htm" class="localvar">arg</a>, <a href="../h_src/143341920.htm" class="localvar">def</a>);
<a id=90></a>  if (<a href="../h_src/143341648.htm" class="localvar">pos</a> &gt; (<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)<a href="../h_src/143341784.htm" class="localvar">len</a>)
<a id=91></a>    return <a href="../h_src/143341784.htm" class="localvar">len</a>;
<a id=92></a>  else if (<a href="../h_src/143341648.htm" class="localvar">pos</a> &gt;= 0)
<a id=93></a>    return (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143341648.htm" class="localvar">pos</a>;
<a id=94></a>  else if (<a href="../h_src/143341648.htm" class="localvar">pos</a> &lt; -(<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)<a href="../h_src/143341784.htm" class="localvar">len</a>)
    return 0;
<a id=96></a>  else return <a href="../h_src/143341784.htm" class="localvar">len</a> + (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143341648.htm" class="localvar">pos</a> + 1;
}


<a id=100></a>static int <a href="../h_src/143341512.htm" class="function">str_sub</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143341376.htm" class="localvar">L</a>) {
<a id=101></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143341240.htm" class="localvar">l</a>;
<a id=102></a>  const char *<a href="../h_src/143341104.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143341376.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143341240.htm" class="localvar">l</a>);
<a id=103></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143340968.htm" class="localvar">start</a> = <a href="../h_src/143342736.htm" class="function">posrelatI</a>(<a href="../h_src/57419976.htm" class="function">luaL_checkinteger</a>(<a href="../h_src/143341376.htm" class="localvar">L</a>, 2), <a href="../h_src/143341240.htm" class="localvar">l</a>);
<a id=104></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143340832.htm" class="localvar">end</a> = <a href="../h_src/143342328.htm" class="function">getendpos</a>(<a href="../h_src/143341376.htm" class="localvar">L</a>, 3, -1, <a href="../h_src/143341240.htm" class="localvar">l</a>);
<a id=105></a>  if (<a href="../h_src/143340968.htm" class="localvar">start</a> &lt;= <a href="../h_src/143340832.htm" class="localvar">end</a>)
<a id=106></a>    <a href="../h_src/57435072.htm" class="function">lua_pushlstring</a>(<a href="../h_src/143341376.htm" class="localvar">L</a>, <a href="../h_src/143341104.htm" class="localvar">s</a> + <a href="../h_src/143340968.htm" class="localvar">start</a> - 1, (<a href="../h_src/143340832.htm" class="localvar">end</a> - <a href="../h_src/143340968.htm" class="localvar">start</a>) + 1);
<a id=107></a>  else <a href="../h_src/57427660.htm" class="macro">lua_pushliteral</a>(<a href="../h_src/143341376.htm" class="localvar">L</a>, &quot;&quot;);
  return 1;
}


<a id=112></a>static int <a href="../h_src/143340696.htm" class="function">str_reverse</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143340560.htm" class="localvar">L</a>) {
<a id=113></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143340424.htm" class="localvar">l</a>, <a href="../h_src/143340288.htm" class="localvar">i</a>;
<a id=114></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143340152.htm" class="localvar">b</a>;
<a id=115></a>  const char *<a href="../h_src/143340016.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143340560.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143340424.htm" class="localvar">l</a>);
<a id=116></a>  char *<a href="../h_src/143339880.htm" class="localvar">p</a> = <a href="../h_src/57413176.htm" class="function">luaL_buffinitsize</a>(<a href="../h_src/143340560.htm" class="localvar">L</a>, &amp;<a href="../h_src/143340152.htm" class="localvar">b</a>, <a href="../h_src/143340424.htm" class="localvar">l</a>);
<a id=117></a>  for (<a href="../h_src/143340288.htm" class="localvar">i</a> = 0; <a href="../h_src/143340288.htm" class="localvar">i</a> &lt; <a href="../h_src/143340424.htm" class="localvar">l</a>; <a href="../h_src/143340288.htm" class="localvar">i</a>++)
<a id=118></a>    <a href="../h_src/143339880.htm" class="localvar">p</a>[<a href="../h_src/143340288.htm" class="localvar">i</a>] = <a href="../h_src/143340016.htm" class="localvar">s</a>[<a href="../h_src/143340424.htm" class="localvar">l</a> - <a href="../h_src/143340288.htm" class="localvar">i</a> - 1];
<a id=119></a>  <a href="../h_src/57413244.htm" class="function">luaL_pushresultsize</a>(&amp;<a href="../h_src/143340152.htm" class="localvar">b</a>, <a href="../h_src/143340424.htm" class="localvar">l</a>);
  return 1;
}


<a id=124></a>static int <a href="../h_src/143339744.htm" class="function">str_lower</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143339608.htm" class="localvar">L</a>) {
<a id=125></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143339472.htm" class="localvar">l</a>;
<a id=126></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143339336.htm" class="localvar">i</a>;
<a id=127></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143339200.htm" class="localvar">b</a>;
<a id=128></a>  const char *<a href="../h_src/143339064.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143339608.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143339472.htm" class="localvar">l</a>);
<a id=129></a>  char *<a href="../h_src/143338928.htm" class="localvar">p</a> = <a href="../h_src/57413176.htm" class="function">luaL_buffinitsize</a>(<a href="../h_src/143339608.htm" class="localvar">L</a>, &amp;<a href="../h_src/143339200.htm" class="localvar">b</a>, <a href="../h_src/143339472.htm" class="localvar">l</a>);
<a id=130></a>  for (<a href="../h_src/143339336.htm" class="localvar">i</a>=0; <a href="../h_src/143339336.htm" class="localvar">i</a>&lt;<a href="../h_src/143339472.htm" class="localvar">l</a>; <a href="../h_src/143339336.htm" class="localvar">i</a>++)
<a id=131></a>    <a href="../h_src/143338928.htm" class="localvar">p</a>[<a href="../h_src/143339336.htm" class="localvar">i</a>] = <a href="../h_aa/143338792.htm" class="libfunc">tolower</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(<a href="../h_src/143339064.htm" class="localvar">s</a>[<a href="../h_src/143339336.htm" class="localvar">i</a>]));
<a id=132></a>  <a href="../h_src/57413244.htm" class="function">luaL_pushresultsize</a>(&amp;<a href="../h_src/143339200.htm" class="localvar">b</a>, <a href="../h_src/143339472.htm" class="localvar">l</a>);
  return 1;
}


<a id=137></a>static int <a href="../h_src/143338724.htm" class="function">str_upper</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143338588.htm" class="localvar">L</a>) {
<a id=138></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143338452.htm" class="localvar">l</a>;
<a id=139></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143338316.htm" class="localvar">i</a>;
<a id=140></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143338180.htm" class="localvar">b</a>;
<a id=141></a>  const char *<a href="../h_src/143338044.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143338588.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143338452.htm" class="localvar">l</a>);
<a id=142></a>  char *<a href="../h_src/143337908.htm" class="localvar">p</a> = <a href="../h_src/57413176.htm" class="function">luaL_buffinitsize</a>(<a href="../h_src/143338588.htm" class="localvar">L</a>, &amp;<a href="../h_src/143338180.htm" class="localvar">b</a>, <a href="../h_src/143338452.htm" class="localvar">l</a>);
<a id=143></a>  for (<a href="../h_src/143338316.htm" class="localvar">i</a>=0; <a href="../h_src/143338316.htm" class="localvar">i</a>&lt;<a href="../h_src/143338452.htm" class="localvar">l</a>; <a href="../h_src/143338316.htm" class="localvar">i</a>++)
<a id=144></a>    <a href="../h_src/143337908.htm" class="localvar">p</a>[<a href="../h_src/143338316.htm" class="localvar">i</a>] = <a href="../h_aa/58309704.htm" class="libfunc">toupper</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(<a href="../h_src/143338044.htm" class="localvar">s</a>[<a href="../h_src/143338316.htm" class="localvar">i</a>]));
<a id=145></a>  <a href="../h_src/57413244.htm" class="function">luaL_pushresultsize</a>(&amp;<a href="../h_src/143338180.htm" class="localvar">b</a>, <a href="../h_src/143338452.htm" class="localvar">l</a>);
  return 1;
}


<a id=150></a>static int <a href="../h_src/143337772.htm" class="function">str_rep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143337636.htm" class="localvar">L</a>) {
<a id=151></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143337500.htm" class="localvar">l</a>, <a href="../h_src/143337364.htm" class="localvar">lsep</a>;
<a id=152></a>  const char *<a href="../h_src/143337228.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143337636.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143337500.htm" class="localvar">l</a>);
<a id=153></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143337092.htm" class="localvar">n</a> = <a href="../h_src/57419976.htm" class="function">luaL_checkinteger</a>(<a href="../h_src/143337636.htm" class="localvar">L</a>, 2);
<a id=154></a>  const char *<a href="../h_src/143336956.htm" class="localvar">sep</a> = <a href="../h_src/57420180.htm" class="function">luaL_optlstring</a>(<a href="../h_src/143337636.htm" class="localvar">L</a>, 3, &quot;&quot;, &amp;<a href="../h_src/143337364.htm" class="localvar">lsep</a>);
<a id=155></a>  if (<a href="../h_src/143337092.htm" class="localvar">n</a> &lt;= 0)
<a id=156></a>    <a href="../h_src/57427660.htm" class="macro">lua_pushliteral</a>(<a href="../h_src/143337636.htm" class="localvar">L</a>, &quot;&quot;);
<a id=157></a>  else if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143337500.htm" class="localvar">l</a> + <a href="../h_src/143337364.htm" class="localvar">lsep</a> &lt; <a href="../h_src/143337500.htm" class="localvar">l</a> || <a href="../h_src/143337500.htm" class="localvar">l</a> + <a href="../h_src/143337364.htm" class="localvar">lsep</a> &gt; <a href="../h_src/143343280.htm" class="macro">MAXSIZE</a> / <a href="../h_src/143337092.htm" class="localvar">n</a>))
<a id=158></a>    return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143337636.htm" class="localvar">L</a>, &quot;resulting string too large&quot;);
  else {
<a id=160></a>    <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143336820.htm" class="localvar">totallen</a> = (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143337092.htm" class="localvar">n</a> * <a href="../h_src/143337500.htm" class="localvar">l</a> + (<a href="../h_aa/57441192.htm" class="type">size_t</a>)(<a href="../h_src/143337092.htm" class="localvar">n</a> - 1) * <a href="../h_src/143337364.htm" class="localvar">lsep</a>;
<a id=161></a>    <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143336684.htm" class="localvar">b</a>;
<a id=162></a>    char *<a href="../h_src/143336548.htm" class="localvar">p</a> = <a href="../h_src/57413176.htm" class="function">luaL_buffinitsize</a>(<a href="../h_src/143337636.htm" class="localvar">L</a>, &amp;<a href="../h_src/143336684.htm" class="localvar">b</a>, <a href="../h_src/143336820.htm" class="localvar">totallen</a>);
<a id=163></a>    while (<a href="../h_src/143337092.htm" class="localvar">n</a>-- &gt; 1) {  <a  class="comments">/* first n-1 copies (followed by separator) */</a>
<a id=164></a>      <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/143336548.htm" class="localvar">p</a>, <a href="../h_src/143337228.htm" class="localvar">s</a>, <a href="../h_src/143337500.htm" class="localvar">l</a> * sizeof(char)); <a href="../h_src/143336548.htm" class="localvar">p</a> += <a href="../h_src/143337500.htm" class="localvar">l</a>;
<a id=165></a>      if (<a href="../h_src/143337364.htm" class="localvar">lsep</a> &gt; 0) {  <a  class="comments">/* empty 'memcpy' is not that cheap */</a>
<a id=166></a>        <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/143336548.htm" class="localvar">p</a>, <a href="../h_src/143336956.htm" class="localvar">sep</a>, <a href="../h_src/143337364.htm" class="localvar">lsep</a> * sizeof(char));
<a id=167></a>        <a href="../h_src/143336548.htm" class="localvar">p</a> += <a href="../h_src/143337364.htm" class="localvar">lsep</a>;
      }
    }
<a id=170></a>    <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/143336548.htm" class="localvar">p</a>, <a href="../h_src/143337228.htm" class="localvar">s</a>, <a href="../h_src/143337500.htm" class="localvar">l</a> * sizeof(char));  <a  class="comments">/* last copy (not followed by separator) */</a>
<a id=171></a>    <a href="../h_src/57413244.htm" class="function">luaL_pushresultsize</a>(&amp;<a href="../h_src/143336684.htm" class="localvar">b</a>, <a href="../h_src/143336820.htm" class="localvar">totallen</a>);
  }
  return 1;
}


<a id=177></a>static int <a href="../h_src/143336412.htm" class="function">str_byte</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143336276.htm" class="localvar">L</a>) {
<a id=178></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143336140.htm" class="localvar">l</a>;
<a id=179></a>  const char *<a href="../h_src/143336004.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143336276.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143336140.htm" class="localvar">l</a>);
<a id=180></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143335868.htm" class="localvar">pi</a> = <a href="../h_src/57419908.htm" class="function">luaL_optinteger</a>(<a href="../h_src/143336276.htm" class="localvar">L</a>, 2, 1);
<a id=181></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143335732.htm" class="localvar">posi</a> = <a href="../h_src/143342736.htm" class="function">posrelatI</a>(<a href="../h_src/143335868.htm" class="localvar">pi</a>, <a href="../h_src/143336140.htm" class="localvar">l</a>);
<a id=182></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143335596.htm" class="localvar">pose</a> = <a href="../h_src/143342328.htm" class="function">getendpos</a>(<a href="../h_src/143336276.htm" class="localvar">L</a>, 3, <a href="../h_src/143335868.htm" class="localvar">pi</a>, <a href="../h_src/143336140.htm" class="localvar">l</a>);
<a id=183></a>  int <a href="../h_src/143335460.htm" class="localvar">n</a>, <a href="../h_src/143335324.htm" class="localvar">i</a>;
<a id=184></a>  if (<a href="../h_src/143335732.htm" class="localvar">posi</a> &gt; <a href="../h_src/143335596.htm" class="localvar">pose</a>) return 0;  <a  class="comments">/* empty interval; return no values */</a>
<a id=185></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143335596.htm" class="localvar">pose</a> - <a href="../h_src/143335732.htm" class="localvar">posi</a> &gt;= (<a href="../h_aa/57441192.htm" class="type">size_t</a>)INT_MAX))  <a  class="comments">/* arithmetic overflow? */</a>
<a id=186></a>    return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143336276.htm" class="localvar">L</a>, &quot;string slice too long&quot;);
<a id=187></a>  <a href="../h_src/143335460.htm" class="localvar">n</a> = (int)(<a href="../h_src/143335596.htm" class="localvar">pose</a> -  <a href="../h_src/143335732.htm" class="localvar">posi</a>) + 1;
<a id=188></a>  <a href="../h_src/57419840.htm" class="function">luaL_checkstack</a>(<a href="../h_src/143336276.htm" class="localvar">L</a>, <a href="../h_src/143335460.htm" class="localvar">n</a>, &quot;string slice too long&quot;);
<a id=189></a>  for (<a href="../h_src/143335324.htm" class="localvar">i</a>=0; <a href="../h_src/143335324.htm" class="localvar">i</a>&lt;<a href="../h_src/143335460.htm" class="localvar">n</a>; <a href="../h_src/143335324.htm" class="localvar">i</a>++)
<a id=190></a>    <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143336276.htm" class="localvar">L</a>, <a href="../h_src/143343552.htm" class="macro">uchar</a>(<a href="../h_src/143336004.htm" class="localvar">s</a>[<a href="../h_src/143335732.htm" class="localvar">posi</a>+<a href="../h_src/143335324.htm" class="localvar">i</a>-1]));
<a id=191></a>  return <a href="../h_src/143335460.htm" class="localvar">n</a>;
}


<a id=195></a>static int <a href="../h_src/143335188.htm" class="function">str_char</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143335052.htm" class="localvar">L</a>) {
<a id=196></a>  int <a href="../h_src/143334916.htm" class="localvar">n</a> = <a href="../h_src/57439356.htm" class="function">lua_gettop</a>(<a href="../h_src/143335052.htm" class="localvar">L</a>);  <a  class="comments">/* number of arguments */</a>
<a id=197></a>  int <a href="../h_src/143334780.htm" class="localvar">i</a>;
<a id=198></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143334644.htm" class="localvar">b</a>;
<a id=199></a>  char *<a href="../h_src/143334508.htm" class="localvar">p</a> = <a href="../h_src/57413176.htm" class="function">luaL_buffinitsize</a>(<a href="../h_src/143335052.htm" class="localvar">L</a>, &amp;<a href="../h_src/143334644.htm" class="localvar">b</a>, <a href="../h_src/143334916.htm" class="localvar">n</a>);
<a id=200></a>  for (<a href="../h_src/143334780.htm" class="localvar">i</a>=1; <a href="../h_src/143334780.htm" class="localvar">i</a>&lt;=<a href="../h_src/143334916.htm" class="localvar">n</a>; <a href="../h_src/143334780.htm" class="localvar">i</a>++) {
<a id=201></a>    <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/143334372.htm" class="localvar">c</a> = (<a href="../h_src/57438132.htm" class="function">lua_Unsigned</a>)<a href="../h_src/57419976.htm" class="function">luaL_checkinteger</a>(<a href="../h_src/143335052.htm" class="localvar">L</a>, <a href="../h_src/143334780.htm" class="localvar">i</a>);
<a id=202></a>    <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143335052.htm" class="localvar">L</a>, <a href="../h_src/143334372.htm" class="localvar">c</a> &lt;= (<a href="../h_src/57438132.htm" class="function">lua_Unsigned</a>)UCHAR_MAX, <a href="../h_src/143334780.htm" class="localvar">i</a>, &quot;value out of range&quot;);
<a id=203></a>    <a href="../h_src/143334508.htm" class="localvar">p</a>[<a href="../h_src/143334780.htm" class="localvar">i</a> - 1] = <a href="../h_src/143343552.htm" class="macro">uchar</a>(<a href="../h_src/143334372.htm" class="localvar">c</a>);
  }
<a id=205></a>  <a href="../h_src/57413244.htm" class="function">luaL_pushresultsize</a>(&amp;<a href="../h_src/143334644.htm" class="localvar">b</a>, <a href="../h_src/143334916.htm" class="localvar">n</a>);
  return 1;
}


<a id=210></a><a  class="comments">/*</a>
<a id=211></a><a  class="comments">** Buffer to store the result of 'string.dump'. It must be initialized</a>
<a id=212></a><a  class="comments">** after the call to 'lua_dump', to ensure that the function is on the</a>
<a id=213></a><a  class="comments">** top of the stack when 'lua_dump' is called. ('luaL_buffinit' might</a>
<a id=214></a><a  class="comments">** push stuff.)</a>
<a id=215></a><a  class="comments">*/</a>
<a id=216></a>struct <a href="../h_src/143334236.htm" class="class">str_Writer</a> {
<a id=217></a>  int <a href="../h_src/143334100.htm" class="variable">init</a>;  <a  class="comments">/* true iff buffer has been initialized */</a>
<a id=218></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143334032.htm" class="variable">B</a>;
};


<a id=222></a>static int <a href="../h_src/143333964.htm" class="function">writer</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143333828.htm" class="localvar">L</a>, const void *<a href="../h_src/143333692.htm" class="localvar">b</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143333556.htm" class="localvar">size</a>, void *<a href="../h_src/143333420.htm" class="localvar">ud</a>) {
<a id=223></a>  struct <a href="../h_src/143334236.htm" class="class">str_Writer</a> *<a href="../h_src/143333148.htm" class="localvar">state</a> = (struct <a href="../h_src/143334236.htm" class="class">str_Writer</a> *)<a href="../h_src/143333420.htm" class="localvar">ud</a>;
<a id=224></a>  if (!<a href="../h_src/143333148.htm" class="localvar">state</a>-&gt;<a href="../h_src/143334100.htm" class="variable">init</a>) {
<a id=225></a>    <a href="../h_src/143333148.htm" class="localvar">state</a>-&gt;<a href="../h_src/143334100.htm" class="variable">init</a> = 1;
<a id=226></a>    <a href="../h_src/57413652.htm" class="function">luaL_buffinit</a>(<a href="../h_src/143333828.htm" class="localvar">L</a>, &amp;<a href="../h_src/143333148.htm" class="localvar">state</a>-&gt;<a href="../h_src/143334032.htm" class="variable">B</a>);
  }
<a id=228></a>  <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(&amp;<a href="../h_src/143333148.htm" class="localvar">state</a>-&gt;<a href="../h_src/143334032.htm" class="variable">B</a>, (const char *)<a href="../h_src/143333692.htm" class="localvar">b</a>, <a href="../h_src/143333556.htm" class="localvar">size</a>);
  return 0;
}


<a id=233></a>static int <a href="../h_src/143333012.htm" class="function">str_dump</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143332876.htm" class="localvar">L</a>) {
<a id=234></a>  struct <a href="../h_src/143334236.htm" class="class">str_Writer</a> <a href="../h_src/143332740.htm" class="localvar">state</a>;
<a id=235></a>  int <a href="../h_src/143332604.htm" class="localvar">strip</a> = <a href="../h_src/57438268.htm" class="function">lua_toboolean</a>(<a href="../h_src/143332876.htm" class="localvar">L</a>, 2);
<a id=236></a>  <a href="../h_src/57419772.htm" class="function">luaL_checktype</a>(<a href="../h_src/143332876.htm" class="localvar">L</a>, 1, <a href="../h_src/57443232.htm" class="macro">LUA_TFUNCTION</a>);
<a id=237></a>  <a href="../h_src/57439288.htm" class="function">lua_settop</a>(<a href="../h_src/143332876.htm" class="localvar">L</a>, 1);  <a  class="comments">/* ensure function is on the top of the stack */</a>
<a id=238></a>  <a href="../h_src/143332740.htm" class="localvar">state</a>.<a href="../h_src/143334100.htm" class="variable">init</a> = 0;
<a id=239></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57432556.htm" class="function">lua_dump</a>(<a href="../h_src/143332876.htm" class="localvar">L</a>, <a href="../h_src/143333964.htm" class="function">writer</a>, &amp;<a href="../h_src/143332740.htm" class="localvar">state</a>, <a href="../h_src/143332604.htm" class="localvar">strip</a>) != 0))
<a id=240></a>    return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143332876.htm" class="localvar">L</a>, &quot;unable to dump given function&quot;);
<a id=241></a>  <a href="../h_src/57413312.htm" class="function">luaL_pushresult</a>(&amp;<a href="../h_src/143332740.htm" class="localvar">state</a>.<a href="../h_src/143334032.htm" class="variable">B</a>);
  return 1;
}



<a id=247></a><a  class="comments">/*</a>
<a id=248></a><a  class="comments">** {======================================================</a>
<a id=249></a><a  class="comments">** METAMETHODS</a>
<a id=250></a><a  class="comments">** =======================================================</a>
<a id=251></a><a  class="comments">*/</a>

<a id=253></a>#if defined(<a href="../h_src/57614064.htm" class="macro">LUA_NOCVTS2N</a>)	<a  class="comments">/* { */</a>

<a id=255></a><a  class="comments">/* no coercion from strings to numbers */</a>

static const luaL_Reg stringmetamethods[] = {
<a id=258></a>  {&quot;__index&quot;, NULL},  <a  class="comments">/* placeholder */</a>
  {NULL, NULL}
};

<a id=262></a>#else		<a  class="comments">/* }{ */</a>

<a id=264></a>static int <a href="../h_src/143332468.htm" class="function">tonum</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143332332.htm" class="localvar">L</a>, int <a href="../h_src/143332196.htm" class="localvar">arg</a>) {
<a id=265></a>  if (<a href="../h_src/57438540.htm" class="function">lua_type</a>(<a href="../h_src/143332332.htm" class="localvar">L</a>, <a href="../h_src/143332196.htm" class="localvar">arg</a>) == <a href="../h_src/57443640.htm" class="macro">LUA_TNUMBER</a>) {  <a  class="comments">/* already a number? */</a>
<a id=266></a>    <a href="../h_src/57439220.htm" class="function">lua_pushvalue</a>(<a href="../h_src/143332332.htm" class="localvar">L</a>, <a href="../h_src/143332196.htm" class="localvar">arg</a>);
    return 1;
  }
<a id=269></a>  else {  <a  class="comments">/* check whether it is a numerical string */</a>
<a id=270></a>    <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143332060.htm" class="localvar">len</a>;
<a id=271></a>    const char *<a href="../h_src/143331924.htm" class="localvar">s</a> = <a href="../h_src/57438200.htm" class="function">lua_tolstring</a>(<a href="../h_src/143332332.htm" class="localvar">L</a>, <a href="../h_src/143332196.htm" class="localvar">arg</a>, &amp;<a href="../h_src/143332060.htm" class="localvar">len</a>);
<a id=272></a>    return (<a href="../h_src/143331924.htm" class="localvar">s</a> != NULL &amp;&amp; <a href="../h_src/57430108.htm" class="function">lua_stringtonumber</a>(<a href="../h_src/143332332.htm" class="localvar">L</a>, <a href="../h_src/143331924.htm" class="localvar">s</a>) == <a href="../h_src/143332060.htm" class="localvar">len</a> + 1);
  }
}


<a id=277></a>static void <a href="../h_src/143331788.htm" class="function">trymt</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143331652.htm" class="localvar">L</a>, const char *<a href="../h_src/143331516.htm" class="localvar">mtname</a>) {
<a id=278></a>  <a href="../h_src/57439288.htm" class="function">lua_settop</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, 2);  <a  class="comments">/* back to the original arguments */</a>
<a id=279></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57438540.htm" class="function">lua_type</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, 2) == <a href="../h_src/57443504.htm" class="macro">LUA_TSTRING</a> ||
<a id=280></a>                 !<a href="../h_src/57420588.htm" class="function">luaL_getmetafield</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, 2, <a href="../h_src/143331516.htm" class="localvar">mtname</a>)))
<a id=281></a>    <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, &quot;attempt to %s a '%s' with a '%s'&quot;, <a href="../h_src/143331516.htm" class="localvar">mtname</a> + 2,
<a id=282></a>                  <a href="../h_src/57416712.htm" class="macro">luaL_typename</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, -2), <a href="../h_src/57416712.htm" class="macro">luaL_typename</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, -1));
<a id=283></a>  <a href="../h_src/57427252.htm" class="macro">lua_insert</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, -3);  <a  class="comments">/* put metamethod before arguments */</a>
<a id=284></a>  <a href="../h_src/57432964.htm" class="macro">lua_call</a>(<a href="../h_src/143331652.htm" class="localvar">L</a>, 2, 1);  <a  class="comments">/* call metamethod */</a>
}


<a id=288></a>static int <a href="../h_src/143331380.htm" class="function">arith</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143331244.htm" class="localvar">L</a>, int <a href="../h_src/143331108.htm" class="localvar">op</a>, const char *<a href="../h_src/143330972.htm" class="localvar">mtname</a>) {
<a id=289></a>  if (<a href="../h_src/143332468.htm" class="function">tonum</a>(<a href="../h_src/143331244.htm" class="localvar">L</a>, 1) &amp;&amp; <a href="../h_src/143332468.htm" class="function">tonum</a>(<a href="../h_src/143331244.htm" class="localvar">L</a>, 2))
<a id=290></a>    <a href="../h_src/57435888.htm" class="function">lua_arith</a>(<a href="../h_src/143331244.htm" class="localvar">L</a>, <a href="../h_src/143331108.htm" class="localvar">op</a>);  <a  class="comments">/* result will be on the top */</a>
  else
<a id=292></a>    <a href="../h_src/143331788.htm" class="function">trymt</a>(<a href="../h_src/143331244.htm" class="localvar">L</a>, <a href="../h_src/143330972.htm" class="localvar">mtname</a>);
  return 1;
}


<a id=297></a>static int <a href="../h_src/143330836.htm" class="function">arith_add</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143330700.htm" class="localvar">L</a>) {
<a id=298></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143330700.htm" class="localvar">L</a>, <a href="../h_src/57437792.htm" class="macro">LUA_OPADD</a>, &quot;__add&quot;);
}

<a id=301></a>static int <a href="../h_src/143330564.htm" class="function">arith_sub</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143330428.htm" class="localvar">L</a>) {
<a id=302></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143330428.htm" class="localvar">L</a>, <a href="../h_src/57437656.htm" class="macro">LUA_OPSUB</a>, &quot;__sub&quot;);
}

<a id=305></a>static int <a href="../h_src/143330292.htm" class="function">arith_mul</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143330156.htm" class="localvar">L</a>) {
<a id=306></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143330156.htm" class="localvar">L</a>, <a href="../h_src/57437520.htm" class="macro">LUA_OPMUL</a>, &quot;__mul&quot;);
}

<a id=309></a>static int <a href="../h_src/143330020.htm" class="function">arith_mod</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143329884.htm" class="localvar">L</a>) {
<a id=310></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143329884.htm" class="localvar">L</a>, <a href="../h_src/57437384.htm" class="macro">LUA_OPMOD</a>, &quot;__mod&quot;);
}

<a id=313></a>static int <a href="../h_src/143329748.htm" class="function">arith_pow</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143329612.htm" class="localvar">L</a>) {
<a id=314></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143329612.htm" class="localvar">L</a>, <a href="../h_src/57437248.htm" class="macro">LUA_OPPOW</a>, &quot;__pow&quot;);
}

<a id=317></a>static int <a href="../h_src/143329476.htm" class="function">arith_div</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143329340.htm" class="localvar">L</a>) {
<a id=318></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143329340.htm" class="localvar">L</a>, <a href="../h_src/57437112.htm" class="macro">LUA_OPDIV</a>, &quot;__div&quot;);
}

<a id=321></a>static int <a href="../h_src/143329204.htm" class="function">arith_idiv</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143329068.htm" class="localvar">L</a>) {
<a id=322></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143329068.htm" class="localvar">L</a>, <a href="../h_src/57436976.htm" class="macro">LUA_OPIDIV</a>, &quot;__idiv&quot;);
}

<a id=325></a>static int <a href="../h_src/143328932.htm" class="function">arith_unm</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143328796.htm" class="localvar">L</a>) {
<a id=326></a>  return <a href="../h_src/143331380.htm" class="function">arith</a>(<a href="../h_src/143328796.htm" class="localvar">L</a>, <a href="../h_src/57436160.htm" class="macro">LUA_OPUNM</a>, &quot;__unm&quot;);
}


<a id=330></a>static const <a href="../h_src/57420996.htm" class="type">luaL_Reg</a> <a href="../h_src/143328660.htm" class="variable">stringmetamethods</a>[] = {
<a id=331></a>  {&quot;__add&quot;, <a href="../h_src/143330836.htm" class="function">arith_add</a>},
<a id=332></a>  {&quot;__sub&quot;, <a href="../h_src/143330564.htm" class="function">arith_sub</a>},
<a id=333></a>  {&quot;__mul&quot;, <a href="../h_src/143330292.htm" class="function">arith_mul</a>},
<a id=334></a>  {&quot;__mod&quot;, <a href="../h_src/143330020.htm" class="function">arith_mod</a>},
<a id=335></a>  {&quot;__pow&quot;, <a href="../h_src/143329748.htm" class="function">arith_pow</a>},
<a id=336></a>  {&quot;__div&quot;, <a href="../h_src/143329476.htm" class="function">arith_div</a>},
<a id=337></a>  {&quot;__idiv&quot;, <a href="../h_src/143329204.htm" class="function">arith_idiv</a>},
<a id=338></a>  {&quot;__unm&quot;, <a href="../h_src/143328932.htm" class="function">arith_unm</a>},
<a id=339></a>  {&quot;__index&quot;, NULL},  <a  class="comments">/* placeholder */</a>
  {NULL, NULL}
};

<a id=343></a>#endif		<a  class="comments">/* } */</a>

<a id=345></a><a  class="comments">/* }====================================================== */</a>

<a id=347></a><a  class="comments">/*</a>
<a id=348></a><a  class="comments">** {======================================================</a>
<a id=349></a><a  class="comments">** PATTERN MATCHING</a>
<a id=350></a><a  class="comments">** =======================================================</a>
<a id=351></a><a  class="comments">*/</a>


<a id=354></a>#define <a href="../h_src/143328592.htm" class="macro">CAP_UNFINISHED</a>	(-1)
<a id=355></a>#define <a href="../h_src/143328456.htm" class="macro">CAP_POSITION</a>	(-2)


<a id=358></a>typedef struct <a href="../h_src/143328320.htm" class="class">MatchState</a> {
<a id=359></a>  const char *<a href="../h_src/143328184.htm" class="variable">src_init</a>;  <a  class="comments">/* init of source string */</a>
<a id=360></a>  const char *<a href="../h_src/143328116.htm" class="variable">src_end</a>;  <a  class="comments">/* end ('\0') of source string */</a>
<a id=361></a>  const char *<a href="../h_src/143328048.htm" class="variable">p_end</a>;  <a  class="comments">/* end ('\0') of pattern */</a>
<a id=362></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143327980.htm" class="variable">L</a>;
<a id=363></a>  int <a href="../h_src/143327912.htm" class="variable">matchdepth</a>;  <a  class="comments">/* control for recursive depth (to avoid C stack overflow) */</a>
<a id=364></a>  unsigned char <a href="../h_src/143327844.htm" class="variable">level</a>;  <a  class="comments">/* total number of captures (finished or unfinished) */</a>
  struct {
<a id=366></a>    const char *<a href="../h_src/143327708.htm" class="variable">init</a>;
<a id=367></a>    <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/143327640.htm" class="variable">len</a>;
<a id=368></a>  } <a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143343688.htm" class="macro">LUA_MAXCAPTURES</a>];
<a id=369></a>} <a href="../h_src/143327300.htm" class="type">MatchState</a>;


<a id=372></a><a  class="comments">/* recursive function */</a>
<a id=373></a>static const char *<a href="../h_src/143327232.htm" class="function">match</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *ms, const char *s, const char *p);


<a id=376></a><a  class="comments">/* maximum recursion depth for 'match' */</a>
<a id=377></a>#if !defined(<a href="../h_src/143327028.htm" class="macro">MAXCCALLS</a>)
<a id=378></a>#define <a href="../h_src/143326892.htm" class="macro">MAXCCALLS</a>	200
#endif


<a id=382></a>#define <a href="../h_src/143326756.htm" class="macro">L_ESC</a>		'%'
<a id=383></a>#define <a href="../h_src/143326620.htm" class="macro">SPECIALS</a>	&quot;^$*+?.([%-&quot;


<a id=386></a>static int <a href="../h_src/143326484.htm" class="function">check_capture</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143326348.htm" class="localvar">ms</a>, int <a href="../h_src/143326212.htm" class="localvar">l</a>) {
<a id=387></a>  <a href="../h_src/143326212.htm" class="localvar">l</a> -= '1';
<a id=388></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143326212.htm" class="localvar">l</a> &lt; 0 || <a href="../h_src/143326212.htm" class="localvar">l</a> &gt;= <a href="../h_src/143326348.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a> ||
<a id=389></a>                 <a href="../h_src/143326348.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143326212.htm" class="localvar">l</a>].<a href="../h_src/143327640.htm" class="variable">len</a> == <a href="../h_src/143328592.htm" class="macro">CAP_UNFINISHED</a>))
<a id=390></a>    return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143326348.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;invalid capture index %%%d&quot;, <a href="../h_src/143326212.htm" class="localvar">l</a> + 1);
<a id=391></a>  return <a href="../h_src/143326212.htm" class="localvar">l</a>;
}


<a id=395></a>static int <a href="../h_src/143326076.htm" class="function">capture_to_close</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143325940.htm" class="localvar">ms</a>) {
<a id=396></a>  int <a href="../h_src/143325804.htm" class="localvar">level</a> = <a href="../h_src/143325940.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a>;
<a id=397></a>  for (<a href="../h_src/143325804.htm" class="localvar">level</a>--; <a href="../h_src/143325804.htm" class="localvar">level</a>&gt;=0; <a href="../h_src/143325804.htm" class="localvar">level</a>--)
<a id=398></a>    if (<a href="../h_src/143325940.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143325804.htm" class="localvar">level</a>].<a href="../h_src/143327640.htm" class="variable">len</a> == <a href="../h_src/143328592.htm" class="macro">CAP_UNFINISHED</a>) return <a href="../h_src/143325804.htm" class="localvar">level</a>;
<a id=399></a>  return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143325940.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;invalid pattern capture&quot;);
}


<a id=403></a>static const char *<a href="../h_src/143325668.htm" class="function">classend</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143325532.htm" class="localvar">ms</a>, const char *<a href="../h_src/143325396.htm" class="localvar">p</a>) {
<a id=404></a>  switch (*<a href="../h_src/143325396.htm" class="localvar">p</a>++) {
<a id=405></a>    case <a href="../h_src/143326756.htm" class="macro">L_ESC</a>: {
<a id=406></a>      if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143325396.htm" class="localvar">p</a> == <a href="../h_src/143325532.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a>))
<a id=407></a>        <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143325532.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;malformed pattern (ends with '%%')&quot;);
<a id=408></a>      return <a href="../h_src/143325396.htm" class="localvar">p</a>+1;
    }
    case '[': {
<a id=411></a>      if (*<a href="../h_src/143325396.htm" class="localvar">p</a> == '^') <a href="../h_src/143325396.htm" class="localvar">p</a>++;
<a id=412></a>      do {  <a  class="comments">/* look for a ']' */</a>
<a id=413></a>        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143325396.htm" class="localvar">p</a> == <a href="../h_src/143325532.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a>))
<a id=414></a>          <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143325532.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;malformed pattern (missing ']')&quot;);
<a id=415></a>        if (*(<a href="../h_src/143325396.htm" class="localvar">p</a>++) == <a href="../h_src/143326756.htm" class="macro">L_ESC</a> &amp;&amp; <a href="../h_src/143325396.htm" class="localvar">p</a> &lt; <a href="../h_src/143325532.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a>)
<a id=416></a>          <a href="../h_src/143325396.htm" class="localvar">p</a>++;  <a  class="comments">/* skip escapes (e.g. '%]') */</a>
<a id=417></a>      } while (*<a href="../h_src/143325396.htm" class="localvar">p</a> != ']');
<a id=418></a>      return <a href="../h_src/143325396.htm" class="localvar">p</a>+1;
    }
    default: {
<a id=421></a>      return <a href="../h_src/143325396.htm" class="localvar">p</a>;
    }
  }
}


<a id=427></a>static int <a href="../h_src/143325260.htm" class="function">match_class</a> (int <a href="../h_src/143325124.htm" class="localvar">c</a>, int <a href="../h_src/143324988.htm" class="localvar">cl</a>) {
<a id=428></a>  int <a href="../h_src/143324852.htm" class="localvar">res</a>;
<a id=429></a>  switch (<a href="../h_aa/143338792.htm" class="libfunc">tolower</a>(<a href="../h_src/143324988.htm" class="localvar">cl</a>)) {
<a id=430></a>    case 'a' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143324716.htm" class="libfunc">isalpha</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=431></a>    case 'c' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143324648.htm" class="libfunc">iscntrl</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=432></a>    case 'd' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/58309772.htm" class="libfunc">isdigit</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=433></a>    case 'g' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143324580.htm" class="libfunc">isgraph</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=434></a>    case 'l' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143324512.htm" class="libfunc">islower</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=435></a>    case 'p' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143324444.htm" class="libfunc">ispunct</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=436></a>    case 's' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143324376.htm" class="libfunc">isspace</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=437></a>    case 'u' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143324308.htm" class="libfunc">isupper</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=438></a>    case 'w' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/58309840.htm" class="libfunc">isalnum</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=439></a>    case 'x' : <a href="../h_src/143324852.htm" class="localvar">res</a> = <a href="../h_aa/143248420.htm" class="libfunc">isxdigit</a>(<a href="../h_src/143325124.htm" class="localvar">c</a>); break;
<a id=440></a>    case 'z' : <a href="../h_src/143324852.htm" class="localvar">res</a> = (<a href="../h_src/143325124.htm" class="localvar">c</a> == 0); break;  <a  class="comments">/* deprecated option */</a>
<a id=441></a>    default: return (<a href="../h_src/143324988.htm" class="localvar">cl</a> == <a href="../h_src/143325124.htm" class="localvar">c</a>);
  }
<a id=443></a>  return (<a href="../h_aa/143324512.htm" class="libfunc">islower</a>(<a href="../h_src/143324988.htm" class="localvar">cl</a>) ? <a href="../h_src/143324852.htm" class="localvar">res</a> : !<a href="../h_src/143324852.htm" class="localvar">res</a>);
}


<a id=447></a>static int <a href="../h_src/143324240.htm" class="function">matchbracketclass</a> (int <a href="../h_src/143324104.htm" class="localvar">c</a>, const char *<a href="../h_src/143323968.htm" class="localvar">p</a>, const char *<a href="../h_src/143323832.htm" class="localvar">ec</a>) {
<a id=448></a>  int <a href="../h_src/143323696.htm" class="localvar">sig</a> = 1;
<a id=449></a>  if (*(<a href="../h_src/143323968.htm" class="localvar">p</a>+1) == '^') {
<a id=450></a>    <a href="../h_src/143323696.htm" class="localvar">sig</a> = 0;
<a id=451></a>    <a href="../h_src/143323968.htm" class="localvar">p</a>++;  <a  class="comments">/* skip the '^' */</a>
  }
<a id=453></a>  while (++<a href="../h_src/143323968.htm" class="localvar">p</a> &lt; <a href="../h_src/143323832.htm" class="localvar">ec</a>) {
<a id=454></a>    if (*<a href="../h_src/143323968.htm" class="localvar">p</a> == <a href="../h_src/143326756.htm" class="macro">L_ESC</a>) {
<a id=455></a>      <a href="../h_src/143323968.htm" class="localvar">p</a>++;
<a id=456></a>      if (<a href="../h_src/143325260.htm" class="function">match_class</a>(<a href="../h_src/143324104.htm" class="localvar">c</a>, <a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143323968.htm" class="localvar">p</a>)))
<a id=457></a>        return <a href="../h_src/143323696.htm" class="localvar">sig</a>;
    }
<a id=459></a>    else if ((*(<a href="../h_src/143323968.htm" class="localvar">p</a>+1) == '-') &amp;&amp; (<a href="../h_src/143323968.htm" class="localvar">p</a>+2 &lt; <a href="../h_src/143323832.htm" class="localvar">ec</a>)) {
<a id=460></a>      <a href="../h_src/143323968.htm" class="localvar">p</a>+=2;
<a id=461></a>      if (<a href="../h_src/143343552.htm" class="macro">uchar</a>(*(<a href="../h_src/143323968.htm" class="localvar">p</a>-2)) &lt;= <a href="../h_src/143324104.htm" class="localvar">c</a> &amp;&amp; <a href="../h_src/143324104.htm" class="localvar">c</a> &lt;= <a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143323968.htm" class="localvar">p</a>))
<a id=462></a>        return <a href="../h_src/143323696.htm" class="localvar">sig</a>;
    }
<a id=464></a>    else if (<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143323968.htm" class="localvar">p</a>) == <a href="../h_src/143324104.htm" class="localvar">c</a>) return <a href="../h_src/143323696.htm" class="localvar">sig</a>;
  }
<a id=466></a>  return !<a href="../h_src/143323696.htm" class="localvar">sig</a>;
}


<a id=470></a>static int <a href="../h_src/143323560.htm" class="function">singlematch</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143323424.htm" class="localvar">ms</a>, const char *<a href="../h_src/143323288.htm" class="localvar">s</a>, const char *<a href="../h_src/143323152.htm" class="localvar">p</a>,
<a id=471></a>                        const char *<a href="../h_src/143323016.htm" class="localvar">ep</a>) {
<a id=472></a>  if (<a href="../h_src/143323288.htm" class="localvar">s</a> &gt;= <a href="../h_src/143323424.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328116.htm" class="variable">src_end</a>)
    return 0;
  else {
<a id=475></a>    int <a href="../h_src/143322880.htm" class="localvar">c</a> = <a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143323288.htm" class="localvar">s</a>);
<a id=476></a>    switch (*<a href="../h_src/143323152.htm" class="localvar">p</a>) {
<a id=477></a>      case '.': return 1;  <a  class="comments">/* matches any char */</a>
<a id=478></a>      case <a href="../h_src/143326756.htm" class="macro">L_ESC</a>: return <a href="../h_src/143325260.htm" class="function">match_class</a>(<a href="../h_src/143322880.htm" class="localvar">c</a>, <a href="../h_src/143343552.htm" class="macro">uchar</a>(*(<a href="../h_src/143323152.htm" class="localvar">p</a>+1)));
<a id=479></a>      case '[': return <a href="../h_src/143324240.htm" class="function">matchbracketclass</a>(<a href="../h_src/143322880.htm" class="localvar">c</a>, <a href="../h_src/143323152.htm" class="localvar">p</a>, <a href="../h_src/143323016.htm" class="localvar">ep</a>-1);
<a id=480></a>      default:  return (<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143323152.htm" class="localvar">p</a>) == <a href="../h_src/143322880.htm" class="localvar">c</a>);
    }
  }
}


<a id=486></a>static const char *<a href="../h_src/143322744.htm" class="function">matchbalance</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143322608.htm" class="localvar">ms</a>, const char *<a href="../h_src/143322472.htm" class="localvar">s</a>,
<a id=487></a>                                   const char *<a href="../h_src/143322336.htm" class="localvar">p</a>) {
<a id=488></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143322336.htm" class="localvar">p</a> &gt;= <a href="../h_src/143322608.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a> - 1))
<a id=489></a>    <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143322608.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;malformed pattern (missing arguments to '%%b')&quot;);
<a id=490></a>  if (*<a href="../h_src/143322472.htm" class="localvar">s</a> != *<a href="../h_src/143322336.htm" class="localvar">p</a>) return NULL;
  else {
<a id=492></a>    int <a href="../h_src/143322200.htm" class="localvar">b</a> = *<a href="../h_src/143322336.htm" class="localvar">p</a>;
<a id=493></a>    int <a href="../h_src/143322064.htm" class="localvar">e</a> = *(<a href="../h_src/143322336.htm" class="localvar">p</a>+1);
<a id=494></a>    int <a href="../h_src/143321928.htm" class="localvar">cont</a> = 1;
<a id=495></a>    while (++<a href="../h_src/143322472.htm" class="localvar">s</a> &lt; <a href="../h_src/143322608.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328116.htm" class="variable">src_end</a>) {
<a id=496></a>      if (*<a href="../h_src/143322472.htm" class="localvar">s</a> == <a href="../h_src/143322064.htm" class="localvar">e</a>) {
<a id=497></a>        if (--<a href="../h_src/143321928.htm" class="localvar">cont</a> == 0) return <a href="../h_src/143322472.htm" class="localvar">s</a>+1;
      }
<a id=499></a>      else if (*<a href="../h_src/143322472.htm" class="localvar">s</a> == <a href="../h_src/143322200.htm" class="localvar">b</a>) <a href="../h_src/143321928.htm" class="localvar">cont</a>++;
    }
  }
<a id=502></a>  return NULL;  <a  class="comments">/* string ends out of balance */</a>
}


<a id=506></a>static const char *<a href="../h_src/143321792.htm" class="function">max_expand</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143321656.htm" class="localvar">ms</a>, const char *<a href="../h_src/143321520.htm" class="localvar">s</a>,
<a id=507></a>                                 const char *<a href="../h_src/143321384.htm" class="localvar">p</a>, const char *<a href="../h_src/143321248.htm" class="localvar">ep</a>) {
<a id=508></a>  <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/143321112.htm" class="localvar">i</a> = 0;  <a  class="comments">/* counts maximum expand for item */</a>
<a id=509></a>  while (<a href="../h_src/143323560.htm" class="function">singlematch</a>(<a href="../h_src/143321656.htm" class="localvar">ms</a>, <a href="../h_src/143321520.htm" class="localvar">s</a> + <a href="../h_src/143321112.htm" class="localvar">i</a>, <a href="../h_src/143321384.htm" class="localvar">p</a>, <a href="../h_src/143321248.htm" class="localvar">ep</a>))
<a id=510></a>    <a href="../h_src/143321112.htm" class="localvar">i</a>++;
<a id=511></a>  <a  class="comments">/* keeps trying to match with the maximum repetitions */</a>
<a id=512></a>  while (<a href="../h_src/143321112.htm" class="localvar">i</a>&gt;=0) {
<a id=513></a>    const char *<a href="../h_src/143320976.htm" class="localvar">res</a> = <a href="../h_src/143327232.htm" class="function">match</a>(<a href="../h_src/143321656.htm" class="localvar">ms</a>, (<a href="../h_src/143321520.htm" class="localvar">s</a>+<a href="../h_src/143321112.htm" class="localvar">i</a>), <a href="../h_src/143321248.htm" class="localvar">ep</a>+1);
<a id=514></a>    if (<a href="../h_src/143320976.htm" class="localvar">res</a>) return <a href="../h_src/143320976.htm" class="localvar">res</a>;
<a id=515></a>    <a href="../h_src/143321112.htm" class="localvar">i</a>--;  <a  class="comments">/* else didn't match; reduce 1 repetition to try again */</a>
  }
  return NULL;
}


<a id=521></a>static const char *<a href="../h_src/143320840.htm" class="function">min_expand</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143320704.htm" class="localvar">ms</a>, const char *<a href="../h_src/143320568.htm" class="localvar">s</a>,
<a id=522></a>                                 const char *<a href="../h_src/143320432.htm" class="localvar">p</a>, const char *<a href="../h_src/143320296.htm" class="localvar">ep</a>) {
  for (;;) {
<a id=524></a>    const char *<a href="../h_src/143320160.htm" class="localvar">res</a> = <a href="../h_src/143327232.htm" class="function">match</a>(<a href="../h_src/143320704.htm" class="localvar">ms</a>, <a href="../h_src/143320568.htm" class="localvar">s</a>, <a href="../h_src/143320296.htm" class="localvar">ep</a>+1);
<a id=525></a>    if (<a href="../h_src/143320160.htm" class="localvar">res</a> != NULL)
<a id=526></a>      return <a href="../h_src/143320160.htm" class="localvar">res</a>;
<a id=527></a>    else if (<a href="../h_src/143323560.htm" class="function">singlematch</a>(<a href="../h_src/143320704.htm" class="localvar">ms</a>, <a href="../h_src/143320568.htm" class="localvar">s</a>, <a href="../h_src/143320432.htm" class="localvar">p</a>, <a href="../h_src/143320296.htm" class="localvar">ep</a>))
<a id=528></a>      <a href="../h_src/143320568.htm" class="localvar">s</a>++;  <a  class="comments">/* try with one more repetition */</a>
    else return NULL;
  }
}


<a id=534></a>static const char *<a href="../h_src/143320024.htm" class="function">start_capture</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143319888.htm" class="localvar">ms</a>, const char *<a href="../h_src/143319752.htm" class="localvar">s</a>,
<a id=535></a>                                    const char *<a href="../h_src/143319616.htm" class="localvar">p</a>, int <a href="../h_src/143319480.htm" class="localvar">what</a>) {
<a id=536></a>  const char *<a href="../h_src/143319344.htm" class="localvar">res</a>;
<a id=537></a>  int <a href="../h_src/143319208.htm" class="localvar">level</a> = <a href="../h_src/143319888.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a>;
<a id=538></a>  if (<a href="../h_src/143319208.htm" class="localvar">level</a> &gt;= <a href="../h_src/143343688.htm" class="macro">LUA_MAXCAPTURES</a>) <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143319888.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;too many captures&quot;);
<a id=539></a>  <a href="../h_src/143319888.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143319208.htm" class="localvar">level</a>].<a href="../h_src/143327708.htm" class="variable">init</a> = <a href="../h_src/143319752.htm" class="localvar">s</a>;
<a id=540></a>  <a href="../h_src/143319888.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143319208.htm" class="localvar">level</a>].<a href="../h_src/143327640.htm" class="variable">len</a> = <a href="../h_src/143319480.htm" class="localvar">what</a>;
<a id=541></a>  <a href="../h_src/143319888.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a> = <a href="../h_src/143319208.htm" class="localvar">level</a>+1;
<a id=542></a>  if ((<a href="../h_src/143319344.htm" class="localvar">res</a>=<a href="../h_src/143327232.htm" class="function">match</a>(<a href="../h_src/143319888.htm" class="localvar">ms</a>, <a href="../h_src/143319752.htm" class="localvar">s</a>, <a href="../h_src/143319616.htm" class="localvar">p</a>)) == NULL)  <a  class="comments">/* match failed? */</a>
<a id=543></a>    <a href="../h_src/143319888.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a>--;  <a  class="comments">/* undo capture */</a>
<a id=544></a>  return <a href="../h_src/143319344.htm" class="localvar">res</a>;
}


<a id=548></a>static const char *<a href="../h_src/143319072.htm" class="function">end_capture</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143318936.htm" class="localvar">ms</a>, const char *<a href="../h_src/143318800.htm" class="localvar">s</a>,
<a id=549></a>                                  const char *<a href="../h_src/143318664.htm" class="localvar">p</a>) {
<a id=550></a>  int <a href="../h_src/143318528.htm" class="localvar">l</a> = <a href="../h_src/143326076.htm" class="function">capture_to_close</a>(<a href="../h_src/143318936.htm" class="localvar">ms</a>);
<a id=551></a>  const char *<a href="../h_src/143318392.htm" class="localvar">res</a>;
<a id=552></a>  <a href="../h_src/143318936.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143318528.htm" class="localvar">l</a>].<a href="../h_src/143327640.htm" class="variable">len</a> = <a href="../h_src/143318800.htm" class="localvar">s</a> - <a href="../h_src/143318936.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143318528.htm" class="localvar">l</a>].<a href="../h_src/143327708.htm" class="variable">init</a>;  <a  class="comments">/* close capture */</a>
<a id=553></a>  if ((<a href="../h_src/143318392.htm" class="localvar">res</a> = <a href="../h_src/143327232.htm" class="function">match</a>(<a href="../h_src/143318936.htm" class="localvar">ms</a>, <a href="../h_src/143318800.htm" class="localvar">s</a>, <a href="../h_src/143318664.htm" class="localvar">p</a>)) == NULL)  <a  class="comments">/* match failed? */</a>
<a id=554></a>    <a href="../h_src/143318936.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143318528.htm" class="localvar">l</a>].<a href="../h_src/143327640.htm" class="variable">len</a> = <a href="../h_src/143328592.htm" class="macro">CAP_UNFINISHED</a>;  <a  class="comments">/* undo capture */</a>
<a id=555></a>  return <a href="../h_src/143318392.htm" class="localvar">res</a>;
}


<a id=559></a>static const char *<a href="../h_src/143318256.htm" class="function">match_capture</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143318120.htm" class="localvar">ms</a>, const char *<a href="../h_src/143317984.htm" class="localvar">s</a>, int <a href="../h_src/143317848.htm" class="localvar">l</a>) {
<a id=560></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143317712.htm" class="localvar">len</a>;
<a id=561></a>  <a href="../h_src/143317848.htm" class="localvar">l</a> = <a href="../h_src/143326484.htm" class="function">check_capture</a>(<a href="../h_src/143318120.htm" class="localvar">ms</a>, <a href="../h_src/143317848.htm" class="localvar">l</a>);
<a id=562></a>  <a href="../h_src/143317712.htm" class="localvar">len</a> = <a href="../h_src/143318120.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143317848.htm" class="localvar">l</a>].<a href="../h_src/143327640.htm" class="variable">len</a>;
<a id=563></a>  if ((<a href="../h_aa/57441192.htm" class="type">size_t</a>)(<a href="../h_src/143318120.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328116.htm" class="variable">src_end</a>-<a href="../h_src/143317984.htm" class="localvar">s</a>) &gt;= <a href="../h_src/143317712.htm" class="localvar">len</a> &amp;&amp;
<a id=564></a>      <a href="../h_aa/58131444.htm" class="libfunc">memcmp</a>(<a href="../h_src/143318120.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143317848.htm" class="localvar">l</a>].<a href="../h_src/143327708.htm" class="variable">init</a>, <a href="../h_src/143317984.htm" class="localvar">s</a>, <a href="../h_src/143317712.htm" class="localvar">len</a>) == 0)
<a id=565></a>    return <a href="../h_src/143317984.htm" class="localvar">s</a>+<a href="../h_src/143317712.htm" class="localvar">len</a>;
  else return NULL;
}


<a id=570></a>static const char *<a href="../h_src/143327232.htm" class="function">match</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143317576.htm" class="localvar">ms</a>, const char *<a href="../h_src/143317440.htm" class="localvar">s</a>, const char *<a href="../h_src/143317304.htm" class="localvar">p</a>) {
<a id=571></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327912.htm" class="variable">matchdepth</a>-- == 0))
<a id=572></a>    <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;pattern too complex&quot;);
<a id=573></a>  init: <a  class="comments">/* using goto to optimize tail recursion */</a>
<a id=574></a>  if (<a href="../h_src/143317304.htm" class="localvar">p</a> != <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a>) {  <a  class="comments">/* end of pattern? */</a>
<a id=575></a>    switch (*<a href="../h_src/143317304.htm" class="localvar">p</a>) {
<a id=576></a>      case '(': {  <a  class="comments">/* start capture */</a>
<a id=577></a>        if (*(<a href="../h_src/143317304.htm" class="localvar">p</a> + 1) == ')')  <a  class="comments">/* position capture? */</a>
<a id=578></a>          <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143320024.htm" class="function">start_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 2, <a href="../h_src/143328456.htm" class="macro">CAP_POSITION</a>);
        else
<a id=580></a>          <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143320024.htm" class="function">start_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 1, <a href="../h_src/143328592.htm" class="macro">CAP_UNFINISHED</a>);
        break;
      }
<a id=583></a>      case ')': {  <a  class="comments">/* end capture */</a>
<a id=584></a>        <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143319072.htm" class="function">end_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 1);
        break;
      }
      case '$': {
<a id=588></a>        if ((<a href="../h_src/143317304.htm" class="localvar">p</a> + 1) != <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a>)  <a  class="comments">/* is the '$' the last char in pattern? */</a>
<a id=589></a>          goto dflt;  <a  class="comments">/* no; go to default */</a>
<a id=590></a>        <a href="../h_src/143317440.htm" class="localvar">s</a> = (<a href="../h_src/143317440.htm" class="localvar">s</a> == <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328116.htm" class="variable">src_end</a>) ? <a href="../h_src/143317440.htm" class="localvar">s</a> : NULL;  <a  class="comments">/* check end of string */</a>
        break;
      }
<a id=593></a>      case <a href="../h_src/143326756.htm" class="macro">L_ESC</a>: {  <a  class="comments">/* escaped sequences not in the format class[*+?-]? */</a>
<a id=594></a>        switch (*(<a href="../h_src/143317304.htm" class="localvar">p</a> + 1)) {
<a id=595></a>          case 'b': {  <a  class="comments">/* balanced string? */</a>
<a id=596></a>            <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143322744.htm" class="function">matchbalance</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 2);
<a id=597></a>            if (<a href="../h_src/143317440.htm" class="localvar">s</a> != NULL) {
<a id=598></a>              <a href="../h_src/143317304.htm" class="localvar">p</a> += 4; goto init;  <a  class="comments">/* return match(ms, s, p + 4); */</a>
<a id=599></a>            }  <a  class="comments">/* else fail (s == NULL) */</a>
            break;
          }
<a id=602></a>          case 'f': {  <a  class="comments">/* frontier? */</a>
<a id=603></a>            const char *<a href="../h_src/143317168.htm" class="localvar">ep</a>; char <a href="../h_src/143317032.htm" class="localvar">previous</a>;
<a id=604></a>            <a href="../h_src/143317304.htm" class="localvar">p</a> += 2;
<a id=605></a>            if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(*<a href="../h_src/143317304.htm" class="localvar">p</a> != '['))
<a id=606></a>              <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;missing '[' after '%%f' in pattern&quot;);
<a id=607></a>            <a href="../h_src/143317168.htm" class="localvar">ep</a> = <a href="../h_src/143325668.htm" class="function">classend</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>);  <a  class="comments">/* points to what is next */</a>
<a id=608></a>            <a href="../h_src/143317032.htm" class="localvar">previous</a> = (<a href="../h_src/143317440.htm" class="localvar">s</a> == <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328184.htm" class="variable">src_init</a>) ? '\0' : *(<a href="../h_src/143317440.htm" class="localvar">s</a> - 1);
<a id=609></a>            if (!<a href="../h_src/143324240.htm" class="function">matchbracketclass</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(<a href="../h_src/143317032.htm" class="localvar">previous</a>), <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143317168.htm" class="localvar">ep</a> - 1) &amp;&amp;
<a id=610></a>               <a href="../h_src/143324240.htm" class="function">matchbracketclass</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143317440.htm" class="localvar">s</a>), <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143317168.htm" class="localvar">ep</a> - 1)) {
<a id=611></a>              <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143317168.htm" class="localvar">ep</a>; goto init;  <a  class="comments">/* return match(ms, s, ep); */</a>
            }
<a id=613></a>            <a href="../h_src/143317440.htm" class="localvar">s</a> = NULL;  <a  class="comments">/* match failed */</a>
            break;
          }
          case '0': case '1': case '2': case '3':
          case '4': case '5': case '6': case '7':
<a id=618></a>          case '8': case '9': {  <a  class="comments">/* capture results (%0-%9)? */</a>
<a id=619></a>            <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143318256.htm" class="function">match_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143343552.htm" class="macro">uchar</a>(*(<a href="../h_src/143317304.htm" class="localvar">p</a> + 1)));
<a id=620></a>            if (<a href="../h_src/143317440.htm" class="localvar">s</a> != NULL) {
<a id=621></a>              <a href="../h_src/143317304.htm" class="localvar">p</a> += 2; goto init;  <a  class="comments">/* return match(ms, s, p + 2) */</a>
            }
            break;
          }
          default: goto dflt;
        }
        break;
      }
<a id=629></a>      default: dflt: {  <a  class="comments">/* pattern class plus optional suffix */</a>
<a id=630></a>        const char *<a href="../h_src/143316896.htm" class="localvar">ep</a> = <a href="../h_src/143325668.htm" class="function">classend</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>);  <a  class="comments">/* points to optional suffix */</a>
<a id=631></a>        <a  class="comments">/* does not match at least once? */</a>
<a id=632></a>        if (!<a href="../h_src/143323560.htm" class="function">singlematch</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143316896.htm" class="localvar">ep</a>)) {
<a id=633></a>          if (*<a href="../h_src/143316896.htm" class="localvar">ep</a> == '*' || *<a href="../h_src/143316896.htm" class="localvar">ep</a> == '?' || *<a href="../h_src/143316896.htm" class="localvar">ep</a> == '-') {  <a  class="comments">/* accept empty? */</a>
<a id=634></a>            <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143316896.htm" class="localvar">ep</a> + 1; goto init;  <a  class="comments">/* return match(ms, s, ep + 1); */</a>
          }
<a id=636></a>          else  <a  class="comments">/* '+' or no suffix */</a>
<a id=637></a>            <a href="../h_src/143317440.htm" class="localvar">s</a> = NULL;  <a  class="comments">/* fail */</a>
        }
<a id=639></a>        else {  <a  class="comments">/* matched once */</a>
<a id=640></a>          switch (*<a href="../h_src/143316896.htm" class="localvar">ep</a>) {  <a  class="comments">/* handle optional suffix */</a>
<a id=641></a>            case '?': {  <a  class="comments">/* optional */</a>
<a id=642></a>              const char *<a href="../h_src/143316760.htm" class="localvar">res</a>;
<a id=643></a>              if ((<a href="../h_src/143316760.htm" class="localvar">res</a> = <a href="../h_src/143327232.htm" class="function">match</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a> + 1, <a href="../h_src/143316896.htm" class="localvar">ep</a> + 1)) != NULL)
<a id=644></a>                <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143316760.htm" class="localvar">res</a>;
              else {
<a id=646></a>                <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143316896.htm" class="localvar">ep</a> + 1; goto init;  <a  class="comments">/* else return match(ms, s, ep + 1); */</a>
              }
              break;
            }
<a id=650></a>            case '+':  <a  class="comments">/* 1 or more repetitions */</a>
<a id=651></a>              <a href="../h_src/143317440.htm" class="localvar">s</a>++;  <a  class="comments">/* 1 match already done */</a>
<a id=652></a>              <a  class="comments">/* FALLTHROUGH */</a>
<a id=653></a>            case '*':  <a  class="comments">/* 0 or more repetitions */</a>
<a id=654></a>              <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143321792.htm" class="function">max_expand</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143316896.htm" class="localvar">ep</a>);
              break;
<a id=656></a>            case '-':  <a  class="comments">/* 0 or more repetitions (minimum) */</a>
<a id=657></a>              <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143320840.htm" class="function">min_expand</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143316896.htm" class="localvar">ep</a>);
              break;
<a id=659></a>            default:  <a  class="comments">/* no suffix */</a>
<a id=660></a>              <a href="../h_src/143317440.htm" class="localvar">s</a>++; <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143316896.htm" class="localvar">ep</a>; goto init;  <a  class="comments">/* return match(ms, s + 1, ep); */</a>
          }
        }
        break;
      }
    }
  }
<a id=667></a>  <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327912.htm" class="variable">matchdepth</a>++;
<a id=668></a>  return <a href="../h_src/143317440.htm" class="localvar">s</a>;
}



<a id=673></a>static const char *<a href="../h_src/143316624.htm" class="function">lmemfind</a> (const char *<a href="../h_src/143316488.htm" class="localvar">s1</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143316352.htm" class="localvar">l1</a>,
<a id=674></a>                               const char *<a href="../h_src/143316216.htm" class="localvar">s2</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143316080.htm" class="localvar">l2</a>) {
<a id=675></a>  if (<a href="../h_src/143316080.htm" class="localvar">l2</a> == 0) return <a href="../h_src/143316488.htm" class="localvar">s1</a>;  <a  class="comments">/* empty strings are everywhere */</a>
<a id=676></a>  else if (<a href="../h_src/143316080.htm" class="localvar">l2</a> &gt; <a href="../h_src/143316352.htm" class="localvar">l1</a>) return NULL;  <a  class="comments">/* avoids a negative 'l1' */</a>
  else {
<a id=678></a>    const char *<a href="../h_src/143315944.htm" class="localvar">init</a>;  <a  class="comments">/* to search for a '*s2' inside 's1' */</a>
<a id=679></a>    <a href="../h_src/143316080.htm" class="localvar">l2</a>--;  <a  class="comments">/* 1st char will be checked by 'memchr' */</a>
<a id=680></a>    <a href="../h_src/143316352.htm" class="localvar">l1</a> = <a href="../h_src/143316352.htm" class="localvar">l1</a>-<a href="../h_src/143316080.htm" class="localvar">l2</a>;  <a  class="comments">/* 's2' cannot be found after that */</a>
<a id=681></a>    while (<a href="../h_src/143316352.htm" class="localvar">l1</a> &gt; 0 &amp;&amp; (<a href="../h_src/143315944.htm" class="localvar">init</a> = (const char *)<a href="../h_aa/143315808.htm" class="libfunc">memchr</a>(<a href="../h_src/143316488.htm" class="localvar">s1</a>, *<a href="../h_src/143316216.htm" class="localvar">s2</a>, <a href="../h_src/143316352.htm" class="localvar">l1</a>)) != NULL) {
<a id=682></a>      <a href="../h_src/143315944.htm" class="localvar">init</a>++;   <a  class="comments">/* 1st char is already checked */</a>
<a id=683></a>      if (<a href="../h_aa/58131444.htm" class="libfunc">memcmp</a>(<a href="../h_src/143315944.htm" class="localvar">init</a>, <a href="../h_src/143316216.htm" class="localvar">s2</a>+1, <a href="../h_src/143316080.htm" class="localvar">l2</a>) == 0)
<a id=684></a>        return <a href="../h_src/143315944.htm" class="localvar">init</a>-1;
<a id=685></a>      else {  <a  class="comments">/* correct 'l1' and 's1' to try again */</a>
<a id=686></a>        <a href="../h_src/143316352.htm" class="localvar">l1</a> -= <a href="../h_src/143315944.htm" class="localvar">init</a>-<a href="../h_src/143316488.htm" class="localvar">s1</a>;
<a id=687></a>        <a href="../h_src/143316488.htm" class="localvar">s1</a> = <a href="../h_src/143315944.htm" class="localvar">init</a>;
      }
    }
<a id=690></a>    return NULL;  <a  class="comments">/* not found */</a>
  }
}


<a id=695></a><a  class="comments">/*</a>
<a id=696></a><a  class="comments">** get information about the i-th capture. If there are no captures</a>
<a id=697></a><a  class="comments">** and 'i==0', return information about the whole match, which</a>
<a id=698></a><a  class="comments">** is the range 's'..'e'. If the capture is a string, return</a>
<a id=699></a><a  class="comments">** its length and put its address in '*cap'. If it is an integer</a>
<a id=700></a><a  class="comments">** (a position), push it on the stack and return CAP_POSITION.</a>
<a id=701></a><a  class="comments">*/</a>
<a id=702></a>static <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143315740.htm" class="function">get_onecapture</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143315604.htm" class="localvar">ms</a>, int <a href="../h_src/143315468.htm" class="localvar">i</a>, const char *<a href="../h_src/143315332.htm" class="localvar">s</a>,
<a id=703></a>                              const char *<a href="../h_src/143315196.htm" class="localvar">e</a>, const char **<a href="../h_src/143315060.htm" class="localvar">cap</a>) {
<a id=704></a>  if (<a href="../h_src/143315468.htm" class="localvar">i</a> &gt;= <a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a>) {
<a id=705></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143315468.htm" class="localvar">i</a> != 0))
<a id=706></a>      <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;invalid capture index %%%d&quot;, <a href="../h_src/143315468.htm" class="localvar">i</a> + 1);
<a id=707></a>    *<a href="../h_src/143315060.htm" class="localvar">cap</a> = <a href="../h_src/143315332.htm" class="localvar">s</a>;
<a id=708></a>    return <a href="../h_src/143315196.htm" class="localvar">e</a> - <a href="../h_src/143315332.htm" class="localvar">s</a>;
  }
  else {
<a id=711></a>    <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/143314924.htm" class="localvar">capl</a> = <a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143315468.htm" class="localvar">i</a>].<a href="../h_src/143327640.htm" class="variable">len</a>;
<a id=712></a>    *<a href="../h_src/143315060.htm" class="localvar">cap</a> = <a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143315468.htm" class="localvar">i</a>].<a href="../h_src/143327708.htm" class="variable">init</a>;
<a id=713></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143314924.htm" class="localvar">capl</a> == <a href="../h_src/143328592.htm" class="macro">CAP_UNFINISHED</a>))
<a id=714></a>      <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;unfinished capture&quot;);
<a id=715></a>    else if (<a href="../h_src/143314924.htm" class="localvar">capl</a> == <a href="../h_src/143328456.htm" class="macro">CAP_POSITION</a>)
<a id=716></a>      <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, (<a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327368.htm" class="variable">capture</a>[<a href="../h_src/143315468.htm" class="localvar">i</a>].<a href="../h_src/143327708.htm" class="variable">init</a> - <a href="../h_src/143315604.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328184.htm" class="variable">src_init</a>) + 1);
<a id=717></a>    return <a href="../h_src/143314924.htm" class="localvar">capl</a>;
  }
}


<a id=722></a><a  class="comments">/*</a>
<a id=723></a><a  class="comments">** Push the i-th capture on the stack.</a>
<a id=724></a><a  class="comments">*/</a>
<a id=725></a>static void <a href="../h_src/143314788.htm" class="function">push_onecapture</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143314652.htm" class="localvar">ms</a>, int <a href="../h_src/143314516.htm" class="localvar">i</a>, const char *<a href="../h_src/143314380.htm" class="localvar">s</a>,
<a id=726></a>                                                    const char *<a href="../h_src/143314244.htm" class="localvar">e</a>) {
<a id=727></a>  const char *<a href="../h_src/143314108.htm" class="localvar">cap</a>;
<a id=728></a>  <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/143313972.htm" class="localvar">l</a> = <a href="../h_src/143315740.htm" class="function">get_onecapture</a>(<a href="../h_src/143314652.htm" class="localvar">ms</a>, <a href="../h_src/143314516.htm" class="localvar">i</a>, <a href="../h_src/143314380.htm" class="localvar">s</a>, <a href="../h_src/143314244.htm" class="localvar">e</a>, &amp;<a href="../h_src/143314108.htm" class="localvar">cap</a>);
<a id=729></a>  if (<a href="../h_src/143313972.htm" class="localvar">l</a> != <a href="../h_src/143328456.htm" class="macro">CAP_POSITION</a>)
<a id=730></a>    <a href="../h_src/57435072.htm" class="function">lua_pushlstring</a>(<a href="../h_src/143314652.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, <a href="../h_src/143314108.htm" class="localvar">cap</a>, <a href="../h_src/143313972.htm" class="localvar">l</a>);
<a id=731></a>  <a  class="comments">/* else position was already pushed */</a>
}


<a id=735></a>static int <a href="../h_src/143313836.htm" class="function">push_captures</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143313700.htm" class="localvar">ms</a>, const char *<a href="../h_src/143313564.htm" class="localvar">s</a>, const char *<a href="../h_src/143313428.htm" class="localvar">e</a>) {
<a id=736></a>  int <a href="../h_src/143313292.htm" class="localvar">i</a>;
<a id=737></a>  int <a href="../h_src/143313156.htm" class="localvar">nlevels</a> = (<a href="../h_src/143313700.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a> == 0 &amp;&amp; <a href="../h_src/143313564.htm" class="localvar">s</a>) ? 1 : <a href="../h_src/143313700.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a>;
<a id=738></a>  <a href="../h_src/57419840.htm" class="function">luaL_checkstack</a>(<a href="../h_src/143313700.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, <a href="../h_src/143313156.htm" class="localvar">nlevels</a>, &quot;too many captures&quot;);
<a id=739></a>  for (<a href="../h_src/143313292.htm" class="localvar">i</a> = 0; <a href="../h_src/143313292.htm" class="localvar">i</a> &lt; <a href="../h_src/143313156.htm" class="localvar">nlevels</a>; <a href="../h_src/143313292.htm" class="localvar">i</a>++)
<a id=740></a>    <a href="../h_src/143314788.htm" class="function">push_onecapture</a>(<a href="../h_src/143313700.htm" class="localvar">ms</a>, <a href="../h_src/143313292.htm" class="localvar">i</a>, <a href="../h_src/143313564.htm" class="localvar">s</a>, <a href="../h_src/143313428.htm" class="localvar">e</a>);
<a id=741></a>  return <a href="../h_src/143313156.htm" class="localvar">nlevels</a>;  <a  class="comments">/* number of strings pushed */</a>
}


<a id=745></a><a  class="comments">/* check whether pattern has no special characters */</a>
<a id=746></a>static int <a href="../h_src/143313020.htm" class="function">nospecials</a> (const char *<a href="../h_src/143312884.htm" class="localvar">p</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143312748.htm" class="localvar">l</a>) {
<a id=747></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143312612.htm" class="localvar">upto</a> = 0;
  do {
<a id=749></a>    if (<a href="../h_aa/57910840.htm" class="libfunc">strpbrk</a>(<a href="../h_src/143312884.htm" class="localvar">p</a> + <a href="../h_src/143312612.htm" class="localvar">upto</a>, <a href="../h_src/143326620.htm" class="macro">SPECIALS</a>))
<a id=750></a>      return 0;  <a  class="comments">/* pattern has a special character */</a>
<a id=751></a>    <a href="../h_src/143312612.htm" class="localvar">upto</a> += <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/143312884.htm" class="localvar">p</a> + <a href="../h_src/143312612.htm" class="localvar">upto</a>) + 1;  <a  class="comments">/* may have more after \0 */</a>
<a id=752></a>  } while (<a href="../h_src/143312612.htm" class="localvar">upto</a> &lt;= <a href="../h_src/143312748.htm" class="localvar">l</a>);
<a id=753></a>  return 1;  <a  class="comments">/* no special chars found */</a>
}


<a id=757></a>static void <a href="../h_src/143312476.htm" class="function">prepstate</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143312340.htm" class="localvar">ms</a>, <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143312204.htm" class="localvar">L</a>,
<a id=758></a>                       const char *<a href="../h_src/143312068.htm" class="localvar">s</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143311932.htm" class="localvar">ls</a>, const char *<a href="../h_src/143311796.htm" class="localvar">p</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143311660.htm" class="localvar">lp</a>) {
<a id=759></a>  <a href="../h_src/143312340.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a> = <a href="../h_src/143312204.htm" class="localvar">L</a>;
<a id=760></a>  <a href="../h_src/143312340.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327912.htm" class="variable">matchdepth</a> = <a href="../h_src/143326892.htm" class="macro">MAXCCALLS</a>;
<a id=761></a>  <a href="../h_src/143312340.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328184.htm" class="variable">src_init</a> = <a href="../h_src/143312068.htm" class="localvar">s</a>;
<a id=762></a>  <a href="../h_src/143312340.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328116.htm" class="variable">src_end</a> = <a href="../h_src/143312068.htm" class="localvar">s</a> + <a href="../h_src/143311932.htm" class="localvar">ls</a>;
<a id=763></a>  <a href="../h_src/143312340.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a> = <a href="../h_src/143311796.htm" class="localvar">p</a> + <a href="../h_src/143311660.htm" class="localvar">lp</a>;
}


<a id=767></a>static void <a href="../h_src/143311524.htm" class="function">reprepstate</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143311388.htm" class="localvar">ms</a>) {
<a id=768></a>  <a href="../h_src/143311388.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327844.htm" class="variable">level</a> = 0;
<a id=769></a>  <a href="../h_src/57415352.htm" class="macro">lua_assert</a>(ms-&gt;matchdepth == <a href="../h_src/143326892.htm" class="macro">MAXCCALLS</a>);
}


<a id=773></a>static int <a href="../h_src/143311252.htm" class="function">str_find_aux</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143311116.htm" class="localvar">L</a>, int <a href="../h_src/143310980.htm" class="localvar">find</a>) {
<a id=774></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143310844.htm" class="localvar">ls</a>, <a href="../h_src/143310708.htm" class="localvar">lp</a>;
<a id=775></a>  const char *<a href="../h_src/143310572.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143310844.htm" class="localvar">ls</a>);
<a id=776></a>  const char *<a href="../h_src/143310436.htm" class="localvar">p</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, 2, &amp;<a href="../h_src/143310708.htm" class="localvar">lp</a>);
<a id=777></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143310300.htm" class="localvar">init</a> = <a href="../h_src/143342736.htm" class="function">posrelatI</a>(<a href="../h_src/57419908.htm" class="function">luaL_optinteger</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, 3, 1), <a href="../h_src/143310844.htm" class="localvar">ls</a>) - 1;
<a id=778></a>  if (<a href="../h_src/143310300.htm" class="localvar">init</a> &gt; <a href="../h_src/143310844.htm" class="localvar">ls</a>) {  <a  class="comments">/* start after string's end? */</a>
<a id=779></a>    <a href="../h_src/57415760.htm" class="macro">luaL_pushfail</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>);  <a  class="comments">/* cannot find anything */</a>
    return 1;
  }
<a id=782></a>  <a  class="comments">/* explicit request or no special characters? */</a>
<a id=783></a>  if (<a href="../h_src/143310980.htm" class="localvar">find</a> &amp;&amp; (<a href="../h_src/57438268.htm" class="function">lua_toboolean</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, 4) || <a href="../h_src/143313020.htm" class="function">nospecials</a>(<a href="../h_src/143310436.htm" class="localvar">p</a>, <a href="../h_src/143310708.htm" class="localvar">lp</a>))) {
<a id=784></a>    <a  class="comments">/* do a plain search */</a>
<a id=785></a>    const char *<a href="../h_src/143310164.htm" class="localvar">s2</a> = <a href="../h_src/143316624.htm" class="function">lmemfind</a>(<a href="../h_src/143310572.htm" class="localvar">s</a> + <a href="../h_src/143310300.htm" class="localvar">init</a>, <a href="../h_src/143310844.htm" class="localvar">ls</a> - <a href="../h_src/143310300.htm" class="localvar">init</a>, <a href="../h_src/143310436.htm" class="localvar">p</a>, <a href="../h_src/143310708.htm" class="localvar">lp</a>);
<a id=786></a>    if (<a href="../h_src/143310164.htm" class="localvar">s2</a>) {
<a id=787></a>      <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, (<a href="../h_src/143310164.htm" class="localvar">s2</a> - <a href="../h_src/143310572.htm" class="localvar">s</a>) + 1);
<a id=788></a>      <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, (<a href="../h_src/143310164.htm" class="localvar">s2</a> - <a href="../h_src/143310572.htm" class="localvar">s</a>) + <a href="../h_src/143310708.htm" class="localvar">lp</a>);
      return 2;
    }
  }
  else {
<a id=793></a>    <a href="../h_src/143327300.htm" class="type">MatchState</a> <a href="../h_src/143310028.htm" class="localvar">ms</a>;
<a id=794></a>    const char *<a href="../h_src/143309892.htm" class="localvar">s1</a> = <a href="../h_src/143310572.htm" class="localvar">s</a> + <a href="../h_src/143310300.htm" class="localvar">init</a>;
<a id=795></a>    int <a href="../h_src/143309756.htm" class="localvar">anchor</a> = (*<a href="../h_src/143310436.htm" class="localvar">p</a> == '^');
<a id=796></a>    if (<a href="../h_src/143309756.htm" class="localvar">anchor</a>) {
<a id=797></a>      <a href="../h_src/143310436.htm" class="localvar">p</a>++; <a href="../h_src/143310708.htm" class="localvar">lp</a>--;  <a  class="comments">/* skip anchor character */</a>
    }
<a id=799></a>    <a href="../h_src/143312476.htm" class="function">prepstate</a>(&amp;<a href="../h_src/143310028.htm" class="localvar">ms</a>, <a href="../h_src/143311116.htm" class="localvar">L</a>, <a href="../h_src/143310572.htm" class="localvar">s</a>, <a href="../h_src/143310844.htm" class="localvar">ls</a>, <a href="../h_src/143310436.htm" class="localvar">p</a>, <a href="../h_src/143310708.htm" class="localvar">lp</a>);
    do {
<a id=801></a>      const char *<a href="../h_src/143309620.htm" class="localvar">res</a>;
<a id=802></a>      <a href="../h_src/143311524.htm" class="function">reprepstate</a>(&amp;<a href="../h_src/143310028.htm" class="localvar">ms</a>);
<a id=803></a>      if ((<a href="../h_src/143309620.htm" class="localvar">res</a>=<a href="../h_src/143327232.htm" class="function">match</a>(&amp;<a href="../h_src/143310028.htm" class="localvar">ms</a>, <a href="../h_src/143309892.htm" class="localvar">s1</a>, <a href="../h_src/143310436.htm" class="localvar">p</a>)) != NULL) {
<a id=804></a>        if (<a href="../h_src/143310980.htm" class="localvar">find</a>) {
<a id=805></a>          <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, (<a href="../h_src/143309892.htm" class="localvar">s1</a> - <a href="../h_src/143310572.htm" class="localvar">s</a>) + 1);  <a  class="comments">/* start */</a>
<a id=806></a>          <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>, <a href="../h_src/143309620.htm" class="localvar">res</a> - <a href="../h_src/143310572.htm" class="localvar">s</a>);   <a  class="comments">/* end */</a>
<a id=807></a>          return <a href="../h_src/143313836.htm" class="function">push_captures</a>(&amp;<a href="../h_src/143310028.htm" class="localvar">ms</a>, NULL, 0) + 2;
        }
        else
<a id=810></a>          return <a href="../h_src/143313836.htm" class="function">push_captures</a>(&amp;<a href="../h_src/143310028.htm" class="localvar">ms</a>, <a href="../h_src/143309892.htm" class="localvar">s1</a>, <a href="../h_src/143309620.htm" class="localvar">res</a>);
      }
<a id=812></a>    } while (<a href="../h_src/143309892.htm" class="localvar">s1</a>++ &lt; <a href="../h_src/143310028.htm" class="localvar">ms</a>.<a href="../h_src/143328116.htm" class="variable">src_end</a> &amp;&amp; !<a href="../h_src/143309756.htm" class="localvar">anchor</a>);
  }
<a id=814></a>  <a href="../h_src/57415760.htm" class="macro">luaL_pushfail</a>(<a href="../h_src/143311116.htm" class="localvar">L</a>);  <a  class="comments">/* not found */</a>
  return 1;
}


<a id=819></a>static int <a href="../h_src/143309484.htm" class="function">str_find</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143309348.htm" class="localvar">L</a>) {
<a id=820></a>  return <a href="../h_src/143311252.htm" class="function">str_find_aux</a>(<a href="../h_src/143309348.htm" class="localvar">L</a>, 1);
}


<a id=824></a>static int <a href="../h_src/143309212.htm" class="function">str_match</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143309076.htm" class="localvar">L</a>) {
<a id=825></a>  return <a href="../h_src/143311252.htm" class="function">str_find_aux</a>(<a href="../h_src/143309076.htm" class="localvar">L</a>, 0);
}


<a id=829></a><a  class="comments">/* state for 'gmatch' */</a>
<a id=830></a>typedef struct <a href="../h_src/143308940.htm" class="class">GMatchState</a> {
<a id=831></a>  const char *<a href="../h_src/143308804.htm" class="variable">src</a>;  <a  class="comments">/* current position */</a>
<a id=832></a>  const char *<a href="../h_src/143308736.htm" class="variable">p</a>;  <a  class="comments">/* pattern */</a>
<a id=833></a>  const char *<a href="../h_src/143308668.htm" class="variable">lastmatch</a>;  <a  class="comments">/* end of last match */</a>
<a id=834></a>  <a href="../h_src/143327300.htm" class="type">MatchState</a> <a href="../h_src/143308600.htm" class="variable">ms</a>;  <a  class="comments">/* match state */</a>
<a id=835></a>} <a href="../h_src/143308532.htm" class="type">GMatchState</a>;


<a id=838></a>static int <a href="../h_src/143308464.htm" class="function">gmatch_aux</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143308328.htm" class="localvar">L</a>) {
<a id=839></a>  <a href="../h_src/143308532.htm" class="type">GMatchState</a> *<a href="../h_src/143308124.htm" class="localvar">gm</a> = (<a href="../h_src/143308532.htm" class="type">GMatchState</a> *)<a href="../h_src/57437996.htm" class="function">lua_touserdata</a>(<a href="../h_src/143308328.htm" class="localvar">L</a>, <a href="../h_src/57445340.htm" class="macro">lua_upvalueindex</a>(3));
<a id=840></a>  const char *<a href="../h_src/143307988.htm" class="localvar">src</a>;
<a id=841></a>  <a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308600.htm" class="variable">ms</a>.<a href="../h_src/143327980.htm" class="variable">L</a> = <a href="../h_src/143308328.htm" class="localvar">L</a>;
<a id=842></a>  for (<a href="../h_src/143307988.htm" class="localvar">src</a> = <a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308804.htm" class="variable">src</a>; <a href="../h_src/143307988.htm" class="localvar">src</a> &lt;= <a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308600.htm" class="variable">ms</a>.<a href="../h_src/143328116.htm" class="variable">src_end</a>; <a href="../h_src/143307988.htm" class="localvar">src</a>++) {
<a id=843></a>    const char *<a href="../h_src/143307852.htm" class="localvar">e</a>;
<a id=844></a>    <a href="../h_src/143311524.htm" class="function">reprepstate</a>(&amp;<a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308600.htm" class="variable">ms</a>);
<a id=845></a>    if ((<a href="../h_src/143307852.htm" class="localvar">e</a> = <a href="../h_src/143327232.htm" class="function">match</a>(&amp;<a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308600.htm" class="variable">ms</a>, <a href="../h_src/143307988.htm" class="localvar">src</a>, <a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308736.htm" class="variable">p</a>)) != NULL &amp;&amp; <a href="../h_src/143307852.htm" class="localvar">e</a> != <a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308668.htm" class="variable">lastmatch</a>) {
<a id=846></a>      <a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308804.htm" class="variable">src</a> = <a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308668.htm" class="variable">lastmatch</a> = <a href="../h_src/143307852.htm" class="localvar">e</a>;
<a id=847></a>      return <a href="../h_src/143313836.htm" class="function">push_captures</a>(&amp;<a href="../h_src/143308124.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308600.htm" class="variable">ms</a>, <a href="../h_src/143307988.htm" class="localvar">src</a>, <a href="../h_src/143307852.htm" class="localvar">e</a>);
    }
  }
<a id=850></a>  return 0;  <a  class="comments">/* not found */</a>
}


<a id=854></a>static int <a href="../h_src/143307716.htm" class="function">gmatch</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143307580.htm" class="localvar">L</a>) {
<a id=855></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143307444.htm" class="localvar">ls</a>, <a href="../h_src/143307308.htm" class="localvar">lp</a>;
<a id=856></a>  const char *<a href="../h_src/143307172.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143307580.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143307444.htm" class="localvar">ls</a>);
<a id=857></a>  const char *<a href="../h_src/143307036.htm" class="localvar">p</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143307580.htm" class="localvar">L</a>, 2, &amp;<a href="../h_src/143307308.htm" class="localvar">lp</a>);
<a id=858></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143306900.htm" class="localvar">init</a> = <a href="../h_src/143342736.htm" class="function">posrelatI</a>(<a href="../h_src/57419908.htm" class="function">luaL_optinteger</a>(<a href="../h_src/143307580.htm" class="localvar">L</a>, 3, 1), <a href="../h_src/143307444.htm" class="localvar">ls</a>) - 1;
<a id=859></a>  <a href="../h_src/143308532.htm" class="type">GMatchState</a> *<a href="../h_src/143306764.htm" class="localvar">gm</a>;
<a id=860></a>  <a href="../h_src/57439288.htm" class="function">lua_settop</a>(<a href="../h_src/143307580.htm" class="localvar">L</a>, 2);  <a  class="comments">/* keep strings on closure to avoid being collected */</a>
<a id=861></a>  <a href="../h_src/143306764.htm" class="localvar">gm</a> = (<a href="../h_src/143308532.htm" class="type">GMatchState</a> *)<a href="../h_src/57433848.htm" class="function">lua_newuserdatauv</a>(<a href="../h_src/143307580.htm" class="localvar">L</a>, sizeof(<a href="../h_src/143308532.htm" class="type">GMatchState</a>), 0);
<a id=862></a>  if (<a href="../h_src/143306900.htm" class="localvar">init</a> &gt; <a href="../h_src/143307444.htm" class="localvar">ls</a>)  <a  class="comments">/* start after string's end? */</a>
<a id=863></a>    <a href="../h_src/143306900.htm" class="localvar">init</a> = <a href="../h_src/143307444.htm" class="localvar">ls</a> + 1;  <a  class="comments">/* avoid overflows in 's + init' */</a>
<a id=864></a>  <a href="../h_src/143312476.htm" class="function">prepstate</a>(&amp;<a href="../h_src/143306764.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308600.htm" class="variable">ms</a>, <a href="../h_src/143307580.htm" class="localvar">L</a>, <a href="../h_src/143307172.htm" class="localvar">s</a>, <a href="../h_src/143307444.htm" class="localvar">ls</a>, <a href="../h_src/143307036.htm" class="localvar">p</a>, <a href="../h_src/143307308.htm" class="localvar">lp</a>);
<a id=865></a>  <a href="../h_src/143306764.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308804.htm" class="variable">src</a> = <a href="../h_src/143307172.htm" class="localvar">s</a> + <a href="../h_src/143306900.htm" class="localvar">init</a>; <a href="../h_src/143306764.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308736.htm" class="variable">p</a> = <a href="../h_src/143307036.htm" class="localvar">p</a>; <a href="../h_src/143306764.htm" class="localvar">gm</a>-&gt;<a href="../h_src/143308668.htm" class="variable">lastmatch</a> = NULL;
<a id=866></a>  <a href="../h_src/57434664.htm" class="function">lua_pushcclosure</a>(<a href="../h_src/143307580.htm" class="localvar">L</a>, <a href="../h_src/143308464.htm" class="function">gmatch_aux</a>, 3);
  return 1;
}


<a id=871></a>static void <a href="../h_src/143306628.htm" class="function">add_s</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143306492.htm" class="localvar">ms</a>, <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> *<a href="../h_src/143306356.htm" class="localvar">b</a>, const char *<a href="../h_src/143306220.htm" class="localvar">s</a>,
<a id=872></a>                                                   const char *<a href="../h_src/143306084.htm" class="localvar">e</a>) {
<a id=873></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143305948.htm" class="localvar">l</a>;
<a id=874></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143305812.htm" class="localvar">L</a> = <a href="../h_src/143306492.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>;
<a id=875></a>  const char *<a href="../h_src/143305676.htm" class="localvar">news</a> = <a href="../h_src/57438200.htm" class="function">lua_tolstring</a>(<a href="../h_src/143305812.htm" class="localvar">L</a>, 3, &amp;<a href="../h_src/143305948.htm" class="localvar">l</a>);
<a id=876></a>  const char *<a href="../h_src/143305540.htm" class="localvar">p</a>;
<a id=877></a>  while ((<a href="../h_src/143305540.htm" class="localvar">p</a> = (char *)<a href="../h_aa/143315808.htm" class="libfunc">memchr</a>(<a href="../h_src/143305676.htm" class="localvar">news</a>, <a href="../h_src/143326756.htm" class="macro">L_ESC</a>, <a href="../h_src/143305948.htm" class="localvar">l</a>)) != NULL) {
<a id=878></a>    <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(<a href="../h_src/143306356.htm" class="localvar">b</a>, <a href="../h_src/143305676.htm" class="localvar">news</a>, <a href="../h_src/143305540.htm" class="localvar">p</a> - <a href="../h_src/143305676.htm" class="localvar">news</a>);
<a id=879></a>    <a href="../h_src/143305540.htm" class="localvar">p</a>++;  <a  class="comments">/* skip ESC */</a>
<a id=880></a>    if (*<a href="../h_src/143305540.htm" class="localvar">p</a> == <a href="../h_src/143326756.htm" class="macro">L_ESC</a>)  <a  class="comments">/* '%%' */</a>
<a id=881></a>      <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(<a href="../h_src/57415216.htm" class="variable">b</a>, *<a href="../h_src/143305540.htm" class="localvar">p</a>);
<a id=882></a>    else if (*<a href="../h_src/143305540.htm" class="localvar">p</a> == '0')  <a  class="comments">/* '%0' */</a>
<a id=883></a>        <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(<a href="../h_src/143306356.htm" class="localvar">b</a>, <a href="../h_src/143306220.htm" class="localvar">s</a>, <a href="../h_src/143306084.htm" class="localvar">e</a> - <a href="../h_src/143306220.htm" class="localvar">s</a>);
<a id=884></a>    else if (<a href="../h_aa/58309772.htm" class="libfunc">isdigit</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143305540.htm" class="localvar">p</a>))) {  <a  class="comments">/* '%n' */</a>
<a id=885></a>      const char *<a href="../h_src/143305404.htm" class="localvar">cap</a>;
<a id=886></a>      <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/143305268.htm" class="localvar">resl</a> = <a href="../h_src/143315740.htm" class="function">get_onecapture</a>(<a href="../h_src/143306492.htm" class="localvar">ms</a>, *<a href="../h_src/143305540.htm" class="localvar">p</a> - '1', <a href="../h_src/143306220.htm" class="localvar">s</a>, <a href="../h_src/143306084.htm" class="localvar">e</a>, &amp;<a href="../h_src/143305404.htm" class="localvar">cap</a>);
<a id=887></a>      if (<a href="../h_src/143305268.htm" class="localvar">resl</a> == <a href="../h_src/143328456.htm" class="macro">CAP_POSITION</a>)
<a id=888></a>        <a href="../h_src/57413380.htm" class="function">luaL_addvalue</a>(<a href="../h_src/143306356.htm" class="localvar">b</a>);  <a  class="comments">/* add position to accumulated result */</a>
      else
<a id=890></a>        <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(<a href="../h_src/143306356.htm" class="localvar">b</a>, <a href="../h_src/143305404.htm" class="localvar">cap</a>, <a href="../h_src/143305268.htm" class="localvar">resl</a>);
    }
    else
<a id=893></a>      <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143305812.htm" class="localvar">L</a>, &quot;invalid use of '%c' in replacement string&quot;, <a href="../h_src/143326756.htm" class="macro">L_ESC</a>);
<a id=894></a>    <a href="../h_src/143305948.htm" class="localvar">l</a> -= <a href="../h_src/143305540.htm" class="localvar">p</a> + 1 - <a href="../h_src/143305676.htm" class="localvar">news</a>;
<a id=895></a>    <a href="../h_src/143305676.htm" class="localvar">news</a> = <a href="../h_src/143305540.htm" class="localvar">p</a> + 1;
  }
<a id=897></a>  <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(<a href="../h_src/143306356.htm" class="localvar">b</a>, <a href="../h_src/143305676.htm" class="localvar">news</a>, <a href="../h_src/143305948.htm" class="localvar">l</a>);
}


<a id=901></a><a  class="comments">/*</a>
<a id=902></a><a  class="comments">** Add the replacement value to the string buffer 'b'.</a>
<a id=903></a><a  class="comments">** Return true if the original string was changed. (Function calls and</a>
<a id=904></a><a  class="comments">** table indexing resulting in nil or false do not change the subject.)</a>
<a id=905></a><a  class="comments">*/</a>
<a id=906></a>static int <a href="../h_src/143305132.htm" class="function">add_value</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143304996.htm" class="localvar">ms</a>, <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> *<a href="../h_src/143304860.htm" class="localvar">b</a>, const char *<a href="../h_src/143304724.htm" class="localvar">s</a>,
<a id=907></a>                                      const char *<a href="../h_src/143304588.htm" class="localvar">e</a>, int <a href="../h_src/143304452.htm" class="localvar">tr</a>) {
<a id=908></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143304316.htm" class="localvar">L</a> = <a href="../h_src/143304996.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>;
<a id=909></a>  switch (<a href="../h_src/143304452.htm" class="localvar">tr</a>) {
<a id=910></a>    case <a href="../h_src/57443232.htm" class="macro">LUA_TFUNCTION</a>: {  <a  class="comments">/* call the function */</a>
<a id=911></a>      int <a href="../h_src/143304180.htm" class="localvar">n</a>;
<a id=912></a>      <a href="../h_src/57439220.htm" class="function">lua_pushvalue</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, 3);  <a  class="comments">/* push the function */</a>
<a id=913></a>      <a href="../h_src/143304180.htm" class="localvar">n</a> = <a href="../h_src/143313836.htm" class="function">push_captures</a>(<a href="../h_src/143304996.htm" class="localvar">ms</a>, <a href="../h_src/143304724.htm" class="localvar">s</a>, <a href="../h_src/143304588.htm" class="localvar">e</a>);  <a  class="comments">/* all captures as arguments */</a>
<a id=914></a>      <a href="../h_src/57432964.htm" class="macro">lua_call</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, <a href="../h_src/143304180.htm" class="localvar">n</a>, 1);  <a  class="comments">/* call it */</a>
      break;
    }
<a id=917></a>    case <a href="../h_src/57443368.htm" class="macro">LUA_TTABLE</a>: {  <a  class="comments">/* index the table */</a>
<a id=918></a>      <a href="../h_src/143314788.htm" class="function">push_onecapture</a>(<a href="../h_src/143304996.htm" class="localvar">ms</a>, 0, <a href="../h_src/143304724.htm" class="localvar">s</a>, <a href="../h_src/143304588.htm" class="localvar">e</a>);  <a  class="comments">/* first capture is the index */</a>
<a id=919></a>      <a href="../h_src/57434324.htm" class="function">lua_gettable</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, 3);
      break;
    }
<a id=922></a>    default: {  <a  class="comments">/* LUA_TNUMBER or LUA_TSTRING */</a>
<a id=923></a>      <a href="../h_src/143306628.htm" class="function">add_s</a>(<a href="../h_src/143304996.htm" class="localvar">ms</a>, <a href="../h_src/143304860.htm" class="localvar">b</a>, <a href="../h_src/143304724.htm" class="localvar">s</a>, <a href="../h_src/143304588.htm" class="localvar">e</a>);  <a  class="comments">/* add value to the buffer */</a>
<a id=924></a>      return 1;  <a  class="comments">/* something changed */</a>
    }
  }
<a id=927></a>  if (!<a href="../h_src/57438268.htm" class="function">lua_toboolean</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, -1)) {  <a  class="comments">/* nil or false? */</a>
<a id=928></a>    <a href="../h_src/57429292.htm" class="macro">lua_pop</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, 1);  <a  class="comments">/* remove value */</a>
<a id=929></a>    <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(<a href="../h_src/143304860.htm" class="localvar">b</a>, <a href="../h_src/143304724.htm" class="localvar">s</a>, <a href="../h_src/143304588.htm" class="localvar">e</a> - <a href="../h_src/143304724.htm" class="localvar">s</a>);  <a  class="comments">/* keep original text */</a>
<a id=930></a>    return 0;  <a  class="comments">/* no changes */</a>
  }
<a id=932></a>  else if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(!<a href="../h_src/57438812.htm" class="function">lua_isstring</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, -1)))
<a id=933></a>    return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, &quot;invalid replacement value (a %s)&quot;,
<a id=934></a>                         <a href="../h_src/57416712.htm" class="macro">luaL_typename</a>(<a href="../h_src/143304316.htm" class="localvar">L</a>, -1));
  else {
<a id=936></a>    <a href="../h_src/57413380.htm" class="function">luaL_addvalue</a>(<a href="../h_src/143304860.htm" class="localvar">b</a>);  <a  class="comments">/* add result to accumulator */</a>
<a id=937></a>    return 1;  <a  class="comments">/* something changed */</a>
  }
}


<a id=942></a>static int <a href="../h_src/143304044.htm" class="function">str_gsub</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143303908.htm" class="localvar">L</a>) {
<a id=943></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143303772.htm" class="localvar">srcl</a>, <a href="../h_src/143303636.htm" class="localvar">lp</a>;
<a id=944></a>  const char *<a href="../h_src/143303500.htm" class="localvar">src</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, 1, &amp;<a href="../h_src/143303772.htm" class="localvar">srcl</a>);  <a  class="comments">/* subject */</a>
<a id=945></a>  const char *<a href="../h_src/143303364.htm" class="localvar">p</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, 2, &amp;<a href="../h_src/143303636.htm" class="localvar">lp</a>);  <a  class="comments">/* pattern */</a>
<a id=946></a>  const char *<a href="../h_src/143303228.htm" class="localvar">lastmatch</a> = NULL;  <a  class="comments">/* end of last match */</a>
<a id=947></a>  int <a href="../h_src/143303092.htm" class="localvar">tr</a> = <a href="../h_src/57438540.htm" class="function">lua_type</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, 3);  <a  class="comments">/* replacement type */</a>
<a id=948></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143302956.htm" class="localvar">max_s</a> = <a href="../h_src/57419908.htm" class="function">luaL_optinteger</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, 4, <a href="../h_src/143303772.htm" class="localvar">srcl</a> + 1);  <a  class="comments">/* max replacements */</a>
<a id=949></a>  int <a href="../h_src/143302820.htm" class="localvar">anchor</a> = (*<a href="../h_src/143303364.htm" class="localvar">p</a> == '^');
<a id=950></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143302684.htm" class="localvar">n</a> = 0;  <a  class="comments">/* replacement count */</a>
<a id=951></a>  int <a href="../h_src/143302548.htm" class="localvar">changed</a> = 0;  <a  class="comments">/* change flag */</a>
<a id=952></a>  <a href="../h_src/143327300.htm" class="type">MatchState</a> <a href="../h_src/143302412.htm" class="localvar">ms</a>;
<a id=953></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143302276.htm" class="localvar">b</a>;
<a id=954></a>  <a href="../h_src/57417120.htm" class="macro">luaL_argexpected</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, <a href="../h_src/143303092.htm" class="localvar">tr</a> == <a href="../h_src/57443640.htm" class="macro">LUA_TNUMBER</a> || tr == <a href="../h_src/57443504.htm" class="macro">LUA_TSTRING</a> ||
<a id=955></a>                   <a href="../h_src/143303092.htm" class="localvar">tr</a> == <a href="../h_src/57443232.htm" class="macro">LUA_TFUNCTION</a> || tr == <a href="../h_src/57443368.htm" class="macro">LUA_TTABLE</a>, 3,
                      &quot;string/function/table&quot;);
<a id=957></a>  <a href="../h_src/57413652.htm" class="function">luaL_buffinit</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, &amp;<a href="../h_src/143302276.htm" class="localvar">b</a>);
<a id=958></a>  if (<a href="../h_src/143302820.htm" class="localvar">anchor</a>) {
<a id=959></a>    <a href="../h_src/143303364.htm" class="localvar">p</a>++; <a href="../h_src/143303636.htm" class="localvar">lp</a>--;  <a  class="comments">/* skip anchor character */</a>
  }
<a id=961></a>  <a href="../h_src/143312476.htm" class="function">prepstate</a>(&amp;<a href="../h_src/143302412.htm" class="localvar">ms</a>, <a href="../h_src/143303908.htm" class="localvar">L</a>, <a href="../h_src/143303500.htm" class="localvar">src</a>, <a href="../h_src/143303772.htm" class="localvar">srcl</a>, <a href="../h_src/143303364.htm" class="localvar">p</a>, <a href="../h_src/143303636.htm" class="localvar">lp</a>);
<a id=962></a>  while (<a href="../h_src/143302684.htm" class="localvar">n</a> &lt; <a href="../h_src/143302956.htm" class="localvar">max_s</a>) {
<a id=963></a>    const char *<a href="../h_src/143302140.htm" class="localvar">e</a>;
<a id=964></a>    <a href="../h_src/143311524.htm" class="function">reprepstate</a>(&amp;<a href="../h_src/143302412.htm" class="localvar">ms</a>);  <a  class="comments">/* (re)prepare state for new match */</a>
<a id=965></a>    if ((<a href="../h_src/143302140.htm" class="localvar">e</a> = <a href="../h_src/143327232.htm" class="function">match</a>(&amp;<a href="../h_src/143302412.htm" class="localvar">ms</a>, <a href="../h_src/143303500.htm" class="localvar">src</a>, <a href="../h_src/143303364.htm" class="localvar">p</a>)) != NULL &amp;&amp; <a href="../h_src/143302140.htm" class="localvar">e</a> != <a href="../h_src/143303228.htm" class="localvar">lastmatch</a>) {  <a  class="comments">/* match? */</a>
<a id=966></a>      <a href="../h_src/143302684.htm" class="localvar">n</a>++;
<a id=967></a>      <a href="../h_src/143302548.htm" class="localvar">changed</a> = <a href="../h_src/143305132.htm" class="function">add_value</a>(&amp;<a href="../h_src/143302412.htm" class="localvar">ms</a>, &amp;<a href="../h_src/143302276.htm" class="localvar">b</a>, <a href="../h_src/143303500.htm" class="localvar">src</a>, <a href="../h_src/143302140.htm" class="localvar">e</a>, <a href="../h_src/143303092.htm" class="localvar">tr</a>) | <a href="../h_src/143302548.htm" class="localvar">changed</a>;
<a id=968></a>      <a href="../h_src/143303500.htm" class="localvar">src</a> = <a href="../h_src/143303228.htm" class="localvar">lastmatch</a> = <a href="../h_src/143302140.htm" class="localvar">e</a>;
    }
<a id=970></a>    else if (<a href="../h_src/143303500.htm" class="localvar">src</a> &lt; <a href="../h_src/143302412.htm" class="localvar">ms</a>.<a href="../h_src/143328116.htm" class="variable">src_end</a>)  <a  class="comments">/* otherwise, skip one character */</a>
<a id=971></a>      <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(&amp;<a href="../h_src/143302276.htm" class="localvar">b</a>, *<a href="../h_src/143303500.htm" class="localvar">src</a>++);
<a id=972></a>    else break;  <a  class="comments">/* end of subject */</a>
<a id=973></a>    if (<a href="../h_src/143302820.htm" class="localvar">anchor</a>) break;
  }
<a id=975></a>  if (!<a href="../h_src/143302548.htm" class="localvar">changed</a>)  <a  class="comments">/* no changes? */</a>
<a id=976></a>    <a href="../h_src/57439220.htm" class="function">lua_pushvalue</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, 1);  <a  class="comments">/* return original string */</a>
<a id=977></a>  else {  <a  class="comments">/* something changed */</a>
<a id=978></a>    <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(&amp;<a href="../h_src/143302276.htm" class="localvar">b</a>, <a href="../h_src/143303500.htm" class="localvar">src</a>, <a href="../h_src/143302412.htm" class="localvar">ms</a>.<a href="../h_src/143328116.htm" class="variable">src_end</a>-<a href="../h_src/143303500.htm" class="localvar">src</a>);
<a id=979></a>    <a href="../h_src/57413312.htm" class="function">luaL_pushresult</a>(&amp;<a href="../h_src/143302276.htm" class="localvar">b</a>);  <a  class="comments">/* create and return new string */</a>
  }
<a id=981></a>  <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143303908.htm" class="localvar">L</a>, <a href="../h_src/143302684.htm" class="localvar">n</a>);  <a  class="comments">/* number of substitutions */</a>
  return 2;
}

<a id=985></a><a  class="comments">/* }====================================================== */</a>



<a id=989></a><a  class="comments">/*</a>
<a id=990></a><a  class="comments">** {======================================================</a>
<a id=991></a><a  class="comments">** STRING FORMAT</a>
<a id=992></a><a  class="comments">** =======================================================</a>
<a id=993></a><a  class="comments">*/</a>

<a id=995></a>#if !defined(<a href="../h_src/143302004.htm" class="macro">lua_number2strx</a>)	<a  class="comments">/* { */</a>

<a id=997></a><a  class="comments">/*</a>
<a id=998></a><a  class="comments">** Hexadecimal floating-point formatter</a>
<a id=999></a><a  class="comments">*/</a>

<a id=1001></a>#define <a href="../h_src/143301868.htm" class="macro">SIZELENMOD</a>	(sizeof(LUA_NUMBER_FRMLEN)/sizeof(char))


<a id=1004></a><a  class="comments">/*</a>
<a id=1005></a><a  class="comments">** Number of bits that goes into the first digit. It can be any value</a>
<a id=1006></a><a  class="comments">** between 1 and 4; the following definition tries to align the number</a>
<a id=1007></a><a  class="comments">** to nibble boundaries by making what is left after that first digit a</a>
<a id=1008></a><a  class="comments">** multiple of 4.</a>
<a id=1009></a><a  class="comments">*/</a>
<a id=1010></a>#define <a href="../h_src/143301732.htm" class="macro">L_NBFD</a>		((l_floatatt(MANT_DIG) - 1)%4 + 1)


<a id=1013></a><a  class="comments">/*</a>
<a id=1014></a><a  class="comments">** Add integer part of 'x' to buffer and return new 'x'</a>
<a id=1015></a><a  class="comments">*/</a>
<a id=1016></a>static <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143301596.htm" class="function">adddigit</a> (char *<a href="../h_src/143301460.htm" class="localvar">buff</a>, int <a href="../h_src/143301324.htm" class="localvar">n</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143301188.htm" class="localvar">x</a>) {
<a id=1017></a>  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143301052.htm" class="localvar">dd</a> = <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(<a href="../h_aa/57917572.htm" class="libfunc">floor</a>)(<a href="../h_src/143301188.htm" class="localvar">x</a>);  <a  class="comments">/* get integer part from 'x' */</a>
<a id=1018></a>  int <a href="../h_src/143300916.htm" class="localvar">d</a> = (int)<a href="../h_src/143301052.htm" class="localvar">dd</a>;
<a id=1019></a>  <a href="../h_src/143301460.htm" class="localvar">buff</a>[<a href="../h_src/143301324.htm" class="localvar">n</a>] = (<a href="../h_src/143300916.htm" class="localvar">d</a> &lt; 10 ? <a href="../h_src/143300916.htm" class="localvar">d</a> + '0' : <a href="../h_src/143300916.htm" class="localvar">d</a> - 10 + 'a');  <a  class="comments">/* add to buffer */</a>
<a id=1020></a>  return <a href="../h_src/143301188.htm" class="localvar">x</a> - <a href="../h_src/143301052.htm" class="localvar">dd</a>;  <a  class="comments">/* return what is left */</a>
}


<a id=1024></a>static int <a href="../h_src/143300780.htm" class="function">num2straux</a> (char *<a href="../h_src/143300644.htm" class="localvar">buff</a>, int <a href="../h_src/143300508.htm" class="localvar">sz</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143300372.htm" class="localvar">x</a>) {
<a id=1025></a>  <a  class="comments">/* if 'inf' or 'NaN', format it like '%g' */</a>
<a id=1026></a>  if (<a href="../h_src/143300372.htm" class="localvar">x</a> != <a href="../h_src/143300372.htm" class="localvar">x</a> || <a href="../h_src/143300372.htm" class="localvar">x</a> == (<a href="../h_src/57442144.htm" class="type">lua_Number</a>)HUGE_VAL || <a href="../h_src/143300372.htm" class="localvar">x</a> == -(<a href="../h_src/57442144.htm" class="type">lua_Number</a>)HUGE_VAL)
<a id=1027></a>    return <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143300644.htm" class="localvar">buff</a>, <a href="../h_src/143300508.htm" class="localvar">sz</a>, <a href="../h_src/57451460.htm" class="macro">LUA_NUMBER_FMT</a>, (<a href="../h_src/57451732.htm" class="macro">LUAI_UACNUMBER</a>)<a href="../h_src/143300372.htm" class="localvar">x</a>);
<a id=1028></a>  else if (<a href="../h_src/143300372.htm" class="localvar">x</a> == 0) {  <a  class="comments">/* can be -0... */</a>
<a id=1029></a>    <a  class="comments">/* create &quot;0&quot; or &quot;-0&quot; followed by exponent */</a>
<a id=1030></a>    return <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143300644.htm" class="localvar">buff</a>, <a href="../h_src/143300508.htm" class="localvar">sz</a>, <a href="../h_src/57451460.htm" class="macro">LUA_NUMBER_FMT</a> &quot;x0p+0&quot;, (<a href="../h_src/57451732.htm" class="macro">LUAI_UACNUMBER</a>)<a href="../h_src/143300372.htm" class="localvar">x</a>);
  }
  else {
<a id=1033></a>    int <a href="../h_src/143300236.htm" class="localvar">e</a>;
<a id=1034></a>    <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143300100.htm" class="localvar">m</a> = <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(<a href="../h_aa/58118864.htm" class="libfunc">frexp</a>)(<a href="../h_src/143300372.htm" class="localvar">x</a>, &amp;<a href="../h_src/143300236.htm" class="localvar">e</a>);  <a  class="comments">/* 'x' fraction and exponent */</a>
<a id=1035></a>    int <a href="../h_src/143299964.htm" class="localvar">n</a> = 0;  <a  class="comments">/* character count */</a>
<a id=1036></a>    if (<a href="../h_src/143300100.htm" class="localvar">m</a> &lt; 0) {  <a  class="comments">/* is number negative? */</a>
<a id=1037></a>      <a href="../h_src/143300644.htm" class="localvar">buff</a>[<a href="../h_src/143299964.htm" class="localvar">n</a>++] = '-';  <a  class="comments">/* add sign */</a>
<a id=1038></a>      <a href="../h_src/143300100.htm" class="localvar">m</a> = -<a href="../h_src/143300100.htm" class="localvar">m</a>;  <a  class="comments">/* make it positive */</a>
    }
<a id=1040></a>    <a href="../h_src/143300644.htm" class="localvar">buff</a>[<a href="../h_src/143299964.htm" class="localvar">n</a>++] = '0'; <a href="../h_src/143300644.htm" class="localvar">buff</a>[<a href="../h_src/143299964.htm" class="localvar">n</a>++] = 'x';  <a  class="comments">/* add &quot;0x&quot; */</a>
<a id=1041></a>    <a href="../h_src/143300100.htm" class="localvar">m</a> = <a href="../h_src/143301596.htm" class="function">adddigit</a>(<a href="../h_src/143300644.htm" class="localvar">buff</a>, <a href="../h_src/143299964.htm" class="localvar">n</a>++, <a href="../h_src/143300100.htm" class="localvar">m</a> * (1 &lt;&lt; <a href="../h_src/143301732.htm" class="macro">L_NBFD</a>));  <a  class="comments">/* add first digit */</a>
<a id=1042></a>    <a href="../h_src/143300236.htm" class="localvar">e</a> -= <a href="../h_src/143301732.htm" class="macro">L_NBFD</a>;  <a  class="comments">/* this digit goes before the radix point */</a>
<a id=1043></a>    if (<a href="../h_src/143300100.htm" class="localvar">m</a> &gt; 0) {  <a  class="comments">/* more digits? */</a>
<a id=1044></a>      <a href="../h_src/143300644.htm" class="localvar">buff</a>[<a href="../h_src/143299964.htm" class="localvar">n</a>++] = <a href="../h_src/57448468.htm" class="macro">lua_getlocaledecpoint</a>();  <a  class="comments">/* add radix point */</a>
<a id=1045></a>      do {  <a  class="comments">/* add as many digits as needed */</a>
<a id=1046></a>        <a href="../h_src/143300100.htm" class="localvar">m</a> = <a href="../h_src/143301596.htm" class="function">adddigit</a>(<a href="../h_src/143300644.htm" class="localvar">buff</a>, <a href="../h_src/143299964.htm" class="localvar">n</a>++, <a href="../h_src/143300100.htm" class="localvar">m</a> * 16);
<a id=1047></a>      } while (<a href="../h_src/143300100.htm" class="localvar">m</a> &gt; 0);
    }
<a id=1049></a>    <a href="../h_src/143299964.htm" class="localvar">n</a> += <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143300644.htm" class="localvar">buff</a> + <a href="../h_src/143299964.htm" class="localvar">n</a>, <a href="../h_src/143300508.htm" class="localvar">sz</a> - <a href="../h_src/143299964.htm" class="localvar">n</a>, &quot;p%+d&quot;, <a href="../h_src/143300236.htm" class="localvar">e</a>);  <a  class="comments">/* add exponent */</a>
<a id=1050></a>    <a href="../h_src/57415352.htm" class="macro">lua_assert</a>(n &lt; sz);
<a id=1051></a>    return <a href="../h_src/143299964.htm" class="localvar">n</a>;
  }
}


<a id=1056></a>static int <a href="../h_src/143299828.htm" class="function">lua_number2strx</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143299692.htm" class="localvar">L</a>, char *<a href="../h_src/143299556.htm" class="localvar">buff</a>, int <a href="../h_src/143299420.htm" class="localvar">sz</a>,
<a id=1057></a>                            const char *<a href="../h_src/143299284.htm" class="localvar">fmt</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143299148.htm" class="localvar">x</a>) {
<a id=1058></a>  int <a href="../h_src/143299012.htm" class="localvar">n</a> = <a href="../h_src/143300780.htm" class="function">num2straux</a>(<a href="../h_src/143299556.htm" class="localvar">buff</a>, <a href="../h_src/143299420.htm" class="localvar">sz</a>, <a href="../h_src/143299148.htm" class="localvar">x</a>);
<a id=1059></a>  if (<a href="../h_src/143299284.htm" class="localvar">fmt</a>[<a href="../h_src/143301868.htm" class="macro">SIZELENMOD</a>] == 'A') {
<a id=1060></a>    int <a href="../h_src/143298876.htm" class="localvar">i</a>;
<a id=1061></a>    for (<a href="../h_src/143298876.htm" class="localvar">i</a> = 0; <a href="../h_src/143298876.htm" class="localvar">i</a> &lt; <a href="../h_src/143299012.htm" class="localvar">n</a>; <a href="../h_src/143298876.htm" class="localvar">i</a>++)
<a id=1062></a>      <a href="../h_src/143299556.htm" class="localvar">buff</a>[<a href="../h_src/143298876.htm" class="localvar">i</a>] = <a href="../h_aa/58309704.htm" class="libfunc">toupper</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(<a href="../h_src/143299556.htm" class="localvar">buff</a>[<a href="../h_src/143298876.htm" class="localvar">i</a>]));
  }
<a id=1064></a>  else if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143299284.htm" class="localvar">fmt</a>[<a href="../h_src/143301868.htm" class="macro">SIZELENMOD</a>] != 'a'))
<a id=1065></a>    return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143299692.htm" class="localvar">L</a>, &quot;modifiers for format '%%a'/'%%A' not implemented&quot;);
<a id=1066></a>  return <a href="../h_src/143299012.htm" class="localvar">n</a>;
}

<a id=1069></a>#endif				<a  class="comments">/* } */</a>


<a id=1072></a><a  class="comments">/*</a>
<a id=1073></a><a  class="comments">** Maximum size for items formatted with '%f'. This size is produced</a>
<a id=1074></a><a  class="comments">** by format('%.99f', -maxfloat), and is equal to 99 + 3 ('-', '.',</a>
<a id=1075></a><a  class="comments">** and '\0') + number of decimal digits to represent maxfloat (which</a>
<a id=1076></a><a  class="comments">** is maximum exponent + 1). (99+3+1, adding some extra, 110)</a>
<a id=1077></a><a  class="comments">*/</a>
<a id=1078></a>#define <a href="../h_src/143298740.htm" class="macro">MAX_ITEMF</a>	(110 + l_floatatt(MAX_10_EXP))


<a id=1081></a><a  class="comments">/*</a>
<a id=1082></a><a  class="comments">** All formats except '%f' do not need that large limit.  The other</a>
<a id=1083></a><a  class="comments">** float formats use exponents, so that they fit in the 99 limit for</a>
<a id=1084></a><a  class="comments">** significant digits; 's' for large strings and 'q' add items directly</a>
<a id=1085></a><a  class="comments">** to the buffer; all integer formats also fit in the 99 limit.  The</a>
<a id=1086></a><a  class="comments">** worst case are floats: they may need 99 significant digits, plus</a>
<a id=1087></a><a  class="comments">** '0x', '-', '.', 'e+XXXX', and '\0'. Adding some extra, 120.</a>
<a id=1088></a><a  class="comments">*/</a>
<a id=1089></a>#define <a href="../h_src/143298604.htm" class="macro">MAX_ITEM</a>	120


<a id=1092></a><a  class="comments">/* valid flags in a format specification */</a>
<a id=1093></a>#if !defined(<a href="../h_src/143298468.htm" class="macro">L_FMTFLAGSF</a>)

<a id=1095></a><a  class="comments">/* valid flags for a, A, e, E, f, F, g, and G conversions */</a>
<a id=1096></a>#define <a href="../h_src/143298332.htm" class="macro">L_FMTFLAGSF</a>	&quot;-+#0 &quot;

<a id=1098></a><a  class="comments">/* valid flags for o, x, and X conversions */</a>
<a id=1099></a>#define <a href="../h_src/143298196.htm" class="macro">L_FMTFLAGSX</a>	&quot;-#0&quot;

<a id=1101></a><a  class="comments">/* valid flags for d and i conversions */</a>
<a id=1102></a>#define <a href="../h_src/143298060.htm" class="macro">L_FMTFLAGSI</a>	&quot;-+0 &quot;

<a id=1104></a><a  class="comments">/* valid flags for u conversions */</a>
<a id=1105></a>#define <a href="../h_src/143297924.htm" class="macro">L_FMTFLAGSU</a>	&quot;-0&quot;

<a id=1107></a><a  class="comments">/* valid flags for c, p, and s conversions */</a>
<a id=1108></a>#define <a href="../h_src/143297788.htm" class="macro">L_FMTFLAGSC</a>	&quot;-&quot;

#endif


<a id=1113></a><a  class="comments">/*</a>
<a id=1114></a><a  class="comments">** Maximum size of each format specification (such as &quot;%-099.99d&quot;):</a>
<a id=1115></a><a  class="comments">** Initial '%', flags (up to 5), width (2), period, precision (2),</a>
<a id=1116></a><a  class="comments">** length modifier (8), conversion specifier, and final '\0', plus some</a>
<a id=1117></a><a  class="comments">** extra.</a>
<a id=1118></a><a  class="comments">*/</a>
<a id=1119></a>#define <a href="../h_src/143297652.htm" class="macro">MAX_FORMAT</a>	32


<a id=1122></a>static void <a href="../h_src/143297516.htm" class="function">addquoted</a> (<a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> *<a href="../h_src/143297380.htm" class="localvar">b</a>, const char *<a href="../h_src/143297244.htm" class="localvar">s</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143297108.htm" class="localvar">len</a>) {
<a id=1123></a>  <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(<a href="../h_src/57415216.htm" class="variable">b</a>, '&quot;');
<a id=1124></a>  while (<a href="../h_src/143297108.htm" class="localvar">len</a>--) {
<a id=1125></a>    if (*<a href="../h_src/143297244.htm" class="localvar">s</a> == '&quot;' || *<a href="../h_src/143297244.htm" class="localvar">s</a> == '\\' || *<a href="../h_src/143297244.htm" class="localvar">s</a> == '\n') {
<a id=1126></a>      <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(<a href="../h_src/57415216.htm" class="variable">b</a>, '\\');
<a id=1127></a>      <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(<a href="../h_src/57415216.htm" class="variable">b</a>, *<a href="../h_src/143297244.htm" class="localvar">s</a>);
    }
<a id=1129></a>    else if (<a href="../h_aa/143324648.htm" class="libfunc">iscntrl</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143297244.htm" class="localvar">s</a>))) {
<a id=1130></a>      char <a href="../h_src/143296972.htm" class="localvar">buff</a>[10];
<a id=1131></a>      if (!<a href="../h_aa/58309772.htm" class="libfunc">isdigit</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*(<a href="../h_src/143297244.htm" class="localvar">s</a>+1))))
<a id=1132></a>        <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143296972.htm" class="localvar">buff</a>, sizeof(<a href="../h_src/143296972.htm" class="localvar">buff</a>), &quot;\\%d&quot;, (int)<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143297244.htm" class="localvar">s</a>));
      else
<a id=1134></a>        <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143296972.htm" class="localvar">buff</a>, sizeof(<a href="../h_src/143296972.htm" class="localvar">buff</a>), &quot;\\%03d&quot;, (int)<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143297244.htm" class="localvar">s</a>));
<a id=1135></a>      <a href="../h_src/57413448.htm" class="function">luaL_addstring</a>(<a href="../h_src/143297380.htm" class="localvar">b</a>, <a href="../h_src/143296972.htm" class="localvar">buff</a>);
    }
    else
<a id=1138></a>      <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(<a href="../h_src/57415216.htm" class="variable">b</a>, *<a href="../h_src/143297244.htm" class="localvar">s</a>);
<a id=1139></a>    <a href="../h_src/143297244.htm" class="localvar">s</a>++;
  }
<a id=1141></a>  <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(<a href="../h_src/57415216.htm" class="variable">b</a>, '&quot;');
}


<a id=1145></a><a  class="comments">/*</a>
<a id=1146></a><a  class="comments">** Serialize a floating-point number in such a way that it can be</a>
<a id=1147></a><a  class="comments">** scanned back by Lua. Use hexadecimal format for &quot;common&quot; numbers</a>
<a id=1148></a><a  class="comments">** (to preserve precision); inf, -inf, and NaN are handled separately.</a>
<a id=1149></a><a  class="comments">** (NaN cannot be expressed as a numeral, so we write '(0/0)' for it.)</a>
<a id=1150></a><a  class="comments">*/</a>
<a id=1151></a>static int <a href="../h_src/143296836.htm" class="function">quotefloat</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143296700.htm" class="localvar">L</a>, char *<a href="../h_src/143296564.htm" class="localvar">buff</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143296428.htm" class="localvar">n</a>) {
<a id=1152></a>  const char *<a href="../h_src/143296292.htm" class="localvar">s</a>;  <a  class="comments">/* for the fixed representations */</a>
<a id=1153></a>  if (<a href="../h_src/143296428.htm" class="localvar">n</a> == (<a href="../h_src/57442144.htm" class="type">lua_Number</a>)<a href="../h_src/57449420.htm" class="macro">HUGE_VAL</a>)  <a  class="comments">/* inf? */</a>
<a id=1154></a>    <a href="../h_src/143296292.htm" class="localvar">s</a> = &quot;1e9999&quot;;
<a id=1155></a>  else if (<a href="../h_src/143296428.htm" class="localvar">n</a> == -(<a href="../h_src/57442144.htm" class="type">lua_Number</a>)<a href="../h_src/57449420.htm" class="macro">HUGE_VAL</a>)  <a  class="comments">/* -inf? */</a>
<a id=1156></a>    <a href="../h_src/143296292.htm" class="localvar">s</a> = &quot;-1e9999&quot;;
<a id=1157></a>  else if (<a href="../h_src/143296428.htm" class="localvar">n</a> != <a href="../h_src/143296428.htm" class="localvar">n</a>)  <a  class="comments">/* NaN? */</a>
<a id=1158></a>    <a href="../h_src/143296292.htm" class="localvar">s</a> = &quot;(0/0)&quot;;
<a id=1159></a>  else {  <a  class="comments">/* format number as hexadecimal */</a>
<a id=1160></a>    int  <a href="../h_src/143296156.htm" class="localvar">nb</a> = <a href="../h_src/143299828.htm" class="function">lua_number2strx</a>(<a href="../h_src/143296700.htm" class="localvar">L</a>, <a href="../h_src/143296564.htm" class="localvar">buff</a>, <a href="../h_src/143298604.htm" class="macro">MAX_ITEM</a>,
<a id=1161></a>                                 &quot;%&quot; <a href="../h_src/57451596.htm" class="macro">LUA_NUMBER_FRMLEN</a> &quot;a&quot;, <a href="../h_src/143296428.htm" class="localvar">n</a>);
<a id=1162></a>    <a  class="comments">/* ensures that 'buff' string uses a dot as the radix character */</a>
<a id=1163></a>    if (<a href="../h_aa/143315808.htm" class="libfunc">memchr</a>(<a href="../h_src/143296564.htm" class="localvar">buff</a>, '.', <a href="../h_src/143296156.htm" class="localvar">nb</a>) == NULL) {  <a  class="comments">/* no dot? */</a>
<a id=1164></a>      char <a href="../h_src/143296020.htm" class="localvar">point</a> = <a href="../h_src/57448468.htm" class="macro">lua_getlocaledecpoint</a>();  <a  class="comments">/* try locale point */</a>
<a id=1165></a>      char *<a href="../h_src/143295884.htm" class="localvar">ppoint</a> = (char *)<a href="../h_aa/143315808.htm" class="libfunc">memchr</a>(<a href="../h_src/143296564.htm" class="localvar">buff</a>, <a href="../h_src/143296020.htm" class="localvar">point</a>, <a href="../h_src/143296156.htm" class="localvar">nb</a>);
<a id=1166></a>      if (<a href="../h_src/143295884.htm" class="localvar">ppoint</a>) *<a href="../h_src/143295884.htm" class="localvar">ppoint</a> = '.';  <a  class="comments">/* change it to a dot */</a>
    }
<a id=1168></a>    return <a href="../h_src/143296156.htm" class="localvar">nb</a>;
  }
<a id=1170></a>  <a  class="comments">/* for the fixed representations */</a>
<a id=1171></a>  return <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143296564.htm" class="localvar">buff</a>, <a href="../h_src/143298604.htm" class="macro">MAX_ITEM</a>, &quot;%s&quot;, <a href="../h_src/143296292.htm" class="localvar">s</a>);
}


<a id=1175></a>static void <a href="../h_src/143295748.htm" class="function">addliteral</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> *<a href="../h_src/143295476.htm" class="localvar">b</a>, int <a href="../h_src/143295340.htm" class="localvar">arg</a>) {
<a id=1176></a>  switch (<a href="../h_src/57438540.htm" class="function">lua_type</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143295340.htm" class="localvar">arg</a>)) {
<a id=1177></a>    case <a href="../h_src/57443504.htm" class="macro">LUA_TSTRING</a>: {
<a id=1178></a>      <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143295204.htm" class="localvar">len</a>;
<a id=1179></a>      const char *<a href="../h_src/143295068.htm" class="localvar">s</a> = <a href="../h_src/57438200.htm" class="function">lua_tolstring</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143295340.htm" class="localvar">arg</a>, &amp;<a href="../h_src/143295204.htm" class="localvar">len</a>);
<a id=1180></a>      <a href="../h_src/143297516.htm" class="function">addquoted</a>(<a href="../h_src/143295476.htm" class="localvar">b</a>, <a href="../h_src/143295068.htm" class="localvar">s</a>, <a href="../h_src/143295204.htm" class="localvar">len</a>);
      break;
    }
<a id=1183></a>    case <a href="../h_src/57443640.htm" class="macro">LUA_TNUMBER</a>: {
<a id=1184></a>      char *<a href="../h_src/143294932.htm" class="localvar">buff</a> = <a href="../h_src/57413584.htm" class="function">luaL_prepbuffsize</a>(<a href="../h_src/143295476.htm" class="localvar">b</a>, <a href="../h_src/143298604.htm" class="macro">MAX_ITEM</a>);
<a id=1185></a>      int <a href="../h_src/143294796.htm" class="localvar">nb</a>;
<a id=1186></a>      if (!<a href="../h_src/57438676.htm" class="function">lua_isinteger</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143295340.htm" class="localvar">arg</a>))  <a  class="comments">/* float? */</a>
<a id=1187></a>        <a href="../h_src/143294796.htm" class="localvar">nb</a> = <a href="../h_src/143296836.htm" class="function">quotefloat</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143294932.htm" class="localvar">buff</a>, <a href="../h_src/57429564.htm" class="macro">lua_tonumber</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143295340.htm" class="localvar">arg</a>));
<a id=1188></a>      else {  <a  class="comments">/* integers */</a>
<a id=1189></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143294660.htm" class="localvar">n</a> = <a href="../h_src/57429428.htm" class="macro">lua_tointeger</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143295340.htm" class="localvar">arg</a>);
<a id=1190></a>        const char *<a href="../h_src/143294524.htm" class="localvar">format</a> = (<a href="../h_src/143294660.htm" class="localvar">n</a> == <a href="../h_src/57449964.htm" class="macro">LUA_MININTEGER</a>)  <a  class="comments">/* corner case? */</a>
<a id=1191></a>                           ? &quot;0x%&quot; <a href="../h_src/57450236.htm" class="macro">LUA_INTEGER_FRMLEN</a> &quot;x&quot;  <a  class="comments">/* use hex */</a>
<a id=1192></a>                           : <a href="../h_src/57451052.htm" class="macro">LUA_INTEGER_FMT</a>;  <a  class="comments">/* else use default format */</a>
<a id=1193></a>        <a href="../h_src/143294796.htm" class="localvar">nb</a> = <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143294932.htm" class="localvar">buff</a>, <a href="../h_src/143298604.htm" class="macro">MAX_ITEM</a>, <a href="../h_src/143294524.htm" class="localvar">format</a>, (<a href="../h_src/57450916.htm" class="macro">LUAI_UACINT</a>)<a href="../h_src/143294660.htm" class="localvar">n</a>);
      }
<a id=1195></a>      <a href="../h_src/57413924.htm" class="macro">luaL_addsize</a>(<a href="../h_src/143295476.htm" class="localvar">b</a>, <a href="../h_src/143294796.htm" class="localvar">nb</a>);
      break;
    }
<a id=1198></a>    case <a href="../h_src/57444048.htm" class="macro">LUA_TNIL</a>: case <a href="../h_src/57443912.htm" class="macro">LUA_TBOOLEAN</a>: {
<a id=1199></a>      <a href="../h_src/57420452.htm" class="function">luaL_tolstring</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143295340.htm" class="localvar">arg</a>, NULL);
<a id=1200></a>      <a href="../h_src/57413380.htm" class="function">luaL_addvalue</a>(<a href="../h_src/143295476.htm" class="localvar">b</a>);
      break;
    }
    default: {
<a id=1204></a>      <a href="../h_src/57420384.htm" class="function">luaL_argerror</a>(<a href="../h_src/143295612.htm" class="localvar">L</a>, <a href="../h_src/143295340.htm" class="localvar">arg</a>, &quot;value has no literal form&quot;);
    }
  }
}


<a id=1210></a>static const char *<a href="../h_src/143294388.htm" class="function">get2digits</a> (const char *<a href="../h_src/143294252.htm" class="localvar">s</a>) {
<a id=1211></a>  if (<a href="../h_aa/58309772.htm" class="libfunc">isdigit</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143294252.htm" class="localvar">s</a>))) {
<a id=1212></a>    <a href="../h_src/143294252.htm" class="localvar">s</a>++;
<a id=1213></a>    if (<a href="../h_aa/58309772.htm" class="libfunc">isdigit</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143294252.htm" class="localvar">s</a>))) <a href="../h_src/143294252.htm" class="localvar">s</a>++;  <a  class="comments">/* (2 digits at most) */</a>
  }
<a id=1215></a>  return <a href="../h_src/143294252.htm" class="localvar">s</a>;
}


<a id=1219></a><a  class="comments">/*</a>
<a id=1220></a><a  class="comments">** Check whether a conversion specification is valid. When called,</a>
<a id=1221></a><a  class="comments">** first character in 'form' must be '%' and last character must</a>
<a id=1222></a><a  class="comments">** be a valid conversion specifier. 'flags' are the accepted flags;</a>
<a id=1223></a><a  class="comments">** 'precision' signals whether to accept a precision.</a>
<a id=1224></a><a  class="comments">*/</a>
<a id=1225></a>static void <a href="../h_src/143294116.htm" class="function">checkformat</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143293980.htm" class="localvar">L</a>, const char *<a href="../h_src/143293844.htm" class="localvar">form</a>, const char *<a href="../h_src/143293708.htm" class="localvar">flags</a>,
<a id=1226></a>                                       int <a href="../h_src/143293572.htm" class="localvar">precision</a>) {
<a id=1227></a>  const char *<a href="../h_src/143293436.htm" class="localvar">spec</a> = <a href="../h_src/143293844.htm" class="localvar">form</a> + 1;  <a  class="comments">/* skip '%' */</a>
<a id=1228></a>  <a href="../h_src/143293436.htm" class="localvar">spec</a> += <a href="../h_aa/57906692.htm" class="libfunc">strspn</a>(<a href="../h_src/143293436.htm" class="localvar">spec</a>, <a href="../h_src/143293708.htm" class="localvar">flags</a>);  <a  class="comments">/* skip flags */</a>
<a id=1229></a>  if (*<a href="../h_src/143293436.htm" class="localvar">spec</a> != '0') {  <a  class="comments">/* a width cannot start with '0' */</a>
<a id=1230></a>    <a href="../h_src/143293436.htm" class="localvar">spec</a> = <a href="../h_src/143294388.htm" class="function">get2digits</a>(<a href="../h_src/143293436.htm" class="localvar">spec</a>);  <a  class="comments">/* skip width */</a>
<a id=1231></a>    if (*<a href="../h_src/143293436.htm" class="localvar">spec</a> == '.' &amp;&amp; <a href="../h_src/143293572.htm" class="localvar">precision</a>) {
<a id=1232></a>      <a href="../h_src/143293436.htm" class="localvar">spec</a>++;
<a id=1233></a>      <a href="../h_src/143293436.htm" class="localvar">spec</a> = <a href="../h_src/143294388.htm" class="function">get2digits</a>(<a href="../h_src/143293436.htm" class="localvar">spec</a>);  <a  class="comments">/* skip precision */</a>
    }
  }
<a id=1236></a>  if (!<a href="../h_aa/143324716.htm" class="libfunc">isalpha</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143293436.htm" class="localvar">spec</a>)))  <a  class="comments">/* did not go to the end? */</a>
<a id=1237></a>    <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143293980.htm" class="localvar">L</a>, &quot;invalid conversion specification: '%s'&quot;, <a href="../h_src/143293844.htm" class="localvar">form</a>);
}


<a id=1241></a><a  class="comments">/*</a>
<a id=1242></a><a  class="comments">** Get a conversion specification and copy it to 'form'.</a>
<a id=1243></a><a  class="comments">** Return the address of its last character.</a>
<a id=1244></a><a  class="comments">*/</a>
<a id=1245></a>static const char *<a href="../h_src/143293300.htm" class="function">getformat</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143293164.htm" class="localvar">L</a>, const char *<a href="../h_src/143293028.htm" class="localvar">strfrmt</a>,
<a id=1246></a>                                            char *<a href="../h_src/143292892.htm" class="localvar">form</a>) {
<a id=1247></a>  <a  class="comments">/* spans flags, width, and precision ('0' is included as a flag) */</a>
<a id=1248></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143292756.htm" class="localvar">len</a> = <a href="../h_aa/57906692.htm" class="libfunc">strspn</a>(<a href="../h_src/143293028.htm" class="localvar">strfrmt</a>, <a href="../h_src/143298332.htm" class="macro">L_FMTFLAGSF</a> &quot;123456789.&quot;);
<a id=1249></a>  <a href="../h_src/143292756.htm" class="localvar">len</a>++;  <a  class="comments">/* adds following character (should be the specifier) */</a>
<a id=1250></a>  <a  class="comments">/* still needs space for '%', '\0', plus a length modifier */</a>
<a id=1251></a>  if (<a href="../h_src/143292756.htm" class="localvar">len</a> &gt;= <a href="../h_src/143297652.htm" class="macro">MAX_FORMAT</a> - 10)
<a id=1252></a>    <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143293164.htm" class="localvar">L</a>, &quot;invalid format (too long)&quot;);
<a id=1253></a>  *(<a href="../h_src/143292892.htm" class="localvar">form</a>++) = '%';
<a id=1254></a>  <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/143292892.htm" class="localvar">form</a>, <a href="../h_src/143293028.htm" class="localvar">strfrmt</a>, <a href="../h_src/143292756.htm" class="localvar">len</a> * sizeof(char));
<a id=1255></a>  *(<a href="../h_src/143292892.htm" class="localvar">form</a> + <a href="../h_src/143292756.htm" class="localvar">len</a>) = '\0';
<a id=1256></a>  return <a href="../h_src/143293028.htm" class="localvar">strfrmt</a> + <a href="../h_src/143292756.htm" class="localvar">len</a> - 1;
}


<a id=1260></a><a  class="comments">/*</a>
<a id=1261></a><a  class="comments">** add length modifier into formats</a>
<a id=1262></a><a  class="comments">*/</a>
<a id=1263></a>static void <a href="../h_src/143292620.htm" class="function">addlenmod</a> (char *<a href="../h_src/143292484.htm" class="localvar">form</a>, const char *<a href="../h_src/143292348.htm" class="localvar">lenmod</a>) {
<a id=1264></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143292212.htm" class="localvar">l</a> = <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/143292484.htm" class="localvar">form</a>);
<a id=1265></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143292076.htm" class="localvar">lm</a> = <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/143292348.htm" class="localvar">lenmod</a>);
<a id=1266></a>  char <a href="../h_src/143291940.htm" class="localvar">spec</a> = <a href="../h_src/143292484.htm" class="localvar">form</a>[<a href="../h_src/143292212.htm" class="localvar">l</a> - 1];
<a id=1267></a>  <a href="../h_aa/57910228.htm" class="libfunc">strcpy</a>(<a href="../h_src/143292484.htm" class="localvar">form</a> + <a href="../h_src/143292212.htm" class="localvar">l</a> - 1, <a href="../h_src/143292348.htm" class="localvar">lenmod</a>);
<a id=1268></a>  <a href="../h_src/143292484.htm" class="localvar">form</a>[<a href="../h_src/143292212.htm" class="localvar">l</a> + <a href="../h_src/143292076.htm" class="localvar">lm</a> - 1] = <a href="../h_src/143291940.htm" class="localvar">spec</a>;
<a id=1269></a>  <a href="../h_src/143292484.htm" class="localvar">form</a>[<a href="../h_src/143292212.htm" class="localvar">l</a> + <a href="../h_src/143292076.htm" class="localvar">lm</a>] = '\0';
}


<a id=1273></a>static int <a href="../h_src/143291804.htm" class="function">str_format</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143291668.htm" class="localvar">L</a>) {
<a id=1274></a>  int <a href="../h_src/143291532.htm" class="localvar">top</a> = <a href="../h_src/57439356.htm" class="function">lua_gettop</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>);
<a id=1275></a>  int <a href="../h_src/143291396.htm" class="localvar">arg</a> = 1;
<a id=1276></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143291260.htm" class="localvar">sfl</a>;
<a id=1277></a>  const char *<a href="../h_src/143291124.htm" class="localvar">strfrmt</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>, &amp;<a href="../h_src/143291260.htm" class="localvar">sfl</a>);
<a id=1278></a>  const char *<a href="../h_src/143290988.htm" class="localvar">strfrmt_end</a> = <a href="../h_src/143291124.htm" class="localvar">strfrmt</a>+<a href="../h_src/143291260.htm" class="localvar">sfl</a>;
<a id=1279></a>  const char *<a href="../h_src/143290852.htm" class="localvar">flags</a>;
<a id=1280></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143290716.htm" class="localvar">b</a>;
<a id=1281></a>  <a href="../h_src/57413652.htm" class="function">luaL_buffinit</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, &amp;<a href="../h_src/143290716.htm" class="localvar">b</a>);
<a id=1282></a>  while (<a href="../h_src/143291124.htm" class="localvar">strfrmt</a> &lt; <a href="../h_src/143290988.htm" class="localvar">strfrmt_end</a>) {
<a id=1283></a>    if (*<a href="../h_src/143291124.htm" class="localvar">strfrmt</a> != <a href="../h_src/143326756.htm" class="macro">L_ESC</a>)
<a id=1284></a>      <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>, *<a href="../h_src/143291124.htm" class="localvar">strfrmt</a>++);
<a id=1285></a>    else if (*++<a href="../h_src/143291124.htm" class="localvar">strfrmt</a> == <a href="../h_src/143326756.htm" class="macro">L_ESC</a>)
<a id=1286></a>      <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>, *<a href="../h_src/143291124.htm" class="localvar">strfrmt</a>++);  <a  class="comments">/* %% */</a>
<a id=1287></a>    else { <a  class="comments">/* format item */</a>
<a id=1288></a>      char <a href="../h_src/143290580.htm" class="localvar">form</a>[<a href="../h_src/143297652.htm" class="macro">MAX_FORMAT</a>];  <a  class="comments">/* to store the format ('%...') */</a>
<a id=1289></a>      int <a href="../h_src/143290444.htm" class="localvar">maxitem</a> = <a href="../h_src/143298604.htm" class="macro">MAX_ITEM</a>;  <a  class="comments">/* maximum length for the result */</a>
<a id=1290></a>      char *<a href="../h_src/143290308.htm" class="localvar">buff</a> = <a href="../h_src/57413584.htm" class="function">luaL_prepbuffsize</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>);  <a  class="comments">/* to put result */</a>
<a id=1291></a>      int <a href="../h_src/143290172.htm" class="localvar">nb</a> = 0;  <a  class="comments">/* number of bytes in result */</a>
<a id=1292></a>      if (++<a href="../h_src/143291396.htm" class="localvar">arg</a> &gt; <a href="../h_src/143291532.htm" class="localvar">top</a>)
<a id=1293></a>        return <a href="../h_src/57420384.htm" class="function">luaL_argerror</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>, &quot;no value&quot;);
<a id=1294></a>      <a href="../h_src/143291124.htm" class="localvar">strfrmt</a> = <a href="../h_src/143293300.htm" class="function">getformat</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291124.htm" class="localvar">strfrmt</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>);
<a id=1295></a>      switch (*<a href="../h_src/143291124.htm" class="localvar">strfrmt</a>++) {
        case 'c': {
<a id=1297></a>          <a href="../h_src/143294116.htm" class="function">checkformat</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143297788.htm" class="macro">L_FMTFLAGSC</a>, 0);
<a id=1298></a>          <a href="../h_src/143290172.htm" class="localvar">nb</a> = <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143290308.htm" class="localvar">buff</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, (int)<a href="../h_src/57419976.htm" class="function">luaL_checkinteger</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>));
          break;
        }
        case 'd': case 'i':
<a id=1302></a>          <a href="../h_src/143290852.htm" class="localvar">flags</a> = <a href="../h_src/143298060.htm" class="macro">L_FMTFLAGSI</a>;
          goto intcase;
        case 'u':
<a id=1305></a>          <a href="../h_src/143290852.htm" class="localvar">flags</a> = <a href="../h_src/143297924.htm" class="macro">L_FMTFLAGSU</a>;
          goto intcase;
        case 'o': case 'x': case 'X':
<a id=1308></a>          <a href="../h_src/143290852.htm" class="localvar">flags</a> = <a href="../h_src/143298196.htm" class="macro">L_FMTFLAGSX</a>;
         intcase: {
<a id=1310></a>          <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143290036.htm" class="localvar">n</a> = <a href="../h_src/57419976.htm" class="function">luaL_checkinteger</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>);
<a id=1311></a>          <a href="../h_src/143294116.htm" class="function">checkformat</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143290852.htm" class="localvar">flags</a>, 1);
<a id=1312></a>          <a href="../h_src/143292620.htm" class="function">addlenmod</a>(<a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/57450236.htm" class="macro">LUA_INTEGER_FRMLEN</a>);
<a id=1313></a>          <a href="../h_src/143290172.htm" class="localvar">nb</a> = <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143290308.htm" class="localvar">buff</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, (<a href="../h_src/57450916.htm" class="macro">LUAI_UACINT</a>)<a href="../h_src/143290036.htm" class="localvar">n</a>);
          break;
        }
        case 'a': case 'A':
<a id=1317></a>          <a href="../h_src/143294116.htm" class="function">checkformat</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143298332.htm" class="macro">L_FMTFLAGSF</a>, 1);
<a id=1318></a>          <a href="../h_src/143292620.htm" class="function">addlenmod</a>(<a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/57451596.htm" class="macro">LUA_NUMBER_FRMLEN</a>);
<a id=1319></a>          <a href="../h_src/143290172.htm" class="localvar">nb</a> = <a href="../h_src/143299828.htm" class="function">lua_number2strx</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143290308.htm" class="localvar">buff</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>,
<a id=1320></a>                                  <a href="../h_src/57420112.htm" class="function">luaL_checknumber</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>));
          break;
        case 'f':
<a id=1323></a>          <a href="../h_src/143290444.htm" class="localvar">maxitem</a> = <a href="../h_src/143298740.htm" class="macro">MAX_ITEMF</a>;  <a  class="comments">/* extra space for '%f' */</a>
<a id=1324></a>          <a href="../h_src/143290308.htm" class="localvar">buff</a> = <a href="../h_src/57413584.htm" class="function">luaL_prepbuffsize</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>);
<a id=1325></a>          <a  class="comments">/* FALLTHROUGH */</a>
        case 'e': case 'E': case 'g': case 'G': {
<a id=1327></a>          <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143289900.htm" class="localvar">n</a> = <a href="../h_src/57420112.htm" class="function">luaL_checknumber</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>);
<a id=1328></a>          <a href="../h_src/143294116.htm" class="function">checkformat</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143298332.htm" class="macro">L_FMTFLAGSF</a>, 1);
<a id=1329></a>          <a href="../h_src/143292620.htm" class="function">addlenmod</a>(<a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/57451596.htm" class="macro">LUA_NUMBER_FRMLEN</a>);
<a id=1330></a>          <a href="../h_src/143290172.htm" class="localvar">nb</a> = <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143290308.htm" class="localvar">buff</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, (<a href="../h_src/57451732.htm" class="macro">LUAI_UACNUMBER</a>)<a href="../h_src/143289900.htm" class="localvar">n</a>);
          break;
        }
        case 'p': {
<a id=1334></a>          const void *<a href="../h_src/143289764.htm" class="localvar">p</a> = <a href="../h_src/57437860.htm" class="function">lua_topointer</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>);
<a id=1335></a>          <a href="../h_src/143294116.htm" class="function">checkformat</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143297788.htm" class="macro">L_FMTFLAGSC</a>, 0);
<a id=1336></a>          if (<a href="../h_src/143289764.htm" class="localvar">p</a> == NULL) {  <a  class="comments">/* avoid calling 'printf' with argument NULL */</a>
<a id=1337></a>            <a href="../h_src/143289764.htm" class="localvar">p</a> = &quot;(null)&quot;;  <a  class="comments">/* result */</a>
<a id=1338></a>            <a href="../h_src/143290580.htm" class="localvar">form</a>[<a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/143290580.htm" class="localvar">form</a>) - 1] = 's';  <a  class="comments">/* format it as a string */</a>
          }
<a id=1340></a>          <a href="../h_src/143290172.htm" class="localvar">nb</a> = <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143290308.htm" class="localvar">buff</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143289764.htm" class="localvar">p</a>);
          break;
        }
        case 'q': {
<a id=1344></a>          if (<a href="../h_src/143290580.htm" class="localvar">form</a>[2] != '\0')  <a  class="comments">/* modifiers? */</a>
<a id=1345></a>            return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, &quot;specifier '%%q' cannot have modifiers&quot;);
<a id=1346></a>          <a href="../h_src/143295748.htm" class="function">addliteral</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, &amp;<a href="../h_src/143290716.htm" class="localvar">b</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>);
          break;
        }
        case 's': {
<a id=1350></a>          <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143289628.htm" class="localvar">l</a>;
<a id=1351></a>          const char *<a href="../h_src/143289492.htm" class="localvar">s</a> = <a href="../h_src/57420452.htm" class="function">luaL_tolstring</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143291396.htm" class="localvar">arg</a>, &amp;<a href="../h_src/143289628.htm" class="localvar">l</a>);
<a id=1352></a>          if (<a href="../h_src/143290580.htm" class="localvar">form</a>[2] == '\0')  <a  class="comments">/* no modifiers? */</a>
<a id=1353></a>            <a href="../h_src/57413380.htm" class="function">luaL_addvalue</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>);  <a  class="comments">/* keep entire string */</a>
          else {
<a id=1355></a>            <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143289628.htm" class="localvar">l</a> == <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/143289492.htm" class="localvar">s</a>), <a href="../h_src/143291396.htm" class="localvar">arg</a>, &quot;string contains zeros&quot;);
<a id=1356></a>            <a href="../h_src/143294116.htm" class="function">checkformat</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143297788.htm" class="macro">L_FMTFLAGSC</a>, 1);
<a id=1357></a>            if (<a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/143290580.htm" class="localvar">form</a>, '.') == NULL &amp;&amp; <a href="../h_src/143289628.htm" class="localvar">l</a> &gt;= 100) {
<a id=1358></a>              <a  class="comments">/* no precision and string is too long to be formatted */</a>
<a id=1359></a>              <a href="../h_src/57413380.htm" class="function">luaL_addvalue</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>);  <a  class="comments">/* keep entire string */</a>
            }
<a id=1361></a>            else {  <a  class="comments">/* format the string into 'buff' */</a>
<a id=1362></a>              <a href="../h_src/143290172.htm" class="localvar">nb</a> = <a href="../h_src/57449692.htm" class="macro">l_sprintf</a>(<a href="../h_src/143290308.htm" class="localvar">buff</a>, <a href="../h_src/143290444.htm" class="localvar">maxitem</a>, <a href="../h_src/143290580.htm" class="localvar">form</a>, <a href="../h_src/143289492.htm" class="localvar">s</a>);
<a id=1363></a>              <a href="../h_src/57429292.htm" class="macro">lua_pop</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, 1);  <a  class="comments">/* remove result from 'luaL_tolstring' */</a>
            }
          }
          break;
        }
<a id=1368></a>        default: {  <a  class="comments">/* also treat cases 'pnLlh' */</a>
<a id=1369></a>          return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143291668.htm" class="localvar">L</a>, &quot;invalid conversion '%s' to 'format'&quot;, <a href="../h_src/143290580.htm" class="localvar">form</a>);
        }
      }
<a id=1372></a>      <a href="../h_src/57415352.htm" class="macro">lua_assert</a>(nb &lt; maxitem);
<a id=1373></a>      <a href="../h_src/57413924.htm" class="macro">luaL_addsize</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>, <a href="../h_src/143290172.htm" class="localvar">nb</a>);
    }
  }
<a id=1376></a>  <a href="../h_src/57413312.htm" class="function">luaL_pushresult</a>(&amp;<a href="../h_src/143290716.htm" class="localvar">b</a>);
  return 1;
}

<a id=1380></a><a  class="comments">/* }====================================================== */</a>


<a id=1383></a><a  class="comments">/*</a>
<a id=1384></a><a  class="comments">** {======================================================</a>
<a id=1385></a><a  class="comments">** PACK/UNPACK</a>
<a id=1386></a><a  class="comments">** =======================================================</a>
<a id=1387></a><a  class="comments">*/</a>


<a id=1390></a><a  class="comments">/* value used for padding */</a>
<a id=1391></a>#if !defined(<a href="../h_src/143289356.htm" class="macro">LUAL_PACKPADBYTE</a>)
<a id=1392></a>#define <a href="../h_src/143289220.htm" class="macro">LUAL_PACKPADBYTE</a>		0x00
#endif

<a id=1395></a><a  class="comments">/* maximum size for the binary representation of an integer */</a>
<a id=1396></a>#define <a href="../h_src/143289084.htm" class="macro">MAXINTSIZE</a>	16

<a id=1398></a><a  class="comments">/* number of bits in a character */</a>
<a id=1399></a>#define <a href="../h_src/143288948.htm" class="macro">NB</a>	CHAR_BIT

<a id=1401></a><a  class="comments">/* mask for one character (NB 1's) */</a>
<a id=1402></a>#define <a href="../h_src/143288812.htm" class="macro">MC</a>	((1 &lt;&lt; NB) - 1)

<a id=1404></a><a  class="comments">/* size of a lua_Integer */</a>
<a id=1405></a>#define <a href="../h_src/143288676.htm" class="macro">SZINT</a>	((int)sizeof(lua_Integer))


<a id=1408></a><a  class="comments">/* dummy union to get native endianness */</a>
static const union {
<a id=1410></a>  int <a href="../h_src/143288472.htm" class="variable">dummy</a>;
<a id=1411></a>  char <a href="../h_src/143288404.htm" class="variable">little</a>;  <a  class="comments">/* true iff machine is little endian */</a>
<a id=1412></a>} <a href="../h_src/143288268.htm" class="variable">nativeendian</a> = {1};


<a id=1415></a><a  class="comments">/*</a>
<a id=1416></a><a  class="comments">** information to pack/unpack stuff</a>
<a id=1417></a><a  class="comments">*/</a>
<a id=1418></a>typedef struct <a href="../h_src/143288200.htm" class="class">Header</a> {
<a id=1419></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143288064.htm" class="variable">L</a>;
<a id=1420></a>  int <a href="../h_src/143287996.htm" class="variable">islittle</a>;
<a id=1421></a>  int <a href="../h_src/143287928.htm" class="variable">maxalign</a>;
<a id=1422></a>} <a href="../h_src/143287860.htm" class="type">Header</a>;


<a id=1425></a><a  class="comments">/*</a>
<a id=1426></a><a  class="comments">** options for pack/unpack</a>
<a id=1427></a><a  class="comments">*/</a>
<a id=1428></a>typedef enum <a href="../h_src/143287044.htm" class="type">KOption</a> {
<a id=1429></a>  <a href="../h_src/143287792.htm" class="variable">Kint</a>,		<a  class="comments">/* signed integers */</a>
<a id=1430></a>  <a href="../h_src/143287724.htm" class="variable">Kuint</a>,	<a  class="comments">/* unsigned integers */</a>
<a id=1431></a>  <a href="../h_src/143287656.htm" class="variable">Kfloat</a>,	<a  class="comments">/* single-precision floating-point numbers */</a>
<a id=1432></a>  <a href="../h_src/143287588.htm" class="variable">Knumber</a>,	<a  class="comments">/* Lua &quot;native&quot; floating-point numbers */</a>
<a id=1433></a>  <a href="../h_src/143287520.htm" class="variable">Kdouble</a>,	<a  class="comments">/* double-precision floating-point numbers */</a>
<a id=1434></a>  <a href="../h_src/143287452.htm" class="variable">Kchar</a>,	<a  class="comments">/* fixed-length strings */</a>
<a id=1435></a>  <a href="../h_src/143287384.htm" class="variable">Kstring</a>,	<a  class="comments">/* strings with prefixed length */</a>
<a id=1436></a>  <a href="../h_src/143287316.htm" class="variable">Kzstr</a>,	<a  class="comments">/* zero-terminated strings */</a>
<a id=1437></a>  <a href="../h_src/143287248.htm" class="variable">Kpadding</a>,	<a  class="comments">/* padding */</a>
<a id=1438></a>  <a href="../h_src/143287180.htm" class="variable">Kpaddalign</a>,	<a  class="comments">/* padding for alignment */</a>
<a id=1439></a>  <a href="../h_src/143287112.htm" class="variable">Knop</a>		<a  class="comments">/* no-op (configuration or spaces) */</a>
<a id=1440></a>} <a href="../h_src/143286908.htm" class="type">KOption</a>;


<a id=1443></a><a  class="comments">/*</a>
<a id=1444></a><a  class="comments">** Read an integer numeral from string 'fmt' or return 'df' if</a>
<a id=1445></a><a  class="comments">** there is no numeral</a>
<a id=1446></a><a  class="comments">*/</a>
<a id=1447></a>static int <a href="../h_src/143286840.htm" class="function">digit</a> (int <a href="../h_src/143286704.htm" class="localvar">c</a>) { return '0' &lt;= <a href="../h_src/143286704.htm" class="localvar">c</a> &amp;&amp; <a href="../h_src/143286704.htm" class="localvar">c</a> &lt;= '9'; }

<a id=1449></a>static int <a href="../h_src/143286568.htm" class="function">getnum</a> (const char **<a href="../h_src/143286432.htm" class="localvar">fmt</a>, int <a href="../h_src/143286296.htm" class="localvar">df</a>) {
<a id=1450></a>  if (!<a href="../h_src/143286840.htm" class="function">digit</a>(**<a href="../h_src/143286432.htm" class="localvar">fmt</a>))  <a  class="comments">/* no number? */</a>
<a id=1451></a>    return <a href="../h_src/143286296.htm" class="localvar">df</a>;  <a  class="comments">/* return default value */</a>
  else {
<a id=1453></a>    int <a href="../h_src/143286160.htm" class="localvar">a</a> = 0;
    do {
<a id=1455></a>      <a href="../h_src/143286160.htm" class="localvar">a</a> = <a href="../h_src/143286160.htm" class="localvar">a</a>*10 + (*((*<a href="../h_src/143286432.htm" class="localvar">fmt</a>)++) - '0');
<a id=1456></a>    } while (<a href="../h_src/143286840.htm" class="function">digit</a>(**<a href="../h_src/143286432.htm" class="localvar">fmt</a>) &amp;&amp; <a href="../h_src/143286160.htm" class="localvar">a</a> &lt;= ((int)<a href="../h_src/143343280.htm" class="macro">MAXSIZE</a> - 9)/10);
<a id=1457></a>    return <a href="../h_src/143286160.htm" class="localvar">a</a>;
  }
}


<a id=1462></a><a  class="comments">/*</a>
<a id=1463></a><a  class="comments">** Read an integer numeral and raises an error if it is larger</a>
<a id=1464></a><a  class="comments">** than the maximum size for integers.</a>
<a id=1465></a><a  class="comments">*/</a>
<a id=1466></a>static int <a href="../h_src/143286024.htm" class="function">getnumlimit</a> (<a href="../h_src/143287860.htm" class="type">Header</a> *<a href="../h_src/143285820.htm" class="localvar">h</a>, const char **<a href="../h_src/143285684.htm" class="localvar">fmt</a>, int <a href="../h_src/143285548.htm" class="localvar">df</a>) {
<a id=1467></a>  int <a href="../h_src/143285412.htm" class="localvar">sz</a> = <a href="../h_src/143286568.htm" class="function">getnum</a>(<a href="../h_src/143285684.htm" class="localvar">fmt</a>, <a href="../h_src/143285548.htm" class="localvar">df</a>);
<a id=1468></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143285412.htm" class="localvar">sz</a> &gt; <a href="../h_src/143289084.htm" class="macro">MAXINTSIZE</a> || sz &lt;= 0))
<a id=1469></a>    return <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143285820.htm" class="localvar">h</a>-&gt;<a href="../h_src/143288064.htm" class="variable">L</a>, &quot;integral size (%d) out of limits [1,%d]&quot;,
<a id=1470></a>                            <a href="../h_src/143285412.htm" class="localvar">sz</a>, <a href="../h_src/143289084.htm" class="macro">MAXINTSIZE</a>);
<a id=1471></a>  return <a href="../h_src/143285412.htm" class="localvar">sz</a>;
}


<a id=1475></a><a  class="comments">/*</a>
<a id=1476></a><a  class="comments">** Initialize Header</a>
<a id=1477></a><a  class="comments">*/</a>
<a id=1478></a>static void <a href="../h_src/143285276.htm" class="function">initheader</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143285140.htm" class="localvar">L</a>, <a href="../h_src/143287860.htm" class="type">Header</a> *<a href="../h_src/143285004.htm" class="localvar">h</a>) {
<a id=1479></a>  <a href="../h_src/143285004.htm" class="localvar">h</a>-&gt;<a href="../h_src/143288064.htm" class="variable">L</a> = <a href="../h_src/143285140.htm" class="localvar">L</a>;
<a id=1480></a>  <a href="../h_src/143285004.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287996.htm" class="variable">islittle</a> = <a href="../h_src/143288268.htm" class="variable">nativeendian</a>.<a href="../h_src/143288404.htm" class="variable">little</a>;
<a id=1481></a>  <a href="../h_src/143285004.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287928.htm" class="variable">maxalign</a> = 1;
}


<a id=1485></a><a  class="comments">/*</a>
<a id=1486></a><a  class="comments">** Read and classify next option. 'size' is filled with option's size.</a>
<a id=1487></a><a  class="comments">*/</a>
<a id=1488></a>static <a href="../h_src/143286908.htm" class="type">KOption</a> <a href="../h_src/143284868.htm" class="function">getoption</a> (<a href="../h_src/143287860.htm" class="type">Header</a> *<a href="../h_src/143284732.htm" class="localvar">h</a>, const char **<a href="../h_src/143284596.htm" class="localvar">fmt</a>, int *<a href="../h_src/143284460.htm" class="localvar">size</a>) {
<a id=1489></a>  <a  class="comments">/* dummy structure to get native alignment requirements */</a>
<a id=1490></a>  struct <a href="../h_src/143284324.htm" class="class">cD</a> { char <a href="../h_src/143284188.htm" class="variable">c</a>; <a href="../h_src/143284120.htm" class="class">u</a>nion { <a href="../h_src/57447108.htm" class="macro">LUAI_MAXALIGN</a>; } <a href="../h_src/143283984.htm" class="variable">u</a>; };
<a id=1491></a>  int <a href="../h_src/143283576.htm" class="localvar">opt</a> = *((*<a href="../h_src/143284596.htm" class="localvar">fmt</a>)++);
<a id=1492></a>  *<a href="../h_src/143284460.htm" class="localvar">size</a> = 0;  <a  class="comments">/* default */</a>
<a id=1493></a>  switch (<a href="../h_src/143283576.htm" class="localvar">opt</a>) {
<a id=1494></a>    case 'b': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(char); return <a href="../h_src/143287792.htm" class="variable">Kint</a>;
<a id=1495></a>    case 'B': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(char); return <a href="../h_src/143287724.htm" class="variable">Kuint</a>;
<a id=1496></a>    case 'h': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(short); return <a href="../h_src/143287792.htm" class="variable">Kint</a>;
<a id=1497></a>    case 'H': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(short); return <a href="../h_src/143287724.htm" class="variable">Kuint</a>;
<a id=1498></a>    case 'l': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(long); return <a href="../h_src/143287792.htm" class="variable">Kint</a>;
<a id=1499></a>    case 'L': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(long); return <a href="../h_src/143287724.htm" class="variable">Kuint</a>;
<a id=1500></a>    case 'j': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(<a href="../h_src/57442076.htm" class="type">lua_Integer</a>); return <a href="../h_src/143287792.htm" class="variable">Kint</a>;
<a id=1501></a>    case 'J': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(<a href="../h_src/57442076.htm" class="type">lua_Integer</a>); return <a href="../h_src/143287724.htm" class="variable">Kuint</a>;
<a id=1502></a>    case 'T': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(<a href="../h_aa/57441192.htm" class="type">size_t</a>); return <a href="../h_src/143287724.htm" class="variable">Kuint</a>;
<a id=1503></a>    case 'f': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(float); return <a href="../h_src/143287656.htm" class="variable">Kfloat</a>;
<a id=1504></a>    case 'n': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(<a href="../h_src/57442144.htm" class="type">lua_Number</a>); return <a href="../h_src/143287588.htm" class="variable">Knumber</a>;
<a id=1505></a>    case 'd': *<a href="../h_src/143284460.htm" class="localvar">size</a> = sizeof(double); return <a href="../h_src/143287520.htm" class="variable">Kdouble</a>;
<a id=1506></a>    case 'i': *<a href="../h_src/143284460.htm" class="localvar">size</a> = <a href="../h_src/143286024.htm" class="function">getnumlimit</a>(<a href="../h_src/143284732.htm" class="localvar">h</a>, <a href="../h_src/143284596.htm" class="localvar">fmt</a>, sizeof(int)); return <a href="../h_src/143287792.htm" class="variable">Kint</a>;
<a id=1507></a>    case 'I': *<a href="../h_src/143284460.htm" class="localvar">size</a> = <a href="../h_src/143286024.htm" class="function">getnumlimit</a>(<a href="../h_src/143284732.htm" class="localvar">h</a>, <a href="../h_src/143284596.htm" class="localvar">fmt</a>, sizeof(int)); return <a href="../h_src/143287724.htm" class="variable">Kuint</a>;
<a id=1508></a>    case 's': *<a href="../h_src/143284460.htm" class="localvar">size</a> = <a href="../h_src/143286024.htm" class="function">getnumlimit</a>(<a href="../h_src/143284732.htm" class="localvar">h</a>, <a href="../h_src/143284596.htm" class="localvar">fmt</a>, sizeof(<a href="../h_aa/57441192.htm" class="type">size_t</a>)); return <a href="../h_src/143287384.htm" class="variable">Kstring</a>;
    case 'c':
<a id=1510></a>      *<a href="../h_src/143284460.htm" class="localvar">size</a> = <a href="../h_src/143286568.htm" class="function">getnum</a>(<a href="../h_src/143284596.htm" class="localvar">fmt</a>, -1);
<a id=1511></a>      if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(*<a href="../h_src/143284460.htm" class="localvar">size</a> == -1))
<a id=1512></a>        <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143284732.htm" class="localvar">h</a>-&gt;<a href="../h_src/143288064.htm" class="variable">L</a>, &quot;missing size for format option 'c'&quot;);
<a id=1513></a>      return <a href="../h_src/143287452.htm" class="variable">Kchar</a>;
<a id=1514></a>    case 'z': return <a href="../h_src/143287316.htm" class="variable">Kzstr</a>;
<a id=1515></a>    case 'x': *<a href="../h_src/143284460.htm" class="localvar">size</a> = 1; return <a href="../h_src/143287248.htm" class="variable">Kpadding</a>;
<a id=1516></a>    case 'X': return <a href="../h_src/143287180.htm" class="variable">Kpaddalign</a>;
    case ' ': break;
<a id=1518></a>    case '&lt;': <a href="../h_src/143284732.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287996.htm" class="variable">islittle</a> = 1; break;
<a id=1519></a>    case '&gt;': <a href="../h_src/143284732.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287996.htm" class="variable">islittle</a> = 0; break;
<a id=1520></a>    case '=': <a href="../h_src/143284732.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287996.htm" class="variable">islittle</a> = <a href="../h_src/143288268.htm" class="variable">nativeendian</a>.<a href="../h_src/143288404.htm" class="variable">little</a>; break;
    case '!': {
<a id=1522></a>      const int <a href="../h_src/143283440.htm" class="localvar">maxalign</a> = offsetof(struct <a href="../h_src/143284324.htm" class="class">cD</a>, u);
<a id=1523></a>      <a href="../h_src/143284732.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287928.htm" class="variable">maxalign</a> = <a href="../h_src/143286024.htm" class="function">getnumlimit</a>(<a href="../h_src/143284732.htm" class="localvar">h</a>, <a href="../h_src/143284596.htm" class="localvar">fmt</a>, <a href="../h_src/143283440.htm" class="localvar">maxalign</a>);
      break;
    }
<a id=1526></a>    default: <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143284732.htm" class="localvar">h</a>-&gt;<a href="../h_src/143288064.htm" class="variable">L</a>, &quot;invalid format option '%c'&quot;, <a href="../h_src/143283576.htm" class="localvar">opt</a>);
  }
<a id=1528></a>  return <a href="../h_src/143287112.htm" class="variable">Knop</a>;
}


<a id=1532></a><a  class="comments">/*</a>
<a id=1533></a><a  class="comments">** Read, classify, and fill other details about the next option.</a>
<a id=1534></a><a  class="comments">** 'psize' is filled with option's size, 'notoalign' with its</a>
<a id=1535></a><a  class="comments">** alignment requirements.</a>
<a id=1536></a><a  class="comments">** Local variable 'size' gets the size to be aligned. (Kpadal option</a>
<a id=1537></a><a  class="comments">** always gets its full alignment, other options are limited by</a>
<a id=1538></a><a  class="comments">** the maximum alignment ('maxalign'). Kchar option needs no alignment</a>
<a id=1539></a><a  class="comments">** despite its size.</a>
<a id=1540></a><a  class="comments">*/</a>
<a id=1541></a>static <a href="../h_src/143286908.htm" class="type">KOption</a> <a href="../h_src/143283304.htm" class="function">getdetails</a> (<a href="../h_src/143287860.htm" class="type">Header</a> *<a href="../h_src/143283168.htm" class="localvar">h</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143283032.htm" class="localvar">totalsize</a>,
<a id=1542></a>                           const char **<a href="../h_src/143282896.htm" class="localvar">fmt</a>, int *<a href="../h_src/143282760.htm" class="localvar">psize</a>, int *<a href="../h_src/143282624.htm" class="localvar">ntoalign</a>) {
<a id=1543></a>  <a href="../h_src/143286908.htm" class="type">KOption</a> <a href="../h_src/143282488.htm" class="localvar">opt</a> = <a href="../h_src/143284868.htm" class="function">getoption</a>(<a href="../h_src/143283168.htm" class="localvar">h</a>, <a href="../h_src/143282896.htm" class="localvar">fmt</a>, <a href="../h_src/143282760.htm" class="localvar">psize</a>);
<a id=1544></a>  int <a href="../h_src/143282352.htm" class="localvar">align</a> = *<a href="../h_src/143282760.htm" class="localvar">psize</a>;  <a  class="comments">/* usually, alignment follows size */</a>
<a id=1545></a>  if (<a href="../h_src/143282488.htm" class="localvar">opt</a> == <a href="../h_src/143287180.htm" class="variable">Kpaddalign</a>) {  <a  class="comments">/* 'X' gets alignment from following option */</a>
<a id=1546></a>    if (**<a href="../h_src/143282896.htm" class="localvar">fmt</a> == '\0' || <a href="../h_src/143284868.htm" class="function">getoption</a>(<a href="../h_src/143283168.htm" class="localvar">h</a>, <a href="../h_src/143282896.htm" class="localvar">fmt</a>, &amp;<a href="../h_src/143282352.htm" class="localvar">align</a>) == <a href="../h_src/143287452.htm" class="variable">Kchar</a> || <a href="../h_src/143282352.htm" class="localvar">align</a> == 0)
<a id=1547></a>      <a href="../h_src/57420384.htm" class="function">luaL_argerror</a>(<a href="../h_src/143283168.htm" class="localvar">h</a>-&gt;<a href="../h_src/143288064.htm" class="variable">L</a>, 1, &quot;invalid next option for option 'X'&quot;);
  }
<a id=1549></a>  if (<a href="../h_src/143282352.htm" class="localvar">align</a> &lt;= 1 || <a href="../h_src/143282488.htm" class="localvar">opt</a> == <a href="../h_src/143287452.htm" class="variable">Kchar</a>)  <a  class="comments">/* need no alignment? */</a>
<a id=1550></a>    *<a href="../h_src/143282624.htm" class="localvar">ntoalign</a> = 0;
  else {
<a id=1552></a>    if (<a href="../h_src/143282352.htm" class="localvar">align</a> &gt; <a href="../h_src/143283168.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287928.htm" class="variable">maxalign</a>)  <a  class="comments">/* enforce maximum alignment */</a>
<a id=1553></a>      <a href="../h_src/143282352.htm" class="localvar">align</a> = <a href="../h_src/143283168.htm" class="localvar">h</a>-&gt;<a href="../h_src/143287928.htm" class="variable">maxalign</a>;
<a id=1554></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>((<a href="../h_src/143282352.htm" class="localvar">align</a> &amp; (<a href="../h_src/143282352.htm" class="localvar">align</a> - 1)) != 0))  <a  class="comments">/* not a power of 2? */</a>
<a id=1555></a>      <a href="../h_src/57420384.htm" class="function">luaL_argerror</a>(<a href="../h_src/143283168.htm" class="localvar">h</a>-&gt;<a href="../h_src/143288064.htm" class="variable">L</a>, 1, &quot;format asks for alignment not power of 2&quot;);
<a id=1556></a>    *<a href="../h_src/143282624.htm" class="localvar">ntoalign</a> = (<a href="../h_src/143282352.htm" class="localvar">align</a> - (int)(<a href="../h_src/143283032.htm" class="localvar">totalsize</a> &amp; (<a href="../h_src/143282352.htm" class="localvar">align</a> - 1))) &amp; (<a href="../h_src/143282352.htm" class="localvar">align</a> - 1);
  }
<a id=1558></a>  return <a href="../h_src/143282488.htm" class="localvar">opt</a>;
}


<a id=1562></a><a  class="comments">/*</a>
<a id=1563></a><a  class="comments">** Pack integer 'n' with 'size' bytes and 'islittle' endianness.</a>
<a id=1564></a><a  class="comments">** The final 'if' handles the case when 'size' is larger than</a>
<a id=1565></a><a  class="comments">** the size of a Lua integer, correcting the extra sign-extension</a>
<a id=1566></a><a  class="comments">** bytes if necessary (by default they would be zeros).</a>
<a id=1567></a><a  class="comments">*/</a>
<a id=1568></a>static void <a href="../h_src/143282216.htm" class="function">packint</a> (<a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> *<a href="../h_src/143282080.htm" class="localvar">b</a>, lua_Unsigned <a href="../h_src/143281944.htm" class="localvar">n</a>,
<a id=1569></a>                     int <a href="../h_src/143281808.htm" class="localvar">islittle</a>, int <a href="../h_src/143281672.htm" class="localvar">size</a>, int <a href="../h_src/143281536.htm" class="localvar">neg</a>) {
<a id=1570></a>  char *<a href="../h_src/143281400.htm" class="localvar">buff</a> = <a href="../h_src/57413584.htm" class="function">luaL_prepbuffsize</a>(<a href="../h_src/143282080.htm" class="localvar">b</a>, <a href="../h_src/143281672.htm" class="localvar">size</a>);
<a id=1571></a>  int <a href="../h_src/143281264.htm" class="localvar">i</a>;
<a id=1572></a>  <a href="../h_src/143281400.htm" class="localvar">buff</a>[<a href="../h_src/143281808.htm" class="localvar">islittle</a> ? 0 : <a href="../h_src/143281672.htm" class="localvar">size</a> - 1] = (char)(<a href="../h_src/143281944.htm" class="localvar">n</a> &amp; <a href="../h_src/143288812.htm" class="macro">MC</a>);  <a  class="comments">/* first byte */</a>
<a id=1573></a>  for (<a href="../h_src/143281264.htm" class="localvar">i</a> = 1; <a href="../h_src/143281264.htm" class="localvar">i</a> &lt; <a href="../h_src/143281672.htm" class="localvar">size</a>; <a href="../h_src/143281264.htm" class="localvar">i</a>++) {
<a id=1574></a>    <a href="../h_src/143281944.htm" class="localvar">n</a> &gt;&gt;= <a href="../h_src/143288948.htm" class="macro">NB</a>;
<a id=1575></a>    <a href="../h_src/143281400.htm" class="localvar">buff</a>[<a href="../h_src/143281808.htm" class="localvar">islittle</a> ? <a href="../h_src/143281264.htm" class="localvar">i</a> : <a href="../h_src/143281672.htm" class="localvar">size</a> - 1 - <a href="../h_src/143281264.htm" class="localvar">i</a>] = (char)(<a href="../h_src/143281944.htm" class="localvar">n</a> &amp; <a href="../h_src/143288812.htm" class="macro">MC</a>);
  }
<a id=1577></a>  if (<a href="../h_src/143281536.htm" class="localvar">neg</a> &amp;&amp; <a href="../h_src/143281672.htm" class="localvar">size</a> &gt; <a href="../h_src/143288676.htm" class="macro">SZINT</a>) {  <a  class="comments">/* negative number need sign extension? */</a>
<a id=1578></a>    for (<a href="../h_src/143281264.htm" class="localvar">i</a> = <a href="../h_src/143288676.htm" class="macro">SZINT</a>; <a href="../h_src/143281264.htm" class="localvar">i</a> &lt; <a href="../h_src/143281672.htm" class="localvar">size</a>; <a href="../h_src/143281264.htm" class="localvar">i</a>++)  <a  class="comments">/* correct extra bytes */</a>
<a id=1579></a>      <a href="../h_src/143281400.htm" class="localvar">buff</a>[<a href="../h_src/143281808.htm" class="localvar">islittle</a> ? <a href="../h_src/143281264.htm" class="localvar">i</a> : <a href="../h_src/143281672.htm" class="localvar">size</a> - 1 - <a href="../h_src/143281264.htm" class="localvar">i</a>] = (char)<a href="../h_src/143288812.htm" class="macro">MC</a>;
  }
<a id=1581></a>  <a href="../h_src/57413924.htm" class="macro">luaL_addsize</a>(<a href="../h_src/143282080.htm" class="localvar">b</a>, <a href="../h_src/143281672.htm" class="localvar">size</a>);  <a  class="comments">/* add result to buffer */</a>
}


<a id=1585></a><a  class="comments">/*</a>
<a id=1586></a><a  class="comments">** Copy 'size' bytes from 'src' to 'dest', correcting endianness if</a>
<a id=1587></a><a  class="comments">** given 'islittle' is different from native endianness.</a>
<a id=1588></a><a  class="comments">*/</a>
<a id=1589></a>static void <a href="../h_src/143281128.htm" class="function">copywithendian</a> (char *<a href="../h_src/143280992.htm" class="localvar">dest</a>, const char *<a href="../h_src/143280856.htm" class="localvar">src</a>,
<a id=1590></a>                            int <a href="../h_src/143280720.htm" class="localvar">size</a>, int <a href="../h_src/143280584.htm" class="localvar">islittle</a>) {
<a id=1591></a>  if (<a href="../h_src/143280584.htm" class="localvar">islittle</a> == <a href="../h_src/143288268.htm" class="variable">nativeendian</a>.<a href="../h_src/143288404.htm" class="variable">little</a>)
<a id=1592></a>    <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/143280992.htm" class="localvar">dest</a>, <a href="../h_src/143280856.htm" class="localvar">src</a>, <a href="../h_src/143280720.htm" class="localvar">size</a>);
  else {
<a id=1594></a>    <a href="../h_src/143280992.htm" class="localvar">dest</a> += <a href="../h_src/143280720.htm" class="localvar">size</a> - 1;
<a id=1595></a>    while (<a href="../h_src/143280720.htm" class="localvar">size</a>-- != 0)
<a id=1596></a>      *(<a href="../h_src/143280992.htm" class="localvar">dest</a>--) = *(<a href="../h_src/143280856.htm" class="localvar">src</a>++);
  }
}


<a id=1601></a>static int <a href="../h_src/143280448.htm" class="function">str_pack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143280312.htm" class="localvar">L</a>) {
<a id=1602></a>  <a href="../h_src/57421744.htm" class="type">luaL_Buffer</a> <a href="../h_src/143280176.htm" class="localvar">b</a>;
<a id=1603></a>  <a href="../h_src/143287860.htm" class="type">Header</a> <a href="../h_src/143280040.htm" class="localvar">h</a>;
<a id=1604></a>  const char *<a href="../h_src/143279904.htm" class="localvar">fmt</a> = <a href="../h_src/57416984.htm" class="macro">luaL_checkstring</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, 1);  <a  class="comments">/* format string */</a>
<a id=1605></a>  int <a href="../h_src/143279768.htm" class="localvar">arg</a> = 1;  <a  class="comments">/* current argument to pack */</a>
<a id=1606></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143279632.htm" class="localvar">totalsize</a> = 0;  <a  class="comments">/* accumulate total size of result */</a>
<a id=1607></a>  <a href="../h_src/143285276.htm" class="function">initheader</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, &amp;<a href="../h_src/143280040.htm" class="localvar">h</a>);
<a id=1608></a>  <a href="../h_src/57435276.htm" class="function">lua_pushnil</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>);  <a  class="comments">/* mark to separate arguments from string buffer */</a>
<a id=1609></a>  <a href="../h_src/57413652.htm" class="function">luaL_buffinit</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, &amp;<a href="../h_src/143280176.htm" class="localvar">b</a>);
<a id=1610></a>  while (*<a href="../h_src/143279904.htm" class="localvar">fmt</a> != '\0') {
<a id=1611></a>    int <a href="../h_src/143279496.htm" class="localvar">size</a>, <a href="../h_src/143279360.htm" class="localvar">ntoalign</a>;
<a id=1612></a>    <a href="../h_src/143286908.htm" class="type">KOption</a> <a href="../h_src/143439200.htm" class="localvar">opt</a> = <a href="../h_src/143283304.htm" class="function">getdetails</a>(&amp;<a href="../h_src/143280040.htm" class="localvar">h</a>, <a href="../h_src/143279632.htm" class="localvar">totalsize</a>, &amp;<a href="../h_src/143279904.htm" class="localvar">fmt</a>, &amp;<a href="../h_src/143279496.htm" class="localvar">size</a>, &amp;<a href="../h_src/143279360.htm" class="localvar">ntoalign</a>);
<a id=1613></a>    <a href="../h_src/143279632.htm" class="localvar">totalsize</a> += <a href="../h_src/143279360.htm" class="localvar">ntoalign</a> + <a href="../h_src/143279496.htm" class="localvar">size</a>;
<a id=1614></a>    while (<a href="../h_src/143279360.htm" class="localvar">ntoalign</a>-- &gt; 0)
<a id=1615></a>     <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143289220.htm" class="macro">LUAL_PACKPADBYTE</a>);  <a  class="comments">/* fill alignment */</a>
<a id=1616></a>    <a href="../h_src/143279768.htm" class="localvar">arg</a>++;
<a id=1617></a>    switch (<a href="../h_src/143439200.htm" class="localvar">opt</a>) {
<a id=1618></a>      case <a href="../h_src/143287792.htm" class="variable">Kint</a>: {  <a  class="comments">/* signed integers */</a>
<a id=1619></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143439064.htm" class="localvar">n</a> = <a href="../h_src/57419976.htm" class="function">luaL_checkinteger</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>);
<a id=1620></a>        if (<a href="../h_src/143279496.htm" class="localvar">size</a> &lt; <a href="../h_src/143288676.htm" class="macro">SZINT</a>) {  <a  class="comments">/* need overflow check? */</a>
<a id=1621></a>          <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143438928.htm" class="localvar">lim</a> = (<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)1 &lt;&lt; ((<a href="../h_src/143279496.htm" class="localvar">size</a> * <a href="../h_src/143288948.htm" class="macro">NB</a>) - 1);
<a id=1622></a>          <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, -<a href="../h_src/143438928.htm" class="localvar">lim</a> &lt;= <a href="../h_src/143439064.htm" class="localvar">n</a> &amp;&amp; <a href="../h_src/143439064.htm" class="localvar">n</a> &lt; <a href="../h_src/143438928.htm" class="localvar">lim</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>, &quot;integer overflow&quot;);
        }
<a id=1624></a>        packint(&amp;b, (<a href="../h_src/57438132.htm" class="function">lua_Unsigned</a>)n, h.islittle, size, (n &lt; 0));
        break;
      }
<a id=1627></a>      case <a href="../h_src/143287724.htm" class="variable">Kuint</a>: {  <a  class="comments">/* unsigned integers */</a>
<a id=1628></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143438792.htm" class="localvar">n</a> = <a href="../h_src/57419976.htm" class="function">luaL_checkinteger</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>);
<a id=1629></a>        if (<a href="../h_src/143279496.htm" class="localvar">size</a> &lt; <a href="../h_src/143288676.htm" class="macro">SZINT</a>)  <a  class="comments">/* need overflow check? */</a>
<a id=1630></a>          <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(L, (lua_Unsigned)n &lt; ((lua_Unsigned)1 &lt;&lt; (size * <a href="../h_src/143288948.htm" class="macro">NB</a>)),
                           arg, &quot;unsigned overflow&quot;);
<a id=1632></a>        packint(&amp;b, (<a href="../h_src/57438132.htm" class="function">lua_Unsigned</a>)n, h.islittle, size, 0);
        break;
      }
<a id=1635></a>      case <a href="../h_src/143287656.htm" class="variable">Kfloat</a>: {  <a  class="comments">/* C float */</a>
<a id=1636></a>        float <a href="../h_src/143438656.htm" class="localvar">f</a> = (float)<a href="../h_src/57420112.htm" class="function">luaL_checknumber</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>);  <a  class="comments">/* get argument */</a>
<a id=1637></a>        char *<a href="../h_src/143438520.htm" class="localvar">buff</a> = <a href="../h_src/57413584.htm" class="function">luaL_prepbuffsize</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, sizeof(<a href="../h_src/143438656.htm" class="localvar">f</a>));
<a id=1638></a>        <a  class="comments">/* move 'f' to final result, correcting endianness if needed */</a>
<a id=1639></a>        <a href="../h_src/143281128.htm" class="function">copywithendian</a>(<a href="../h_src/143438520.htm" class="localvar">buff</a>, (char *)&amp;<a href="../h_src/143438656.htm" class="localvar">f</a>, sizeof(<a href="../h_src/143438656.htm" class="localvar">f</a>), <a href="../h_src/143280040.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>);
<a id=1640></a>        <a href="../h_src/57413924.htm" class="macro">luaL_addsize</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143279496.htm" class="localvar">size</a>);
        break;
      }
<a id=1643></a>      case <a href="../h_src/143287588.htm" class="variable">Knumber</a>: {  <a  class="comments">/* Lua float */</a>
<a id=1644></a>        <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143438384.htm" class="localvar">f</a> = <a href="../h_src/57420112.htm" class="function">luaL_checknumber</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>);  <a  class="comments">/* get argument */</a>
<a id=1645></a>        char *<a href="../h_src/143438248.htm" class="localvar">buff</a> = <a href="../h_src/57413584.htm" class="function">luaL_prepbuffsize</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, sizeof(<a href="../h_src/143438384.htm" class="localvar">f</a>));
<a id=1646></a>        <a  class="comments">/* move 'f' to final result, correcting endianness if needed */</a>
<a id=1647></a>        <a href="../h_src/143281128.htm" class="function">copywithendian</a>(<a href="../h_src/143438248.htm" class="localvar">buff</a>, (char *)&amp;<a href="../h_src/143438384.htm" class="localvar">f</a>, sizeof(<a href="../h_src/143438384.htm" class="localvar">f</a>), <a href="../h_src/143280040.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>);
<a id=1648></a>        <a href="../h_src/57413924.htm" class="macro">luaL_addsize</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143279496.htm" class="localvar">size</a>);
        break;
      }
<a id=1651></a>      case <a href="../h_src/143287520.htm" class="variable">Kdouble</a>: {  <a  class="comments">/* C double */</a>
<a id=1652></a>        double <a href="../h_src/143438112.htm" class="localvar">f</a> = (double)<a href="../h_src/57420112.htm" class="function">luaL_checknumber</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>);  <a  class="comments">/* get argument */</a>
<a id=1653></a>        char *<a href="../h_src/143437976.htm" class="localvar">buff</a> = <a href="../h_src/57413584.htm" class="function">luaL_prepbuffsize</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, sizeof(<a href="../h_src/143438112.htm" class="localvar">f</a>));
<a id=1654></a>        <a  class="comments">/* move 'f' to final result, correcting endianness if needed */</a>
<a id=1655></a>        <a href="../h_src/143281128.htm" class="function">copywithendian</a>(<a href="../h_src/143437976.htm" class="localvar">buff</a>, (char *)&amp;<a href="../h_src/143438112.htm" class="localvar">f</a>, sizeof(<a href="../h_src/143438112.htm" class="localvar">f</a>), <a href="../h_src/143280040.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>);
<a id=1656></a>        <a href="../h_src/57413924.htm" class="macro">luaL_addsize</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143279496.htm" class="localvar">size</a>);
        break;
      }
<a id=1659></a>      case <a href="../h_src/143287452.htm" class="variable">Kchar</a>: {  <a  class="comments">/* fixed-size string */</a>
<a id=1660></a>        <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143437840.htm" class="localvar">len</a>;
<a id=1661></a>        const char *<a href="../h_src/143437704.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>, &amp;<a href="../h_src/143437840.htm" class="localvar">len</a>);
<a id=1662></a>        <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143437840.htm" class="localvar">len</a> &lt;= (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143279496.htm" class="localvar">size</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>,
                         &quot;string longer than given size&quot;);
<a id=1664></a>        <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143437704.htm" class="localvar">s</a>, <a href="../h_src/143437840.htm" class="localvar">len</a>);  <a  class="comments">/* add string */</a>
<a id=1665></a>        while (<a href="../h_src/143437840.htm" class="localvar">len</a>++ &lt; (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143279496.htm" class="localvar">size</a>)  <a  class="comments">/* pad extra space */</a>
<a id=1666></a>          <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143289220.htm" class="macro">LUAL_PACKPADBYTE</a>);
        break;
      }
<a id=1669></a>      case <a href="../h_src/143287384.htm" class="variable">Kstring</a>: {  <a  class="comments">/* strings with length count */</a>
<a id=1670></a>        <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143437568.htm" class="localvar">len</a>;
<a id=1671></a>        const char *<a href="../h_src/143437432.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>, &amp;<a href="../h_src/143437568.htm" class="localvar">len</a>);
<a id=1672></a>        <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279496.htm" class="localvar">size</a> &gt;= (int)sizeof(<a href="../h_aa/57441192.htm" class="type">size_t</a>) ||
<a id=1673></a>                         <a href="../h_src/143437568.htm" class="localvar">len</a> &lt; ((<a href="../h_aa/57441192.htm" class="type">size_t</a>)1 &lt;&lt; (<a href="../h_src/143279496.htm" class="localvar">size</a> * <a href="../h_src/143288948.htm" class="macro">NB</a>)),
<a id=1674></a>                         <a href="../h_src/143279768.htm" class="localvar">arg</a>, &quot;string length does not fit in given size&quot;);
<a id=1675></a>        packint(&amp;b, (<a href="../h_src/57438132.htm" class="function">lua_Unsigned</a>)len, h.islittle, size, 0);  <a  class="comments">/* pack length */</a>
<a id=1676></a>        <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143437432.htm" class="localvar">s</a>, <a href="../h_src/143437568.htm" class="localvar">len</a>);
<a id=1677></a>        <a href="../h_src/143279632.htm" class="localvar">totalsize</a> += <a href="../h_src/143437568.htm" class="localvar">len</a>;
        break;
      }
<a id=1680></a>      case <a href="../h_src/143287316.htm" class="variable">Kzstr</a>: {  <a  class="comments">/* zero-terminated string */</a>
<a id=1681></a>        <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143437296.htm" class="localvar">len</a>;
<a id=1682></a>        const char *<a href="../h_src/143437160.htm" class="localvar">s</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>, &amp;<a href="../h_src/143437296.htm" class="localvar">len</a>);
<a id=1683></a>        <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143280312.htm" class="localvar">L</a>, <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/143437160.htm" class="localvar">s</a>) == <a href="../h_src/143437296.htm" class="localvar">len</a>, <a href="../h_src/143279768.htm" class="localvar">arg</a>, &quot;string contains zeros&quot;);
<a id=1684></a>        <a href="../h_src/57413516.htm" class="function">luaL_addlstring</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143437160.htm" class="localvar">s</a>, <a href="../h_src/143437296.htm" class="localvar">len</a>);
<a id=1685></a>        <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, '\0');  <a  class="comments">/* add zero at the end */</a>
<a id=1686></a>        <a href="../h_src/143279632.htm" class="localvar">totalsize</a> += <a href="../h_src/143437296.htm" class="localvar">len</a> + 1;
        break;
      }
<a id=1689></a>      case <a href="../h_src/143287248.htm" class="variable">Kpadding</a>: <a href="../h_src/57414060.htm" class="macro">luaL_addchar</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>, <a href="../h_src/143289220.htm" class="macro">LUAL_PACKPADBYTE</a>);  <a  class="comments">/* FALLTHROUGH */</a>
<a id=1690></a>      case <a href="../h_src/143287180.htm" class="variable">Kpaddalign</a>: case <a href="../h_src/143287112.htm" class="variable">Knop</a>:
<a id=1691></a>        <a href="../h_src/143279768.htm" class="localvar">arg</a>--;  <a  class="comments">/* undo increment */</a>
        break;
    }
  }
<a id=1695></a>  <a href="../h_src/57413312.htm" class="function">luaL_pushresult</a>(&amp;<a href="../h_src/143280176.htm" class="localvar">b</a>);
  return 1;
}


<a id=1700></a>static int <a href="../h_src/143437024.htm" class="function">str_packsize</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143436888.htm" class="localvar">L</a>) {
<a id=1701></a>  <a href="../h_src/143287860.htm" class="type">Header</a> <a href="../h_src/143436752.htm" class="localvar">h</a>;
<a id=1702></a>  const char *<a href="../h_src/143436616.htm" class="localvar">fmt</a> = <a href="../h_src/57416984.htm" class="macro">luaL_checkstring</a>(<a href="../h_src/143436888.htm" class="localvar">L</a>, 1);  <a  class="comments">/* format string */</a>
<a id=1703></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143436480.htm" class="localvar">totalsize</a> = 0;  <a  class="comments">/* accumulate total size of result */</a>
<a id=1704></a>  <a href="../h_src/143285276.htm" class="function">initheader</a>(<a href="../h_src/143436888.htm" class="localvar">L</a>, &amp;<a href="../h_src/143436752.htm" class="localvar">h</a>);
<a id=1705></a>  while (*<a href="../h_src/143436616.htm" class="localvar">fmt</a> != '\0') {
<a id=1706></a>    int <a href="../h_src/143436344.htm" class="localvar">size</a>, <a href="../h_src/143436208.htm" class="localvar">ntoalign</a>;
<a id=1707></a>    <a href="../h_src/143286908.htm" class="type">KOption</a> <a href="../h_src/143436072.htm" class="localvar">opt</a> = <a href="../h_src/143283304.htm" class="function">getdetails</a>(&amp;<a href="../h_src/143436752.htm" class="localvar">h</a>, <a href="../h_src/143436480.htm" class="localvar">totalsize</a>, &amp;<a href="../h_src/143436616.htm" class="localvar">fmt</a>, &amp;<a href="../h_src/143436344.htm" class="localvar">size</a>, &amp;<a href="../h_src/143436208.htm" class="localvar">ntoalign</a>);
<a id=1708></a>    <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143436888.htm" class="localvar">L</a>, <a href="../h_src/143436072.htm" class="localvar">opt</a> != <a href="../h_src/143287384.htm" class="variable">Kstring</a> &amp;&amp; <a href="../h_src/143436072.htm" class="localvar">opt</a> != <a href="../h_src/143287316.htm" class="variable">Kzstr</a>, 1,
                     &quot;variable-length format&quot;);
<a id=1710></a>    <a href="../h_src/143436344.htm" class="localvar">size</a> += <a href="../h_src/143436208.htm" class="localvar">ntoalign</a>;  <a  class="comments">/* total space used by option */</a>
<a id=1711></a>    <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143436888.htm" class="localvar">L</a>, <a href="../h_src/143436480.htm" class="localvar">totalsize</a> &lt;= <a href="../h_src/143343280.htm" class="macro">MAXSIZE</a> - <a href="../h_src/143436344.htm" class="localvar">size</a>, 1,
                     &quot;format result too large&quot;);
<a id=1713></a>    <a href="../h_src/143436480.htm" class="localvar">totalsize</a> += <a href="../h_src/143436344.htm" class="localvar">size</a>;
  }
<a id=1715></a>  <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143436888.htm" class="localvar">L</a>, (<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)<a href="../h_src/143436480.htm" class="localvar">totalsize</a>);
  return 1;
}


<a id=1720></a><a  class="comments">/*</a>
<a id=1721></a><a  class="comments">** Unpack an integer with 'size' bytes and 'islittle' endianness.</a>
<a id=1722></a><a  class="comments">** If size is smaller than the size of a Lua integer and integer</a>
<a id=1723></a><a  class="comments">** is signed, must do sign extension (propagating the sign to the</a>
<a id=1724></a><a  class="comments">** higher bits); if size is larger than the size of a Lua integer,</a>
<a id=1725></a><a  class="comments">** it must check the unread bytes to see whether they do not cause an</a>
<a id=1726></a><a  class="comments">** overflow.</a>
<a id=1727></a><a  class="comments">*/</a>
<a id=1728></a>static <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143435936.htm" class="function">unpackint</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143435800.htm" class="localvar">L</a>, const char *<a href="../h_src/143435664.htm" class="localvar">str</a>,
<a id=1729></a>                              int <a href="../h_src/143435528.htm" class="localvar">islittle</a>, int <a href="../h_src/143435392.htm" class="localvar">size</a>, int <a href="../h_src/143435256.htm" class="localvar">issigned</a>) {
<a id=1730></a>  <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/143435120.htm" class="localvar">res</a> = 0;
<a id=1731></a>  int <a href="../h_src/143434984.htm" class="localvar">i</a>;
<a id=1732></a>  int <a href="../h_src/143434848.htm" class="localvar">limit</a> = (<a href="../h_src/143435392.htm" class="localvar">size</a>  &lt;= <a href="../h_src/143288676.htm" class="macro">SZINT</a>) ? <a href="../h_src/143435392.htm" class="localvar">size</a> : <a href="../h_src/143288676.htm" class="macro">SZINT</a>;
<a id=1733></a>  for (<a href="../h_src/143434984.htm" class="localvar">i</a> = <a href="../h_src/143434848.htm" class="localvar">limit</a> - 1; <a href="../h_src/143434984.htm" class="localvar">i</a> &gt;= 0; <a href="../h_src/143434984.htm" class="localvar">i</a>--) {
<a id=1734></a>    <a href="../h_src/143435120.htm" class="localvar">res</a> &lt;&lt;= <a href="../h_src/143288948.htm" class="macro">NB</a>;
<a id=1735></a>    <a href="../h_src/143435120.htm" class="localvar">res</a> |= (<a href="../h_src/57438132.htm" class="function">lua_Unsigned</a>)(unsigned char)<a href="../h_src/143435664.htm" class="localvar">str</a>[<a href="../h_src/143435528.htm" class="localvar">islittle</a> ? <a href="../h_src/143434984.htm" class="localvar">i</a> : <a href="../h_src/143435392.htm" class="localvar">size</a> - 1 - <a href="../h_src/143434984.htm" class="localvar">i</a>];
  }
<a id=1737></a>  if (<a href="../h_src/143435392.htm" class="localvar">size</a> &lt; <a href="../h_src/143288676.htm" class="macro">SZINT</a>) {  <a  class="comments">/* real size smaller than lua_Integer? */</a><a href="../h_src/57442076.htm" class="type">lua_Integer</a>? */
<a id=1738></a>    if (<a href="../h_src/143435256.htm" class="localvar">issigned</a>) {  <a  class="comments">/* needs sign extension? */</a>
<a id=1739></a>      <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/143434712.htm" class="localvar">mask</a> = (<a href="../h_src/57438132.htm" class="function">lua_Unsigned</a>)1 &lt;&lt; (<a href="../h_src/143435392.htm" class="localvar">size</a>*<a href="../h_src/143288948.htm" class="macro">NB</a> - 1);
<a id=1740></a>      <a href="../h_src/143435120.htm" class="localvar">res</a> = ((<a href="../h_src/143435120.htm" class="localvar">res</a> ^ <a href="../h_src/143434712.htm" class="localvar">mask</a>) - <a href="../h_src/143434712.htm" class="localvar">mask</a>);  <a  class="comments">/* do sign extension */</a>
    }
  }
<a id=1743></a>  else if (<a href="../h_src/143435392.htm" class="localvar">size</a> &gt; <a href="../h_src/143288676.htm" class="macro">SZINT</a>) {  <a  class="comments">/* must check unread bytes */</a>
<a id=1744></a>    int <a href="../h_src/143434576.htm" class="localvar">mask</a> = (!<a href="../h_src/143435256.htm" class="localvar">issigned</a> || (<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)<a href="../h_src/143435120.htm" class="localvar">res</a> &gt;= 0) ? 0 : <a href="../h_src/143288812.htm" class="macro">MC</a>;
<a id=1745></a>    for (<a href="../h_src/143434984.htm" class="localvar">i</a> = <a href="../h_src/143434848.htm" class="localvar">limit</a>; <a href="../h_src/143434984.htm" class="localvar">i</a> &lt; <a href="../h_src/143435392.htm" class="localvar">size</a>; <a href="../h_src/143434984.htm" class="localvar">i</a>++) {
<a id=1746></a>      if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>((unsigned char)<a href="../h_src/143435664.htm" class="localvar">str</a>[<a href="../h_src/143435528.htm" class="localvar">islittle</a> ? <a href="../h_src/143434984.htm" class="localvar">i</a> : <a href="../h_src/143435392.htm" class="localvar">size</a> - 1 - <a href="../h_src/143434984.htm" class="localvar">i</a>] != <a href="../h_src/143434576.htm" class="localvar">mask</a>))
<a id=1747></a>        <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143435800.htm" class="localvar">L</a>, &quot;%d-byte integer does not fit into Lua Integer&quot;, <a href="../h_src/143435392.htm" class="localvar">size</a>);
    }
  }
<a id=1750></a>  return (<a href="../h_src/57442076.htm" class="type">lua_Integer</a>)<a href="../h_src/143435120.htm" class="localvar">res</a>;
}


<a id=1754></a>static int <a href="../h_src/143434440.htm" class="function">str_unpack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143434304.htm" class="localvar">L</a>) {
<a id=1755></a>  <a href="../h_src/143287860.htm" class="type">Header</a> <a href="../h_src/143434168.htm" class="localvar">h</a>;
<a id=1756></a>  const char *<a href="../h_src/143434032.htm" class="localvar">fmt</a> = <a href="../h_src/57416984.htm" class="macro">luaL_checkstring</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, 1);
<a id=1757></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143433896.htm" class="localvar">ld</a>;
<a id=1758></a>  const char *<a href="../h_src/143433760.htm" class="localvar">data</a> = <a href="../h_src/57420248.htm" class="function">luaL_checklstring</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, 2, &amp;<a href="../h_src/143433896.htm" class="localvar">ld</a>);
<a id=1759></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143433624.htm" class="localvar">pos</a> = <a href="../h_src/143342736.htm" class="function">posrelatI</a>(<a href="../h_src/57419908.htm" class="function">luaL_optinteger</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, 3, 1), <a href="../h_src/143433896.htm" class="localvar">ld</a>) - 1;
<a id=1760></a>  int <a href="../h_src/143433488.htm" class="localvar">n</a> = 0;  <a  class="comments">/* number of results */</a>
<a id=1761></a>  <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433624.htm" class="localvar">pos</a> &lt;= <a href="../h_src/143433896.htm" class="localvar">ld</a>, 3, &quot;initial position out of string&quot;);
<a id=1762></a>  <a href="../h_src/143285276.htm" class="function">initheader</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, &amp;<a href="../h_src/143434168.htm" class="localvar">h</a>);
<a id=1763></a>  while (*<a href="../h_src/143434032.htm" class="localvar">fmt</a> != '\0') {
<a id=1764></a>    int <a href="../h_src/143433352.htm" class="localvar">size</a>, <a href="../h_src/143433216.htm" class="localvar">ntoalign</a>;
<a id=1765></a>    <a href="../h_src/143286908.htm" class="type">KOption</a> <a href="../h_src/143433080.htm" class="localvar">opt</a> = <a href="../h_src/143283304.htm" class="function">getdetails</a>(&amp;<a href="../h_src/143434168.htm" class="localvar">h</a>, <a href="../h_src/143433624.htm" class="localvar">pos</a>, &amp;<a href="../h_src/143434032.htm" class="localvar">fmt</a>, &amp;<a href="../h_src/143433352.htm" class="localvar">size</a>, &amp;<a href="../h_src/143433216.htm" class="localvar">ntoalign</a>);
<a id=1766></a>    <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143433216.htm" class="localvar">ntoalign</a> + <a href="../h_src/143433352.htm" class="localvar">size</a> &lt;= <a href="../h_src/143433896.htm" class="localvar">ld</a> - <a href="../h_src/143433624.htm" class="localvar">pos</a>, 2,
                    &quot;data string too short&quot;);
<a id=1768></a>    <a href="../h_src/143433624.htm" class="localvar">pos</a> += <a href="../h_src/143433216.htm" class="localvar">ntoalign</a>;  <a  class="comments">/* skip alignment */</a>
<a id=1769></a>    <a  class="comments">/* stack space for item + next position */</a>
<a id=1770></a>    <a href="../h_src/57419840.htm" class="function">luaL_checkstack</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, 2, &quot;too many results&quot;);
<a id=1771></a>    <a href="../h_src/143433488.htm" class="localvar">n</a>++;
<a id=1772></a>    switch (<a href="../h_src/143433080.htm" class="localvar">opt</a>) {
<a id=1773></a>      case <a href="../h_src/143287792.htm" class="variable">Kint</a>:
<a id=1774></a>      case <a href="../h_src/143287724.htm" class="variable">Kuint</a>: {
<a id=1775></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/143432944.htm" class="localvar">res</a> = <a href="../h_src/143435936.htm" class="function">unpackint</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>, <a href="../h_src/143434168.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>, <a href="../h_src/143433352.htm" class="localvar">size</a>,
<a id=1776></a>                                       (<a href="../h_src/143433080.htm" class="localvar">opt</a> == <a href="../h_src/143287792.htm" class="variable">Kint</a>));
<a id=1777></a>        <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143432944.htm" class="localvar">res</a>);
        break;
      }
<a id=1780></a>      case <a href="../h_src/143287656.htm" class="variable">Kfloat</a>: {
<a id=1781></a>        float <a href="../h_src/143432808.htm" class="localvar">f</a>;
<a id=1782></a>        <a href="../h_src/143281128.htm" class="function">copywithendian</a>((char *)&amp;<a href="../h_src/143432808.htm" class="localvar">f</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>, sizeof(<a href="../h_src/143432808.htm" class="localvar">f</a>), <a href="../h_src/143434168.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>);
<a id=1783></a>        <a href="../h_src/57435208.htm" class="function">lua_pushnumber</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, (<a href="../h_src/57442144.htm" class="type">lua_Number</a>)<a href="../h_src/143432808.htm" class="localvar">f</a>);
        break;
      }
<a id=1786></a>      case <a href="../h_src/143287588.htm" class="variable">Knumber</a>: {
<a id=1787></a>        <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/143432672.htm" class="localvar">f</a>;
<a id=1788></a>        <a href="../h_src/143281128.htm" class="function">copywithendian</a>((char *)&amp;<a href="../h_src/143432672.htm" class="localvar">f</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>, sizeof(<a href="../h_src/143432672.htm" class="localvar">f</a>), <a href="../h_src/143434168.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>);
<a id=1789></a>        <a href="../h_src/57435208.htm" class="function">lua_pushnumber</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143432672.htm" class="localvar">f</a>);
        break;
      }
<a id=1792></a>      case <a href="../h_src/143287520.htm" class="variable">Kdouble</a>: {
<a id=1793></a>        double <a href="../h_src/143432536.htm" class="localvar">f</a>;
<a id=1794></a>        <a href="../h_src/143281128.htm" class="function">copywithendian</a>((char *)&amp;<a href="../h_src/143432536.htm" class="localvar">f</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>, sizeof(<a href="../h_src/143432536.htm" class="localvar">f</a>), <a href="../h_src/143434168.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>);
<a id=1795></a>        <a href="../h_src/57435208.htm" class="function">lua_pushnumber</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, (<a href="../h_src/57442144.htm" class="type">lua_Number</a>)<a href="../h_src/143432536.htm" class="localvar">f</a>);
        break;
      }
<a id=1798></a>      case <a href="../h_src/143287452.htm" class="variable">Kchar</a>: {
<a id=1799></a>        <a href="../h_src/57435072.htm" class="function">lua_pushlstring</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>, <a href="../h_src/143433352.htm" class="localvar">size</a>);
        break;
      }
<a id=1802></a>      case <a href="../h_src/143287384.htm" class="variable">Kstring</a>: {
<a id=1803></a>        <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143432400.htm" class="localvar">len</a> = (<a href="../h_aa/57441192.htm" class="type">size_t</a>)<a href="../h_src/143435936.htm" class="function">unpackint</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>, <a href="../h_src/143434168.htm" class="localvar">h</a>.<a href="../h_src/143287996.htm" class="variable">islittle</a>, <a href="../h_src/143433352.htm" class="localvar">size</a>, 0);
<a id=1804></a>        <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143432400.htm" class="localvar">len</a> &lt;= <a href="../h_src/143433896.htm" class="localvar">ld</a> - <a href="../h_src/143433624.htm" class="localvar">pos</a> - <a href="../h_src/143433352.htm" class="localvar">size</a>, 2, &quot;data string too short&quot;);
<a id=1805></a>        <a href="../h_src/57435072.htm" class="function">lua_pushlstring</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a> + <a href="../h_src/143433352.htm" class="localvar">size</a>, <a href="../h_src/143432400.htm" class="localvar">len</a>);
<a id=1806></a>        <a href="../h_src/143433624.htm" class="localvar">pos</a> += <a href="../h_src/143432400.htm" class="localvar">len</a>;  <a  class="comments">/* skip string */</a>
        break;
      }
<a id=1809></a>      case <a href="../h_src/143287316.htm" class="variable">Kzstr</a>: {
<a id=1810></a>        <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/143432264.htm" class="localvar">len</a> = <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>);
<a id=1811></a>        <a href="../h_src/57417256.htm" class="macro">luaL_argcheck</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433624.htm" class="localvar">pos</a> + <a href="../h_src/143432264.htm" class="localvar">len</a> &lt; <a href="../h_src/143433896.htm" class="localvar">ld</a>, 2,
                         &quot;unfinished string for format 'z'&quot;);
<a id=1813></a>        <a href="../h_src/57435072.htm" class="function">lua_pushlstring</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433760.htm" class="localvar">data</a> + <a href="../h_src/143433624.htm" class="localvar">pos</a>, <a href="../h_src/143432264.htm" class="localvar">len</a>);
<a id=1814></a>        <a href="../h_src/143433624.htm" class="localvar">pos</a> += <a href="../h_src/143432264.htm" class="localvar">len</a> + 1;  <a  class="comments">/* skip string plus final '\0' */</a>
        break;
      }
<a id=1817></a>      case <a href="../h_src/143287180.htm" class="variable">Kpaddalign</a>: case <a href="../h_src/143287248.htm" class="variable">Kpadding</a>: case <a href="../h_src/143287112.htm" class="variable">Knop</a>:
<a id=1818></a>        <a href="../h_src/143433488.htm" class="localvar">n</a>--;  <a  class="comments">/* undo increment */</a>
        break;
    }
<a id=1821></a>    <a href="../h_src/143433624.htm" class="localvar">pos</a> += <a href="../h_src/143433352.htm" class="localvar">size</a>;
  }
<a id=1823></a>  <a href="../h_src/57435140.htm" class="function">lua_pushinteger</a>(<a href="../h_src/143434304.htm" class="localvar">L</a>, <a href="../h_src/143433624.htm" class="localvar">pos</a> + 1);  <a  class="comments">/* next position */</a>
<a id=1824></a>  return <a href="../h_src/143433488.htm" class="localvar">n</a> + 1;
}

<a id=1827></a><a  class="comments">/* }====================================================== */</a>


<a id=1830></a>static const <a href="../h_src/57420996.htm" class="type">luaL_Reg</a> <a href="../h_src/143432128.htm" class="variable">strlib</a>[] = {
<a id=1831></a>  {&quot;byte&quot;, <a href="../h_src/143336412.htm" class="function">str_byte</a>},
<a id=1832></a>  {&quot;char&quot;, <a href="../h_src/143335188.htm" class="function">str_char</a>},
<a id=1833></a>  {&quot;dump&quot;, <a href="../h_src/143333012.htm" class="function">str_dump</a>},
<a id=1834></a>  {&quot;find&quot;, <a href="../h_src/143309484.htm" class="function">str_find</a>},
<a id=1835></a>  {&quot;format&quot;, <a href="../h_src/143291804.htm" class="function">str_format</a>},
<a id=1836></a>  {&quot;gmatch&quot;, <a href="../h_src/143307716.htm" class="function">gmatch</a>},
<a id=1837></a>  {&quot;gsub&quot;, <a href="../h_src/143304044.htm" class="function">str_gsub</a>},
<a id=1838></a>  {&quot;len&quot;, <a href="../h_src/143343144.htm" class="function">str_len</a>},
<a id=1839></a>  {&quot;lower&quot;, <a href="../h_src/143339744.htm" class="function">str_lower</a>},
<a id=1840></a>  {&quot;match&quot;, <a href="../h_src/143309212.htm" class="function">str_match</a>},
<a id=1841></a>  {&quot;rep&quot;, <a href="../h_src/143337772.htm" class="function">str_rep</a>},
<a id=1842></a>  {&quot;reverse&quot;, <a href="../h_src/143340696.htm" class="function">str_reverse</a>},
<a id=1843></a>  {&quot;sub&quot;, <a href="../h_src/143341512.htm" class="function">str_sub</a>},
<a id=1844></a>  {&quot;upper&quot;, <a href="../h_src/143338724.htm" class="function">str_upper</a>},
<a id=1845></a>  {&quot;pack&quot;, <a href="../h_src/143280448.htm" class="function">str_pack</a>},
<a id=1846></a>  {&quot;packsize&quot;, <a href="../h_src/143437024.htm" class="function">str_packsize</a>},
<a id=1847></a>  {&quot;unpack&quot;, <a href="../h_src/143434440.htm" class="function">str_unpack</a>},
  {NULL, NULL}
};


<a id=1852></a>static void <a href="../h_src/143432060.htm" class="function">createmetatable</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143431924.htm" class="localvar">L</a>) {
<a id=1853></a>  <a  class="comments">/* table to be metatable for strings */</a>
<a id=1854></a>  <a href="../h_src/57417528.htm" class="macro">luaL_newlibtable</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, <a href="../h_src/143328660.htm" class="variable">stringmetamethods</a>);
<a id=1855></a>  <a href="../h_src/57417868.htm" class="function">luaL_setfuncs</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, <a href="../h_src/143328660.htm" class="variable">stringmetamethods</a>, 0);
<a id=1856></a>  <a href="../h_src/57427660.htm" class="macro">lua_pushliteral</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, &quot;&quot;);  <a  class="comments">/* dummy string */</a>
<a id=1857></a>  <a href="../h_src/57439220.htm" class="function">lua_pushvalue</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, -2);  <a  class="comments">/* copy table */</a>
<a id=1858></a>  <a href="../h_src/57433168.htm" class="function">lua_setmetatable</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, -2);  <a  class="comments">/* set table as metatable for strings */</a>
<a id=1859></a>  <a href="../h_src/57429292.htm" class="macro">lua_pop</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, 1);  <a  class="comments">/* pop dummy string */</a>
<a id=1860></a>  <a href="../h_src/57439220.htm" class="function">lua_pushvalue</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, -2);  <a  class="comments">/* get string library */</a>
<a id=1861></a>  <a href="../h_src/57433508.htm" class="function">lua_setfield</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, -2, &quot;__index&quot;);  <a  class="comments">/* metatable.__index = string */</a>
<a id=1862></a>  <a href="../h_src/57429292.htm" class="macro">lua_pop</a>(<a href="../h_src/143431924.htm" class="localvar">L</a>, 1);  <a  class="comments">/* pop metatable */</a>
}


<a id=1866></a><a  class="comments">/*</a>
<a id=1867></a><a  class="comments">** Open string library</a>
<a id=1868></a><a  class="comments">*/</a>
<a id=1869></a><a href="../h_src/57454180.htm" class="macro">LUAMOD_API</a> int <a href="../h_src/57574620.htm" class="function">luaopen_string</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/143431788.htm" class="localvar">L</a>) {
<a id=1870></a>  <a href="../h_src/57417392.htm" class="macro">luaL_newlib</a>(<a href="../h_src/143431788.htm" class="localvar">L</a>, <a href="../h_src/143432128.htm" class="variable">strlib</a>);
<a id=1871></a>  <a href="../h_src/143432060.htm" class="function">createmetatable</a>(<a href="../h_src/143431788.htm" class="localvar">L</a>);
  return 1;
}

</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

