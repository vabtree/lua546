<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lstring.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/58132328.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/58132328.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/58132328.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/58132328.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/58132328.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/58132328.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/58132328.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/58132328.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/58132328.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lstring.c $</a>
<a id=3></a><a  class="comments">** String table (keeps all strings handled by Lua)</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/58132260.htm" class="macro">lstring_c</a>
<a id=8></a>#define <a href="../h_src/58132124.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;string.h&gt;

<a id=15></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=17></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=18></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=19></a>#include &quot;<a href="../h_src/57496896.htm" class="file">lmem.h</a>&quot;
<a id=20></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=21></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;


<a id=25></a><a  class="comments">/*</a>
<a id=26></a><a  class="comments">** Maximum size for string table.</a>
<a id=27></a><a  class="comments">*/</a>
<a id=28></a>#define <a href="../h_src/58131988.htm" class="macro">MAXSTRTB</a>	cast_int(luaM_limitN(MAX_INT, TString*))


<a id=31></a><a  class="comments">/*</a>
<a id=32></a><a  class="comments">** equality for long strings</a>
<a id=33></a><a  class="comments">*/</a>
<a id=34></a>int <a href="../h_src/57619028.htm" class="function">luaS_eqlngstr</a> (<a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58131852.htm" class="localvar">a</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58131716.htm" class="localvar">b</a>) {
<a id=35></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58131580.htm" class="localvar">len</a> = <a href="../h_src/58131852.htm" class="localvar">a</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523212.htm" class="variable">lnglen</a>;
<a id=36></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(a-&gt;tt == <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a> &amp;&amp; b-&gt;tt == <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>);
<a id=37></a>  return (<a href="../h_src/58131852.htm" class="localvar">a</a> == <a href="../h_src/58131716.htm" class="localvar">b</a>) ||  <a  class="comments">/* same instance or... */</a>
<a id=38></a>    ((<a href="../h_src/58131580.htm" class="localvar">len</a> == <a href="../h_src/58131716.htm" class="localvar">b</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523212.htm" class="variable">lnglen</a>) &amp;&amp;  <a  class="comments">/* equal length and ... */</a>
<a id=39></a>     (<a href="../h_aa/58131444.htm" class="libfunc">memcmp</a>(<a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58131852.htm" class="localvar">a</a>), <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58131716.htm" class="localvar">b</a>), <a href="../h_src/58131580.htm" class="localvar">len</a>) == 0));  <a  class="comments">/* equal contents */</a><a href="../h_src/57522804.htm" class="variable">contents</a> */
}


<a id=43></a>unsigned int <a href="../h_src/57619164.htm" class="function">luaS_hash</a> (const char *<a href="../h_src/58131376.htm" class="localvar">str</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58131240.htm" class="localvar">l</a>, unsigned int <a href="../h_src/58131104.htm" class="localvar">seed</a>) {
<a id=44></a>  unsigned int <a href="../h_src/58130968.htm" class="localvar">h</a> = <a href="../h_src/58131104.htm" class="localvar">seed</a> ^ <a href="../h_src/57547080.htm" class="macro">cast_uint</a>(<a href="../h_src/58131240.htm" class="localvar">l</a>);
<a id=45></a>  for (; <a href="../h_src/58131240.htm" class="localvar">l</a> &gt; 0; <a href="../h_src/58131240.htm" class="localvar">l</a>--)
<a id=46></a>    <a href="../h_src/58130968.htm" class="localvar">h</a> ^= ((<a href="../h_src/58130968.htm" class="localvar">h</a>&lt;&lt;5) + (<a href="../h_src/58130968.htm" class="localvar">h</a>&gt;&gt;2) + <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/58131376.htm" class="localvar">str</a>[<a href="../h_src/58131240.htm" class="localvar">l</a> - 1]));
<a id=47></a>  return <a href="../h_src/58130968.htm" class="localvar">h</a>;
}


<a id=51></a>unsigned int <a href="../h_src/57619096.htm" class="function">luaS_hashlongstr</a> (<a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58130832.htm" class="localvar">ts</a>) {
<a id=52></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(ts-&gt;tt == <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>);
<a id=53></a>  if (<a href="../h_src/58130832.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523484.htm" class="variable">extra</a> == 0) {  <a  class="comments">/* no hash? */</a>
<a id=54></a>    <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58130696.htm" class="localvar">len</a> = <a href="../h_src/58130832.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523212.htm" class="variable">lnglen</a>;
<a id=55></a>    <a href="../h_src/58130832.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523348.htm" class="variable">hash</a> = <a href="../h_src/57619164.htm" class="function">luaS_hash</a>(<a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58130832.htm" class="localvar">ts</a>), <a href="../h_src/58130696.htm" class="localvar">len</a>, <a href="../h_src/58130832.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523348.htm" class="variable">hash</a>);
<a id=56></a>    <a href="../h_src/58130832.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523484.htm" class="variable">extra</a> = 1;  <a  class="comments">/* now it has its hash */</a>
  }
<a id=58></a>  return <a href="../h_src/58130832.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523348.htm" class="variable">hash</a>;
}


<a id=62></a>static void <a href="../h_src/58130560.htm" class="function">tablerehash</a> (<a href="../h_src/57522736.htm" class="type">TString</a> **<a href="../h_src/58130424.htm" class="localvar">vect</a>, int <a href="../h_src/58130288.htm" class="localvar">osize</a>, int <a href="../h_src/58130152.htm" class="localvar">nsize</a>) {
<a id=63></a>  int <a href="../h_src/58130016.htm" class="localvar">i</a>;
<a id=64></a>  for (<a href="../h_src/58130016.htm" class="localvar">i</a> = <a href="../h_src/58130288.htm" class="localvar">osize</a>; <a href="../h_src/58130016.htm" class="localvar">i</a> &lt; <a href="../h_src/58130152.htm" class="localvar">nsize</a>; <a href="../h_src/58130016.htm" class="localvar">i</a>++)  <a  class="comments">/* clear new elements */</a>
<a id=65></a>    <a href="../h_src/58130424.htm" class="localvar">vect</a>[<a href="../h_src/58130016.htm" class="localvar">i</a>] = NULL;
<a id=66></a>  for (<a href="../h_src/58130016.htm" class="localvar">i</a> = 0; <a href="../h_src/58130016.htm" class="localvar">i</a> &lt; <a href="../h_src/58130288.htm" class="localvar">osize</a>; <a href="../h_src/58130016.htm" class="localvar">i</a>++) {  <a  class="comments">/* rehash old part of the array */</a>
<a id=67></a>    <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58129880.htm" class="localvar">p</a> = <a href="../h_src/58130424.htm" class="localvar">vect</a>[<a href="../h_src/58130016.htm" class="localvar">i</a>];
<a id=68></a>    <a href="../h_src/58130424.htm" class="localvar">vect</a>[<a href="../h_src/58130016.htm" class="localvar">i</a>] = NULL;
<a id=69></a>    while (<a href="../h_src/58129880.htm" class="localvar">p</a>) {  <a  class="comments">/* for each string in the list */</a>
<a id=70></a>      <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58129744.htm" class="localvar">hnext</a> = <a href="../h_src/58129880.htm" class="localvar">p</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523008.htm" class="variable">hnext</a>;  <a  class="comments">/* save next */</a>
<a id=71></a>      unsigned int <a href="../h_src/58129608.htm" class="localvar">h</a> = <a href="../h_src/57502472.htm" class="macro">lmod</a>(<a href="../h_src/58129880.htm" class="localvar">p</a>-&gt;<a href="../h_src/57523348.htm" class="variable">hash</a>, <a href="../h_src/58130152.htm" class="localvar">nsize</a>);  <a  class="comments">/* new position */</a>
<a id=72></a>      <a href="../h_src/58129880.htm" class="localvar">p</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523008.htm" class="variable">hnext</a> = <a href="../h_src/58130424.htm" class="localvar">vect</a>[<a href="../h_src/58129608.htm" class="localvar">h</a>];  <a  class="comments">/* chain it into array */</a>
<a id=73></a>      <a href="../h_src/58130424.htm" class="localvar">vect</a>[<a href="../h_src/58129608.htm" class="localvar">h</a>] = <a href="../h_src/58129880.htm" class="localvar">p</a>;
<a id=74></a>      <a href="../h_src/58129880.htm" class="localvar">p</a> = <a href="../h_src/58129744.htm" class="localvar">hnext</a>;
    }
  }
}


<a id=80></a><a  class="comments">/*</a>
<a id=81></a><a  class="comments">** Resize the string table. If allocation fails, keep the current size.</a>
<a id=82></a><a  class="comments">** (This can degrade performance, but any non-zero size should work</a>
<a id=83></a><a  class="comments">** correctly.)</a>
<a id=84></a><a  class="comments">*/</a>
<a id=85></a>void <a href="../h_src/57618960.htm" class="function">luaS_resize</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58129472.htm" class="localvar">L</a>, int <a href="../h_src/58129336.htm" class="localvar">nsize</a>) {
<a id=86></a>  <a href="../h_src/57651600.htm" class="type">stringtable</a> *<a href="../h_src/58129132.htm" class="localvar">tb</a> = &amp;<a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/58129472.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57646364.htm" class="variable">strt</a>;
<a id=87></a>  int <a href="../h_src/58128996.htm" class="localvar">osize</a> = <a href="../h_src/58129132.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a>;
<a id=88></a>  <a href="../h_src/57522736.htm" class="type">TString</a> **<a href="../h_src/58128860.htm" class="localvar">newvect</a>;
<a id=89></a>  if (<a href="../h_src/58129336.htm" class="localvar">nsize</a> &lt; <a href="../h_src/58128996.htm" class="localvar">osize</a>)  <a  class="comments">/* shrinking table? */</a>
<a id=90></a>    <a href="../h_src/58130560.htm" class="function">tablerehash</a>(<a href="../h_src/58129132.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a>, <a href="../h_src/58128996.htm" class="localvar">osize</a>, <a href="../h_src/58129336.htm" class="localvar">nsize</a>);  <a  class="comments">/* depopulate shrinking part */</a>
<a id=91></a>  <a href="../h_src/58128860.htm" class="localvar">newvect</a> = <a href="../h_src/57657244.htm" class="macro">luaM_reallocvector</a>(<a href="../h_src/58129472.htm" class="localvar">L</a>, <a href="../h_src/58129132.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a>, <a href="../h_src/58128996.htm" class="localvar">osize</a>, <a href="../h_src/58129336.htm" class="localvar">nsize</a>, <a href="../h_src/57522736.htm" class="type">TString</a>*);
<a id=92></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58128860.htm" class="localvar">newvect</a> == NULL)) {  <a  class="comments">/* reallocation failed? */</a>
<a id=93></a>    if (<a href="../h_src/58129336.htm" class="localvar">nsize</a> &lt; <a href="../h_src/58128996.htm" class="localvar">osize</a>)  <a  class="comments">/* was it shrinking table? */</a>
<a id=94></a>      <a href="../h_src/58130560.htm" class="function">tablerehash</a>(<a href="../h_src/58129132.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a>, <a href="../h_src/58129336.htm" class="localvar">nsize</a>, <a href="../h_src/58128996.htm" class="localvar">osize</a>);  <a  class="comments">/* restore to original size */</a>
<a id=95></a>    <a  class="comments">/* leave table as it was */</a>
  }
<a id=97></a>  else {  <a  class="comments">/* allocation succeeded */</a>
<a id=98></a>    <a href="../h_src/58129132.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a> = <a href="../h_src/58128860.htm" class="localvar">newvect</a>;
<a id=99></a>    <a href="../h_src/58129132.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a> = <a href="../h_src/58129336.htm" class="localvar">nsize</a>;
<a id=100></a>    if (<a href="../h_src/58129336.htm" class="localvar">nsize</a> &gt; <a href="../h_src/58128996.htm" class="localvar">osize</a>)
<a id=101></a>      <a href="../h_src/58130560.htm" class="function">tablerehash</a>(<a href="../h_src/58128860.htm" class="localvar">newvect</a>, <a href="../h_src/58128996.htm" class="localvar">osize</a>, <a href="../h_src/58129336.htm" class="localvar">nsize</a>);  <a  class="comments">/* rehash for new size */</a>
  }
}


<a id=106></a><a  class="comments">/*</a>
<a id=107></a><a  class="comments">** Clear API string cache. (Entries cannot be empty, so fill them with</a>
<a id=108></a><a  class="comments">** a non-collectable string.)</a>
<a id=109></a><a  class="comments">*/</a>
<a id=110></a>void <a href="../h_src/57618892.htm" class="function">luaS_clearcache</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/58128724.htm" class="localvar">g</a>) {
<a id=111></a>  int <a href="../h_src/58128588.htm" class="localvar">i</a>, <a href="../h_src/58128452.htm" class="localvar">j</a>;
<a id=112></a>  for (<a href="../h_src/58128588.htm" class="localvar">i</a> = 0; <a href="../h_src/58128588.htm" class="localvar">i</a> &lt; <a href="../h_src/57544360.htm" class="macro">STRCACHE_N</a>; <a href="../h_src/58128588.htm" class="localvar">i</a>++)
<a id=113></a>    for (<a href="../h_src/58128452.htm" class="localvar">j</a> = 0; <a href="../h_src/58128452.htm" class="localvar">j</a> &lt; <a href="../h_src/57544224.htm" class="macro">STRCACHE_M</a>; <a href="../h_src/58128452.htm" class="localvar">j</a>++) {
<a id=114></a>      if (<a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/58128724.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643304.htm" class="variable">strcache</a>[<a href="../h_src/58128588.htm" class="localvar">i</a>][<a href="../h_src/58128452.htm" class="localvar">j</a>]))  <a  class="comments">/* will entry be collected? */</a>
<a id=115></a>        <a href="../h_src/58128724.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643304.htm" class="variable">strcache</a>[<a href="../h_src/58128588.htm" class="localvar">i</a>][<a href="../h_src/58128452.htm" class="localvar">j</a>] = <a href="../h_src/58128724.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643780.htm" class="variable">memerrmsg</a>;  <a  class="comments">/* replace it with something fixed */</a>
    }
}


<a id=120></a><a  class="comments">/*</a>
<a id=121></a><a  class="comments">** Initialize the string table and the string cache</a>
<a id=122></a><a  class="comments">*/</a>
<a id=123></a>void <a href="../h_src/57618824.htm" class="function">luaS_init</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58128316.htm" class="localvar">L</a>) {
<a id=124></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/58128180.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/58128316.htm" class="localvar">L</a>);
<a id=125></a>  int <a href="../h_src/58128044.htm" class="localvar">i</a>, <a href="../h_src/58127908.htm" class="localvar">j</a>;
<a id=126></a>  <a href="../h_src/57651600.htm" class="type">stringtable</a> *<a href="../h_src/58127772.htm" class="localvar">tb</a> = &amp;<a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/58128316.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57646364.htm" class="variable">strt</a>;
<a id=127></a>  <a href="../h_src/58127772.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a> = <a href="../h_src/57495332.htm" class="macro">luaM_newvector</a>(<a href="../h_src/58128316.htm" class="localvar">L</a>, <a href="../h_src/57544632.htm" class="macro">MINSTRTABSIZE</a>, <a href="../h_src/57522736.htm" class="type">TString</a>*);
<a id=128></a>  <a href="../h_src/58130560.htm" class="function">tablerehash</a>(<a href="../h_src/58127772.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a>, 0, <a href="../h_src/57544632.htm" class="macro">MINSTRTABSIZE</a>);  <a  class="comments">/* clear array */</a>
<a id=129></a>  <a href="../h_src/58127772.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a> = <a href="../h_src/57544632.htm" class="macro">MINSTRTABSIZE</a>;
<a id=130></a>  <a  class="comments">/* pre-create memory-error message */</a>
<a id=131></a>  <a href="../h_src/58128180.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643780.htm" class="variable">memerrmsg</a> = <a href="../h_src/57619572.htm" class="macro">luaS_newliteral</a>(<a href="../h_src/58128316.htm" class="localvar">L</a>, <a href="../h_src/57619844.htm" class="macro">MEMERRMSG</a>);
<a id=132></a>  <a href="../h_src/57620932.htm" class="function">luaC_fix</a>(<a href="../h_src/58128316.htm" class="localvar">L</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/58128180.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643780.htm" class="variable">memerrmsg</a>));  <a  class="comments">/* it should never be collected */</a>
<a id=133></a>  for (<a href="../h_src/58128044.htm" class="localvar">i</a> = 0; <a href="../h_src/58128044.htm" class="localvar">i</a> &lt; <a href="../h_src/57544360.htm" class="macro">STRCACHE_N</a>; <a href="../h_src/58128044.htm" class="localvar">i</a>++)  <a  class="comments">/* fill cache with valid strings */</a>
<a id=134></a>    for (<a href="../h_src/58127908.htm" class="localvar">j</a> = 0; <a href="../h_src/58127908.htm" class="localvar">j</a> &lt; <a href="../h_src/57544224.htm" class="macro">STRCACHE_M</a>; <a href="../h_src/58127908.htm" class="localvar">j</a>++)
<a id=135></a>      <a href="../h_src/58128180.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643304.htm" class="variable">strcache</a>[<a href="../h_src/58128044.htm" class="localvar">i</a>][<a href="../h_src/58127908.htm" class="localvar">j</a>] = <a href="../h_src/58128180.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643780.htm" class="variable">memerrmsg</a>;
}



<a id=140></a><a  class="comments">/*</a>
<a id=141></a><a  class="comments">** creates a new string object</a>
<a id=142></a><a  class="comments">*/</a>
<a id=143></a>static <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58127636.htm" class="function">createstrobj</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58127500.htm" class="localvar">L</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58127364.htm" class="localvar">l</a>, int <a href="../h_src/58127228.htm" class="localvar">tag</a>, unsigned int <a href="../h_src/58127092.htm" class="localvar">h</a>) {
<a id=144></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58126956.htm" class="localvar">ts</a>;
<a id=145></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/58126820.htm" class="localvar">o</a>;
<a id=146></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58126684.htm" class="localvar">totalsize</a>;  <a  class="comments">/* total size of TString object */</a>
<a id=147></a>  <a href="../h_src/58126684.htm" class="localvar">totalsize</a> = <a href="../h_src/57619708.htm" class="macro">sizelstring</a>(<a href="../h_src/58127364.htm" class="localvar">l</a>);
<a id=148></a>  <a href="../h_src/58126820.htm" class="localvar">o</a> = <a href="../h_src/57620592.htm" class="function">luaC_newobj</a>(<a href="../h_src/58127500.htm" class="localvar">L</a>, <a href="../h_src/58127228.htm" class="localvar">tag</a>, <a href="../h_src/58126684.htm" class="localvar">totalsize</a>);
<a id=149></a>  <a href="../h_src/58126956.htm" class="localvar">ts</a> = <a href="../h_src/57640108.htm" class="macro">gco2ts</a>(<a href="../h_src/58126820.htm" class="localvar">o</a>);
<a id=150></a>  <a href="../h_src/58126956.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523348.htm" class="variable">hash</a> = <a href="../h_src/58127092.htm" class="localvar">h</a>;
<a id=151></a>  <a href="../h_src/58126956.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523484.htm" class="variable">extra</a> = 0;
<a id=152></a>  <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58126956.htm" class="localvar">ts</a>)[<a href="../h_src/58127364.htm" class="localvar">l</a>] = '\0';  <a  class="comments">/* ending 0 */</a>
<a id=153></a>  return <a href="../h_src/58126956.htm" class="localvar">ts</a>;
}


<a id=157></a><a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57618416.htm" class="function">luaS_createlngstrobj</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58126548.htm" class="localvar">L</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58126412.htm" class="localvar">l</a>) {
<a id=158></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58126276.htm" class="localvar">ts</a> = <a href="../h_src/58127636.htm" class="function">createstrobj</a>(<a href="../h_src/58126548.htm" class="localvar">L</a>, <a href="../h_src/58126412.htm" class="localvar">l</a>, <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>, <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/58126548.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57646160.htm" class="variable">seed</a>);
<a id=159></a>  <a href="../h_src/58126276.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523212.htm" class="variable">lnglen</a> = <a href="../h_src/58126412.htm" class="localvar">l</a>;
<a id=160></a>  return <a href="../h_src/58126276.htm" class="localvar">ts</a>;
}


<a id=164></a>void <a href="../h_src/57618756.htm" class="function">luaS_remove</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58126140.htm" class="localvar">L</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58126004.htm" class="localvar">ts</a>) {
<a id=165></a>  <a href="../h_src/57651600.htm" class="type">stringtable</a> *<a href="../h_src/58125868.htm" class="localvar">tb</a> = &amp;<a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/58126140.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57646364.htm" class="variable">strt</a>;
<a id=166></a>  <a href="../h_src/57522736.htm" class="type">TString</a> **<a href="../h_src/58125732.htm" class="localvar">p</a> = &amp;<a href="../h_src/58125868.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a>[<a href="../h_src/57502472.htm" class="macro">lmod</a>(<a href="../h_src/58126004.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523348.htm" class="variable">hash</a>, <a href="../h_src/58125868.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a>)];
<a id=167></a>  while (*<a href="../h_src/58125732.htm" class="localvar">p</a> != <a href="../h_src/58126004.htm" class="localvar">ts</a>)  <a  class="comments">/* find previous element */</a>
<a id=168></a>    <a href="../h_src/58125732.htm" class="localvar">p</a> = &amp;(*<a href="../h_src/58125732.htm" class="localvar">p</a>)-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523008.htm" class="variable">hnext</a>;
<a id=169></a>  *<a href="../h_src/58125732.htm" class="localvar">p</a> = (*<a href="../h_src/58125732.htm" class="localvar">p</a>)-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523008.htm" class="variable">hnext</a>;  <a  class="comments">/* remove element from its list */</a>
<a id=170></a>  <a href="../h_src/58125868.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651736.htm" class="variable">nuse</a>--;
}


<a id=174></a>static void <a href="../h_src/58125596.htm" class="function">growstrtab</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58125460.htm" class="localvar">L</a>, <a href="../h_src/57651600.htm" class="type">stringtable</a> *<a href="../h_src/58125324.htm" class="localvar">tb</a>) {
<a id=175></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58125324.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651736.htm" class="variable">nuse</a> == <a href="../h_src/57549800.htm" class="macro">MAX_INT</a>)) {  <a  class="comments">/* too many strings? */</a>
<a id=176></a>    <a href="../h_src/57620660.htm" class="function">luaC_fullgc</a>(<a href="../h_src/58125460.htm" class="localvar">L</a>, 1);  <a  class="comments">/* try to free some... */</a>
<a id=177></a>    if (<a href="../h_src/58125324.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651736.htm" class="variable">nuse</a> == <a href="../h_src/57549800.htm" class="macro">MAX_INT</a>)  <a  class="comments">/* still too many? */</a>
<a id=178></a>      <a href="../h_src/57496556.htm" class="macro">luaM_error</a>(<a href="../h_src/58125460.htm" class="localvar">L</a>);  <a  class="comments">/* cannot even create a message... */</a>
  }
<a id=180></a>  if (<a href="../h_src/58125324.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a> &lt;= <a href="../h_src/58131988.htm" class="macro">MAXSTRTB</a> / 2)  <a  class="comments">/* can grow string table? */</a>
<a id=181></a>    <a href="../h_src/57618960.htm" class="function">luaS_resize</a>(<a href="../h_src/58125460.htm" class="localvar">L</a>, <a href="../h_src/58125324.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a> * 2);
}


<a id=185></a><a  class="comments">/*</a>
<a id=186></a><a  class="comments">** Checks whether short string exists and reuses it or creates a new one.</a>
<a id=187></a><a  class="comments">*/</a>
<a id=188></a>static <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58125188.htm" class="function">internshrstr</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58125052.htm" class="localvar">L</a>, const char *<a href="../h_src/58124916.htm" class="localvar">str</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58124780.htm" class="localvar">l</a>) {
<a id=189></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58124644.htm" class="localvar">ts</a>;
<a id=190></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/58124508.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/58125052.htm" class="localvar">L</a>);
<a id=191></a>  <a href="../h_src/57651600.htm" class="type">stringtable</a> *<a href="../h_src/58124372.htm" class="localvar">tb</a> = &amp;<a href="../h_src/58124508.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646364.htm" class="variable">strt</a>;
<a id=192></a>  unsigned int <a href="../h_src/58124236.htm" class="localvar">h</a> = <a href="../h_src/57619164.htm" class="function">luaS_hash</a>(<a href="../h_src/58124916.htm" class="localvar">str</a>, <a href="../h_src/58124780.htm" class="localvar">l</a>, <a href="../h_src/58124508.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646160.htm" class="variable">seed</a>);
<a id=193></a>  <a href="../h_src/57522736.htm" class="type">TString</a> **<a href="../h_src/58124100.htm" class="localvar">list</a> = &amp;<a href="../h_src/58124372.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a>[<a href="../h_src/57502472.htm" class="macro">lmod</a>(<a href="../h_src/58124236.htm" class="localvar">h</a>, <a href="../h_src/58124372.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a>)];
<a id=194></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(str != NULL);  <a  class="comments">/* otherwise 'memcmp'/'memcpy' are undefined */</a>
<a id=195></a>  for (<a href="../h_src/58124644.htm" class="localvar">ts</a> = *<a href="../h_src/58124100.htm" class="localvar">list</a>; <a href="../h_src/58124644.htm" class="localvar">ts</a> != NULL; <a href="../h_src/58124644.htm" class="localvar">ts</a> = <a href="../h_src/58124644.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523008.htm" class="variable">hnext</a>) {
<a id=196></a>    if (<a href="../h_src/58124780.htm" class="localvar">l</a> == <a href="../h_src/58124644.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523416.htm" class="variable">shrlen</a> &amp;&amp; (<a href="../h_aa/58131444.htm" class="libfunc">memcmp</a>(<a href="../h_src/58124916.htm" class="localvar">str</a>, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58124644.htm" class="localvar">ts</a>), <a href="../h_src/58124780.htm" class="localvar">l</a> * sizeof(char)) == 0)) {
<a id=197></a>      <a  class="comments">/* found! */</a>
<a id=198></a>      if (<a href="../h_src/57625556.htm" class="macro">isdead</a>(<a href="../h_src/58124508.htm" class="localvar">g</a>, <a href="../h_src/58124644.htm" class="localvar">ts</a>))  <a  class="comments">/* dead (but not collected yet)? */</a>
<a id=199></a>        <a href="../h_src/57625420.htm" class="macro">changewhite</a>(<a href="../h_src/58124644.htm" class="localvar">ts</a>);  <a  class="comments">/* resurrect it */</a>
<a id=200></a>      return <a href="../h_src/58124644.htm" class="localvar">ts</a>;
    }
  }
<a id=203></a>  <a  class="comments">/* else must create a new string */</a>
<a id=204></a>  if (<a href="../h_src/58124372.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651736.htm" class="variable">nuse</a> &gt;= <a href="../h_src/58124372.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a>) {  <a  class="comments">/* need to grow string table? */</a>
<a id=205></a>    <a href="../h_src/58125596.htm" class="function">growstrtab</a>(<a href="../h_src/58125052.htm" class="localvar">L</a>, <a href="../h_src/58124372.htm" class="localvar">tb</a>);
<a id=206></a>    <a href="../h_src/58124100.htm" class="localvar">list</a> = &amp;<a href="../h_src/58124372.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651804.htm" class="variable">hash</a>[<a href="../h_src/57502472.htm" class="macro">lmod</a>(<a href="../h_src/58124236.htm" class="localvar">h</a>, <a href="../h_src/58124372.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651668.htm" class="variable">size</a>)];  <a  class="comments">/* rehash with new size */</a>
  }
<a id=208></a>  <a href="../h_src/58124644.htm" class="localvar">ts</a> = <a href="../h_src/58127636.htm" class="function">createstrobj</a>(<a href="../h_src/58125052.htm" class="localvar">L</a>, <a href="../h_src/58124780.htm" class="localvar">l</a>, <a href="../h_src/57525184.htm" class="macro">LUA_VSHRSTR</a>, <a href="../h_src/58124236.htm" class="localvar">h</a>);
<a id=209></a>  <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58124644.htm" class="localvar">ts</a>), <a href="../h_src/58124916.htm" class="localvar">str</a>, <a href="../h_src/58124780.htm" class="localvar">l</a> * sizeof(char));
<a id=210></a>  <a href="../h_src/58124644.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523416.htm" class="variable">shrlen</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/58124780.htm" class="localvar">l</a>);
<a id=211></a>  <a href="../h_src/58124644.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523008.htm" class="variable">hnext</a> = *<a href="../h_src/58124100.htm" class="localvar">list</a>;
<a id=212></a>  *<a href="../h_src/58124100.htm" class="localvar">list</a> = <a href="../h_src/58124644.htm" class="localvar">ts</a>;
<a id=213></a>  <a href="../h_src/58124372.htm" class="localvar">tb</a>-&gt;<a href="../h_src/57651736.htm" class="variable">nuse</a>++;
<a id=214></a>  return <a href="../h_src/58124644.htm" class="localvar">ts</a>;
}


<a id=218></a><a  class="comments">/*</a>
<a id=219></a><a  class="comments">** new string (with explicit length)</a>
<a id=220></a><a  class="comments">*/</a>
<a id=221></a><a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57618552.htm" class="function">luaS_newlstr</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58123964.htm" class="localvar">L</a>, const char *<a href="../h_src/58123828.htm" class="localvar">str</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58123692.htm" class="localvar">l</a>) {
<a id=222></a>  if (<a href="../h_src/58123692.htm" class="localvar">l</a> &lt;= <a href="../h_src/57544904.htm" class="macro">LUAI_MAXSHORTLEN</a>)  <a  class="comments">/* short string? */</a>
<a id=223></a>    return <a href="../h_src/58125188.htm" class="function">internshrstr</a>(<a href="../h_src/58123964.htm" class="localvar">L</a>, <a href="../h_src/58123828.htm" class="localvar">str</a>, <a href="../h_src/58123692.htm" class="localvar">l</a>);
  else {
<a id=225></a>    <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58123556.htm" class="localvar">ts</a>;
<a id=226></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58123692.htm" class="localvar">l</a> &gt;= (<a href="../h_src/57550208.htm" class="macro">MAX_SIZE</a> - sizeof(<a href="../h_src/57522736.htm" class="type">TString</a>))/sizeof(char)))
<a id=227></a>      <a href="../h_src/57656836.htm" class="function">luaM_toobig</a>(<a href="../h_src/58123964.htm" class="localvar">L</a>);
<a id=228></a>    <a href="../h_src/58123556.htm" class="localvar">ts</a> = <a href="../h_src/57618416.htm" class="function">luaS_createlngstrobj</a>(<a href="../h_src/58123964.htm" class="localvar">L</a>, <a href="../h_src/58123692.htm" class="localvar">l</a>);
<a id=229></a>    <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58123556.htm" class="localvar">ts</a>), <a href="../h_src/58123828.htm" class="localvar">str</a>, <a href="../h_src/58123692.htm" class="localvar">l</a> * sizeof(char));
<a id=230></a>    return <a href="../h_src/58123556.htm" class="localvar">ts</a>;
  }
}


<a id=235></a><a  class="comments">/*</a>
<a id=236></a><a  class="comments">** Create or reuse a zero-terminated string, first checking in the</a>
<a id=237></a><a  class="comments">** cache (using the string address as a key). The cache can contain</a>
<a id=238></a><a  class="comments">** only zero-terminated strings, so it is safe to use 'strcmp' to</a>
<a id=239></a><a  class="comments">** check hits.</a>
<a id=240></a><a  class="comments">*/</a>
<a id=241></a><a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57618484.htm" class="function">luaS_new</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58123420.htm" class="localvar">L</a>, const char *<a href="../h_src/58123284.htm" class="localvar">str</a>) {
<a id=242></a>  unsigned int <a href="../h_src/58123148.htm" class="localvar">i</a> = <a href="../h_src/57549120.htm" class="macro">point2uint</a>(<a href="../h_src/58123284.htm" class="localvar">str</a>) % <a href="../h_src/57544360.htm" class="macro">STRCACHE_N</a>;  <a  class="comments">/* hash */</a>
<a id=243></a>  int <a href="../h_src/58123012.htm" class="localvar">j</a>;
<a id=244></a>  <a href="../h_src/57522736.htm" class="type">TString</a> **<a href="../h_src/58122876.htm" class="localvar">p</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/58123420.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57643304.htm" class="variable">strcache</a>[<a href="../h_src/58123148.htm" class="localvar">i</a>];
<a id=245></a>  for (<a href="../h_src/58123012.htm" class="localvar">j</a> = 0; <a href="../h_src/58123012.htm" class="localvar">j</a> &lt; <a href="../h_src/57544224.htm" class="macro">STRCACHE_M</a>; <a href="../h_src/58123012.htm" class="localvar">j</a>++) {
<a id=246></a>    if (<a href="../h_aa/57564488.htm" class="libfunc">strcmp</a>(<a href="../h_src/58123284.htm" class="localvar">str</a>, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58122876.htm" class="localvar">p</a>[<a href="../h_src/58123012.htm" class="localvar">j</a>])) == 0)  <a  class="comments">/* hit? */</a>
<a id=247></a>      return <a href="../h_src/58122876.htm" class="localvar">p</a>[<a href="../h_src/58123012.htm" class="localvar">j</a>];  <a  class="comments">/* that is it */</a>
  }
<a id=249></a>  <a  class="comments">/* normal route */</a>
<a id=250></a>  for (<a href="../h_src/58123012.htm" class="localvar">j</a> = <a href="../h_src/57544224.htm" class="macro">STRCACHE_M</a> - 1; <a href="../h_src/58123012.htm" class="localvar">j</a> &gt; 0; <a href="../h_src/58123012.htm" class="localvar">j</a>--)
<a id=251></a>    <a href="../h_src/58122876.htm" class="localvar">p</a>[<a href="../h_src/58123012.htm" class="localvar">j</a>] = <a href="../h_src/58122876.htm" class="localvar">p</a>[<a href="../h_src/58123012.htm" class="localvar">j</a> - 1];  <a  class="comments">/* move out last element */</a>
<a id=252></a>  <a  class="comments">/* new element is first in the list */</a>
<a id=253></a>  <a href="../h_src/58122876.htm" class="localvar">p</a>[0] = <a href="../h_src/57618552.htm" class="function">luaS_newlstr</a>(<a href="../h_src/58123420.htm" class="localvar">L</a>, <a href="../h_src/58123284.htm" class="localvar">str</a>, <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/58123284.htm" class="localvar">str</a>));
<a id=254></a>  return <a href="../h_src/58122876.htm" class="localvar">p</a>[0];
}


<a id=258></a><a href="../h_src/57519268.htm" class="type">Udata</a> *<a href="../h_src/57618620.htm" class="function">luaS_newudata</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58122740.htm" class="localvar">L</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58122604.htm" class="localvar">s</a>, int <a href="../h_src/58122468.htm" class="localvar">nuvalue</a>) {
<a id=259></a>  <a href="../h_src/57519268.htm" class="type">Udata</a> *<a href="../h_src/58122332.htm" class="localvar">u</a>;
<a id=260></a>  int <a href="../h_src/58122196.htm" class="localvar">i</a>;
<a id=261></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/58122060.htm" class="localvar">o</a>;
<a id=262></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58122604.htm" class="localvar">s</a> &gt; <a href="../h_src/57550208.htm" class="macro">MAX_SIZE</a> - <a href="../h_src/57518044.htm" class="macro">udatamemoffset</a>(<a href="../h_src/58122468.htm" class="localvar">nuvalue</a>)))
<a id=263></a>    <a href="../h_src/57656836.htm" class="function">luaM_toobig</a>(<a href="../h_src/58122740.htm" class="localvar">L</a>);
<a id=264></a>  <a href="../h_src/58122060.htm" class="localvar">o</a> = <a href="../h_src/57620592.htm" class="function">luaC_newobj</a>(<a href="../h_src/58122740.htm" class="localvar">L</a>, <a href="../h_src/57521988.htm" class="macro">LUA_VUSERDATA</a>, <a href="../h_src/57517772.htm" class="macro">sizeudata</a>(<a href="../h_src/58122468.htm" class="localvar">nuvalue</a>, <a href="../h_src/58122604.htm" class="localvar">s</a>));
<a id=265></a>  <a href="../h_src/58122332.htm" class="localvar">u</a> = <a href="../h_src/57639972.htm" class="macro">gco2u</a>(<a href="../h_src/58122060.htm" class="localvar">o</a>);
<a id=266></a>  <a href="../h_src/58122332.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519880.htm" class="variable">len</a> = <a href="../h_src/58122604.htm" class="localvar">s</a>;
<a id=267></a>  <a href="../h_src/58122332.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519948.htm" class="variable">nuvalue</a> = <a href="../h_src/58122468.htm" class="localvar">nuvalue</a>;
<a id=268></a>  <a href="../h_src/58122332.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519540.htm" class="variable">metatable</a> = NULL;
<a id=269></a>  for (<a href="../h_src/58122196.htm" class="localvar">i</a> = 0; <a href="../h_src/58122196.htm" class="localvar">i</a> &lt; <a href="../h_src/58122468.htm" class="localvar">nuvalue</a>; <a href="../h_src/58122196.htm" class="localvar">i</a>++)
<a id=270></a>    <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(&amp;<a href="../h_src/58122332.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519336.htm" class="variable">uv</a>[<a href="../h_src/58122196.htm" class="localvar">i</a>].<a href="../h_src/57520764.htm" class="variable">uv</a>);
<a id=271></a>  return <a href="../h_src/58122332.htm" class="localvar">u</a>;
}

</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

