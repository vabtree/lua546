<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>luaV_execute</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57610936.htm" class="function" target="_self">Info</a></li>
<li><a href="../h_rx/57610936.htm" class="function" target="_self">Calling Hierarchy</a></li>
<li><a href="../h_nf/57610936.htm" class="function" target="_self">Flow Chart</a></li>
<li id="current"><a href="../h_src/57610936.htm" class="function" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57610936.htm" class="function" target="_self">Definition</a></li>
<li><a href="../h_sc/57610936.htm" class="function" target="_self">Source Checks</a></li>
<li><a href="../h_src/58062016.htm#1146" class="function" target="_self">Source File</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<h4>Source Code</h4>
<pre class=src>
void <a href="../h_src/57610936.htm" class="function">luaV_execute</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/58188060.htm" class="localvar">ci</a>) {
  <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/58187924.htm" class="localvar">cl</a>;
  <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58187788.htm" class="localvar">k</a>;
  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58187652.htm" class="localvar">base</a>;
  const <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/58187516.htm" class="localvar">pc</a>;
  int <a href="../h_src/58187380.htm" class="localvar">trap</a>;
#if <a href="../h_src/58061540.htm" class="macro">LUA_USE_JUMPTABLE</a>
#include &quot;<a href="../h_src/58187244.htm" class="file">ljumptab.h</a>&quot;
#endif
 startfunc:
  <a href="../h_src/58187380.htm" class="localvar">trap</a> = <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>;
 returning:  <a  class="comments">/* trap already set */</a>
  <a href="../h_src/58187924.htm" class="localvar">cl</a> = <a href="../h_src/57512264.htm" class="macro">clLvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>));
  <a href="../h_src/58187788.htm" class="localvar">k</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>;
  <a href="../h_src/58187516.htm" class="localvar">pc</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>;
  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58187380.htm" class="localvar">trap</a>)) {
    if (<a href="../h_src/58187516.htm" class="localvar">pc</a> == <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>) {  <a  class="comments">/* first instruction (not resuming)? */</a>
      if (<a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>)
        <a href="../h_src/58187380.htm" class="localvar">trap</a> = 0;  <a  class="comments">/* hooks will start after VARARGPREP instruction */</a>
      else  <a  class="comments">/* check 'call' hook */</a>
        <a href="../h_src/57633444.htm" class="function">luaD_hookcall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);
    }
    <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651056.htm" class="variable">trap</a> = 1;  <a  class="comments">/* assume trap is on, for now */</a>
  }
  <a href="../h_src/58187652.htm" class="localvar">base</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + 1;
  <a  class="comments">/* main loop of interpreter */</a>
  for (;;) {
    <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58186564.htm" class="localvar">i</a>;  <a  class="comments">/* instruction being executed */</a>
    <a href="../h_src/58188740.htm" class="macro">vmfetch</a>();
    #if 0
      <a  class="comments">/* low-level line tracing for debugging Lua */</a>
      printf(&quot;line: %d\n&quot;, luaG_getfuncline(cl-&gt;p, pcRel(pc, cl-&gt;p)));
    #endif
    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(base == ci-&gt;func.p + 1);
    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(base &lt;= L-&gt;top.p &amp;&amp; L-&gt;top.p &lt;= L-&gt;stack_last.p);
    <a  class="comments">/* invalidate top for instructions not expecting it */</a>
    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57683464.htm" class="macro">isIT</a>(i) || (<a href="../h_src/57547624.htm" class="macro">cast_void</a>(L-&gt;top.p = base), 1));
    <a href="../h_src/58187176.htm" class="macro">vmdispatch</a> (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MOVE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58186428.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58186428.htm" class="localvar">ra</a>, <a href="../h_src/58191324.htm" class="macro">RB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADI) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58186020.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58185884.htm" class="localvar">b</a> = <a href="../h_src/57692032.htm" class="macro">GETARG_sBx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58186020.htm" class="localvar">ra</a>), <a href="../h_src/58185884.htm" class="localvar">b</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADF) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58185612.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58185476.htm" class="localvar">b</a> = <a href="../h_src/57692032.htm" class="macro">GETARG_sBx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58185612.htm" class="localvar">ra</a>), <a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58185476.htm" class="localvar">b</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADK) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58185204.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58185068.htm" class="localvar">rb</a> = <a href="../h_src/58187788.htm" class="localvar">k</a> + <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58185204.htm" class="localvar">ra</a>, <a href="../h_src/58185068.htm" class="localvar">rb</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADKX) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58184660.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58184524.htm" class="localvar">rb</a>;
        <a href="../h_src/58184524.htm" class="localvar">rb</a> = <a href="../h_src/58187788.htm" class="localvar">k</a> + <a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*<a href="../h_src/58187516.htm" class="localvar">pc</a>); <a href="../h_src/58187516.htm" class="localvar">pc</a>++;
        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58184660.htm" class="localvar">ra</a>, <a href="../h_src/58184524.htm" class="localvar">rb</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADFALSE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58184116.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58184116.htm" class="localvar">ra</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LFALSESKIP) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183980.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58183980.htm" class="localvar">ra</a>));
        <a href="../h_src/58187516.htm" class="localvar">pc</a>++;  <a  class="comments">/* skip next instruction */</a>
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADTRUE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183844.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57529128.htm" class="macro">setbtvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58183844.htm" class="localvar">ra</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADNIL) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183708.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58183572.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        do {
          <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58183708.htm" class="localvar">ra</a>++));
        } while (<a href="../h_src/58183572.htm" class="localvar">b</a>--);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETUPVAL) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183436.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58183300.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58183436.htm" class="localvar">ra</a>, <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/58183300.htm" class="localvar">b</a>]-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETUPVAL) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58182892.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/58182756.htm" class="localvar">uv</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)];
        <a href="../h_src/57533684.htm" class="macro">setobj</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182756.htm" class="localvar">uv</a>-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58182892.htm" class="localvar">ra</a>));
        <a href="../h_src/57621340.htm" class="macro">luaC_barrier</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182756.htm" class="localvar">uv</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58182892.htm" class="localvar">ra</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETTABUP) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58182348.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58182212.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58182076.htm" class="localvar">upval</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)]-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58181940.htm" class="localvar">rc</a> = <a href="../h_src/58190644.htm" class="macro">KC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58181804.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58181940.htm" class="localvar">rc</a>);  <a  class="comments">/* key must be a string */</a>
        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58182076.htm" class="localvar">upval</a>, <a href="../h_src/58181804.htm" class="localvar">key</a>, <a href="../h_src/58182212.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182348.htm" class="localvar">ra</a>, <a href="../h_src/58182212.htm" class="localvar">slot</a>);
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182076.htm" class="localvar">upval</a>, <a href="../h_src/58181940.htm" class="localvar">rc</a>, <a href="../h_src/58182348.htm" class="localvar">ra</a>, <a href="../h_src/58182212.htm" class="localvar">slot</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETTABLE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58181396.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58181260.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58181124.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58180988.htm" class="localvar">rc</a> = <a href="../h_src/58190780.htm" class="macro">vRC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/58180852.htm" class="localvar">n</a>;
        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58180988.htm" class="localvar">rc</a>)  <a  class="comments">/* fast track for integers? */</a>
            ? (<a href="../h_src/57547624.htm" class="macro">cast_void</a>(<a href="../h_src/58180852.htm" class="localvar">n</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58180988.htm" class="localvar">rc</a>)), <a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/58181124.htm" class="localvar">rb</a>, <a href="../h_src/58180852.htm" class="localvar">n</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>))
            : <a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58181124.htm" class="localvar">rb</a>, <a href="../h_src/58180988.htm" class="localvar">rc</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>, <a href="../h_src/57616784.htm" class="function">luaH_get</a>)) {
          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58181396.htm" class="localvar">ra</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>);
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58181124.htm" class="localvar">rb</a>, <a href="../h_src/58180988.htm" class="localvar">rc</a>, <a href="../h_src/58181396.htm" class="localvar">ra</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETI) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58180444.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58180308.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58180172.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58180036.htm" class="localvar">c</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (<a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/58180172.htm" class="localvar">rb</a>, <a href="../h_src/58180036.htm" class="localvar">c</a>, <a href="../h_src/58180308.htm" class="localvar">slot</a>)) {
          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58180444.htm" class="localvar">ra</a>, <a href="../h_src/58180308.htm" class="localvar">slot</a>);
        }
        else {
          <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/58179628.htm" class="localvar">key</a>;
          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/58179628.htm" class="localvar">key</a>, <a href="../h_src/58180036.htm" class="localvar">c</a>);
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58180172.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58179628.htm" class="localvar">key</a>, <a href="../h_src/58180444.htm" class="localvar">ra</a>, <a href="../h_src/58180308.htm" class="localvar">slot</a>));
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETFIELD) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58179356.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58179220.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58179084.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178948.htm" class="localvar">rc</a> = <a href="../h_src/58190644.htm" class="macro">KC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58178812.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58178948.htm" class="localvar">rc</a>);  <a  class="comments">/* key must be a string */</a>
        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58179084.htm" class="localvar">rb</a>, <a href="../h_src/58178812.htm" class="localvar">key</a>, <a href="../h_src/58179220.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58179356.htm" class="localvar">ra</a>, <a href="../h_src/58179220.htm" class="localvar">slot</a>);
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58179084.htm" class="localvar">rb</a>, <a href="../h_src/58178948.htm" class="localvar">rc</a>, <a href="../h_src/58179356.htm" class="localvar">ra</a>, <a href="../h_src/58179220.htm" class="localvar">slot</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETTABUP) {
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178404.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178268.htm" class="localvar">upval</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)]-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178132.htm" class="localvar">rb</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177996.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58177860.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58178132.htm" class="localvar">rb</a>);  <a  class="comments">/* key must be a string */</a>
        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58178268.htm" class="localvar">upval</a>, <a href="../h_src/58177860.htm" class="localvar">key</a>, <a href="../h_src/58178404.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58178268.htm" class="localvar">upval</a>, <a href="../h_src/58178404.htm" class="localvar">slot</a>, <a href="../h_src/58177996.htm" class="localvar">rc</a>);
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58178268.htm" class="localvar">upval</a>, <a href="../h_src/58178132.htm" class="localvar">rb</a>, <a href="../h_src/58177996.htm" class="localvar">rc</a>, <a href="../h_src/58178404.htm" class="localvar">slot</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETTABLE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58177452.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177316.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177180.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* key (table is in 'ra') */</a>
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177044.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* value */</a>
        <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/58176908.htm" class="localvar">n</a>;
        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58177180.htm" class="localvar">rb</a>)  <a  class="comments">/* fast track for integers? */</a>
            ? (<a href="../h_src/57547624.htm" class="macro">cast_void</a>(<a href="../h_src/58176908.htm" class="localvar">n</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58177180.htm" class="localvar">rb</a>)), <a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58176908.htm" class="localvar">n</a>, <a href="../h_src/58177316.htm" class="localvar">slot</a>))
            : <a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58177180.htm" class="localvar">rb</a>, <a href="../h_src/58177316.htm" class="localvar">slot</a>, <a href="../h_src/57616784.htm" class="function">luaH_get</a>)) {
          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58177316.htm" class="localvar">slot</a>, <a href="../h_src/58177044.htm" class="localvar">rc</a>);
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58177180.htm" class="localvar">rb</a>, <a href="../h_src/58177044.htm" class="localvar">rc</a>, <a href="../h_src/58177316.htm" class="localvar">slot</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETI) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58176500.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58176364.htm" class="localvar">slot</a>;
        int <a href="../h_src/58176228.htm" class="localvar">c</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58176092.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (<a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58176500.htm" class="localvar">ra</a>), <a href="../h_src/58176228.htm" class="localvar">c</a>, <a href="../h_src/58176364.htm" class="localvar">slot</a>)) {
          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58176500.htm" class="localvar">ra</a>), <a href="../h_src/58176364.htm" class="localvar">slot</a>, <a href="../h_src/58176092.htm" class="localvar">rc</a>);
        }
        else {
          <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/58175684.htm" class="localvar">key</a>;
          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/58175684.htm" class="localvar">key</a>, <a href="../h_src/58176228.htm" class="localvar">c</a>);
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58176500.htm" class="localvar">ra</a>), &amp;<a href="../h_src/58175684.htm" class="localvar">key</a>, <a href="../h_src/58176092.htm" class="localvar">rc</a>, <a href="../h_src/58176364.htm" class="localvar">slot</a>));
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETFIELD) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58175412.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58175276.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58175140.htm" class="localvar">rb</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58175004.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58174868.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58175140.htm" class="localvar">rb</a>);  <a  class="comments">/* key must be a string */</a>
        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58175412.htm" class="localvar">ra</a>), <a href="../h_src/58174868.htm" class="localvar">key</a>, <a href="../h_src/58175276.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58175412.htm" class="localvar">ra</a>), <a href="../h_src/58175276.htm" class="localvar">slot</a>, <a href="../h_src/58175004.htm" class="localvar">rc</a>);
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58175412.htm" class="localvar">ra</a>), <a href="../h_src/58175140.htm" class="localvar">rb</a>, <a href="../h_src/58175004.htm" class="localvar">rc</a>, <a href="../h_src/58175276.htm" class="localvar">slot</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_NEWTABLE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58174460.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58174324.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* log2(hash size) + 1 */</a>
        int <a href="../h_src/58174188.htm" class="localvar">c</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* array size */</a>
        <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/58174052.htm" class="localvar">t</a>;
        if (<a href="../h_src/58174324.htm" class="localvar">b</a> &gt; 0)
          <a href="../h_src/58174324.htm" class="localvar">b</a> = 1 &lt;&lt; (<a href="../h_src/58174324.htm" class="localvar">b</a> - 1);  <a  class="comments">/* size is 2^(b - 1) */</a>
        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>((!<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(i)) == (<a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*pc) == 0));
        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>))  <a  class="comments">/* non-zero extra argument? */</a>
          <a href="../h_src/58174188.htm" class="localvar">c</a> += <a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*<a href="../h_src/58187516.htm" class="localvar">pc</a>) * (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);  <a  class="comments">/* add it to size */</a>
        <a href="../h_src/58187516.htm" class="localvar">pc</a>++;  <a  class="comments">/* skip extra argument */</a>
        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58174460.htm" class="localvar">ra</a> + 1;  <a  class="comments">/* correct top in case of emergency GC */</a>
        <a href="../h_src/58174052.htm" class="localvar">t</a> = <a href="../h_src/57616512.htm" class="function">luaH_new</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>);  <a  class="comments">/* memory allocation */</a>
        <a href="../h_src/57506892.htm" class="macro">sethvalue2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58174460.htm" class="localvar">ra</a>, <a href="../h_src/58174052.htm" class="localvar">t</a>);
        if (<a href="../h_src/58174324.htm" class="localvar">b</a> != 0 || <a href="../h_src/58174188.htm" class="localvar">c</a> != 0)
          <a href="../h_src/57616444.htm" class="function">luaH_resize</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58174052.htm" class="localvar">t</a>, <a href="../h_src/58174188.htm" class="localvar">c</a>, <a href="../h_src/58174324.htm" class="localvar">b</a>);  <a  class="comments">/* idem */</a>
        <a href="../h_src/58188876.htm" class="macro">checkGC</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58174460.htm" class="localvar">ra</a> + 1);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SELF) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58173644.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58173508.htm" class="localvar">slot</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58173372.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58173236.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58173100.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58173236.htm" class="localvar">rc</a>);  <a  class="comments">/* key must be a string */</a>
        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58173644.htm" class="localvar">ra</a> + 1, <a href="../h_src/58173372.htm" class="localvar">rb</a>);
        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58173372.htm" class="localvar">rb</a>, <a href="../h_src/58173100.htm" class="localvar">key</a>, <a href="../h_src/58173508.htm" class="localvar">slot</a>, <a href="../h_src/57616852.htm" class="function">luaH_getstr</a>)) {
          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58173644.htm" class="localvar">ra</a>, <a href="../h_src/58173508.htm" class="localvar">slot</a>);
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58173372.htm" class="localvar">rb</a>, <a href="../h_src/58173236.htm" class="localvar">rc</a>, <a href="../h_src/58173644.htm" class="localvar">ra</a>, <a href="../h_src/58173508.htm" class="localvar">slot</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_ADDI) {
        <a href="../h_src/58192956.htm" class="macro">op_arithI</a>(L, <a href="../h_src/58194316.htm" class="macro">l_addi</a>, <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_ADDK) {
        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(L, <a href="../h_src/58194316.htm" class="macro">l_addi</a>, <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SUBK) {
        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(L, <a href="../h_src/58194180.htm" class="macro">l_subi</a>, <a href="../h_src/57539872.htm" class="macro">luai_numsub</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MULK) {
        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(L, <a href="../h_src/58194044.htm" class="macro">l_muli</a>, <a href="../h_src/57539736.htm" class="macro">luai_nummul</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MODK) {
        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610732.htm" class="function">luaV_mod</a>, <a href="../h_src/57610664.htm" class="function">luaV_modf</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_POWK) {
        <a href="../h_src/58192548.htm" class="macro">op_arithfK</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57540280.htm" class="macro">luai_numpow</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_DIVK) {
        <a href="../h_src/58192548.htm" class="macro">op_arithfK</a>(L, <a href="../h_src/57540824.htm" class="macro">luai_numdiv</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_IDIVK) {
        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610800.htm" class="function">luaV_idiv</a>, <a href="../h_src/57541096.htm" class="macro">luai_numidiv</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BANDK) {
        <a href="../h_src/58192004.htm" class="macro">op_bitwiseK</a>(L, <a href="../h_src/58193908.htm" class="macro">l_band</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BORK) {
        <a href="../h_src/58192004.htm" class="macro">op_bitwiseK</a>(L, <a href="../h_src/58193772.htm" class="macro">l_bor</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BXORK) {
        <a href="../h_src/58192004.htm" class="macro">op_bitwiseK</a>(L, <a href="../h_src/58193636.htm" class="macro">l_bxor</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHRI) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58161132.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58160996.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58160860.htm" class="localvar">ic</a> = <a href="../h_src/57693256.htm" class="macro">GETARG_sC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58160724.htm" class="localvar">ib</a>;
        if (<a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/58160996.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58160724.htm" class="localvar">ib</a>)) {
          <a href="../h_src/58187516.htm" class="localvar">pc</a>++; <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58161132.htm" class="localvar">ra</a>), <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a>(<a href="../h_src/58160724.htm" class="localvar">ib</a>, -<a href="../h_src/58160860.htm" class="localvar">ic</a>));
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHLI) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58160452.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58160316.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58160180.htm" class="localvar">ic</a> = <a href="../h_src/57693256.htm" class="macro">GETARG_sC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58160044.htm" class="localvar">ib</a>;
        if (<a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/58160316.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58160044.htm" class="localvar">ib</a>)) {
          <a href="../h_src/58187516.htm" class="localvar">pc</a>++; <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58160452.htm" class="localvar">ra</a>), <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a>(<a href="../h_src/58160180.htm" class="localvar">ic</a>, <a href="../h_src/58160044.htm" class="localvar">ib</a>));
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_ADD) {
        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(L, <a href="../h_src/58194316.htm" class="macro">l_addi</a>, <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SUB) {
        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(L, <a href="../h_src/58194180.htm" class="macro">l_subi</a>, <a href="../h_src/57539872.htm" class="macro">luai_numsub</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MUL) {
        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(L, <a href="../h_src/58194044.htm" class="macro">l_muli</a>, <a href="../h_src/57539736.htm" class="macro">luai_nummul</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MOD) {
        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610732.htm" class="function">luaV_mod</a>, <a href="../h_src/57610664.htm" class="function">luaV_modf</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_POW) {
        <a href="../h_src/58192684.htm" class="macro">op_arithf</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57540280.htm" class="macro">luai_numpow</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_DIV) {  <a  class="comments">/* float division (always with floats) */</a>
        <a href="../h_src/58192684.htm" class="macro">op_arithf</a>(L, <a href="../h_src/57540824.htm" class="macro">luai_numdiv</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_IDIV) {  <a  class="comments">/* floor division */</a>
        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610800.htm" class="function">luaV_idiv</a>, <a href="../h_src/57541096.htm" class="macro">luai_numidiv</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BAND) {
        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/58193908.htm" class="macro">l_band</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BOR) {
        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/58193772.htm" class="macro">l_bor</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BXOR) {
        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/58193636.htm" class="macro">l_bxor</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHR) {
        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/57611888.htm" class="macro">luaV_shiftr</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHL) {
        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MMBIN) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58147940.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58147804.htm" class="localvar">pi</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a> - 2);  <a  class="comments">/* original arith. expression */</a>
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58147668.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/58147532.htm" class="localvar">tm</a> = (<a href="../h_src/57499004.htm" class="type">TMS</a>)<a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58147396.htm" class="localvar">result</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58147804.htm" class="localvar">pi</a>);
        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(OP_ADD &lt;= <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(pi) &amp;&amp; <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(pi) &lt;= OP_SHR);
        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497780.htm" class="function">luaT_trybinTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58147940.htm" class="localvar">ra</a>), <a href="../h_src/58147668.htm" class="localvar">rb</a>, <a href="../h_src/58147396.htm" class="localvar">result</a>, <a href="../h_src/58147532.htm" class="localvar">tm</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MMBINI) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58147260.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58147124.htm" class="localvar">pi</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a> - 2);  <a  class="comments">/* original arith. expression */</a>
        int <a href="../h_src/58146988.htm" class="localvar">imm</a> = <a href="../h_src/57693664.htm" class="macro">GETARG_sB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/58146852.htm" class="localvar">tm</a> = (<a href="../h_src/57499004.htm" class="type">TMS</a>)<a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58146716.htm" class="localvar">flip</a> = <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58146580.htm" class="localvar">result</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58147124.htm" class="localvar">pi</a>);
        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497576.htm" class="function">luaT_trybiniTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58147260.htm" class="localvar">ra</a>), <a href="../h_src/58146988.htm" class="localvar">imm</a>, <a href="../h_src/58146716.htm" class="localvar">flip</a>, <a href="../h_src/58146580.htm" class="localvar">result</a>, <a href="../h_src/58146852.htm" class="localvar">tm</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MMBINK) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58146444.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58146308.htm" class="localvar">pi</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a> - 2);  <a  class="comments">/* original arith. expression */</a>
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58146172.htm" class="localvar">imm</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/58146036.htm" class="localvar">tm</a> = (<a href="../h_src/57499004.htm" class="type">TMS</a>)<a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58145900.htm" class="localvar">flip</a> = <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58145764.htm" class="localvar">result</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58146308.htm" class="localvar">pi</a>);
        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497644.htm" class="function">luaT_trybinassocTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58146444.htm" class="localvar">ra</a>), <a href="../h_src/58146172.htm" class="localvar">imm</a>, <a href="../h_src/58145900.htm" class="localvar">flip</a>, <a href="../h_src/58145764.htm" class="localvar">result</a>, <a href="../h_src/58146036.htm" class="localvar">tm</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_UNM) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58145628.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58145492.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58145356.htm" class="localvar">nb</a>;
        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58145492.htm" class="localvar">rb</a>)) {
          <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58145220.htm" class="localvar">ib</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58145492.htm" class="localvar">rb</a>);
          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58145628.htm" class="localvar">ra</a>), <a href="../h_src/57612568.htm" class="macro">intop</a>(-, 0, <a href="../h_src/58145220.htm" class="localvar">ib</a>));
        }
        else if (<a href="../h_src/57612976.htm" class="macro">tonumberns</a>(<a href="../h_src/58145492.htm" class="localvar">rb</a>, <a href="../h_src/58145356.htm" class="localvar">nb</a>)) {
          <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58145628.htm" class="localvar">ra</a>), <a href="../h_src/57539600.htm" class="macro">luai_numunm</a>(L, <a href="../h_src/58145356.htm" class="localvar">nb</a>));
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497780.htm" class="function">luaT_trybinTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58145492.htm" class="localvar">rb</a>, <a href="../h_src/58145492.htm" class="localvar">rb</a>, <a href="../h_src/58145628.htm" class="localvar">ra</a>, <a href="../h_src/57499684.htm" class="variable">TM_UNM</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BNOT) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58144812.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58144676.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58144540.htm" class="localvar">ib</a>;
        if (<a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/58144676.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58144540.htm" class="localvar">ib</a>)) {
          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58144812.htm" class="localvar">ra</a>), <a href="../h_src/57612568.htm" class="macro">intop</a>(^, ~<a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(0), <a href="../h_src/58144540.htm" class="localvar">ib</a>));
        }
        else
          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497780.htm" class="function">luaT_trybinTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58144676.htm" class="localvar">rb</a>, <a href="../h_src/58144676.htm" class="localvar">rb</a>, <a href="../h_src/58144812.htm" class="localvar">ra</a>, <a href="../h_src/57499616.htm" class="variable">TM_BNOT</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_NOT) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58144268.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58144132.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/58144132.htm" class="localvar">rb</a>))
          <a href="../h_src/57529128.htm" class="macro">setbtvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58144268.htm" class="localvar">ra</a>));
        else
          <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58144268.htm" class="localvar">ra</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LEN) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143996.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57610528.htm" class="function">luaV_objlen</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143996.htm" class="localvar">ra</a>, <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CONCAT) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143860.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58143724.htm" class="localvar">n</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* number of elements to concatenate */</a>
        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58143860.htm" class="localvar">ra</a> + <a href="../h_src/58143724.htm" class="localvar">n</a>;  <a  class="comments">/* mark the end of concat operands */</a>
        <a href="../h_src/58189148.htm" class="macro">ProtectNT</a>(<a href="../h_src/57610868.htm" class="function">luaV_concat</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143724.htm" class="localvar">n</a>));
        <a href="../h_src/58188876.htm" class="macro">checkGC</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>); <a  class="comments">/* 'luaV_concat' ensures correct top */</a><a href="../h_src/57650852.htm" class="variable">l</a>uaV_concat' ensures correct top */
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CLOSE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143588.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57630384.htm" class="function">luaF_close</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143588.htm" class="localvar">ra</a>, <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>, 1));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TBC) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143452.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a  class="comments">/* create new to-be-closed upvalue */</a>
        <a href="../h_src/58189012.htm" class="macro">halfProtect</a>(<a href="../h_src/57630520.htm" class="function">luaF_newtbcupval</a><a href="../h_src/57650308.htm" class="variable">u</a>pval(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143452.htm" class="localvar">ra</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_JMP) {
        <a href="../h_src/58189964.htm" class="macro">dojump</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58186564.htm" class="localvar">i</a>, 0);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EQ) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143316.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58143180.htm" class="localvar">cond</a>;
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58143044.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/58143180.htm" class="localvar">cond</a> = <a href="../h_src/57611752.htm" class="function">luaV_equalobj</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58143316.htm" class="localvar">ra</a>), <a href="../h_src/58143044.htm" class="localvar">rb</a>));
        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LT) {
        <a href="../h_src/58191732.htm" class="macro">op_order</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193500.htm" class="macro">l_lti</a>, <a href="../h_src/58208120.htm" class="function">LTnum</a>, <a href="../h_src/58206760.htm" class="function">lessthanothers</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LE) {
        <a href="../h_src/58191732.htm" class="macro">op_order</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193364.htm" class="macro">l_lei</a>, <a href="../h_src/58207440.htm" class="function">LEnum</a>, <a href="../h_src/58205808.htm" class="function">lessequalothers</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EQK) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58141140.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58141004.htm" class="localvar">rb</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a  class="comments">/* basic types do not use '__eq'; we can use raw equality */</a>
        int <a href="../h_src/58140868.htm" class="localvar">cond</a> = <a href="../h_src/57612432.htm" class="macro">luaV_rawequalobj</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58141140.htm" class="localvar">ra</a>), <a href="../h_src/58141004.htm" class="localvar">rb</a>);
        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EQI) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58140596.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58140460.htm" class="localvar">cond</a>;
        int <a href="../h_src/58140324.htm" class="localvar">im</a> = <a href="../h_src/57693664.htm" class="macro">GETARG_sB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)))
          <a href="../h_src/58140460.htm" class="localvar">cond</a> = (<a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)) == <a href="../h_src/58140324.htm" class="localvar">im</a>);
        else if (<a href="../h_src/57526680.htm" class="macro">ttisfloat</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)))
          <a href="../h_src/58140460.htm" class="localvar">cond</a> = <a href="../h_src/57539464.htm" class="macro">luai_numeq</a>(<a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)), <a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58140324.htm" class="localvar">im</a>));
        else
          <a href="../h_src/58140460.htm" class="localvar">cond</a> = 0;  <a  class="comments">/* other types cannot be equal to a number */</a>
        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LTI) {
        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193500.htm" class="macro">l_lti</a>, <a href="../h_src/57539328.htm" class="macro">luai_numlt</a>, 0, <a href="../h_src/57499548.htm" class="variable">TM_LT</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LEI) {
        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193364.htm" class="macro">l_lei</a>, <a href="../h_src/57539192.htm" class="macro">luai_numle</a>, 0, <a href="../h_src/57499480.htm" class="variable">TM_LE</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GTI) {
        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193228.htm" class="macro">l_gti</a>, <a href="../h_src/57539056.htm" class="macro">luai_numgt</a>, 1, <a href="../h_src/57499548.htm" class="variable">TM_LT</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GEI) {
        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193092.htm" class="macro">l_gei</a>, <a href="../h_src/57538920.htm" class="macro">luai_numge</a>, 1, <a href="../h_src/57499480.htm" class="variable">TM_LE</a>);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TEST) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58360228.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58360092.htm" class="localvar">cond</a> = !<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58360228.htm" class="localvar">ra</a>));
        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TESTSET) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58359820.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58359684.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/58359684.htm" class="localvar">rb</a>) == <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>))
          <a href="../h_src/58187516.htm" class="localvar">pc</a>++;
        else {
          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58359820.htm" class="localvar">ra</a>, <a href="../h_src/58359684.htm" class="localvar">rb</a>);
          <a href="../h_src/58189828.htm" class="macro">donextjump</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CALL) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58359140.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/58359004.htm" class="localvar">newci</a>;
        int <a href="../h_src/58358868.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58358732.htm" class="localvar">nresults</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) - 1;
        if (<a href="../h_src/58358868.htm" class="localvar">b</a> != 0)  <a  class="comments">/* fixed number of arguments? */</a>
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58359140.htm" class="localvar">ra</a> + <a href="../h_src/58358868.htm" class="localvar">b</a>;  <a  class="comments">/* top signals number of arguments */</a>
        <a  class="comments">/* else previous instruction set top */</a>
        <a href="../h_src/58189556.htm" class="macro">savepc</a>(L);  <a  class="comments">/* in case of errors */</a>
        if ((<a href="../h_src/58359004.htm" class="localvar">newci</a> = <a href="../h_src/57633308.htm" class="function">luaD_precall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58359140.htm" class="localvar">ra</a>, <a href="../h_src/58358732.htm" class="localvar">nresults</a>)) == NULL)
          <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* C call; nothing else to be done */</a>
        else {  <a  class="comments">/* Lua call: run function in this same C frame */</a>
          <a href="../h_src/58188060.htm" class="localvar">ci</a> = <a href="../h_src/58359004.htm" class="localvar">newci</a>;
          goto startfunc;
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TAILCALL) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58358596.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58358460.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* number of arguments + 1 (function) */</a>
        int <a href="../h_src/58358324.htm" class="localvar">n</a>;  <a  class="comments">/* number of results when calling a C function */</a>
        int <a href="../h_src/58358188.htm" class="localvar">nparams1</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a  class="comments">/* delta is virtual 'func' - real 'func' (vararg functions) */</a>
        int <a href="../h_src/58358052.htm" class="localvar">delta</a> = (<a href="../h_src/58358188.htm" class="localvar">nparams1</a>) ? <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57650988.htm" class="variable">nextraargs</a> + <a href="../h_src/58358188.htm" class="localvar">nparams1</a> : 0;
        if (<a href="../h_src/58358460.htm" class="localvar">b</a> != 0)
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58358596.htm" class="localvar">ra</a> + <a href="../h_src/58358460.htm" class="localvar">b</a>;
        else  <a  class="comments">/* previous instruction set top */</a>
          <a href="../h_src/58358460.htm" class="localvar">b</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/58358596.htm" class="localvar">ra</a>);
        <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* several calls here can raise errors */</a>
        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {
          <a href="../h_src/57630452.htm" class="function">luaF_closeupval</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58187652.htm" class="localvar">base</a>);  <a  class="comments">/* close upvalues from current call */</a>
          <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(L-&gt;tbclist.p &lt; base);  <a  class="comments">/* no pending tbc variables */</a>
          <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(base == ci-&gt;func.p + 1);
        }
        if ((<a href="../h_src/58358324.htm" class="localvar">n</a> = <a href="../h_src/57633376.htm" class="function">luaD_pretailcall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58358596.htm" class="localvar">ra</a>, <a href="../h_src/58358460.htm" class="localvar">b</a>, <a href="../h_src/58358052.htm" class="localvar">delta</a>)) &lt; 0)  <a  class="comments">/* Lua function? */</a>
          goto startfunc;  <a  class="comments">/* execute the callee */</a>
        else {  <a  class="comments">/* C function? */</a>
          <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/58358052.htm" class="localvar">delta</a>;  <a  class="comments">/* restore 'func' (if vararg) */</a>
          <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58358324.htm" class="localvar">n</a>);  <a  class="comments">/* finish caller */</a>
          <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* 'luaD_poscall' can change hooks */</a>
          goto ret;  <a  class="comments">/* caller returns after the tail call */</a>
        }
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_RETURN) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58357916.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58357780.htm" class="localvar">n</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) - 1;  <a  class="comments">/* number of results */</a>
        int <a href="../h_src/58357644.htm" class="localvar">nparams1</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (<a href="../h_src/58357780.htm" class="localvar">n</a> &lt; 0)  <a  class="comments">/* not fixed? */</a>
          <a href="../h_src/58357780.htm" class="localvar">n</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/58357916.htm" class="localvar">ra</a>);  <a  class="comments">/* get what is available */</a>
        <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {  <a  class="comments">/* may there be open upvalues? */</a>
          <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650036.htm" class="variable">nres</a> = <a href="../h_src/58357780.htm" class="localvar">n</a>;  <a  class="comments">/* save number of returns */</a>
          if (<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> &lt; <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>)
            <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
          <a href="../h_src/57630384.htm" class="function">luaF_close</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58187652.htm" class="localvar">base</a>, <a href="../h_src/57631132.htm" class="macro">CLOSEKTOP</a>, 1);
          <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
          <a href="../h_src/58190100.htm" class="macro">updatestack</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
        }
        if (<a href="../h_src/58357644.htm" class="localvar">nparams1</a>)  <a  class="comments">/* vararg function? */</a>
          <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57650988.htm" class="variable">nextraargs</a> + <a href="../h_src/58357644.htm" class="localvar">nparams1</a>;
        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58357916.htm" class="localvar">ra</a> + <a href="../h_src/58357780.htm" class="localvar">n</a>;  <a  class="comments">/* set call for 'luaD_poscall' */</a>
        <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58357780.htm" class="localvar">n</a>);
        <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* 'luaD_poscall' can change hooks */</a>
        goto ret;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_RETURN0) {
        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>)) {
          <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58357508.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58357508.htm" class="localvar">ra</a>;
          <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
          <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, 0);  <a  class="comments">/* no hurry... */</a>
          <a href="../h_src/58187380.htm" class="localvar">trap</a> = 1;
        }
        else {  <a  class="comments">/* do the 'poscall' here */</a>
          int <a href="../h_src/58357372.htm" class="localvar">nres</a>;
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>;  <a  class="comments">/* back to caller */</a>
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58187652.htm" class="localvar">base</a> - 1;
          for (<a href="../h_src/58357372.htm" class="localvar">nres</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649492.htm" class="variable">nresults</a>; <a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58357372.htm" class="localvar">nres</a> &gt; 0); <a href="../h_src/58357372.htm" class="localvar">nres</a>--)
            <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++));  <a  class="comments">/* all results are nil */</a>
        }
        goto ret;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_RETURN1) {
        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>)) {
          <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58357236.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58357236.htm" class="localvar">ra</a> + 1;
          <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
          <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, 1);  <a  class="comments">/* no hurry... */</a>
          <a href="../h_src/58187380.htm" class="localvar">trap</a> = 1;
        }
        else {  <a  class="comments">/* do the 'poscall' here */</a>
          int <a href="../h_src/58357100.htm" class="localvar">nres</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649492.htm" class="variable">nresults</a>;
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>;  <a  class="comments">/* back to caller */</a>
          if (<a href="../h_src/58357100.htm" class="localvar">nres</a> == 0)
            <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58187652.htm" class="localvar">base</a> - 1;  <a  class="comments">/* asked for no results */</a>
          else {
            <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58356964.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
            <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58187652.htm" class="localvar">base</a> - 1, <a href="../h_src/58356964.htm" class="localvar">ra</a>);  <a  class="comments">/* at least this result */</a>
            <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58187652.htm" class="localvar">base</a>;
            for (; <a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58357100.htm" class="localvar">nres</a> &gt; 1); <a href="../h_src/58357100.htm" class="localvar">nres</a>--)
              <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++));  <a  class="comments">/* complete missing results */</a>
          }
        }
       ret:  <a  class="comments">/* return from a Lua function */</a>
        if (<a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57649084.htm" class="macro">CIST_FRESH</a>)
          return;  <a  class="comments">/* end this frame */</a>
        else {
          <a href="../h_src/58188060.htm" class="localvar">ci</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>;
          goto returning;  <a  class="comments">/* continue running caller in this frame */</a>
        }
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_FORLOOP) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58356556.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 2))) {  <a  class="comments">/* integer loop? */</a>
          <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/58356420.htm" class="localvar">count</a> = <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 1)));
          if (<a href="../h_src/58356420.htm" class="localvar">count</a> &gt; 0) {  <a  class="comments">/* still more iterations? */</a>
            <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58356284.htm" class="localvar">step</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 2));
            <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58356148.htm" class="localvar">idx</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a>));  <a  class="comments">/* internal index */</a>
            <a href="../h_src/57525320.htm" class="macro">chgivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 1), <a href="../h_src/58356420.htm" class="localvar">count</a> - 1);  <a  class="comments">/* update counter */</a>
            <a href="../h_src/58356148.htm" class="localvar">idx</a> = <a href="../h_src/57612568.htm" class="macro">intop</a>(+, <a href="../h_src/58356148.htm" class="localvar">idx</a>, <a href="../h_src/58356284.htm" class="localvar">step</a>);  <a  class="comments">/* add step to index */</a>
            <a href="../h_src/57525320.htm" class="macro">chgivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a>), <a href="../h_src/58356148.htm" class="localvar">idx</a>);  <a  class="comments">/* update internal index */</a>
            <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 3), <a href="../h_src/58356148.htm" class="localvar">idx</a>);  <a  class="comments">/* and control variable */</a>
            <a href="../h_src/58187516.htm" class="localvar">pc</a> -= <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* jump back */</a>
          }
        }
        else if (<a href="../h_src/58215124.htm" class="function">floatforloop</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a>))  <a  class="comments">/* float loop */</a>
          <a href="../h_src/58187516.htm" class="localvar">pc</a> -= <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* jump back */</a>
        <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* allows a signal to break the loop */</a>
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_FORPREP) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355604.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of errors */</a>
        if (<a href="../h_src/58057732.htm" class="function">forprep</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355604.htm" class="localvar">ra</a>))
          <a href="../h_src/58187516.htm" class="localvar">pc</a> += <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) + 1;  <a  class="comments">/* skip the loop */</a>
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TFORPREP) {
       <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355468.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a  class="comments">/* create to-be-closed upvalue (if needed) */</a>
        <a href="../h_src/58189012.htm" class="macro">halfProtect</a>(<a href="../h_src/57630520.htm" class="function">luaF_newtbcupval</a><a href="../h_src/57650308.htm" class="variable">u</a>pval(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355468.htm" class="localvar">ra</a> + 3));
        <a href="../h_src/58187516.htm" class="localvar">pc</a> += <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/58186564.htm" class="localvar">i</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a>++);  <a  class="comments">/* go to next instruction */</a>
        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(i) == OP_TFORCALL &amp;&amp; ra == <a href="../h_src/58191460.htm" class="macro">RA</a>(i));
        goto l_tforcall;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TFORCALL) {
       l_tforcall: {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355332.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a  class="comments">/* 'ra' has the iterator function, 'ra + 1' has the state,</a>
<a  class="comments">           'ra + 2' has the control variable, and 'ra + 3' has the</a>
<a  class="comments">           to-be-closed variable. The call will use the stack after</a>
<a  class="comments">           these values (starting at 'ra + 4')</a>
<a  class="comments">        */</a>
        <a  class="comments">/* push function, state, and control variable */</a>
        <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/58355332.htm" class="localvar">ra</a> + 4, <a href="../h_src/58355332.htm" class="localvar">ra</a>, 3 * sizeof(*<a href="../h_src/58355332.htm" class="localvar">ra</a>));
        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58355332.htm" class="localvar">ra</a> + 4 + 3;
        <a href="../h_src/58189148.htm" class="macro">ProtectNT</a>(<a href="../h_src/57633240.htm" class="function">luaD_call</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355332.htm" class="localvar">ra</a> + 4, <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)));  <a  class="comments">/* do the call */</a>
        <a href="../h_src/58190100.htm" class="macro">updatestack</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* stack may have changed */</a>
        <a href="../h_src/58186564.htm" class="localvar">i</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a>++);  <a  class="comments">/* go to next instruction */</a>
        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(i) == OP_TFORLOOP &amp;&amp; ra == <a href="../h_src/58191460.htm" class="macro">RA</a>(i));
        goto l_tforloop;
      }}
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TFORLOOP) {
       l_tforloop: {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355196.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        if (!<a href="../h_src/57531168.htm" class="macro">ttisnil</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58355196.htm" class="localvar">ra</a> + 4))) {  <a  class="comments">/* continue loop? */</a>
          <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355196.htm" class="localvar">ra</a> + 2, <a href="../h_src/58355196.htm" class="localvar">ra</a> + 4);  <a  class="comments">/* save control variable */</a>
          <a href="../h_src/58187516.htm" class="localvar">pc</a> -= <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* jump back */</a>
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }}
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETLIST) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58354788.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58354652.htm" class="localvar">n</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        unsigned int <a href="../h_src/58354516.htm" class="localvar">last</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/58354380.htm" class="localvar">h</a> = <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58354788.htm" class="localvar">ra</a>));
        if (<a href="../h_src/58354652.htm" class="localvar">n</a> == 0)
          <a href="../h_src/58354652.htm" class="localvar">n</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/58354788.htm" class="localvar">ra</a>) - 1;  <a  class="comments">/* get up to the top */</a>
        else
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;  <a  class="comments">/* correct top in case of emergency GC */</a>
        <a href="../h_src/58354516.htm" class="localvar">last</a> += <a href="../h_src/58354652.htm" class="localvar">n</a>;
        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {
          <a href="../h_src/58354516.htm" class="localvar">last</a> += <a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*<a href="../h_src/58187516.htm" class="localvar">pc</a>) * (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);
          <a href="../h_src/58187516.htm" class="localvar">pc</a>++;
        }
        if (<a href="../h_src/58354516.htm" class="localvar">last</a> &gt; <a href="../h_src/57616172.htm" class="function">luaH_realasize</a>(<a href="../h_src/58354380.htm" class="localvar">h</a>))  <a  class="comments">/* needs more space? */</a>
          <a href="../h_src/57616376.htm" class="function">luaH_resizearray</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58354380.htm" class="localvar">h</a>, <a href="../h_src/58354516.htm" class="localvar">last</a>);  <a  class="comments">/* preallocate it at once */</a>
        for (; <a href="../h_src/58354652.htm" class="localvar">n</a> &gt; 0; <a href="../h_src/58354652.htm" class="localvar">n</a>--) {
          <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58354244.htm" class="localvar">val</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58354788.htm" class="localvar">ra</a> + <a href="../h_src/58354652.htm" class="localvar">n</a>);
          <a href="../h_src/57533004.htm" class="macro">setobj2t</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, &amp;<a href="../h_src/58354380.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504716.htm" class="variable">array</a>[<a href="../h_src/58354516.htm" class="localvar">last</a> - 1], <a href="../h_src/58354244.htm" class="localvar">val</a>);
          <a href="../h_src/58354516.htm" class="localvar">last</a>--;
          <a href="../h_src/57621068.htm" class="macro">luaC_barrierback</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/58354380.htm" class="localvar">h</a>), <a href="../h_src/58354244.htm" class="localvar">val</a>);
        }
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CLOSURE) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58353836.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58353700.htm" class="localvar">p</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57514576.htm" class="variable">p</a>[<a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)];
        <a href="../h_src/58189012.htm" class="macro">halfProtect</a>(<a href="../h_src/58198124.htm" class="function">pushclosure</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58353700.htm" class="localvar">p</a>, <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>, <a href="../h_src/58187652.htm" class="localvar">base</a>, <a href="../h_src/58353836.htm" class="localvar">ra</a>));
        <a href="../h_src/58188876.htm" class="macro">checkGC</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58353836.htm" class="localvar">ra</a> + 1);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_VARARG) {
        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58353564.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        int <a href="../h_src/58353428.htm" class="localvar">n</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) - 1;  <a  class="comments">/* required results */</a>
        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497304.htm" class="function">luaT_getvarargs</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58353564.htm" class="localvar">ra</a>, <a href="../h_src/58353428.htm" class="localvar">n</a>));
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_VARARGPREP) {
        <a href="../h_src/58189148.htm" class="macro">ProtectNT</a>(<a href="../h_src/57497372.htm" class="function">luaT_adjustvarargs</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>), <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>));
        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58187380.htm" class="localvar">trap</a>)) {  <a  class="comments">/* previous &quot;Protect&quot; updated trap */</a>
          <a href="../h_src/57633444.htm" class="function">luaD_hookcall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);
          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641468.htm" class="variable">oldpc</a> = 1;  <a  class="comments">/* next opcode will be seen as a &quot;new&quot; line */</a>
        }
        <a href="../h_src/58190236.htm" class="macro">updatebase</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* function has new base after adjustment */</a><a href="../h_src/58187652.htm" class="localvar">base</a> after adjustment */
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EXTRAARG) {
        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);
        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
    }
  }
}
</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

