<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>match</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/143327232.htm" class="function" target="_self">Info</a></li>
<li><a href="../h_rx/143327232.htm" class="function" target="_self">Calling Hierarchy</a></li>
<li><a href="../h_nf/143327232.htm" class="function" target="_self">Flow Chart</a></li>
<li id="current"><a href="../h_src/143327232.htm" class="function" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/143327232.htm" class="function" target="_self">Definition</a></li>
<li><a href="../h_sc/143327232.htm" class="function" target="_self">Source Checks</a></li>
<li><a href="../h_src/143344164.htm#570" class="function" target="_self">Source File</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<h4>Source Code</h4>
<pre class=src>
static const char *<a href="../h_src/143327232.htm" class="function">match</a> (<a href="../h_src/143327300.htm" class="type">MatchState</a> *<a href="../h_src/143317576.htm" class="localvar">ms</a>, const char *<a href="../h_src/143317440.htm" class="localvar">s</a>, const char *<a href="../h_src/143317304.htm" class="localvar">p</a>) {
  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327912.htm" class="variable">matchdepth</a>-- == 0))
    <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;pattern too complex&quot;);
  init: <a  class="comments">/* using goto to optimize tail recursion */</a>
  if (<a href="../h_src/143317304.htm" class="localvar">p</a> != <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a>) {  <a  class="comments">/* end of pattern? */</a>
    switch (*<a href="../h_src/143317304.htm" class="localvar">p</a>) {
      case '(': {  <a  class="comments">/* start capture */</a>
        if (*(<a href="../h_src/143317304.htm" class="localvar">p</a> + 1) == ')')  <a  class="comments">/* position capture? */</a>
          <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143320024.htm" class="function">start_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 2, <a href="../h_src/143328456.htm" class="macro">CAP_POSITION</a>);
        else
          <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143320024.htm" class="function">start_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 1, <a href="../h_src/143328592.htm" class="macro">CAP_UNFINISHED</a>);
        break;
      }
      case ')': {  <a  class="comments">/* end capture */</a>
        <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143319072.htm" class="function">end_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 1);
        break;
      }
      case '$': {
        if ((<a href="../h_src/143317304.htm" class="localvar">p</a> + 1) != <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328048.htm" class="variable">p_end</a>)  <a  class="comments">/* is the '$' the last char in pattern? */</a>
          goto dflt;  <a  class="comments">/* no; go to default */</a>
        <a href="../h_src/143317440.htm" class="localvar">s</a> = (<a href="../h_src/143317440.htm" class="localvar">s</a> == <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328116.htm" class="variable">src_end</a>) ? <a href="../h_src/143317440.htm" class="localvar">s</a> : NULL;  <a  class="comments">/* check end of string */</a>
        break;
      }
      case <a href="../h_src/143326756.htm" class="macro">L_ESC</a>: {  <a  class="comments">/* escaped sequences not in the format class[*+?-]? */</a>
        switch (*(<a href="../h_src/143317304.htm" class="localvar">p</a> + 1)) {
          case 'b': {  <a  class="comments">/* balanced string? */</a>
            <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143322744.htm" class="function">matchbalance</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a> + 2);
            if (<a href="../h_src/143317440.htm" class="localvar">s</a> != NULL) {
              <a href="../h_src/143317304.htm" class="localvar">p</a> += 4; goto init;  <a  class="comments">/* return match(ms, s, p + 4); */</a>
            }  <a  class="comments">/* else fail (s == NULL) */</a>
            break;
          }
          case 'f': {  <a  class="comments">/* frontier? */</a>
            const char *<a href="../h_src/143317168.htm" class="localvar">ep</a>; char <a href="../h_src/143317032.htm" class="localvar">previous</a>;
            <a href="../h_src/143317304.htm" class="localvar">p</a> += 2;
            if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(*<a href="../h_src/143317304.htm" class="localvar">p</a> != '['))
              <a href="../h_src/57419296.htm" class="function">luaL_error</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327980.htm" class="variable">L</a>, &quot;missing '[' after '%%f' in pattern&quot;);
            <a href="../h_src/143317168.htm" class="localvar">ep</a> = <a href="../h_src/143325668.htm" class="function">classend</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>);  <a  class="comments">/* points to what is next */</a>
            <a href="../h_src/143317032.htm" class="localvar">previous</a> = (<a href="../h_src/143317440.htm" class="localvar">s</a> == <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143328184.htm" class="variable">src_init</a>) ? '\0' : *(<a href="../h_src/143317440.htm" class="localvar">s</a> - 1);
            if (!<a href="../h_src/143324240.htm" class="function">matchbracketclass</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(<a href="../h_src/143317032.htm" class="localvar">previous</a>), <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143317168.htm" class="localvar">ep</a> - 1) &amp;&amp;
               <a href="../h_src/143324240.htm" class="function">matchbracketclass</a>(<a href="../h_src/143343552.htm" class="macro">uchar</a>(*<a href="../h_src/143317440.htm" class="localvar">s</a>), <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143317168.htm" class="localvar">ep</a> - 1)) {
              <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143317168.htm" class="localvar">ep</a>; goto init;  <a  class="comments">/* return match(ms, s, ep); */</a>
            }
            <a href="../h_src/143317440.htm" class="localvar">s</a> = NULL;  <a  class="comments">/* match failed */</a>
            break;
          }
          case '0': case '1': case '2': case '3':
          case '4': case '5': case '6': case '7':
          case '8': case '9': {  <a  class="comments">/* capture results (%0-%9)? */</a>
            <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143318256.htm" class="function">match_capture</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143343552.htm" class="macro">uchar</a>(*(<a href="../h_src/143317304.htm" class="localvar">p</a> + 1)));
            if (<a href="../h_src/143317440.htm" class="localvar">s</a> != NULL) {
              <a href="../h_src/143317304.htm" class="localvar">p</a> += 2; goto init;  <a  class="comments">/* return match(ms, s, p + 2) */</a>
            }
            break;
          }
          default: goto dflt;
        }
        break;
      }
      default: dflt: {  <a  class="comments">/* pattern class plus optional suffix */</a>
        const char *<a href="../h_src/143316896.htm" class="localvar">ep</a> = <a href="../h_src/143325668.htm" class="function">classend</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>);  <a  class="comments">/* points to optional suffix */</a>
        <a  class="comments">/* does not match at least once? */</a>
        if (!<a href="../h_src/143323560.htm" class="function">singlematch</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143316896.htm" class="localvar">ep</a>)) {
          if (*<a href="../h_src/143316896.htm" class="localvar">ep</a> == '*' || *<a href="../h_src/143316896.htm" class="localvar">ep</a> == '?' || *<a href="../h_src/143316896.htm" class="localvar">ep</a> == '-') {  <a  class="comments">/* accept empty? */</a>
            <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143316896.htm" class="localvar">ep</a> + 1; goto init;  <a  class="comments">/* return match(ms, s, ep + 1); */</a>
          }
          else  <a  class="comments">/* '+' or no suffix */</a>
            <a href="../h_src/143317440.htm" class="localvar">s</a> = NULL;  <a  class="comments">/* fail */</a>
        }
        else {  <a  class="comments">/* matched once */</a>
          switch (*<a href="../h_src/143316896.htm" class="localvar">ep</a>) {  <a  class="comments">/* handle optional suffix */</a>
            case '?': {  <a  class="comments">/* optional */</a>
              const char *<a href="../h_src/143316760.htm" class="localvar">res</a>;
              if ((<a href="../h_src/143316760.htm" class="localvar">res</a> = <a href="../h_src/143327232.htm" class="function">match</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a> + 1, <a href="../h_src/143316896.htm" class="localvar">ep</a> + 1)) != NULL)
                <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143316760.htm" class="localvar">res</a>;
              else {
                <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143316896.htm" class="localvar">ep</a> + 1; goto init;  <a  class="comments">/* else return match(ms, s, ep + 1); */</a>
              }
              break;
            }
            case '+':  <a  class="comments">/* 1 or more repetitions */</a>
              <a href="../h_src/143317440.htm" class="localvar">s</a>++;  <a  class="comments">/* 1 match already done */</a>
              <a  class="comments">/* FALLTHROUGH */</a>
            case '*':  <a  class="comments">/* 0 or more repetitions */</a>
              <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143321792.htm" class="function">max_expand</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143316896.htm" class="localvar">ep</a>);
              break;
            case '-':  <a  class="comments">/* 0 or more repetitions (minimum) */</a>
              <a href="../h_src/143317440.htm" class="localvar">s</a> = <a href="../h_src/143320840.htm" class="function">min_expand</a>(<a href="../h_src/143317576.htm" class="localvar">ms</a>, <a href="../h_src/143317440.htm" class="localvar">s</a>, <a href="../h_src/143317304.htm" class="localvar">p</a>, <a href="../h_src/143316896.htm" class="localvar">ep</a>);
              break;
            default:  <a  class="comments">/* no suffix */</a>
              <a href="../h_src/143317440.htm" class="localvar">s</a>++; <a href="../h_src/143317304.htm" class="localvar">p</a> = <a href="../h_src/143316896.htm" class="localvar">ep</a>; goto init;  <a  class="comments">/* return match(ms, s + 1, ep); */</a>
          }
        }
        break;
      }
    }
  }
  <a href="../h_src/143317576.htm" class="localvar">ms</a>-&gt;<a href="../h_src/143327912.htm" class="variable">matchdepth</a>++;
  return <a href="../h_src/143317440.htm" class="localvar">s</a>;
}
</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

