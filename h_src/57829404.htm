<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lgc.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57829404.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/57829404.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/57829404.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/57829404.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/57829404.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/57829404.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/57829404.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57829404.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/57829404.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lgc.c $</a>
<a id=3></a><a  class="comments">** Garbage Collector</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/57829336.htm" class="macro">lgc_c</a>
<a id=8></a>#define <a href="../h_src/57829200.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;


<a id=16></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=18></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=19></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=20></a>#include &quot;<a href="../h_src/57632424.htm" class="file">lfunc.h</a>&quot;
<a id=21></a>#include &quot;<a href="../h_src/57630112.htm" class="file">lgc.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57496896.htm" class="file">lmem.h</a>&quot;
<a id=23></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=24></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;
<a id=25></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57618348.htm" class="file">ltable.h</a>&quot;
<a id=27></a>#include &quot;<a href="../h_src/57501248.htm" class="file">ltm.h</a>&quot;


<a id=30></a><a  class="comments">/*</a>
<a id=31></a><a  class="comments">** Maximum number of elements to sweep in each single step.</a>
<a id=32></a><a  class="comments">** (Large enough to dissipate fixed overheads but small enough</a>
<a id=33></a><a  class="comments">** to allow small steps for the collector.)</a>
<a id=34></a><a  class="comments">*/</a>
<a id=35></a>#define <a href="../h_src/57829064.htm" class="macro">GCSWEEPMAX</a>	100

<a id=37></a><a  class="comments">/*</a>
<a id=38></a><a  class="comments">** Maximum number of finalizers to call in each single step.</a>
<a id=39></a><a  class="comments">*/</a>
<a id=40></a>#define <a href="../h_src/57828928.htm" class="macro">GCFINMAX</a>	10


<a id=43></a><a  class="comments">/*</a>
<a id=44></a><a  class="comments">** Cost of calling one finalizer.</a>
<a id=45></a><a  class="comments">*/</a>
<a id=46></a>#define <a href="../h_src/57828792.htm" class="macro">GCFINALIZECOST</a>	50


<a id=49></a><a  class="comments">/*</a>
<a id=50></a><a  class="comments">** The equivalent, in bytes, of one unit of &quot;work&quot; (visiting a slot,</a>
<a id=51></a><a  class="comments">** sweeping an object, etc.)</a>
<a id=52></a><a  class="comments">*/</a>
<a id=53></a>#define <a href="../h_src/57828656.htm" class="macro">WORK2MEM</a>	sizeof(TValue)


<a id=56></a><a  class="comments">/*</a>
<a id=57></a><a  class="comments">** macro to adjust 'pause': 'pause' is actually used like</a>
<a id=58></a><a  class="comments">** 'pause / PAUSEADJ' (value chosen by tests)</a>
<a id=59></a><a  class="comments">*/</a>
<a id=60></a>#define <a href="../h_src/57828520.htm" class="macro">PAUSEADJ</a>		100


<a id=63></a><a  class="comments">/* mask with all color bits */</a>
<a id=64></a>#define <a href="../h_src/57828384.htm" class="macro">maskcolors</a>	(bitmask(BLACKBIT) | WHITEBITS)

<a id=66></a><a  class="comments">/* mask with all GC bits */</a>
<a id=67></a>#define <a href="../h_src/57828248.htm" class="macro">maskgcbits</a>      (maskcolors | AGEBITS)


<a id=70></a><a  class="comments">/* macro to erase all color bits then set only the current white bit */</a>
<a id=71></a>#define <a href="../h_src/57828112.htm" class="macro">makewhite</a>(g,x)	\
  (x-&gt;marked = cast_byte((x-&gt;marked &amp; ~maskcolors) | luaC_white(g)))

<a id=74></a><a  class="comments">/* make an object gray (neither white nor black) */</a>
<a id=75></a>#define <a href="../h_src/57827976.htm" class="macro">set2gray</a>(x)	resetbits(x-&gt;marked, maskcolors)


<a id=78></a><a  class="comments">/* make an object black (coming from any color) */</a>
<a id=79></a>#define <a href="../h_src/57827840.htm" class="macro">set2black</a>(x)  \
  (x-&gt;marked = cast_byte((x-&gt;marked &amp; ~WHITEBITS) | bitmask(BLACKBIT)))


<a id=83></a>#define <a href="../h_src/57827704.htm" class="macro">valiswhite</a>(x)   (iscollectable(x) &amp;&amp; iswhite(gcvalue(x)))

<a id=85></a>#define <a href="../h_src/57827568.htm" class="macro">keyiswhite</a>(n)   (keyiscollectable(n) &amp;&amp; iswhite(gckey(n)))


<a id=88></a><a  class="comments">/*</a>
<a id=89></a><a  class="comments">** Protected access to objects in values</a>
<a id=90></a><a  class="comments">*/</a>
<a id=91></a>#define <a href="../h_src/57827432.htm" class="macro">gcvalueN</a>(o)     (iscollectable(o) ? gcvalue(o) : NULL)


<a id=94></a>#define <a href="../h_src/57827296.htm" class="macro">markvalue</a>(g,o) { checkliveness(g-&gt;mainthread,o); \
  if (valiswhite(o)) reallymarkobject(g,gcvalue(o)); }

<a id=97></a>#define <a href="../h_src/57827160.htm" class="macro">markkey</a>(g, n)	{ if keyiswhite(n) reallymarkobject(g,gckey(n)); }

<a id=99></a>#define <a href="../h_src/57827024.htm" class="macro">markobject</a>(g,t)	{ if (iswhite(t)) reallymarkobject(g, obj2gco(t)); }

<a id=101></a><a  class="comments">/*</a>
<a id=102></a><a  class="comments">** mark an object that can be NULL (either because it is really optional,</a>
<a id=103></a><a  class="comments">** or it was stripped as debug info, or inside an uncompleted structure)</a>
<a id=104></a><a  class="comments">*/</a>
<a id=105></a>#define <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(g,t)	{ if (t) markobject(g,t); }

<a id=107></a>static void <a href="../h_src/57826752.htm" class="function">reallymarkobject</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *g, <a href="../h_src/57527972.htm" class="type">GCObject</a> *o);
<a id=108></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57826616.htm" class="function">atomic</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L);
<a id=109></a>static void <a href="../h_src/57826480.htm" class="function">entersweep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L);


<a id=112></a><a  class="comments">/*</a>
<a id=113></a><a  class="comments">** {======================================================</a>
<a id=114></a><a  class="comments">** Generic functions</a>
<a id=115></a><a  class="comments">** =======================================================</a>
<a id=116></a><a  class="comments">*/</a>


<a id=119></a><a  class="comments">/*</a>
<a id=120></a><a  class="comments">** one after last element in a hash array</a>
<a id=121></a><a  class="comments">*/</a>
<a id=122></a>#define <a href="../h_src/57826344.htm" class="macro">gnodelast</a>(h)	gnode(h, cast_sizet(sizenode(h)))


<a id=125></a>static <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57826208.htm" class="function">getgclist</a> (<a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57826072.htm" class="localvar">o</a>) {
<a id=126></a>  switch (<a href="../h_src/57826072.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a>) {
<a id=127></a>    case <a href="../h_src/57507436.htm" class="macro">LUA_VTABLE</a>: return &amp;<a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57826072.htm" class="localvar">o</a>)-&gt;<a href="../h_src/57504376.htm" class="variable">gclist</a>;
<a id=128></a>    case <a href="../h_src/57513624.htm" class="macro">LUA_VLCL</a>: return &amp;<a href="../h_src/57639836.htm" class="macro">gco2lcl</a>(<a href="../h_src/57826072.htm" class="localvar">o</a>)-&gt;<a href="../h_src/57508252.htm" class="variable">gclist</a>;
<a id=129></a>    case <a href="../h_src/57513352.htm" class="macro">LUA_VCCL</a>: return &amp;<a href="../h_src/57639700.htm" class="macro">gco2ccl</a>(<a href="../h_src/57826072.htm" class="localvar">o</a>)-&gt;<a href="../h_src/57509000.htm" class="variable">gclist</a>;
<a id=130></a>    case <a href="../h_src/57528992.htm" class="macro">LUA_VTHREAD</a>: return &amp;<a href="../h_src/57639156.htm" class="macro">gco2th</a>(<a href="../h_src/57826072.htm" class="localvar">o</a>)-&gt;<a href="../h_src/57642080.htm" class="variable">gclist</a>;
<a id=131></a>    case <a href="../h_src/57517636.htm" class="macro">LUA_VPROTO</a>: return &amp;<a href="../h_src/57639292.htm" class="macro">gco2p</a>(<a href="../h_src/57826072.htm" class="localvar">o</a>)-&gt;<a href="../h_src/57513896.htm" class="variable">gclist</a>;
<a id=132></a>    case <a href="../h_src/57521988.htm" class="macro">LUA_VUSERDATA</a>: {
<a id=133></a>      <a href="../h_src/57519268.htm" class="type">Udata</a> *<a href="../h_src/57825936.htm" class="localvar">u</a> = <a href="../h_src/57639972.htm" class="macro">gco2u</a>(<a href="../h_src/57826072.htm" class="localvar">o</a>);
<a id=134></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(u-&gt;nuvalue &gt; 0);
<a id=135></a>      return &amp;<a href="../h_src/57825936.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519472.htm" class="variable">gclist</a>;
    }
<a id=137></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0); return 0;
  }
}


<a id=142></a><a  class="comments">/*</a>
<a id=143></a><a  class="comments">** Link a collectable object 'o' with a known type into the list 'p'.</a>
<a id=144></a><a  class="comments">** (Must be a macro to access the 'gclist' field in different types.)</a>
<a id=145></a><a  class="comments">*/</a>
<a id=146></a>#define <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(o,p)	linkgclist_(obj2gco(o), &amp;(o)-&gt;gclist, &amp;(p))

<a id=148></a>static void <a href="../h_src/57825664.htm" class="function">linkgclist_</a> (<a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57825528.htm" class="localvar">o</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57825392.htm" class="localvar">pnext</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57825256.htm" class="localvar">list</a>) {
<a id=149></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57626100.htm" class="macro">isgray</a>(o));  <a  class="comments">/* cannot be in a gray list */</a>
<a id=150></a>  *<a href="../h_src/57825392.htm" class="localvar">pnext</a> = *<a href="../h_src/57825256.htm" class="localvar">list</a>;
<a id=151></a>  *<a href="../h_src/57825256.htm" class="localvar">list</a> = <a href="../h_src/57825528.htm" class="localvar">o</a>;
<a id=152></a>  <a href="../h_src/57827976.htm" class="macro">set2gray</a>(<a href="../h_src/57825528.htm" class="localvar">o</a>);  <a  class="comments">/* now it is */</a>
}


<a id=156></a><a  class="comments">/*</a>
<a id=157></a><a  class="comments">** Link a generic collectable object 'o' into the list 'p'.</a>
<a id=158></a><a  class="comments">*/</a>
<a id=159></a>#define <a href="../h_src/57825120.htm" class="macro">linkobjgclist</a>(o,p) linkgclist_(obj2gco(o), getgclist(o), &amp;(p))



<a id=163></a><a  class="comments">/*</a>
<a id=164></a><a  class="comments">** Clear keys for empty entries in tables. If entry is empty, mark its</a>
<a id=165></a><a  class="comments">** entry as dead. This allows the collection of the key, but keeps its</a>
<a id=166></a><a  class="comments">** entry in the table: its removal could break a chain and could break</a>
<a id=167></a><a  class="comments">** a table traversal.  Other places never manipulate dead keys, because</a>
<a id=168></a><a  class="comments">** its associated empty value is enough to signal that the entry is</a>
<a id=169></a><a  class="comments">** logically empty.</a>
<a id=170></a><a  class="comments">*/</a>
<a id=171></a>static void <a href="../h_src/57824984.htm" class="function">clearkey</a> (<a href="../h_src/57506008.htm" class="type">Node</a> *<a href="../h_src/57824848.htm" class="localvar">n</a>) {
<a id=172></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57530488.htm" class="macro">isempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(n)));
<a id=173></a>  if (<a href="../h_src/57503152.htm" class="macro">keyiscollectable</a>(<a href="../h_src/57824848.htm" class="localvar">n</a>))
<a id=174></a>    <a href="../h_src/57502744.htm" class="macro">setdeadkey</a>(<a href="../h_src/57824848.htm" class="localvar">n</a>);  <a  class="comments">/* unused key; remove it */</a>
}


<a id=178></a><a  class="comments">/*</a>
<a id=179></a><a  class="comments">** tells whether a key or value can be cleared from a weak</a>
<a id=180></a><a  class="comments">** table. Non-collectable objects are never removed from weak</a>
<a id=181></a><a  class="comments">** tables. Strings behave as 'values', so are never removed too. for</a>
<a id=182></a><a  class="comments">** other objects: if really collected, cannot keep them; for objects</a>
<a id=183></a><a  class="comments">** being finalized, keep them in keys, but not in values</a>
<a id=184></a><a  class="comments">*/</a>
<a id=185></a>static int <a href="../h_src/57824712.htm" class="function">iscleared</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57824576.htm" class="localvar">g</a>, const <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57824440.htm" class="localvar">o</a>) {
<a id=186></a>  if (<a href="../h_src/57824440.htm" class="localvar">o</a> == NULL) return 0;  <a  class="comments">/* non-collectable value */</a>
<a id=187></a>  else if (<a href="../h_src/57534908.htm" class="macro">novariant</a>(<a href="../h_src/57824440.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a>) == <a href="../h_src/57443504.htm" class="macro">LUA_TSTRING</a>) {
<a id=188></a>    <a href="../h_src/57827024.htm" class="macro">markobject</a>(<a href="../h_src/57824576.htm" class="localvar">g</a>, <a href="../h_src/57824440.htm" class="localvar">o</a>);  <a  class="comments">/* strings are 'values', so are never weak */</a>
    return 0;
  }
<a id=191></a>  else return <a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/57824440.htm" class="localvar">o</a>);
}


<a id=195></a><a  class="comments">/*</a>
<a id=196></a><a  class="comments">** Barrier that moves collector forward, that is, marks the white object</a>
<a id=197></a><a  class="comments">** 'v' being pointed by the black object 'o'.  In the generational</a>
<a id=198></a><a  class="comments">** mode, 'v' must also become old, if 'o' is old; however, it cannot</a>
<a id=199></a><a  class="comments">** be changed directly to OLD, because it may still point to non-old</a>
<a id=200></a><a  class="comments">** objects. So, it is marked as OLD0. In the next cycle it will become</a>
<a id=201></a><a  class="comments">** OLD1, and in the next it will finally become OLD (regular old). By</a>
<a id=202></a><a  class="comments">** then, any object it points to will also be old.  If called in the</a>
<a id=203></a><a  class="comments">** incremental sweep phase, it clears the black object to white (sweep</a>
<a id=204></a><a  class="comments">** it) to avoid other barrier calls for this same object. (That cannot</a>
<a id=205></a><a  class="comments">** be done is generational mode, as its sweep does not distinguish</a>
<a id=206></a><a  class="comments">** whites from deads.)</a>
<a id=207></a><a  class="comments">*/</a>
<a id=208></a>void <a href="../h_src/57620456.htm" class="function">luaC_barrier_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57824304.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57824168.htm" class="localvar">o</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57824032.htm" class="localvar">v</a>) {
<a id=209></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57823896.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57824304.htm" class="localvar">L</a>);
<a id=210></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57626236.htm" class="macro">isblack</a>(o) &amp;&amp; <a href="../h_src/57626372.htm" class="macro">iswhite</a>(v) &amp;&amp; !<a href="../h_src/57625556.htm" class="macro">isdead</a>(g, v) &amp;&amp; !<a href="../h_src/57625556.htm" class="macro">isdead</a>(g, o));
<a id=211></a>  if (<a href="../h_src/57628412.htm" class="macro">keepinvariant</a>(<a href="../h_src/57823896.htm" class="localvar">g</a>)) {  <a  class="comments">/* must keep invariant? */</a>
<a id=212></a>    <a href="../h_src/57826752.htm" class="function">reallymarkobject</a>(<a href="../h_src/57823896.htm" class="localvar">g</a>, <a href="../h_src/57824032.htm" class="localvar">v</a>);  <a  class="comments">/* restore invariant */</a>
<a id=213></a>    if (<a href="../h_src/57623652.htm" class="macro">isold</a>(<a href="../h_src/57824168.htm" class="localvar">o</a>)) {
<a id=214></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57623652.htm" class="macro">isold</a>(v));  <a  class="comments">/* white object could not be old */</a>
<a id=215></a>      <a href="../h_src/57623788.htm" class="macro">setage</a>(<a href="../h_src/57824032.htm" class="localvar">v</a>, <a href="../h_src/57624740.htm" class="macro">G_OLD0</a>);  <a  class="comments">/* restore generational invariant */</a>
    }
  }
<a id=218></a>  else {  <a  class="comments">/* sweep phase */</a>
<a id=219></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57628548.htm" class="macro">issweepphase</a>(g));
<a id=220></a>    if (<a href="../h_src/57823896.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645956.htm" class="variable">gckind</a> == <a href="../h_src/57652280.htm" class="macro">KGC_INC</a>)  <a  class="comments">/* incremental mode? */</a>
<a id=221></a>      <a href="../h_src/57828112.htm" class="macro">makewhite</a>(<a href="../h_src/57823896.htm" class="localvar">g</a>, <a href="../h_src/57824168.htm" class="localvar">o</a>);  <a  class="comments">/* mark 'o' as white to avoid other barriers */</a>
  }
}


<a id=226></a><a  class="comments">/*</a>
<a id=227></a><a  class="comments">** barrier that moves collector backward, that is, mark the black object</a>
<a id=228></a><a  class="comments">** pointing to a white object as gray again.</a>
<a id=229></a><a  class="comments">*/</a>
<a id=230></a>void <a href="../h_src/57620388.htm" class="function">luaC_barrierback_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57823760.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57823624.htm" class="localvar">o</a>) {
<a id=231></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57823488.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57823760.htm" class="localvar">L</a>);
<a id=232></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57626236.htm" class="macro">isblack</a>(o) &amp;&amp; !<a href="../h_src/57625556.htm" class="macro">isdead</a>(g, o));
<a id=233></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>((g-&gt;gckind == <a href="../h_src/57652144.htm" class="macro">KGC_GEN</a>) == (<a href="../h_src/57623652.htm" class="macro">isold</a>(o) &amp;&amp; <a href="../h_src/57623924.htm" class="macro">getage</a>(o) != <a href="../h_src/57624332.htm" class="macro">G_TOUCHED1</a>));
<a id=234></a>  if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57823624.htm" class="localvar">o</a>) == <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>)  <a  class="comments">/* already in gray list? */</a>
<a id=235></a>    <a href="../h_src/57827976.htm" class="macro">set2gray</a>(<a href="../h_src/57823624.htm" class="localvar">o</a>);  <a  class="comments">/* make it gray to become touched1 */</a>
<a id=236></a>  else  <a  class="comments">/* link it in 'grayagain' and paint it gray */</a>
<a id=237></a>    <a href="../h_src/57825120.htm" class="macro">linkobjgclist</a>(<a href="../h_src/57823624.htm" class="localvar">o</a>, <a href="../h_src/57823488.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>);
<a id=238></a>  if (<a href="../h_src/57623652.htm" class="macro">isold</a>(<a href="../h_src/57823624.htm" class="localvar">o</a>))  <a  class="comments">/* generational mode? */</a>
<a id=239></a>    <a href="../h_src/57623788.htm" class="macro">setage</a>(<a href="../h_src/57823624.htm" class="localvar">o</a>, <a href="../h_src/57624332.htm" class="macro">G_TOUCHED1</a>);  <a  class="comments">/* touched in current cycle */</a>
}


<a id=243></a>void <a href="../h_src/57620932.htm" class="function">luaC_fix</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57823352.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57823216.htm" class="localvar">o</a>) {
<a id=244></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57823080.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57823352.htm" class="localvar">L</a>);
<a id=245></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;allgc == o);  <a  class="comments">/* object must be 1st in 'allgc' list! */</a>
<a id=246></a>  <a href="../h_src/57827976.htm" class="macro">set2gray</a>(<a href="../h_src/57823216.htm" class="localvar">o</a>);  <a  class="comments">/* they will be gray forever */</a>
<a id=247></a>  <a href="../h_src/57623788.htm" class="macro">setage</a>(<a href="../h_src/57823216.htm" class="localvar">o</a>, <a href="../h_src/57624468.htm" class="macro">G_OLD</a>);  <a  class="comments">/* and old forever */</a>
<a id=248></a>  <a href="../h_src/57823080.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a> = <a href="../h_src/57823216.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* remove object from 'allgc' list */</a>
<a id=249></a>  <a href="../h_src/57823216.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a> = <a href="../h_src/57823080.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644664.htm" class="variable">fixedgc</a>;  <a  class="comments">/* link it to 'fixedgc' list */</a>
<a id=250></a>  <a href="../h_src/57823080.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644664.htm" class="variable">fixedgc</a> = <a href="../h_src/57823216.htm" class="localvar">o</a>;
}


<a id=254></a><a  class="comments">/*</a>
<a id=255></a><a  class="comments">** create a new collectable object (with given type, size, and offset)</a>
<a id=256></a><a  class="comments">** and link it to 'allgc' list.</a>
<a id=257></a><a  class="comments">*/</a>
<a id=258></a><a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57620524.htm" class="function">luaC_newobjdt</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57822944.htm" class="localvar">L</a>, int <a href="../h_src/57822808.htm" class="localvar">tt</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57822672.htm" class="localvar">sz</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57822536.htm" class="localvar">offset</a>) {
<a id=259></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57822400.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57822944.htm" class="localvar">L</a>);
<a id=260></a>  char *<a href="../h_src/57822264.htm" class="localvar">p</a> = <a href="../h_src/57546536.htm" class="macro">cast_charp</a>(<a href="../h_src/57495060.htm" class="macro">luaM_newobject</a>(<a href="../h_src/57822944.htm" class="localvar">L</a>, <a href="../h_src/57534908.htm" class="macro">novariant</a>(<a href="../h_src/57822808.htm" class="localvar">tt</a>), <a href="../h_src/57822672.htm" class="localvar">sz</a>));
<a id=261></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57822128.htm" class="localvar">o</a> = <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57527972.htm" class="type">GCObject</a> *, <a href="../h_src/57822264.htm" class="localvar">p</a> + <a href="../h_src/57822536.htm" class="localvar">offset</a>);
<a id=262></a>  <a href="../h_src/57822128.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a> = <a href="../h_src/57625148.htm" class="macro">luaC_white</a>(<a href="../h_src/57822400.htm" class="localvar">g</a>);
<a id=263></a>  <a href="../h_src/57822128.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a> = <a href="../h_src/57822808.htm" class="localvar">tt</a>;
<a id=264></a>  <a href="../h_src/57822128.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a> = <a href="../h_src/57822400.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>;
<a id=265></a>  <a href="../h_src/57822400.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a> = <a href="../h_src/57822128.htm" class="localvar">o</a>;
<a id=266></a>  return <a href="../h_src/57822128.htm" class="localvar">o</a>;
}


<a id=270></a><a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57620592.htm" class="function">luaC_newobj</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57821992.htm" class="localvar">L</a>, int <a href="../h_src/57821856.htm" class="localvar">tt</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57821720.htm" class="localvar">sz</a>) {
<a id=271></a>  return <a href="../h_src/57620524.htm" class="function">luaC_newobjdt</a>(<a href="../h_src/57821992.htm" class="localvar">L</a>, <a href="../h_src/57821856.htm" class="localvar">tt</a>, <a href="../h_src/57821720.htm" class="localvar">sz</a>, 0);
}

<a id=274></a><a  class="comments">/* }====================================================== */</a>



<a id=278></a><a  class="comments">/*</a>
<a id=279></a><a  class="comments">** {======================================================</a>
<a id=280></a><a  class="comments">** Mark functions</a>
<a id=281></a><a  class="comments">** =======================================================</a>
<a id=282></a><a  class="comments">*/</a>


<a id=285></a><a  class="comments">/*</a>
<a id=286></a><a  class="comments">** Mark an object.  Userdata with no user values, strings, and closed</a>
<a id=287></a><a  class="comments">** upvalues are visited and turned black here.  Open upvalues are</a>
<a id=288></a><a  class="comments">** already indirectly linked through their respective threads in the</a>
<a id=289></a><a  class="comments">** 'twups' list, so they don't go to the gray list; nevertheless, they</a>
<a id=290></a><a  class="comments">** are kept gray to avoid barriers, as their values will be revisited</a>
<a id=291></a><a  class="comments">** by the thread or by 'remarkupvals'.  Other objects are added to the</a>
<a id=292></a><a  class="comments">** gray list to be visited (and turned black) later.  Both userdata and</a>
<a id=293></a><a  class="comments">** upvalues can call this function recursively, but this recursion goes</a>
<a id=294></a><a  class="comments">** for at most two levels: An upvalue cannot refer to another upvalue</a>
<a id=295></a><a  class="comments">** (only closures can), and a userdata's metatable must be a table.</a>
<a id=296></a><a  class="comments">*/</a>
<a id=297></a>static void <a href="../h_src/57826752.htm" class="function">reallymarkobject</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57821584.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57821448.htm" class="localvar">o</a>) {
<a id=298></a>  switch (<a href="../h_src/57821448.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a>) {
<a id=299></a>    case <a href="../h_src/57525184.htm" class="macro">LUA_VSHRSTR</a>:
<a id=300></a>    case <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>: {
<a id=301></a>      <a href="../h_src/57827840.htm" class="macro">set2black</a>(<a href="../h_src/57821448.htm" class="localvar">o</a>);  <a  class="comments">/* nothing to visit */</a>
      break;
    }
<a id=304></a>    case <a href="../h_src/57513760.htm" class="macro">LUA_VUPVAL</a>: {
<a id=305></a>      <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/57821312.htm" class="localvar">uv</a> = <a href="../h_src/57639020.htm" class="macro">gco2upv</a>(<a href="../h_src/57821448.htm" class="localvar">o</a>);
<a id=306></a>      if (<a href="../h_src/57631540.htm" class="macro">upisopen</a>(<a href="../h_src/57821312.htm" class="localvar">uv</a>))
<a id=307></a>        <a href="../h_src/57827976.htm" class="macro">set2gray</a>(<a href="../h_src/57821312.htm" class="localvar">uv</a>);  <a  class="comments">/* open upvalues are kept gray */</a>
      else
<a id=309></a>        <a href="../h_src/57827840.htm" class="macro">set2black</a>(<a href="../h_src/57821312.htm" class="localvar">uv</a>);  <a  class="comments">/* closed upvalues are visited here */</a>
<a id=310></a>      <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57821584.htm" class="localvar">g</a>, <a href="../h_src/57821312.htm" class="localvar">uv</a>-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>);  <a  class="comments">/* mark its content */</a>
      break;
    }
<a id=313></a>    case <a href="../h_src/57521988.htm" class="macro">LUA_VUSERDATA</a>: {
<a id=314></a>      <a href="../h_src/57519268.htm" class="type">Udata</a> *<a href="../h_src/57821176.htm" class="localvar">u</a> = <a href="../h_src/57639972.htm" class="macro">gco2u</a>(<a href="../h_src/57821448.htm" class="localvar">o</a>);
<a id=315></a>      if (<a href="../h_src/57821176.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519948.htm" class="variable">nuvalue</a> == 0) {  <a  class="comments">/* no user values? */</a>
<a id=316></a>        <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57821584.htm" class="localvar">g</a>, <a href="../h_src/57821176.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519540.htm" class="variable">metatable</a>);  <a  class="comments">/* mark its metatable */</a>
<a id=317></a>        <a href="../h_src/57827840.htm" class="macro">set2black</a>(<a href="../h_src/57821176.htm" class="localvar">u</a>);  <a  class="comments">/* nothing else to mark */</a>
        break;
      }
<a id=320></a>      <a  class="comments">/* else... */</a>
<a id=321></a>    }  <a  class="comments">/* FALLTHROUGH */</a>
<a id=322></a>    case <a href="../h_src/57513624.htm" class="macro">LUA_VLCL</a>: case <a href="../h_src/57513352.htm" class="macro">LUA_VCCL</a>: case <a href="../h_src/57507436.htm" class="macro">LUA_VTABLE</a>:
<a id=323></a>    case <a href="../h_src/57528992.htm" class="macro">LUA_VTHREAD</a>: case <a href="../h_src/57517636.htm" class="macro">LUA_VPROTO</a>: {
<a id=324></a>      <a href="../h_src/57825120.htm" class="macro">linkobjgclist</a>(<a href="../h_src/57821448.htm" class="localvar">o</a>, <a href="../h_src/57821584.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645072.htm" class="variable">gray</a>);  <a  class="comments">/* to be visited later */</a>
      break;
    }
<a id=327></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0); break;
  }
}


<a id=332></a><a  class="comments">/*</a>
<a id=333></a><a  class="comments">** mark metamethods for basic types</a>
<a id=334></a><a  class="comments">*/</a>
<a id=335></a>static void <a href="../h_src/57821040.htm" class="function">markmt</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57820904.htm" class="localvar">g</a>) {
<a id=336></a>  int <a href="../h_src/57820768.htm" class="localvar">i</a>;
<a id=337></a>  for (<a href="../h_src/57820768.htm" class="localvar">i</a>=0; <a href="../h_src/57820768.htm" class="localvar">i</a> &lt; <a href="../h_src/57426028.htm" class="macro">LUA_NUMTAGS</a>; <a href="../h_src/57820768.htm" class="localvar">i</a>++)
<a id=338></a>    <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57820904.htm" class="localvar">g</a>, <a href="../h_src/57820904.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643440.htm" class="variable">mt</a>[<a href="../h_src/57820768.htm" class="localvar">i</a>]);
}


<a id=342></a><a  class="comments">/*</a>
<a id=343></a><a  class="comments">** mark all objects in list of being-finalized</a>
<a id=344></a><a  class="comments">*/</a>
<a id=345></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57820632.htm" class="function">markbeingfnz</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57820496.htm" class="localvar">g</a>) {
<a id=346></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57820360.htm" class="localvar">o</a>;
<a id=347></a>  <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57820224.htm" class="localvar">count</a> = 0;
<a id=348></a>  for (<a href="../h_src/57820360.htm" class="localvar">o</a> = <a href="../h_src/57820496.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>; <a href="../h_src/57820360.htm" class="localvar">o</a> != NULL; <a href="../h_src/57820360.htm" class="localvar">o</a> = <a href="../h_src/57820360.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>) {
<a id=349></a>    <a href="../h_src/57820224.htm" class="localvar">count</a>++;
<a id=350></a>    <a href="../h_src/57827024.htm" class="macro">markobject</a>(<a href="../h_src/57820496.htm" class="localvar">g</a>, <a href="../h_src/57820360.htm" class="localvar">o</a>);
  }
<a id=352></a>  return <a href="../h_src/57820224.htm" class="localvar">count</a>;
}


<a id=356></a><a  class="comments">/*</a>
<a id=357></a><a  class="comments">** For each non-marked thread, simulates a barrier between each open</a>
<a id=358></a><a  class="comments">** upvalue and its value. (If the thread is collected, the value will be</a>
<a id=359></a><a  class="comments">** assigned to the upvalue, but then it can be too late for the barrier</a>
<a id=360></a><a  class="comments">** to act. The &quot;barrier&quot; does not need to check colors: A non-marked</a>
<a id=361></a><a  class="comments">** thread must be young; upvalues cannot be older than their threads; so</a>
<a id=362></a><a  class="comments">** any visited upvalue must be young too.) Also removes the thread from</a>
<a id=363></a><a  class="comments">** the list, as it was already visited. Removes also threads with no</a>
<a id=364></a><a  class="comments">** upvalues, as they have nothing to be checked. (If the thread gets an</a>
<a id=365></a><a  class="comments">** upvalue later, it will be linked in the list again.)</a>
<a id=366></a><a  class="comments">*/</a>
<a id=367></a>static int <a href="../h_src/57820088.htm" class="function">remarkupvals</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57819952.htm" class="localvar">g</a>) {
<a id=368></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57819816.htm" class="localvar">thread</a>;
<a id=369></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> **<a href="../h_src/57819612.htm" class="localvar">p</a> = &amp;<a href="../h_src/57819952.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643984.htm" class="variable">twups</a>;
<a id=370></a>  int <a href="../h_src/57819476.htm" class="localvar">work</a> = 0;  <a  class="comments">/* estimate of how much work was done here */</a>
<a id=371></a>  while ((<a href="../h_src/57819816.htm" class="localvar">thread</a> = *<a href="../h_src/57819612.htm" class="localvar">p</a>) != NULL) {
<a id=372></a>    <a href="../h_src/57819476.htm" class="localvar">work</a>++;
<a id=373></a>    if (!<a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/57819816.htm" class="localvar">thread</a>) &amp;&amp; <a href="../h_src/57819816.htm" class="localvar">thread</a>-&gt;<a href="../h_src/57642216.htm" class="variable">openupval</a> != NULL)
<a id=374></a>      <a href="../h_src/57819612.htm" class="localvar">p</a> = &amp;<a href="../h_src/57819816.htm" class="localvar">thread</a>-&gt;<a href="../h_src/57642012.htm" class="variable">twups</a>;  <a  class="comments">/* keep marked thread with upvalues in the list */</a>
<a id=375></a>    else {  <a  class="comments">/* thread is not marked or without upvalues */</a>
<a id=376></a>      <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/57819340.htm" class="localvar">uv</a>;
<a id=377></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57623652.htm" class="macro">isold</a>(thread) || thread-&gt;openupval == NULL);
<a id=378></a>      *<a href="../h_src/57819612.htm" class="localvar">p</a> = <a href="../h_src/57819816.htm" class="localvar">thread</a>-&gt;<a href="../h_src/57642012.htm" class="variable">twups</a>;  <a  class="comments">/* remove thread from the list */</a>
<a id=379></a>      <a href="../h_src/57819816.htm" class="localvar">thread</a>-&gt;<a href="../h_src/57642012.htm" class="variable">twups</a> = <a href="../h_src/57819816.htm" class="localvar">thread</a>;  <a  class="comments">/* mark that it is out of list */</a>
<a id=380></a>      for (<a href="../h_src/57819340.htm" class="localvar">uv</a> = <a href="../h_src/57819816.htm" class="localvar">thread</a>-&gt;<a href="../h_src/57642216.htm" class="variable">openupval</a>; <a href="../h_src/57819340.htm" class="localvar">uv</a> != NULL; <a href="../h_src/57819340.htm" class="localvar">uv</a> = <a href="../h_src/57819340.htm" class="localvar">uv</a>-&gt;<a href="../h_src/57509680.htm" class="variable">u</a>.<a href="../h_src/57509884.htm" class="variable">open</a>.<a href="../h_src/57510224.htm" class="variable">next</a>) {
<a id=381></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57623924.htm" class="macro">getage</a>(uv) &lt;= <a href="../h_src/57623924.htm" class="macro">getage</a>(thread));
<a id=382></a>        <a href="../h_src/57819476.htm" class="localvar">work</a>++;
<a id=383></a>        if (!<a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/57819340.htm" class="localvar">uv</a>)) {  <a  class="comments">/* upvalue already visited? */</a>
<a id=384></a>          <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57631540.htm" class="macro">upisopen</a>(uv) &amp;&amp; <a href="../h_src/57626100.htm" class="macro">isgray</a>(uv));
<a id=385></a>          <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57819952.htm" class="localvar">g</a>, <a href="../h_src/57819340.htm" class="localvar">uv</a>-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>);  <a  class="comments">/* mark its value */</a>
        }
      }
    }
  }
<a id=390></a>  return <a href="../h_src/57819476.htm" class="localvar">work</a>;
}


<a id=394></a>static void <a href="../h_src/57819204.htm" class="function">cleargraylists</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57819068.htm" class="localvar">g</a>) {
<a id=395></a>  <a href="../h_src/57819068.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645072.htm" class="variable">gray</a> = <a href="../h_src/57819068.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a> = NULL;
<a id=396></a>  <a href="../h_src/57819068.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644936.htm" class="variable">weak</a> = <a href="../h_src/57819068.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a> = <a href="../h_src/57819068.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644868.htm" class="variable">ephemeron</a> = NULL;
}


<a id=400></a><a  class="comments">/*</a>
<a id=401></a><a  class="comments">** mark root set and reset all gray lists, to start a new collection</a>
<a id=402></a><a  class="comments">*/</a>
<a id=403></a>static void <a href="../h_src/57818932.htm" class="function">restartcollection</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57818796.htm" class="localvar">g</a>) {
<a id=404></a>  <a href="../h_src/57819204.htm" class="function">cleargraylists</a>(<a href="../h_src/57818796.htm" class="localvar">g</a>);
<a id=405></a>  <a href="../h_src/57827024.htm" class="macro">markobject</a>(<a href="../h_src/57818796.htm" class="localvar">g</a>, <a href="../h_src/57818796.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643848.htm" class="variable">mainthread</a>);
<a id=406></a>  <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57818796.htm" class="localvar">g</a>, &amp;<a href="../h_src/57818796.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646296.htm" class="variable">l_registry</a>);
<a id=407></a>  <a href="../h_src/57821040.htm" class="function">markmt</a>(<a href="../h_src/57818796.htm" class="localvar">g</a>);
<a id=408></a>  <a href="../h_src/57820632.htm" class="function">markbeingfnz</a>(<a href="../h_src/57818796.htm" class="localvar">g</a>);  <a  class="comments">/* mark any finalizing object left from previous cycle */</a>
}

<a id=411></a><a  class="comments">/* }====================================================== */</a>


<a id=414></a><a  class="comments">/*</a>
<a id=415></a><a  class="comments">** {======================================================</a>
<a id=416></a><a  class="comments">** Traverse functions</a>
<a id=417></a><a  class="comments">** =======================================================</a>
<a id=418></a><a  class="comments">*/</a>


<a id=421></a><a  class="comments">/*</a>
<a id=422></a><a  class="comments">** Check whether object 'o' should be kept in the 'grayagain' list for</a>
<a id=423></a><a  class="comments">** post-processing by 'correctgraylist'. (It could put all old objects</a>
<a id=424></a><a  class="comments">** in the list and leave all the work to 'correctgraylist', but it is</a>
<a id=425></a><a  class="comments">** more efficient to avoid adding elements that will be removed.) Only</a>
<a id=426></a><a  class="comments">** TOUCHED1 objects need to be in the list. TOUCHED2 doesn't need to go</a>
<a id=427></a><a  class="comments">** back to a gray list, but then it must become OLD. (That is what</a>
<a id=428></a><a  class="comments">** 'correctgraylist' does when it finds a TOUCHED2 object.)</a>
<a id=429></a><a  class="comments">*/</a>
<a id=430></a>static void <a href="../h_src/57818660.htm" class="function">genlink</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57818524.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57818388.htm" class="localvar">o</a>) {
<a id=431></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57626236.htm" class="macro">isblack</a>(o));
<a id=432></a>  if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57818388.htm" class="localvar">o</a>) == <a href="../h_src/57624332.htm" class="macro">G_TOUCHED1</a>) {  <a  class="comments">/* touched in this cycle? */</a>
<a id=433></a>    <a href="../h_src/57825120.htm" class="macro">linkobjgclist</a>(<a href="../h_src/57818388.htm" class="localvar">o</a>, <a href="../h_src/57818524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>);  <a  class="comments">/* link it back in 'grayagain' */</a>
<a id=434></a>  }  <a  class="comments">/* everything else do not need to be linked back */</a>
<a id=435></a>  else if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57818388.htm" class="localvar">o</a>) == <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>)
<a id=436></a>    <a href="../h_src/57623516.htm" class="macro">changeage</a>(<a href="../h_src/57818388.htm" class="localvar">o</a>, <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>, <a href="../h_src/57624468.htm" class="macro">G_OLD</a>);  <a  class="comments">/* advance age */</a>
}


<a id=440></a><a  class="comments">/*</a>
<a id=441></a><a  class="comments">** Traverse a table with weak values and link it to proper list. During</a>
<a id=442></a><a  class="comments">** propagate phase, keep it in 'grayagain' list, to be revisited in the</a>
<a id=443></a><a  class="comments">** atomic phase. In the atomic phase, if table has any white value,</a>
<a id=444></a><a  class="comments">** put it in 'weak' list, to be cleared.</a>
<a id=445></a><a  class="comments">*/</a>
<a id=446></a>static void <a href="../h_src/57818252.htm" class="function">traverseweakvalue</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57818116.htm" class="localvar">g</a>, <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57817980.htm" class="localvar">h</a>) {
<a id=447></a>  <a href="../h_src/57506008.htm" class="type">Node</a> *<a href="../h_src/57817844.htm" class="localvar">n</a>, *<a href="../h_src/57817708.htm" class="localvar">limit</a> = <a href="../h_src/57826344.htm" class="macro">gnodelast</a>(<a href="../h_src/57817980.htm" class="localvar">h</a>);
<a id=448></a>  <a  class="comments">/* if there is array part, assume it may have white values (it is not</a>
<a id=449></a><a  class="comments">     worth traversing it now just to check) */</a>
<a id=450></a>  int <a href="../h_src/57817572.htm" class="localvar">hasclears</a> = (<a href="../h_src/57817980.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504784.htm" class="variable">alimit</a> &gt; 0);
<a id=451></a>  for (<a href="../h_src/57817844.htm" class="localvar">n</a> = <a href="../h_src/57618008.htm" class="macro">gnode</a>(<a href="../h_src/57817980.htm" class="localvar">h</a>, 0); <a href="../h_src/57817844.htm" class="localvar">n</a> &lt; <a href="../h_src/57817708.htm" class="localvar">limit</a>; <a href="../h_src/57817844.htm" class="localvar">n</a>++) {  <a  class="comments">/* traverse hash part */</a>
<a id=452></a>    if (<a href="../h_src/57530488.htm" class="macro">isempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57817844.htm" class="localvar">n</a>)))  <a  class="comments">/* entry is empty? */</a>
<a id=453></a>      <a href="../h_src/57824984.htm" class="function">clearkey</a>(<a href="../h_src/57817844.htm" class="localvar">n</a>);  <a  class="comments">/* clear its key */</a>
    else {
<a id=455></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57503968.htm" class="macro">keyisnil</a>(n));
<a id=456></a>      <a href="../h_src/57827160.htm" class="macro">markkey</a>(<a href="../h_src/57818116.htm" class="localvar">g</a>, <a href="../h_src/57817844.htm" class="localvar">n</a>);
<a id=457></a>      if (!<a href="../h_src/57817572.htm" class="localvar">hasclears</a> &amp;&amp; <a href="../h_src/57824712.htm" class="function">iscleared</a>(<a href="../h_src/57818116.htm" class="localvar">g</a>, <a href="../h_src/57827432.htm" class="macro">gcvalueN</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57817844.htm" class="localvar">n</a>))))  <a  class="comments">/* a white value? */</a>
<a id=458></a>        <a href="../h_src/57817572.htm" class="localvar">hasclears</a> = 1;  <a  class="comments">/* table will have to be cleared */</a>
    }
  }
<a id=461></a>  if (<a href="../h_src/57818116.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> == <a href="../h_src/57629500.htm" class="macro">GCSatomic</a> &amp;&amp; <a href="../h_src/57817572.htm" class="localvar">hasclears</a>)
<a id=462></a>    <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57817980.htm" class="localvar">h</a>, <a href="../h_src/57818116.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644936.htm" class="variable">weak</a>);  <a  class="comments">/* has to be cleared later */</a>
  else
<a id=464></a>    <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57817980.htm" class="localvar">h</a>, <a href="../h_src/57818116.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>);  <a  class="comments">/* must retraverse it in atomic phase */</a>
}


<a id=468></a><a  class="comments">/*</a>
<a id=469></a><a  class="comments">** Traverse an ephemeron table and link it to proper list. Returns true</a>
<a id=470></a><a  class="comments">** iff any object was marked during this traversal (which implies that</a>
<a id=471></a><a  class="comments">** convergence has to continue). During propagation phase, keep table</a>
<a id=472></a><a  class="comments">** in 'grayagain' list, to be visited again in the atomic phase. In</a>
<a id=473></a><a  class="comments">** the atomic phase, if table has any white-&gt;white entry, it has to</a>
<a id=474></a><a  class="comments">** be revisited during ephemeron convergence (as that key may turn</a>
<a id=475></a><a  class="comments">** black). Otherwise, if it has any white key, table has to be cleared</a>
<a id=476></a><a  class="comments">** (in the atomic phase). In generational mode, some tables</a>
<a id=477></a><a  class="comments">** must be kept in some gray list for post-processing; this is done</a>
<a id=478></a><a  class="comments">** by 'genlink'.</a>
<a id=479></a><a  class="comments">*/</a>
<a id=480></a>static int <a href="../h_src/57817436.htm" class="function">traverseephemeron</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57977276.htm" class="localvar">g</a>, <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57977140.htm" class="localvar">h</a>, int <a href="../h_src/57977004.htm" class="localvar">inv</a>) {
<a id=481></a>  int <a href="../h_src/57976868.htm" class="localvar">marked</a> = 0;  <a  class="comments">/* true if an object is marked in this traversal */</a>
<a id=482></a>  int <a href="../h_src/57976732.htm" class="localvar">hasclears</a> = 0;  <a  class="comments">/* true if table has white keys */</a>
<a id=483></a>  int <a href="../h_src/57976596.htm" class="localvar">hasww</a> = 0;  <a  class="comments">/* true if table has entry &quot;white-key -&gt; white-value&quot; */</a>
<a id=484></a>  unsigned int <a href="../h_src/57976460.htm" class="localvar">i</a>;
<a id=485></a>  unsigned int <a href="../h_src/57976324.htm" class="localvar">asize</a> = <a href="../h_src/57616172.htm" class="function">luaH_realasize</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>);
<a id=486></a>  unsigned int <a href="../h_src/57976188.htm" class="localvar">nsize</a> = <a href="../h_src/57502200.htm" class="macro">sizenode</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>);
<a id=487></a>  <a  class="comments">/* traverse array part */</a>
<a id=488></a>  for (<a href="../h_src/57976460.htm" class="localvar">i</a> = 0; <a href="../h_src/57976460.htm" class="localvar">i</a> &lt; <a href="../h_src/57976324.htm" class="localvar">asize</a>; <a href="../h_src/57976460.htm" class="localvar">i</a>++) {
<a id=489></a>    if (<a href="../h_src/57827704.htm" class="macro">valiswhite</a>(&amp;<a href="../h_src/57977140.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504716.htm" class="variable">array</a>[<a href="../h_src/57976460.htm" class="localvar">i</a>])) {
<a id=490></a>      <a href="../h_src/57976868.htm" class="localvar">marked</a> = 1;
<a id=491></a>      <a href="../h_src/57826752.htm" class="function">reallymarkobject</a>(<a href="../h_src/57977276.htm" class="localvar">g</a>, <a href="../h_src/57527496.htm" class="macro">gcvalue</a>(&amp;<a href="../h_src/57977140.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504716.htm" class="variable">array</a>[<a href="../h_src/57976460.htm" class="localvar">i</a>]));
    }
  }
<a id=494></a>  <a  class="comments">/* traverse hash part; if 'inv', traverse descending</a>
<a id=495></a><a  class="comments">     (see 'convergeephemerons') */</a>
<a id=496></a>  for (<a href="../h_src/57976460.htm" class="localvar">i</a> = 0; <a href="../h_src/57976460.htm" class="localvar">i</a> &lt; <a href="../h_src/57976188.htm" class="localvar">nsize</a>; <a href="../h_src/57976460.htm" class="localvar">i</a>++) {
<a id=497></a>    <a href="../h_src/57506008.htm" class="type">Node</a> *<a href="../h_src/57976052.htm" class="localvar">n</a> = <a href="../h_src/57977004.htm" class="localvar">inv</a> ? <a href="../h_src/57618008.htm" class="macro">gnode</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>, <a href="../h_src/57976188.htm" class="localvar">nsize</a> - 1 - <a href="../h_src/57976460.htm" class="localvar">i</a>) : <a href="../h_src/57618008.htm" class="macro">gnode</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>, <a href="../h_src/57976460.htm" class="localvar">i</a>);
<a id=498></a>    if (<a href="../h_src/57530488.htm" class="macro">isempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57976052.htm" class="localvar">n</a>)))  <a  class="comments">/* entry is empty? */</a>
<a id=499></a>      <a href="../h_src/57824984.htm" class="function">clearkey</a>(<a href="../h_src/57976052.htm" class="localvar">n</a>);  <a  class="comments">/* clear its key */</a>
<a id=500></a>    else if (<a href="../h_src/57824712.htm" class="function">iscleared</a>(<a href="../h_src/57977276.htm" class="localvar">g</a>, <a href="../h_src/57502880.htm" class="macro">gckeyN</a>(<a href="../h_src/57976052.htm" class="localvar">n</a>))) {  <a  class="comments">/* key is not marked (yet)? */</a>
<a id=501></a>      <a href="../h_src/57976732.htm" class="localvar">hasclears</a> = 1;  <a  class="comments">/* table must be cleared */</a>
<a id=502></a>      if (<a href="../h_src/57827704.htm" class="macro">valiswhite</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57976052.htm" class="localvar">n</a>)))  <a  class="comments">/* value not marked yet? */</a><a href="../h_src/57528040.htm" class="variable">marked</a> yet? */
<a id=503></a>        <a href="../h_src/57976596.htm" class="localvar">hasww</a> = 1;  <a  class="comments">/* white-white entry */</a>
    }
<a id=505></a>    else if (<a href="../h_src/57827704.htm" class="macro">valiswhite</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57976052.htm" class="localvar">n</a>))) {  <a  class="comments">/* value not marked yet? */</a><a href="../h_src/57528040.htm" class="variable">marked</a> yet? */
<a id=506></a>      <a href="../h_src/57976868.htm" class="localvar">marked</a> = 1;
<a id=507></a>      <a href="../h_src/57826752.htm" class="function">reallymarkobject</a>(<a href="../h_src/57977276.htm" class="localvar">g</a>, <a href="../h_src/57527496.htm" class="macro">gcvalue</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57976052.htm" class="localvar">n</a>)));  <a  class="comments">/* mark it now */</a>
    }
  }
<a id=510></a>  <a  class="comments">/* link table into proper list */</a>
<a id=511></a>  if (<a href="../h_src/57977276.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> == <a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>)
<a id=512></a>    <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>, <a href="../h_src/57977276.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>);  <a  class="comments">/* must retraverse it in atomic phase */</a>
<a id=513></a>  else if (<a href="../h_src/57976596.htm" class="localvar">hasww</a>)  <a  class="comments">/* table has white-&gt;white entries? */</a>
<a id=514></a>    <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>, <a href="../h_src/57977276.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644868.htm" class="variable">ephemeron</a>);  <a  class="comments">/* have to propagate again */</a>
<a id=515></a>  else if (<a href="../h_src/57976732.htm" class="localvar">hasclears</a>)  <a  class="comments">/* table has white keys? */</a>
<a id=516></a>    <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>, <a href="../h_src/57977276.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a>);  <a  class="comments">/* may have to clean white keys */</a>
  else
<a id=518></a>    <a href="../h_src/57818660.htm" class="function">genlink</a>(<a href="../h_src/57977276.htm" class="localvar">g</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/57977140.htm" class="localvar">h</a>));  <a  class="comments">/* check whether collector still needs to see it */</a>
<a id=519></a>  return <a href="../h_src/57976868.htm" class="localvar">marked</a>;
}


<a id=523></a>static void <a href="../h_src/57975916.htm" class="function">traversestrongtable</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57975780.htm" class="localvar">g</a>, <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57975644.htm" class="localvar">h</a>) {
<a id=524></a>  <a href="../h_src/57506008.htm" class="type">Node</a> *<a href="../h_src/57975508.htm" class="localvar">n</a>, *<a href="../h_src/57975372.htm" class="localvar">limit</a> = <a href="../h_src/57826344.htm" class="macro">gnodelast</a>(<a href="../h_src/57975644.htm" class="localvar">h</a>);
<a id=525></a>  unsigned int <a href="../h_src/57975236.htm" class="localvar">i</a>;
<a id=526></a>  unsigned int <a href="../h_src/57975100.htm" class="localvar">asize</a> = <a href="../h_src/57616172.htm" class="function">luaH_realasize</a>(<a href="../h_src/57975644.htm" class="localvar">h</a>);
<a id=527></a>  for (<a href="../h_src/57975236.htm" class="localvar">i</a> = 0; <a href="../h_src/57975236.htm" class="localvar">i</a> &lt; <a href="../h_src/57975100.htm" class="localvar">asize</a>; <a href="../h_src/57975236.htm" class="localvar">i</a>++)  <a  class="comments">/* traverse array part */</a>
<a id=528></a>    <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57975780.htm" class="localvar">g</a>, &amp;<a href="../h_src/57975644.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504716.htm" class="variable">array</a>[<a href="../h_src/57975236.htm" class="localvar">i</a>]);
<a id=529></a>  for (<a href="../h_src/57975508.htm" class="localvar">n</a> = <a href="../h_src/57618008.htm" class="macro">gnode</a>(<a href="../h_src/57975644.htm" class="localvar">h</a>, 0); <a href="../h_src/57975508.htm" class="localvar">n</a> &lt; <a href="../h_src/57975372.htm" class="localvar">limit</a>; <a href="../h_src/57975508.htm" class="localvar">n</a>++) {  <a  class="comments">/* traverse hash part */</a>
<a id=530></a>    if (<a href="../h_src/57530488.htm" class="macro">isempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57975508.htm" class="localvar">n</a>)))  <a  class="comments">/* entry is empty? */</a>
<a id=531></a>      <a href="../h_src/57824984.htm" class="function">clearkey</a>(<a href="../h_src/57975508.htm" class="localvar">n</a>);  <a  class="comments">/* clear its key */</a>
    else {
<a id=533></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57503968.htm" class="macro">keyisnil</a>(n));
<a id=534></a>      <a href="../h_src/57827160.htm" class="macro">markkey</a>(<a href="../h_src/57975780.htm" class="localvar">g</a>, <a href="../h_src/57975508.htm" class="localvar">n</a>);
<a id=535></a>      <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57975780.htm" class="localvar">g</a>, <a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57975508.htm" class="localvar">n</a>));
    }
  }
<a id=538></a>  <a href="../h_src/57818660.htm" class="function">genlink</a>(<a href="../h_src/57975780.htm" class="localvar">g</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/57975644.htm" class="localvar">h</a>));
}


<a id=542></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57974964.htm" class="function">traversetable</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57974828.htm" class="localvar">g</a>, <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57974692.htm" class="localvar">h</a>) {
<a id=543></a>  const char *<a href="../h_src/57974556.htm" class="localvar">weakkey</a>, *<a href="../h_src/57974420.htm" class="localvar">weakvalue</a>;
<a id=544></a>  const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57974284.htm" class="localvar">mode</a> = <a href="../h_src/57498664.htm" class="macro">gfasttm</a>(<a href="../h_src/57974828.htm" class="localvar">g</a>, <a href="../h_src/57974692.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504444.htm" class="variable">metatable</a>, <a href="../h_src/57500704.htm" class="variable">TM_MODE</a>);
<a id=545></a>  <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57974828.htm" class="localvar">g</a>, <a href="../h_src/57974692.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504444.htm" class="variable">metatable</a>);
<a id=546></a>  if (<a href="../h_src/57974284.htm" class="localvar">mode</a> &amp;&amp; <a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/57974284.htm" class="localvar">mode</a>) &amp;&amp;  <a  class="comments">/* is there a weak mode? */</a>
<a id=547></a>      (<a href="../h_src/57547624.htm" class="macro">cast_void</a>(<a href="../h_src/57974556.htm" class="localvar">weakkey</a> = <a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57522532.htm" class="macro">svalue</a>(<a href="../h_src/57974284.htm" class="localvar">mode</a>), 'k')),
<a id=548></a>       <a href="../h_src/57547624.htm" class="macro">cast_void</a>(<a href="../h_src/57974420.htm" class="localvar">weakvalue</a> = <a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57522532.htm" class="macro">svalue</a>(<a href="../h_src/57974284.htm" class="localvar">mode</a>), 'v')),
<a id=549></a>       (<a href="../h_src/57974556.htm" class="localvar">weakkey</a> || <a href="../h_src/57974420.htm" class="localvar">weakvalue</a>))) {  <a  class="comments">/* is really weak? */</a>
<a id=550></a>    if (!<a href="../h_src/57974556.htm" class="localvar">weakkey</a>)  <a  class="comments">/* strong keys? */</a>
<a id=551></a>      <a href="../h_src/57818252.htm" class="function">traverseweakvalue</a>(<a href="../h_src/57974828.htm" class="localvar">g</a>, <a href="../h_src/57974692.htm" class="localvar">h</a>);
<a id=552></a>    else if (!<a href="../h_src/57974420.htm" class="localvar">weakvalue</a>)  <a  class="comments">/* strong values? */</a>
<a id=553></a>      <a href="../h_src/57817436.htm" class="function">traverseephemeron</a>(<a href="../h_src/57974828.htm" class="localvar">g</a>, <a href="../h_src/57974692.htm" class="localvar">h</a>, 0);
<a id=554></a>    else  <a  class="comments">/* all weak */</a>
<a id=555></a>      <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57974692.htm" class="localvar">h</a>, <a href="../h_src/57974828.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a>);  <a  class="comments">/* nothing to traverse now */</a>
  }
<a id=557></a>  else  <a  class="comments">/* not weak */</a>
<a id=558></a>    <a href="../h_src/57975916.htm" class="function">traversestrongtable</a>(<a href="../h_src/57974828.htm" class="localvar">g</a>, <a href="../h_src/57974692.htm" class="localvar">h</a>);
<a id=559></a>  return 1 + <a href="../h_src/57974692.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504784.htm" class="variable">alimit</a> + 2 * <a href="../h_src/57617328.htm" class="macro">allocsizenode</a>(<a href="../h_src/57974692.htm" class="localvar">h</a>);
}


<a id=563></a>static int <a href="../h_src/57974148.htm" class="function">traverseudata</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57974012.htm" class="localvar">g</a>, <a href="../h_src/57519268.htm" class="type">Udata</a> *<a href="../h_src/57973876.htm" class="localvar">u</a>) {
<a id=564></a>  int <a href="../h_src/57973740.htm" class="localvar">i</a>;
<a id=565></a>  <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57974012.htm" class="localvar">g</a>, <a href="../h_src/57973876.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519540.htm" class="variable">metatable</a>);  <a  class="comments">/* mark its metatable */</a>
<a id=566></a>  for (<a href="../h_src/57973740.htm" class="localvar">i</a> = 0; <a href="../h_src/57973740.htm" class="localvar">i</a> &lt; <a href="../h_src/57973876.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519948.htm" class="variable">nuvalue</a>; <a href="../h_src/57973740.htm" class="localvar">i</a>++)
<a id=567></a>    <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57974012.htm" class="localvar">g</a>, &amp;<a href="../h_src/57973876.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519336.htm" class="variable">uv</a>[<a href="../h_src/57973740.htm" class="localvar">i</a>].<a href="../h_src/57520764.htm" class="variable">uv</a>);
<a id=568></a>  <a href="../h_src/57818660.htm" class="function">genlink</a>(<a href="../h_src/57974012.htm" class="localvar">g</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/57973876.htm" class="localvar">u</a>));
<a id=569></a>  return 1 + <a href="../h_src/57973876.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519948.htm" class="variable">nuvalue</a>;
}


<a id=573></a><a  class="comments">/*</a>
<a id=574></a><a  class="comments">** Traverse a prototype. (While a prototype is being build, its</a>
<a id=575></a><a  class="comments">** arrays can be larger than needed; the extra slots are filled with</a>
<a id=576></a><a  class="comments">** NULL, so the use of 'markobjectN')</a>
<a id=577></a><a  class="comments">*/</a>
<a id=578></a>static int <a href="../h_src/57973604.htm" class="function">traverseproto</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57973468.htm" class="localvar">g</a>, <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57973332.htm" class="localvar">f</a>) {
<a id=579></a>  int <a href="../h_src/57973196.htm" class="localvar">i</a>;
<a id=580></a>  <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57973468.htm" class="localvar">g</a>, <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>);
<a id=581></a>  for (<a href="../h_src/57973196.htm" class="localvar">i</a> = 0; <a href="../h_src/57973196.htm" class="localvar">i</a> &lt; <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515664.htm" class="variable">sizek</a>; <a href="../h_src/57973196.htm" class="localvar">i</a>++)  <a  class="comments">/* mark literals */</a>
<a id=582></a>    <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57973468.htm" class="localvar">g</a>, &amp;<a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57973196.htm" class="localvar">i</a>]);
<a id=583></a>  for (<a href="../h_src/57973196.htm" class="localvar">i</a> = 0; <a href="../h_src/57973196.htm" class="localvar">i</a> &lt; <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515732.htm" class="variable">sizeupvalues</a>; <a href="../h_src/57973196.htm" class="localvar">i</a>++)  <a  class="comments">/* mark upvalue names */</a>
<a id=584></a>    <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57973468.htm" class="localvar">g</a>, <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>[<a href="../h_src/57973196.htm" class="localvar">i</a>].<a href="../h_src/57517364.htm" class="variable">name</a>);
<a id=585></a>  for (<a href="../h_src/57973196.htm" class="localvar">i</a> = 0; <a href="../h_src/57973196.htm" class="localvar">i</a> &lt; <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515460.htm" class="variable">sizep</a>; <a href="../h_src/57973196.htm" class="localvar">i</a>++)  <a  class="comments">/* mark nested protos */</a>
<a id=586></a>    <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57973468.htm" class="localvar">g</a>, <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514576.htm" class="variable">p</a>[<a href="../h_src/57973196.htm" class="localvar">i</a>]);
<a id=587></a>  for (<a href="../h_src/57973196.htm" class="localvar">i</a> = 0; <a href="../h_src/57973196.htm" class="localvar">i</a> &lt; <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515392.htm" class="variable">sizelocvars</a>; <a href="../h_src/57973196.htm" class="localvar">i</a>++)  <a  class="comments">/* mark local-variable names */</a>
<a id=588></a>    <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57973468.htm" class="localvar">g</a>, <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514032.htm" class="variable">locvars</a>[<a href="../h_src/57973196.htm" class="localvar">i</a>].<a href="../h_src/57516888.htm" class="variable">varname</a>);
<a id=589></a>  return 1 + <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515664.htm" class="variable">sizek</a> + <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515732.htm" class="variable">sizeupvalues</a> + <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515460.htm" class="variable">sizep</a> + <a href="../h_src/57973332.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515392.htm" class="variable">sizelocvars</a>;
}


<a id=593></a>static int <a href="../h_src/57973060.htm" class="function">traverseCclosure</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57972924.htm" class="localvar">g</a>, <a href="../h_src/57508728.htm" class="type">CClosure</a> *<a href="../h_src/57972788.htm" class="localvar">cl</a>) {
<a id=594></a>  int <a href="../h_src/57972652.htm" class="localvar">i</a>;
<a id=595></a>  for (<a href="../h_src/57972652.htm" class="localvar">i</a> = 0; <a href="../h_src/57972652.htm" class="localvar">i</a> &lt; <a href="../h_src/57972788.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57509068.htm" class="variable">nupvalues</a>; <a href="../h_src/57972652.htm" class="localvar">i</a>++)  <a  class="comments">/* mark its upvalues */</a>
<a id=596></a>    <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57972924.htm" class="localvar">g</a>, &amp;<a href="../h_src/57972788.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508796.htm" class="variable">upvalue</a>[<a href="../h_src/57972652.htm" class="localvar">i</a>]);
<a id=597></a>  return 1 + <a href="../h_src/57972788.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57509068.htm" class="variable">nupvalues</a>;
}

<a id=600></a><a  class="comments">/*</a>
<a id=601></a><a  class="comments">** Traverse a Lua closure, marking its prototype and its upvalues.</a>
<a id=602></a><a  class="comments">** (Both can be NULL while closure is being created.)</a>
<a id=603></a><a  class="comments">*/</a>
<a id=604></a>static int <a href="../h_src/57972516.htm" class="function">traverseLclosure</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57972380.htm" class="localvar">g</a>, <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/57972244.htm" class="localvar">cl</a>) {
<a id=605></a>  int <a href="../h_src/57972108.htm" class="localvar">i</a>;
<a id=606></a>  <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57972380.htm" class="localvar">g</a>, <a href="../h_src/57972244.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>);  <a  class="comments">/* mark its prototype */</a>
<a id=607></a>  for (<a href="../h_src/57972108.htm" class="localvar">i</a> = 0; <a href="../h_src/57972108.htm" class="localvar">i</a> &lt; <a href="../h_src/57972244.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508320.htm" class="variable">nupvalues</a>; <a href="../h_src/57972108.htm" class="localvar">i</a>++) {  <a  class="comments">/* visit its upvalues */</a>
<a id=608></a>    <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/57971972.htm" class="localvar">uv</a> = <a href="../h_src/57972244.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57972108.htm" class="localvar">i</a>];
<a id=609></a>    <a href="../h_src/57826888.htm" class="macro">markobjectN</a>(<a href="../h_src/57972380.htm" class="localvar">g</a>, <a href="../h_src/57971972.htm" class="localvar">uv</a>);  <a  class="comments">/* mark upvalue */</a>
  }
<a id=611></a>  return 1 + <a href="../h_src/57972244.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508320.htm" class="variable">nupvalues</a>;
}


<a id=615></a><a  class="comments">/*</a>
<a id=616></a><a  class="comments">** Traverse a thread, marking the elements in the stack up to its top</a>
<a id=617></a><a  class="comments">** and cleaning the rest of the stack in the final traversal. That</a>
<a id=618></a><a  class="comments">** ensures that the entire stack have valid (non-dead) objects.</a>
<a id=619></a><a  class="comments">** Threads have no barriers. In gen. mode, old threads must be visited</a>
<a id=620></a><a  class="comments">** at every cycle, because they might point to young objects.  In inc.</a>
<a id=621></a><a  class="comments">** mode, the thread can still be modified before the end of the cycle,</a>
<a id=622></a><a  class="comments">** and therefore it must be visited again in the atomic phase. To ensure</a>
<a id=623></a><a  class="comments">** these visits, threads must return to a gray list if they are not new</a>
<a id=624></a><a  class="comments">** (which can only happen in generational mode) or if the traverse is in</a>
<a id=625></a><a  class="comments">** the propagate phase (which can only happen in incremental mode).</a>
<a id=626></a><a  class="comments">*/</a>
<a id=627></a>static int <a href="../h_src/57971836.htm" class="function">traversethread</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57971700.htm" class="localvar">g</a>, <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57971564.htm" class="localvar">th</a>) {
<a id=628></a>  <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/57971428.htm" class="localvar">uv</a>;
<a id=629></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57971292.htm" class="localvar">o</a> = <a href="../h_src/57971564.htm" class="localvar">th</a>-&gt;<a href="../h_src/57642284.htm" class="variable">stack</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
<a id=630></a>  if (<a href="../h_src/57623652.htm" class="macro">isold</a>(<a href="../h_src/57971564.htm" class="localvar">th</a>) || <a href="../h_src/57971700.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> == <a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>)
<a id=631></a>    <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57971564.htm" class="localvar">th</a>, <a href="../h_src/57971700.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>);  <a  class="comments">/* insert into 'grayagain' list */</a>
<a id=632></a>  if (<a href="../h_src/57971292.htm" class="localvar">o</a> == NULL)
<a id=633></a>    return 1;  <a  class="comments">/* stack not completely built yet */</a>
<a id=634></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;gcstate == <a href="../h_src/57629500.htm" class="macro">GCSatomic</a> ||
<a id=635></a>             th-&gt;openupval == NULL || <a href="../h_src/57631812.htm" class="macro">isintwups</a>(th));
<a id=636></a>  for (; <a href="../h_src/57971292.htm" class="localvar">o</a> &lt; <a href="../h_src/57971564.htm" class="localvar">th</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>; <a href="../h_src/57971292.htm" class="localvar">o</a>++)  <a  class="comments">/* mark live elements in the stack */</a>
<a id=637></a>    <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57971700.htm" class="localvar">g</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57971292.htm" class="localvar">o</a>));
<a id=638></a>  for (<a href="../h_src/57971428.htm" class="localvar">uv</a> = <a href="../h_src/57971564.htm" class="localvar">th</a>-&gt;<a href="../h_src/57642216.htm" class="variable">openupval</a>; <a href="../h_src/57971428.htm" class="localvar">uv</a> != NULL; <a href="../h_src/57971428.htm" class="localvar">uv</a> = <a href="../h_src/57971428.htm" class="localvar">uv</a>-&gt;<a href="../h_src/57509680.htm" class="variable">u</a>.<a href="../h_src/57509884.htm" class="variable">open</a>.<a href="../h_src/57510224.htm" class="variable">next</a>)
<a id=639></a>    <a href="../h_src/57827024.htm" class="macro">markobject</a>(<a href="../h_src/57971700.htm" class="localvar">g</a>, <a href="../h_src/57971428.htm" class="localvar">uv</a>);  <a  class="comments">/* open upvalues cannot be collected */</a>
<a id=640></a>  if (<a href="../h_src/57971700.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> == <a href="../h_src/57629500.htm" class="macro">GCSatomic</a>) {  <a  class="comments">/* final traversal? */</a>
<a id=641></a>    for (; <a href="../h_src/57971292.htm" class="localvar">o</a> &lt; <a href="../h_src/57971564.htm" class="localvar">th</a>-&gt;<a href="../h_src/57642352.htm" class="variable">stack_last</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + <a href="../h_src/57652688.htm" class="macro">EXTRA_STACK</a>; <a href="../h_src/57971292.htm" class="localvar">o</a>++)
<a id=642></a>      <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57971292.htm" class="localvar">o</a>));  <a  class="comments">/* clear dead stack slice */</a>
<a id=643></a>    <a  class="comments">/* 'remarkupvals' may have removed thread from 'twups' list */</a>
<a id=644></a>    if (!<a href="../h_src/57631812.htm" class="macro">isintwups</a>(<a href="../h_src/57971564.htm" class="localvar">th</a>) &amp;&amp; <a href="../h_src/57971564.htm" class="localvar">th</a>-&gt;<a href="../h_src/57642216.htm" class="variable">openupval</a> != NULL) {
<a id=645></a>      <a href="../h_src/57971564.htm" class="localvar">th</a>-&gt;<a href="../h_src/57642012.htm" class="variable">twups</a> = <a href="../h_src/57971700.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643984.htm" class="variable">twups</a>;  <a  class="comments">/* link it back to the list */</a>
<a id=646></a>      <a href="../h_src/57971700.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643984.htm" class="variable">twups</a> = <a href="../h_src/57971564.htm" class="localvar">th</a>;
    }
  }
<a id=649></a>  else if (!<a href="../h_src/57971700.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645616.htm" class="variable">gcemergency</a>)
<a id=650></a>    <a href="../h_src/57632696.htm" class="function">luaD_shrinkstack</a>(<a href="../h_src/57971564.htm" class="localvar">th</a>); <a  class="comments">/* do not change stack in emergency cycle */</a>
<a id=651></a>  return 1 + <a href="../h_src/57652416.htm" class="macro">stacksize</a>(<a href="../h_src/57971564.htm" class="localvar">th</a>);
}


<a id=655></a><a  class="comments">/*</a>
<a id=656></a><a  class="comments">** traverse one gray object, turning it to black.</a>
<a id=657></a><a  class="comments">*/</a>
<a id=658></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57971156.htm" class="function">propagatemark</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57971020.htm" class="localvar">g</a>) {
<a id=659></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57970884.htm" class="localvar">o</a> = <a href="../h_src/57971020.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645072.htm" class="variable">gray</a>;
<a id=660></a>  <a href="../h_src/57625284.htm" class="macro">nw2black</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>);
<a id=661></a>  <a href="../h_src/57971020.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645072.htm" class="variable">gray</a> = *<a href="../h_src/57826208.htm" class="function">getgclist</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>);  <a  class="comments">/* remove from 'gray' list */</a>
<a id=662></a>  switch (<a href="../h_src/57970884.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a>) {
<a id=663></a>    case <a href="../h_src/57507436.htm" class="macro">LUA_VTABLE</a>: return <a href="../h_src/57974964.htm" class="function">traversetable</a>(<a href="../h_src/57971020.htm" class="localvar">g</a>, <a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>));
<a id=664></a>    case <a href="../h_src/57521988.htm" class="macro">LUA_VUSERDATA</a>: return <a href="../h_src/57974148.htm" class="function">traverseudata</a>(<a href="../h_src/57971020.htm" class="localvar">g</a>, <a href="../h_src/57639972.htm" class="macro">gco2u</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>));
<a id=665></a>    case <a href="../h_src/57513624.htm" class="macro">LUA_VLCL</a>: return <a href="../h_src/57972516.htm" class="function">traverseLclosure</a>(<a href="../h_src/57971020.htm" class="localvar">g</a>, <a href="../h_src/57639836.htm" class="macro">gco2lcl</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>));
<a id=666></a>    case <a href="../h_src/57513352.htm" class="macro">LUA_VCCL</a>: return <a href="../h_src/57973060.htm" class="function">traverseCclosure</a>(<a href="../h_src/57971020.htm" class="localvar">g</a>, <a href="../h_src/57639700.htm" class="macro">gco2ccl</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>));
<a id=667></a>    case <a href="../h_src/57517636.htm" class="macro">LUA_VPROTO</a>: return <a href="../h_src/57973604.htm" class="function">traverseproto</a>(<a href="../h_src/57971020.htm" class="localvar">g</a>, <a href="../h_src/57639292.htm" class="macro">gco2p</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>));
<a id=668></a>    case <a href="../h_src/57528992.htm" class="macro">LUA_VTHREAD</a>: return <a href="../h_src/57971836.htm" class="function">traversethread</a>(<a href="../h_src/57971020.htm" class="localvar">g</a>, <a href="../h_src/57639156.htm" class="macro">gco2th</a>(<a href="../h_src/57970884.htm" class="localvar">o</a>));
<a id=669></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0); return 0;
  }
}


<a id=674></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57970748.htm" class="function">propagateall</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57970612.htm" class="localvar">g</a>) {
<a id=675></a>  <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57970476.htm" class="localvar">tot</a> = 0;
<a id=676></a>  while (<a href="../h_src/57970612.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645072.htm" class="variable">gray</a>)
<a id=677></a>    <a href="../h_src/57970476.htm" class="localvar">tot</a> += <a href="../h_src/57971156.htm" class="function">propagatemark</a>(<a href="../h_src/57970612.htm" class="localvar">g</a>);
<a id=678></a>  return <a href="../h_src/57970476.htm" class="localvar">tot</a>;
}


<a id=682></a><a  class="comments">/*</a>
<a id=683></a><a  class="comments">** Traverse all ephemeron tables propagating marks from keys to values.</a>
<a id=684></a><a  class="comments">** Repeat until it converges, that is, nothing new is marked. 'dir'</a>
<a id=685></a><a  class="comments">** inverts the direction of the traversals, trying to speed up</a>
<a id=686></a><a  class="comments">** convergence on chains in the same table.</a>
<a id=687></a><a  class="comments">**</a>
<a id=688></a><a  class="comments">*/</a>
<a id=689></a>static void <a href="../h_src/57970340.htm" class="function">convergeephemerons</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57970204.htm" class="localvar">g</a>) {
<a id=690></a>  int <a href="../h_src/57970068.htm" class="localvar">changed</a>;
<a id=691></a>  int <a href="../h_src/57969932.htm" class="localvar">dir</a> = 0;
  do {
<a id=693></a>    <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57969796.htm" class="localvar">w</a>;
<a id=694></a>    <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57969660.htm" class="localvar">next</a> = <a href="../h_src/57970204.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644868.htm" class="variable">ephemeron</a>;  <a  class="comments">/* get ephemeron list */</a>
<a id=695></a>    <a href="../h_src/57970204.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644868.htm" class="variable">ephemeron</a> = NULL;  <a  class="comments">/* tables may return to this list when traversed */</a>
<a id=696></a>    <a href="../h_src/57970068.htm" class="localvar">changed</a> = 0;
<a id=697></a>    while ((<a href="../h_src/57969796.htm" class="localvar">w</a> = <a href="../h_src/57969660.htm" class="localvar">next</a>) != NULL) {  <a  class="comments">/* for each ephemeron table */</a>
<a id=698></a>      <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57969524.htm" class="localvar">h</a> = <a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57969796.htm" class="localvar">w</a>);
<a id=699></a>      <a href="../h_src/57969660.htm" class="localvar">next</a> = <a href="../h_src/57969524.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504376.htm" class="variable">gclist</a>;  <a  class="comments">/* list is rebuilt during loop */</a>
<a id=700></a>      <a href="../h_src/57625284.htm" class="macro">nw2black</a>(<a href="../h_src/57969524.htm" class="localvar">h</a>);  <a  class="comments">/* out of the list (for now) */</a>
<a id=701></a>      if (<a href="../h_src/57817436.htm" class="function">traverseephemeron</a>(<a href="../h_src/57970204.htm" class="localvar">g</a>, <a href="../h_src/57969524.htm" class="localvar">h</a>, <a href="../h_src/57969932.htm" class="localvar">dir</a>)) {  <a  class="comments">/* marked some value? */</a>
<a id=702></a>        <a href="../h_src/57970748.htm" class="function">propagateall</a>(<a href="../h_src/57970204.htm" class="localvar">g</a>);  <a  class="comments">/* propagate changes */</a>
<a id=703></a>        <a href="../h_src/57970068.htm" class="localvar">changed</a> = 1;  <a  class="comments">/* will have to revisit all ephemeron tables */</a>
      }
    }
<a id=706></a>    <a href="../h_src/57969932.htm" class="localvar">dir</a> = !<a href="../h_src/57969932.htm" class="localvar">dir</a>;  <a  class="comments">/* invert direction next time */</a>
<a id=707></a>  } while (<a href="../h_src/57970068.htm" class="localvar">changed</a>);  <a  class="comments">/* repeat until no more changes */</a>
}

<a id=710></a><a  class="comments">/* }====================================================== */</a>


<a id=713></a><a  class="comments">/*</a>
<a id=714></a><a  class="comments">** {======================================================</a>
<a id=715></a><a  class="comments">** Sweep Functions</a>
<a id=716></a><a  class="comments">** =======================================================</a>
<a id=717></a><a  class="comments">*/</a>


<a id=720></a><a  class="comments">/*</a>
<a id=721></a><a  class="comments">** clear entries with unmarked keys from all weaktables in list 'l'</a>
<a id=722></a><a  class="comments">*/</a>
<a id=723></a>static void <a href="../h_src/57969388.htm" class="function">clearbykeys</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57969252.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57969116.htm" class="localvar">l</a>) {
<a id=724></a>  for (; <a href="../h_src/57969116.htm" class="localvar">l</a>; <a href="../h_src/57969116.htm" class="localvar">l</a> = <a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57969116.htm" class="localvar">l</a>)-&gt;<a href="../h_src/57504376.htm" class="variable">gclist</a>) {
<a id=725></a>    <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57968980.htm" class="localvar">h</a> = <a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57969116.htm" class="localvar">l</a>);
<a id=726></a>    <a href="../h_src/57506008.htm" class="type">Node</a> *<a href="../h_src/57968844.htm" class="localvar">limit</a> = <a href="../h_src/57826344.htm" class="macro">gnodelast</a>(<a href="../h_src/57968980.htm" class="localvar">h</a>);
<a id=727></a>    <a href="../h_src/57506008.htm" class="type">Node</a> *<a href="../h_src/57968708.htm" class="localvar">n</a>;
<a id=728></a>    for (<a href="../h_src/57968708.htm" class="localvar">n</a> = <a href="../h_src/57618008.htm" class="macro">gnode</a>(<a href="../h_src/57968980.htm" class="localvar">h</a>, 0); <a href="../h_src/57968708.htm" class="localvar">n</a> &lt; <a href="../h_src/57968844.htm" class="localvar">limit</a>; <a href="../h_src/57968708.htm" class="localvar">n</a>++) {
<a id=729></a>      if (<a href="../h_src/57824712.htm" class="function">iscleared</a>(<a href="../h_src/57969252.htm" class="localvar">g</a>, <a href="../h_src/57502880.htm" class="macro">gckeyN</a>(<a href="../h_src/57968708.htm" class="localvar">n</a>)))  <a  class="comments">/* unmarked key? */</a>
<a id=730></a>        <a href="../h_src/57530216.htm" class="macro">setempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57968708.htm" class="localvar">n</a>));  <a  class="comments">/* remove entry */</a>
<a id=731></a>      if (<a href="../h_src/57530488.htm" class="macro">isempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57968708.htm" class="localvar">n</a>)))  <a  class="comments">/* is entry empty? */</a>
<a id=732></a>        <a href="../h_src/57824984.htm" class="function">clearkey</a>(<a href="../h_src/57968708.htm" class="localvar">n</a>);  <a  class="comments">/* clear its key */</a>
    }
  }
}


<a id=738></a><a  class="comments">/*</a>
<a id=739></a><a  class="comments">** clear entries with unmarked values from all weaktables in list 'l' up</a>
<a id=740></a><a  class="comments">** to element 'f'</a>
<a id=741></a><a  class="comments">*/</a>
<a id=742></a>static void <a href="../h_src/57968572.htm" class="function">clearbyvalues</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57968436.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57968300.htm" class="localvar">l</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57968164.htm" class="localvar">f</a>) {
<a id=743></a>  for (; <a href="../h_src/57968300.htm" class="localvar">l</a> != <a href="../h_src/57968164.htm" class="localvar">f</a>; <a href="../h_src/57968300.htm" class="localvar">l</a> = <a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57968300.htm" class="localvar">l</a>)-&gt;<a href="../h_src/57504376.htm" class="variable">gclist</a>) {
<a id=744></a>    <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57968028.htm" class="localvar">h</a> = <a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57968300.htm" class="localvar">l</a>);
<a id=745></a>    <a href="../h_src/57506008.htm" class="type">Node</a> *<a href="../h_src/57967892.htm" class="localvar">n</a>, *<a href="../h_src/57967756.htm" class="localvar">limit</a> = <a href="../h_src/57826344.htm" class="macro">gnodelast</a>(<a href="../h_src/57968028.htm" class="localvar">h</a>);
<a id=746></a>    unsigned int <a href="../h_src/57967620.htm" class="localvar">i</a>;
<a id=747></a>    unsigned int <a href="../h_src/57967484.htm" class="localvar">asize</a> = <a href="../h_src/57616172.htm" class="function">luaH_realasize</a>(<a href="../h_src/57968028.htm" class="localvar">h</a>);
<a id=748></a>    for (<a href="../h_src/57967620.htm" class="localvar">i</a> = 0; <a href="../h_src/57967620.htm" class="localvar">i</a> &lt; <a href="../h_src/57967484.htm" class="localvar">asize</a>; <a href="../h_src/57967620.htm" class="localvar">i</a>++) {
<a id=749></a>      <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57967348.htm" class="localvar">o</a> = &amp;<a href="../h_src/57968028.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504716.htm" class="variable">array</a>[<a href="../h_src/57967620.htm" class="localvar">i</a>];
<a id=750></a>      if (<a href="../h_src/57824712.htm" class="function">iscleared</a>(<a href="../h_src/57968436.htm" class="localvar">g</a>, <a href="../h_src/57827432.htm" class="macro">gcvalueN</a>(<a href="../h_src/57967348.htm" class="localvar">o</a>)))  <a  class="comments">/* value was collected? */</a>
<a id=751></a>        <a href="../h_src/57530216.htm" class="macro">setempty</a>(<a href="../h_src/57967348.htm" class="localvar">o</a>);  <a  class="comments">/* remove entry */</a>
    }
<a id=753></a>    for (<a href="../h_src/57967892.htm" class="localvar">n</a> = <a href="../h_src/57618008.htm" class="macro">gnode</a>(<a href="../h_src/57968028.htm" class="localvar">h</a>, 0); <a href="../h_src/57967892.htm" class="localvar">n</a> &lt; <a href="../h_src/57967756.htm" class="localvar">limit</a>; <a href="../h_src/57967892.htm" class="localvar">n</a>++) {
<a id=754></a>      if (<a href="../h_src/57824712.htm" class="function">iscleared</a>(<a href="../h_src/57968436.htm" class="localvar">g</a>, <a href="../h_src/57827432.htm" class="macro">gcvalueN</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57967892.htm" class="localvar">n</a>))))  <a  class="comments">/* unmarked value? */</a>
<a id=755></a>        <a href="../h_src/57530216.htm" class="macro">setempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57967892.htm" class="localvar">n</a>));  <a  class="comments">/* remove entry */</a>
<a id=756></a>      if (<a href="../h_src/57530488.htm" class="macro">isempty</a>(<a href="../h_src/57617872.htm" class="macro">gval</a>(<a href="../h_src/57967892.htm" class="localvar">n</a>)))  <a  class="comments">/* is entry empty? */</a>
<a id=757></a>        <a href="../h_src/57824984.htm" class="function">clearkey</a>(<a href="../h_src/57967892.htm" class="localvar">n</a>);  <a  class="comments">/* clear its key */</a>
    }
  }
}


<a id=763></a>static void <a href="../h_src/57967212.htm" class="function">freeupval</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57967076.htm" class="localvar">L</a>, <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/57966940.htm" class="localvar">uv</a>) {
<a id=764></a>  if (<a href="../h_src/57631540.htm" class="macro">upisopen</a>(<a href="../h_src/57966940.htm" class="localvar">uv</a>))
<a id=765></a>    <a href="../h_src/57630316.htm" class="function">luaF_unlinkupval</a>(<a href="../h_src/57966940.htm" class="localvar">uv</a>);
<a id=766></a>  <a href="../h_src/57495740.htm" class="macro">luaM_free</a>(<a href="../h_src/57967076.htm" class="localvar">L</a>, <a href="../h_src/57966940.htm" class="localvar">uv</a>);
}


<a id=770></a>static void <a href="../h_src/57966804.htm" class="function">freeobj</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57966532.htm" class="localvar">o</a>) {
<a id=771></a>  switch (<a href="../h_src/57966532.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a>) {
<a id=772></a>    case <a href="../h_src/57517636.htm" class="macro">LUA_VPROTO</a>:
<a id=773></a>      <a href="../h_src/57630248.htm" class="function">luaF_freeproto</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57639292.htm" class="macro">gco2p</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>));
      break;
<a id=775></a>    case <a href="../h_src/57513760.htm" class="macro">LUA_VUPVAL</a>:
<a id=776></a>      <a href="../h_src/57967212.htm" class="function">freeupval</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57639020.htm" class="macro">gco2upv</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>));
      break;
<a id=778></a>    case <a href="../h_src/57513624.htm" class="macro">LUA_VLCL</a>: {
<a id=779></a>      <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/57966396.htm" class="localvar">cl</a> = <a href="../h_src/57639836.htm" class="macro">gco2lcl</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>);
<a id=780></a>      <a href="../h_src/57495876.htm" class="macro">luaM_freemem</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57966396.htm" class="localvar">cl</a>, <a href="../h_src/57631948.htm" class="macro">sizeLclosure</a>(<a href="../h_src/57966396.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508320.htm" class="variable">nupvalues</a>));
      break;
    }
<a id=783></a>    case <a href="../h_src/57513352.htm" class="macro">LUA_VCCL</a>: {
<a id=784></a>      <a href="../h_src/57508728.htm" class="type">CClosure</a> *<a href="../h_src/57966260.htm" class="localvar">cl</a> = <a href="../h_src/57639700.htm" class="macro">gco2ccl</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>);
<a id=785></a>      <a href="../h_src/57495876.htm" class="macro">luaM_freemem</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57966260.htm" class="localvar">cl</a>, <a href="../h_src/57632084.htm" class="macro">sizeCclosure</a>(<a href="../h_src/57966260.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57509068.htm" class="variable">nupvalues</a>));
      break;
    }
<a id=788></a>    case <a href="../h_src/57507436.htm" class="macro">LUA_VTABLE</a>:
<a id=789></a>      <a href="../h_src/57616308.htm" class="function">luaH_free</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57639428.htm" class="macro">gco2t</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>));
      break;
<a id=791></a>    case <a href="../h_src/57528992.htm" class="macro">LUA_VTHREAD</a>:
<a id=792></a>      <a href="../h_src/57638544.htm" class="function">luaE_freethread</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57639156.htm" class="macro">gco2th</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>));
      break;
<a id=794></a>    case <a href="../h_src/57521988.htm" class="macro">LUA_VUSERDATA</a>: {
<a id=795></a>      <a href="../h_src/57519268.htm" class="type">Udata</a> *<a href="../h_src/57966124.htm" class="localvar">u</a> = <a href="../h_src/57639972.htm" class="macro">gco2u</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>);
<a id=796></a>      <a href="../h_src/57495876.htm" class="macro">luaM_freemem</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57966532.htm" class="localvar">o</a>, <a href="../h_src/57517772.htm" class="macro">sizeudata</a>(<a href="../h_src/57966124.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519948.htm" class="variable">nuvalue</a>, <a href="../h_src/57966124.htm" class="localvar">u</a>-&gt;<a href="../h_src/57519880.htm" class="variable">len</a>));
      break;
    }
<a id=799></a>    case <a href="../h_src/57525184.htm" class="macro">LUA_VSHRSTR</a>: {
<a id=800></a>      <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57965988.htm" class="localvar">ts</a> = <a href="../h_src/57640108.htm" class="macro">gco2ts</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>);
<a id=801></a>      <a href="../h_src/57618756.htm" class="function">luaS_remove</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57965988.htm" class="localvar">ts</a>);  <a  class="comments">/* remove it from hash table */</a>
<a id=802></a>      <a href="../h_src/57495876.htm" class="macro">luaM_freemem</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57965988.htm" class="localvar">ts</a>, <a href="../h_src/57619708.htm" class="macro">sizelstring</a>(<a href="../h_src/57965988.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57523416.htm" class="variable">shrlen</a>));
      break;
    }
<a id=805></a>    case <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>: {
<a id=806></a>      <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57965852.htm" class="localvar">ts</a> = <a href="../h_src/57640108.htm" class="macro">gco2ts</a>(<a href="../h_src/57966532.htm" class="localvar">o</a>);
<a id=807></a>      <a href="../h_src/57495876.htm" class="macro">luaM_freemem</a>(<a href="../h_src/57966668.htm" class="localvar">L</a>, <a href="../h_src/57965852.htm" class="localvar">ts</a>, <a href="../h_src/57619708.htm" class="macro">sizelstring</a>(<a href="../h_src/57965852.htm" class="localvar">ts</a>-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523212.htm" class="variable">lnglen</a>));
      break;
    }
<a id=810></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);
  }
}


<a id=815></a><a  class="comments">/*</a>
<a id=816></a><a  class="comments">** sweep at most 'countin' elements from a list of GCObjects erasing dead</a>
<a id=817></a><a  class="comments">** objects, where a dead object is one marked with the old (non current)</a>
<a id=818></a><a  class="comments">** white; change all non-dead objects back to white, preparing for next</a>
<a id=819></a><a  class="comments">** collection cycle. Return where to continue the traversal or NULL if</a>
<a id=820></a><a  class="comments">** list is finished. ('*countout' gets the number of elements traversed.)</a>
<a id=821></a><a  class="comments">*/</a>
<a id=822></a>static <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57965716.htm" class="function">sweeplist</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57965580.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57965444.htm" class="localvar">p</a>, int <a href="../h_src/57965308.htm" class="localvar">countin</a>,
<a id=823></a>                             int *<a href="../h_src/57965172.htm" class="localvar">countout</a>) {
<a id=824></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57965036.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57965580.htm" class="localvar">L</a>);
<a id=825></a>  int <a href="../h_src/57964900.htm" class="localvar">ow</a> = <a href="../h_src/57625828.htm" class="macro">otherwhite</a>(<a href="../h_src/57965036.htm" class="localvar">g</a>);
<a id=826></a>  int <a href="../h_src/57964764.htm" class="localvar">i</a>;
<a id=827></a>  int <a href="../h_src/57964628.htm" class="localvar">white</a> = <a href="../h_src/57625148.htm" class="macro">luaC_white</a>(<a href="../h_src/57965036.htm" class="localvar">g</a>);  <a  class="comments">/* current white */</a>
<a id=828></a>  for (<a href="../h_src/57964764.htm" class="localvar">i</a> = 0; *<a href="../h_src/57965444.htm" class="localvar">p</a> != NULL &amp;&amp; <a href="../h_src/57964764.htm" class="localvar">i</a> &lt; <a href="../h_src/57965308.htm" class="localvar">countin</a>; <a href="../h_src/57964764.htm" class="localvar">i</a>++) {
<a id=829></a>    <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57964492.htm" class="localvar">curr</a> = *<a href="../h_src/57965444.htm" class="localvar">p</a>;
<a id=830></a>    int <a href="../h_src/57964356.htm" class="localvar">marked</a> = <a href="../h_src/57964492.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a>;
<a id=831></a>    if (<a href="../h_src/57625692.htm" class="macro">isdeadm</a>(<a href="../h_src/57964900.htm" class="localvar">ow</a>, <a href="../h_src/57964356.htm" class="localvar">marked</a>)) {  <a  class="comments">/* is 'curr' dead? */</a>
<a id=832></a>      *<a href="../h_src/57965444.htm" class="localvar">p</a> = <a href="../h_src/57964492.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* remove 'curr' from list */</a>
<a id=833></a>      <a href="../h_src/57966804.htm" class="function">freeobj</a>(<a href="../h_src/57965580.htm" class="localvar">L</a>, <a href="../h_src/57964492.htm" class="localvar">curr</a>);  <a  class="comments">/* erase 'curr' */</a>
    }
<a id=835></a>    else {  <a  class="comments">/* change mark to 'white' */</a>
<a id=836></a>      <a href="../h_src/57964492.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>((<a href="../h_src/57964356.htm" class="localvar">marked</a> &amp; ~<a href="../h_src/57828248.htm" class="macro">maskgcbits</a>) | <a href="../h_src/57964628.htm" class="localvar">white</a>);
<a id=837></a>      <a href="../h_src/57965444.htm" class="localvar">p</a> = &amp;<a href="../h_src/57964492.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* go to next element */</a>
    }
  }
<a id=840></a>  if (<a href="../h_src/57965172.htm" class="localvar">countout</a>)
<a id=841></a>    *<a href="../h_src/57965172.htm" class="localvar">countout</a> = <a href="../h_src/57964764.htm" class="localvar">i</a>;  <a  class="comments">/* number of elements traversed */</a>
<a id=842></a>  return (*<a href="../h_src/57965444.htm" class="localvar">p</a> == NULL) ? NULL : <a href="../h_src/57965444.htm" class="localvar">p</a>;
}


<a id=846></a><a  class="comments">/*</a>
<a id=847></a><a  class="comments">** sweep a list until a live object (or end of list)</a>
<a id=848></a><a  class="comments">*/</a>
<a id=849></a>static <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57964220.htm" class="function">sweeptolive</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57964084.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57963948.htm" class="localvar">p</a>) {
<a id=850></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57963812.htm" class="localvar">old</a> = <a href="../h_src/57963948.htm" class="localvar">p</a>;
  do {
<a id=852></a>    <a href="../h_src/57963948.htm" class="localvar">p</a> = <a href="../h_src/57965716.htm" class="function">sweeplist</a>(<a href="../h_src/57964084.htm" class="localvar">L</a>, <a href="../h_src/57963948.htm" class="localvar">p</a>, 1, NULL);
<a id=853></a>  } while (<a href="../h_src/57963948.htm" class="localvar">p</a> == <a href="../h_src/57963812.htm" class="localvar">old</a>);
<a id=854></a>  return <a href="../h_src/57963948.htm" class="localvar">p</a>;
}

<a id=857></a><a  class="comments">/* }====================================================== */</a>


<a id=860></a><a  class="comments">/*</a>
<a id=861></a><a  class="comments">** {======================================================</a>
<a id=862></a><a  class="comments">** Finalization</a>
<a id=863></a><a  class="comments">** =======================================================</a>
<a id=864></a><a  class="comments">*/</a>

<a id=866></a><a  class="comments">/*</a>
<a id=867></a><a  class="comments">** If possible, shrink string table.</a>
<a id=868></a><a  class="comments">*/</a>
<a id=869></a>static void <a href="../h_src/57963676.htm" class="function">checkSizes</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57963540.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57963404.htm" class="localvar">g</a>) {
<a id=870></a>  if (!<a href="../h_src/57963404.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645616.htm" class="variable">gcemergency</a>) {
<a id=871></a>    if (<a href="../h_src/57963404.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646364.htm" class="variable">strt</a>.<a href="../h_src/57651736.htm" class="variable">nuse</a> &lt; <a href="../h_src/57963404.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646364.htm" class="variable">strt</a>.<a href="../h_src/57651668.htm" class="variable">size</a> / 4) {  <a  class="comments">/* string table too big? */</a>
<a id=872></a>      <a href="../h_src/57550548.htm" class="type">l_mem</a> <a href="../h_src/57963268.htm" class="localvar">olddebt</a> = <a href="../h_src/57963404.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a>;
<a id=873></a>      <a href="../h_src/57618960.htm" class="function">luaS_resize</a>(<a href="../h_src/57963540.htm" class="localvar">L</a>, <a href="../h_src/57963404.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646364.htm" class="variable">strt</a>.<a href="../h_src/57651668.htm" class="variable">size</a> / 2);
<a id=874></a>      <a href="../h_src/57963404.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a> += <a href="../h_src/57963404.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> - <a href="../h_src/57963268.htm" class="localvar">olddebt</a>;  <a  class="comments">/* correct estimate */</a>
    }
  }
}


<a id=880></a><a  class="comments">/*</a>
<a id=881></a><a  class="comments">** Get the next udata to be finalized from the 'tobefnz' list, and</a>
<a id=882></a><a  class="comments">** link it back into the 'allgc' list.</a>
<a id=883></a><a  class="comments">*/</a>
<a id=884></a>static <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57963132.htm" class="function">udata2finalize</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57962996.htm" class="localvar">g</a>) {
<a id=885></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57962860.htm" class="localvar">o</a> = <a href="../h_src/57962996.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>;  <a  class="comments">/* get first element */</a>
<a id=886></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57625964.htm" class="macro">tofinalize</a>(o));
<a id=887></a>  <a href="../h_src/57962996.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a> = <a href="../h_src/57962860.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* remove it from 'tobefnz' list */</a>
<a id=888></a>  <a href="../h_src/57962860.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a> = <a href="../h_src/57962996.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>;  <a  class="comments">/* return it to 'allgc' list */</a>
<a id=889></a>  <a href="../h_src/57962996.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a> = <a href="../h_src/57962860.htm" class="localvar">o</a>;
<a id=890></a>  <a href="../h_src/57627460.htm" class="macro">resetbit</a>(<a href="../h_src/57962860.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a>, <a href="../h_src/57626780.htm" class="macro">FINALIZEDBIT</a>);  <a  class="comments">/* object is &quot;normal&quot; again */</a>
<a id=891></a>  if (<a href="../h_src/57628548.htm" class="macro">issweepphase</a>(<a href="../h_src/57962996.htm" class="localvar">g</a>))
<a id=892></a>    <a href="../h_src/57828112.htm" class="macro">makewhite</a>(<a href="../h_src/57962996.htm" class="localvar">g</a>, <a href="../h_src/57962860.htm" class="localvar">o</a>);  <a  class="comments">/* &quot;sweep&quot; object */</a>
<a id=893></a>  else if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57962860.htm" class="localvar">o</a>) == <a href="../h_src/57624604.htm" class="macro">G_OLD1</a>)
<a id=894></a>    <a href="../h_src/57962996.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a> = <a href="../h_src/57962860.htm" class="localvar">o</a>;  <a  class="comments">/* it is the first OLD1 object in the list */</a>
<a id=895></a>  return <a href="../h_src/57962860.htm" class="localvar">o</a>;
}


<a id=899></a>static void <a href="../h_src/57962724.htm" class="function">dothecall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57962588.htm" class="localvar">L</a>, void *<a href="../h_src/57962452.htm" class="localvar">ud</a>) {
<a id=900></a>  <a href="../h_src/57547896.htm" class="macro">UNUSED</a>(<a href="../h_src/57962452.htm" class="localvar">ud</a>);
<a id=901></a>  <a href="../h_src/57633172.htm" class="function">luaD_callnoyield</a>(<a href="../h_src/57962588.htm" class="localvar">L</a>, <a href="../h_src/57962588.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 2, 0);
}


<a id=905></a>static void <a href="../h_src/57962316.htm" class="function">GCTM</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57962180.htm" class="localvar">L</a>) {
<a id=906></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57962044.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57962180.htm" class="localvar">L</a>);
<a id=907></a>  const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57961908.htm" class="localvar">tm</a>;
<a id=908></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57961772.htm" class="localvar">v</a>;
<a id=909></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!g-&gt;gcemergency);
<a id=910></a>  <a href="../h_src/57527224.htm" class="macro">setgcovalue</a>(L, &amp;<a href="../h_src/57961772.htm" class="localvar">v</a>, <a href="../h_src/57963132.htm" class="function">udata2finalize</a>(<a href="../h_src/57962044.htm" class="localvar">g</a>));
<a id=911></a>  <a href="../h_src/57961908.htm" class="localvar">tm</a> = <a href="../h_src/57498052.htm" class="function">luaT_gettmbyobj</a>(<a href="../h_src/57962180.htm" class="localvar">L</a>, &amp;<a href="../h_src/57961772.htm" class="localvar">v</a>, <a href="../h_src/57500772.htm" class="variable">TM_GC</a>);
<a id=912></a>  if (!<a href="../h_src/57498800.htm" class="macro">notm</a>(<a href="../h_src/57961908.htm" class="localvar">tm</a>)) {  <a  class="comments">/* is there a finalizer? */</a>
<a id=913></a>    int <a href="../h_src/57961364.htm" class="localvar">status</a>;
<a id=914></a>    <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/57961228.htm" class="localvar">oldah</a> = <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a>;
<a id=915></a>    int <a href="../h_src/57961092.htm" class="localvar">oldgcstp</a>  = <a href="../h_src/57962044.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645684.htm" class="variable">gcstp</a>;
<a id=916></a>    <a href="../h_src/57962044.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645684.htm" class="variable">gcstp</a> |= <a href="../h_src/57622156.htm" class="macro">GCSTPGC</a>;  <a  class="comments">/* avoid GC steps */</a>
<a id=917></a>    <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a> = 0;  <a  class="comments">/* stop debug hooks during GC metamethod */</a>
<a id=918></a>    <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/57962180.htm" class="localvar">L</a>, <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++, <a href="../h_src/57961908.htm" class="localvar">tm</a>);  <a  class="comments">/* push finalizer... */</a>
<a id=919></a>    <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/57962180.htm" class="localvar">L</a>, <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++, &amp;<a href="../h_src/57961772.htm" class="localvar">v</a>);  <a  class="comments">/* ... and its argument */</a>
<a id=920></a>    <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> |= <a href="../h_src/57648404.htm" class="macro">CIST_FIN</a>;  <a  class="comments">/* will run a finalizer */</a>
<a id=921></a>    <a href="../h_src/57961364.htm" class="localvar">status</a> = <a href="../h_src/57632968.htm" class="function">luaD_pcall</a>(<a href="../h_src/57962180.htm" class="localvar">L</a>, <a href="../h_src/57962724.htm" class="function">dothecall</a>, NULL, <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57962180.htm" class="localvar">L</a>, <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 2), 0);
<a id=922></a>    <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp;= ~<a href="../h_src/57648404.htm" class="macro">CIST_FIN</a>;  <a  class="comments">/* not running a finalizer anymore */</a>
<a id=923></a>    <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a> = <a href="../h_src/57961228.htm" class="localvar">oldah</a>;  <a  class="comments">/* restore hooks */</a>
<a id=924></a>    <a href="../h_src/57962044.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645684.htm" class="variable">gcstp</a> = <a href="../h_src/57961092.htm" class="localvar">oldgcstp</a>;  <a  class="comments">/* restore state */</a>
<a id=925></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57961364.htm" class="localvar">status</a> != <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>)) {  <a  class="comments">/* error while running __gc? */</a>
<a id=926></a>      <a href="../h_src/57638068.htm" class="function">luaE_warnerror</a>(<a href="../h_src/57962180.htm" class="localvar">L</a>, &quot;__gc&quot;);
<a id=927></a>      <a href="../h_src/57962180.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>--;  <a  class="comments">/* pops error object */</a>
    }
  }
}


<a id=933></a><a  class="comments">/*</a>
<a id=934></a><a  class="comments">** Call a few finalizers</a>
<a id=935></a><a  class="comments">*/</a>
<a id=936></a>static int <a href="../h_src/57960412.htm" class="function">runafewfinalizers</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57960276.htm" class="localvar">L</a>, int <a href="../h_src/57960140.htm" class="localvar">n</a>) {
<a id=937></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57960004.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57960276.htm" class="localvar">L</a>);
<a id=938></a>  int <a href="../h_src/57959868.htm" class="localvar">i</a>;
<a id=939></a>  for (<a href="../h_src/57959868.htm" class="localvar">i</a> = 0; <a href="../h_src/57959868.htm" class="localvar">i</a> &lt; <a href="../h_src/57960140.htm" class="localvar">n</a> &amp;&amp; <a href="../h_src/57960004.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>; <a href="../h_src/57959868.htm" class="localvar">i</a>++)
<a id=940></a>    <a href="../h_src/57962316.htm" class="function">GCTM</a>(<a href="../h_src/57960276.htm" class="localvar">L</a>);  <a  class="comments">/* call one finalizer */</a>
<a id=941></a>  return <a href="../h_src/57959868.htm" class="localvar">i</a>;
}


<a id=945></a><a  class="comments">/*</a>
<a id=946></a><a  class="comments">** call all pending finalizers</a>
<a id=947></a><a  class="comments">*/</a>
<a id=948></a>static void <a href="../h_src/57959732.htm" class="function">callallpendingfinalizers</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57959596.htm" class="localvar">L</a>) {
<a id=949></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57959460.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57959596.htm" class="localvar">L</a>);
<a id=950></a>  while (<a href="../h_src/57959460.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>)
<a id=951></a>    <a href="../h_src/57962316.htm" class="function">GCTM</a>(<a href="../h_src/57959596.htm" class="localvar">L</a>);
}


<a id=955></a><a  class="comments">/*</a>
<a id=956></a><a  class="comments">** find last 'next' field in list 'p' list (to add elements in its end)</a>
<a id=957></a><a  class="comments">*/</a>
<a id=958></a>static <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57959324.htm" class="function">findlast</a> (<a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57959188.htm" class="localvar">p</a>) {
<a id=959></a>  while (*<a href="../h_src/57959188.htm" class="localvar">p</a> != NULL)
<a id=960></a>    <a href="../h_src/57959188.htm" class="localvar">p</a> = &amp;(*<a href="../h_src/57959188.htm" class="localvar">p</a>)-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;
<a id=961></a>  return <a href="../h_src/57959188.htm" class="localvar">p</a>;
}


<a id=965></a><a  class="comments">/*</a>
<a id=966></a><a  class="comments">** Move all unreachable objects (or 'all' objects) that need</a>
<a id=967></a><a  class="comments">** finalization from list 'finobj' to list 'tobefnz' (to be finalized).</a>
<a id=968></a><a  class="comments">** (Note that objects after 'finobjold1' cannot be white, so they</a>
<a id=969></a><a  class="comments">** don't need to be traversed. In incremental mode, 'finobjold1' is NULL,</a>
<a id=970></a><a  class="comments">** so the whole list is traversed.)</a>
<a id=971></a><a  class="comments">*/</a>
<a id=972></a>static void <a href="../h_src/57959052.htm" class="function">separatetobefnz</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57958916.htm" class="localvar">g</a>, int <a href="../h_src/57958780.htm" class="localvar">all</a>) {
<a id=973></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57958644.htm" class="localvar">curr</a>;
<a id=974></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57958508.htm" class="localvar">p</a> = &amp;<a href="../h_src/57958916.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>;
<a id=975></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57958372.htm" class="localvar">lastnext</a> = <a href="../h_src/57959324.htm" class="function">findlast</a>(&amp;<a href="../h_src/57958916.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>);
<a id=976></a>  while ((<a href="../h_src/57958644.htm" class="localvar">curr</a> = *<a href="../h_src/57958508.htm" class="localvar">p</a>) != <a href="../h_src/57958916.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644256.htm" class="variable">finobjold1</a>) {  <a  class="comments">/* traverse all finalizable objects */</a>
<a id=977></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57625964.htm" class="macro">tofinalize</a>(curr));
<a id=978></a>    if (!(<a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/57958644.htm" class="localvar">curr</a>) || <a href="../h_src/57958780.htm" class="localvar">all</a>))  <a  class="comments">/* not being collected? */</a>
<a id=979></a>      <a href="../h_src/57958508.htm" class="localvar">p</a> = &amp;<a href="../h_src/57958644.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* don't bother with it */</a>
    else {
<a id=981></a>      if (<a href="../h_src/57958644.htm" class="localvar">curr</a> == <a href="../h_src/57958916.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644324.htm" class="variable">finobjsur</a>)  <a  class="comments">/* removing 'finobjsur'? */</a>
<a id=982></a>        <a href="../h_src/57958916.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644324.htm" class="variable">finobjsur</a> = <a href="../h_src/57958644.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* correct it */</a>
<a id=983></a>      *<a href="../h_src/57958508.htm" class="localvar">p</a> = <a href="../h_src/57958644.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* remove 'curr' from 'finobj' list */</a>
<a id=984></a>      <a href="../h_src/57958644.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a> = *<a href="../h_src/57958372.htm" class="localvar">lastnext</a>;  <a  class="comments">/* link at the end of 'tobefnz' list */</a>
<a id=985></a>      *<a href="../h_src/57958372.htm" class="localvar">lastnext</a> = <a href="../h_src/57958644.htm" class="localvar">curr</a>;
<a id=986></a>      <a href="../h_src/57958372.htm" class="localvar">lastnext</a> = &amp;<a href="../h_src/57958644.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;
    }
  }
}


<a id=992></a><a  class="comments">/*</a>
<a id=993></a><a  class="comments">** If pointer 'p' points to 'o', move it to the next element.</a>
<a id=994></a><a  class="comments">*/</a>
<a id=995></a>static void <a href="../h_src/57958236.htm" class="function">checkpointer</a> (<a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57958100.htm" class="localvar">p</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57957964.htm" class="localvar">o</a>) {
<a id=996></a>  if (<a href="../h_src/57957964.htm" class="localvar">o</a> == *<a href="../h_src/57958100.htm" class="localvar">p</a>)
<a id=997></a>    *<a href="../h_src/57958100.htm" class="localvar">p</a> = <a href="../h_src/57957964.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;
}


<a id=1001></a><a  class="comments">/*</a>
<a id=1002></a><a  class="comments">** Correct pointers to objects inside 'allgc' list when</a>
<a id=1003></a><a  class="comments">** object 'o' is being removed from the list.</a>
<a id=1004></a><a  class="comments">*/</a>
<a id=1005></a>static void <a href="../h_src/57957828.htm" class="function">correctpointers</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57957692.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57957556.htm" class="localvar">o</a>) {
<a id=1006></a>  <a href="../h_src/57958236.htm" class="function">checkpointer</a>(&amp;<a href="../h_src/57957692.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644596.htm" class="variable">survival</a>, <a href="../h_src/57957556.htm" class="localvar">o</a>);
<a id=1007></a>  <a href="../h_src/57958236.htm" class="function">checkpointer</a>(&amp;<a href="../h_src/57957692.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644528.htm" class="variable">old1</a>, <a href="../h_src/57957556.htm" class="localvar">o</a>);
<a id=1008></a>  <a href="../h_src/57958236.htm" class="function">checkpointer</a>(&amp;<a href="../h_src/57957692.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644460.htm" class="variable">reallyold</a>, <a href="../h_src/57957556.htm" class="localvar">o</a>);
<a id=1009></a>  <a href="../h_src/57958236.htm" class="function">checkpointer</a>(&amp;<a href="../h_src/57957692.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a>, <a href="../h_src/57957556.htm" class="localvar">o</a>);
}


<a id=1013></a><a  class="comments">/*</a>
<a id=1014></a><a  class="comments">** if object 'o' has a finalizer, remove it from 'allgc' list (must</a>
<a id=1015></a><a  class="comments">** search the list to find it) and link it in 'finobj' list.</a>
<a id=1016></a><a  class="comments">*/</a>
<a id=1017></a>void <a href="../h_src/57620320.htm" class="function">luaC_checkfinalizer</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57957420.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57957284.htm" class="localvar">o</a>, <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57957148.htm" class="localvar">mt</a>) {
<a id=1018></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57957012.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57957420.htm" class="localvar">L</a>);
<a id=1019></a>  if (<a href="../h_src/57625964.htm" class="macro">tofinalize</a>(<a href="../h_src/57957284.htm" class="localvar">o</a>) ||                 <a  class="comments">/* obj. is already marked... */</a><a href="../h_src/57528040.htm" class="variable">marked</a>... */
<a id=1020></a>      <a href="../h_src/57498664.htm" class="macro">gfasttm</a>(<a href="../h_src/57957012.htm" class="localvar">g</a>, <a href="../h_src/57957148.htm" class="localvar">mt</a>, <a href="../h_src/57500772.htm" class="variable">TM_GC</a>) == NULL ||    <a  class="comments">/* or has no finalizer... */</a>
<a id=1021></a>      (<a href="../h_src/57957012.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645684.htm" class="variable">gcstp</a> &amp; <a href="../h_src/57622020.htm" class="macro">GCSTPCLS</a>))                   <a  class="comments">/* or closing state? */</a>
<a id=1022></a>    return;  <a  class="comments">/* nothing to be done */</a>
<a id=1023></a>  else {  <a  class="comments">/* move 'o' to 'finobj' list */</a>
<a id=1024></a>    <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57956876.htm" class="localvar">p</a>;
<a id=1025></a>    if (<a href="../h_src/57628548.htm" class="macro">issweepphase</a>(<a href="../h_src/57957012.htm" class="localvar">g</a>)) {
<a id=1026></a>      <a href="../h_src/57828112.htm" class="macro">makewhite</a>(<a href="../h_src/57957012.htm" class="localvar">g</a>, <a href="../h_src/57957284.htm" class="localvar">o</a>);  <a  class="comments">/* &quot;sweep&quot; object 'o' */</a>
<a id=1027></a>      if (<a href="../h_src/57957012.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a> == &amp;<a href="../h_src/57957284.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>)  <a  class="comments">/* should not remove 'sweepgc' object */</a>
<a id=1028></a>        <a href="../h_src/57957012.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a> = <a href="../h_src/57964220.htm" class="function">sweeptolive</a>(<a href="../h_src/57957420.htm" class="localvar">L</a>, <a href="../h_src/57957012.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a>);  <a  class="comments">/* change 'sweepgc' */</a>
    }
    else
<a id=1031></a>      <a href="../h_src/57957828.htm" class="function">correctpointers</a>(<a href="../h_src/57957012.htm" class="localvar">g</a>, <a href="../h_src/57957284.htm" class="localvar">o</a>);
<a id=1032></a>    <a  class="comments">/* search for pointer pointing to 'o' */</a>
<a id=1033></a>    for (<a href="../h_src/57956876.htm" class="localvar">p</a> = &amp;<a href="../h_src/57957012.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>; *<a href="../h_src/57956876.htm" class="localvar">p</a> != <a href="../h_src/57957284.htm" class="localvar">o</a>; <a href="../h_src/57956876.htm" class="localvar">p</a> = &amp;(*<a href="../h_src/57956876.htm" class="localvar">p</a>)-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>) { <a  class="comments">/* empty */</a> }
<a id=1034></a>    *<a href="../h_src/57956876.htm" class="localvar">p</a> = <a href="../h_src/57957284.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* remove 'o' from 'allgc' list */</a>
<a id=1035></a>    <a href="../h_src/57957284.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a> = <a href="../h_src/57957012.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>;  <a  class="comments">/* link it in 'finobj' list */</a>
<a id=1036></a>    <a href="../h_src/57957012.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a> = <a href="../h_src/57957284.htm" class="localvar">o</a>;
<a id=1037></a>    <a href="../h_src/57627596.htm" class="macro">l_setbit</a>(<a href="../h_src/57957284.htm" class="localvar">o</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a>, <a href="../h_src/57626780.htm" class="macro">FINALIZEDBIT</a>);  <a  class="comments">/* mark it as such */</a>
  }
}

<a id=1041></a><a  class="comments">/* }====================================================== */</a>


<a id=1044></a><a  class="comments">/*</a>
<a id=1045></a><a  class="comments">** {======================================================</a>
<a id=1046></a><a  class="comments">** Generational Collector</a>
<a id=1047></a><a  class="comments">** =======================================================</a>
<a id=1048></a><a  class="comments">*/</a>


<a id=1051></a><a  class="comments">/*</a>
<a id=1052></a><a  class="comments">** Set the &quot;time&quot; to wait before starting a new GC cycle; cycle will</a>
<a id=1053></a><a  class="comments">** start when memory use hits the threshold of ('estimate' * pause /</a>
<a id=1054></a><a  class="comments">** PAUSEADJ). (Division by 'estimate' should be OK: it cannot be zero,</a>
<a id=1055></a><a  class="comments">** because Lua cannot even start with less than PAUSEADJ bytes).</a>
<a id=1056></a><a  class="comments">*/</a>
<a id=1057></a>static void <a href="../h_src/57956740.htm" class="function">setpause</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57956604.htm" class="localvar">g</a>) {
<a id=1058></a>  <a href="../h_src/57550548.htm" class="type">l_mem</a> <a href="../h_src/57956468.htm" class="localvar">threshold</a>, <a href="../h_src/57956332.htm" class="localvar">debt</a>;
<a id=1059></a>  int <a href="../h_src/57956196.htm" class="localvar">pause</a> = <a href="../h_src/57622972.htm" class="macro">getgcparam</a>(<a href="../h_src/57956604.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645548.htm" class="variable">gcpause</a>);
<a id=1060></a>  <a href="../h_src/57550548.htm" class="type">l_mem</a> <a href="../h_src/57956060.htm" class="localvar">estimate</a> = <a href="../h_src/57956604.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a> / <a href="../h_src/57828520.htm" class="macro">PAUSEADJ</a>;  <a  class="comments">/* adjust 'estimate' */</a>
<a id=1061></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(estimate &gt; 0);
<a id=1062></a>  <a href="../h_src/57956468.htm" class="localvar">threshold</a> = (<a href="../h_src/57956196.htm" class="localvar">pause</a> &lt; <a href="../h_src/57549936.htm" class="macro">MAX_LMEM</a> / <a href="../h_src/57956060.htm" class="localvar">estimate</a>)  <a  class="comments">/* overflow? */</a>
<a id=1063></a>            ? <a href="../h_src/57956060.htm" class="localvar">estimate</a> * <a href="../h_src/57956196.htm" class="localvar">pause</a>  <a  class="comments">/* no overflow */</a>
<a id=1064></a>            : <a href="../h_src/57549936.htm" class="macro">MAX_LMEM</a>;  <a  class="comments">/* overflow; truncate to maximum */</a>
<a id=1065></a>  <a href="../h_src/57956332.htm" class="localvar">debt</a> = <a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(<a href="../h_src/57956604.htm" class="localvar">g</a>) - <a href="../h_src/57956468.htm" class="localvar">threshold</a>;
<a id=1066></a>  if (<a href="../h_src/57956332.htm" class="localvar">debt</a> &gt; 0) <a href="../h_src/57956332.htm" class="localvar">debt</a> = 0;
<a id=1067></a>  <a href="../h_src/57638612.htm" class="function">luaE_setdebt</a>(<a href="../h_src/57956604.htm" class="localvar">g</a>, <a href="../h_src/57956332.htm" class="localvar">debt</a>);
}


<a id=1071></a><a  class="comments">/*</a>
<a id=1072></a><a  class="comments">** Sweep a list of objects to enter generational mode.  Deletes dead</a>
<a id=1073></a><a  class="comments">** objects and turns the non dead to old. All non-dead threads---which</a>
<a id=1074></a><a  class="comments">** are now old---must be in a gray list. Everything else is not in a</a>
<a id=1075></a><a  class="comments">** gray list. Open upvalues are also kept gray.</a>
<a id=1076></a><a  class="comments">*/</a>
<a id=1077></a>static void <a href="../h_src/57955924.htm" class="function">sweep2old</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57955788.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57955652.htm" class="localvar">p</a>) {
<a id=1078></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57955516.htm" class="localvar">curr</a>;
<a id=1079></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57955380.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57955788.htm" class="localvar">L</a>);
<a id=1080></a>  while ((<a href="../h_src/57955516.htm" class="localvar">curr</a> = *<a href="../h_src/57955652.htm" class="localvar">p</a>) != NULL) {
<a id=1081></a>    if (<a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/57955516.htm" class="localvar">curr</a>)) {  <a  class="comments">/* is 'curr' dead? */</a>
<a id=1082></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57625556.htm" class="macro">isdead</a>(g, curr));
<a id=1083></a>      *<a href="../h_src/57955652.htm" class="localvar">p</a> = <a href="../h_src/57955516.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* remove 'curr' from list */</a>
<a id=1084></a>      <a href="../h_src/57966804.htm" class="function">freeobj</a>(<a href="../h_src/57955788.htm" class="localvar">L</a>, <a href="../h_src/57955516.htm" class="localvar">curr</a>);  <a  class="comments">/* erase 'curr' */</a>
    }
<a id=1086></a>    else {  <a  class="comments">/* all surviving objects become old */</a>
<a id=1087></a>      <a href="../h_src/57623788.htm" class="macro">setage</a>(<a href="../h_src/57955516.htm" class="localvar">curr</a>, <a href="../h_src/57624468.htm" class="macro">G_OLD</a>);
<a id=1088></a>      if (<a href="../h_src/57955516.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a> == <a href="../h_src/57528992.htm" class="macro">LUA_VTHREAD</a>) {  <a  class="comments">/* threads must be watched */</a>
<a id=1089></a>        <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57955244.htm" class="localvar">th</a> = <a href="../h_src/57639156.htm" class="macro">gco2th</a>(<a href="../h_src/57955516.htm" class="localvar">curr</a>);
<a id=1090></a>        <a href="../h_src/57825800.htm" class="macro">linkgclist</a>(<a href="../h_src/57955244.htm" class="localvar">th</a>, <a href="../h_src/57955380.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>);  <a  class="comments">/* insert into 'grayagain' list */</a>
      }
<a id=1092></a>      else if (<a href="../h_src/57955516.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a> == <a href="../h_src/57513760.htm" class="macro">LUA_VUPVAL</a> &amp;&amp; <a href="../h_src/57631540.htm" class="macro">upisopen</a>(<a href="../h_src/57639020.htm" class="macro">gco2upv</a>(<a href="../h_src/57955516.htm" class="localvar">curr</a>)))
<a id=1093></a>        <a href="../h_src/57827976.htm" class="macro">set2gray</a>(<a href="../h_src/57955516.htm" class="localvar">curr</a>);  <a  class="comments">/* open upvalues are always gray */</a>
<a id=1094></a>      else  <a  class="comments">/* everything else is black */</a>
<a id=1095></a>        <a href="../h_src/57625284.htm" class="macro">nw2black</a>(<a href="../h_src/57955516.htm" class="localvar">curr</a>);
<a id=1096></a>      <a href="../h_src/57955652.htm" class="localvar">p</a> = &amp;<a href="../h_src/57955516.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* go to next element */</a>
    }
  }
}


<a id=1102></a><a  class="comments">/*</a>
<a id=1103></a><a  class="comments">** Sweep for generational mode. Delete dead objects. (Because the</a>
<a id=1104></a><a  class="comments">** collection is not incremental, there are no &quot;new white&quot; objects</a>
<a id=1105></a><a  class="comments">** during the sweep. So, any white object must be dead.) For</a>
<a id=1106></a><a  class="comments">** non-dead objects, advance their ages and clear the color of</a>
<a id=1107></a><a  class="comments">** new objects. (Old objects keep their colors.)</a>
<a id=1108></a><a  class="comments">** The ages of G_TOUCHED1 and G_TOUCHED2 objects cannot be advanced</a>
<a id=1109></a><a  class="comments">** here, because these old-generation objects are usually not swept</a>
<a id=1110></a><a  class="comments">** here.  They will all be advanced in 'correctgraylist'. That function</a>
<a id=1111></a><a  class="comments">** will also remove objects turned white here from any gray list.</a>
<a id=1112></a><a  class="comments">*/</a>
<a id=1113></a>static <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57955108.htm" class="function">sweepgen</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57954972.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57954836.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57954700.htm" class="localvar">p</a>,
<a id=1114></a>                            <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57954564.htm" class="localvar">limit</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57954428.htm" class="localvar">pfirstold1</a>) {
<a id=1115></a>  static const <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/57954292.htm" class="localvar">nextage</a>[] = {
<a id=1116></a>    <a href="../h_src/57624876.htm" class="macro">G_SURVIVAL</a>,  <a  class="comments">/* from G_NEW */</a>
<a id=1117></a>    <a href="../h_src/57624604.htm" class="macro">G_OLD1</a>,      <a  class="comments">/* from G_SURVIVAL */</a>
<a id=1118></a>    <a href="../h_src/57624604.htm" class="macro">G_OLD1</a>,      <a  class="comments">/* from G_OLD0 */</a>
<a id=1119></a>    <a href="../h_src/57624468.htm" class="macro">G_OLD</a>,       <a  class="comments">/* from G_OLD1 */</a>
<a id=1120></a>    <a href="../h_src/57624468.htm" class="macro">G_OLD</a>,       <a  class="comments">/* from G_OLD (do not change) */</a>
<a id=1121></a>    <a href="../h_src/57624332.htm" class="macro">G_TOUCHED1</a>,  <a  class="comments">/* from G_TOUCHED1 (do not change) */</a>
<a id=1122></a>    <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>   <a  class="comments">/* from G_TOUCHED2 (do not change) */</a>
  };
<a id=1124></a>  int <a href="../h_src/57954156.htm" class="localvar">white</a> = <a href="../h_src/57625148.htm" class="macro">luaC_white</a>(<a href="../h_src/57954836.htm" class="localvar">g</a>);
<a id=1125></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57954020.htm" class="localvar">curr</a>;
<a id=1126></a>  while ((<a href="../h_src/57954020.htm" class="localvar">curr</a> = *<a href="../h_src/57954700.htm" class="localvar">p</a>) != <a href="../h_src/57954564.htm" class="localvar">limit</a>) {
<a id=1127></a>    if (<a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/57954020.htm" class="localvar">curr</a>)) {  <a  class="comments">/* is 'curr' dead? */</a>
<a id=1128></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57623652.htm" class="macro">isold</a>(curr) &amp;&amp; <a href="../h_src/57625556.htm" class="macro">isdead</a>(g, curr));
<a id=1129></a>      *<a href="../h_src/57954700.htm" class="localvar">p</a> = <a href="../h_src/57954020.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* remove 'curr' from list */</a>
<a id=1130></a>      <a href="../h_src/57966804.htm" class="function">freeobj</a>(<a href="../h_src/57954972.htm" class="localvar">L</a>, <a href="../h_src/57954020.htm" class="localvar">curr</a>);  <a  class="comments">/* erase 'curr' */</a>
    }
<a id=1132></a>    else {  <a  class="comments">/* correct mark and age */</a>
<a id=1133></a>      if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57954020.htm" class="localvar">curr</a>) == <a href="../h_src/57625012.htm" class="macro">G_NEW</a>) {  <a  class="comments">/* new objects go back to white */</a>
<a id=1134></a>        int <a href="../h_src/57953884.htm" class="localvar">marked</a> = <a href="../h_src/57954020.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a> &amp; ~<a href="../h_src/57828248.htm" class="macro">maskgcbits</a>;  <a  class="comments">/* erase GC bits */</a>
<a id=1135></a>        <a href="../h_src/57954020.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/57953884.htm" class="localvar">marked</a> | <a href="../h_src/57624876.htm" class="macro">G_SURVIVAL</a> | <a href="../h_src/57954156.htm" class="localvar">white</a>);
      }
<a id=1137></a>      else {  <a  class="comments">/* all other objects will be old, and so keep their color */</a>
<a id=1138></a>        <a href="../h_src/57623788.htm" class="macro">setage</a>(<a href="../h_src/57954020.htm" class="localvar">curr</a>, <a href="../h_src/57954292.htm" class="localvar">nextage</a>[<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57954020.htm" class="localvar">curr</a>)]);
<a id=1139></a>        if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57954020.htm" class="localvar">curr</a>) == <a href="../h_src/57624604.htm" class="macro">G_OLD1</a> &amp;&amp; *<a href="../h_src/57954428.htm" class="localvar">pfirstold1</a> == NULL)
<a id=1140></a>          *<a href="../h_src/57954428.htm" class="localvar">pfirstold1</a> = <a href="../h_src/57954020.htm" class="localvar">curr</a>;  <a  class="comments">/* first OLD1 object in the list */</a>
      }
<a id=1142></a>      <a href="../h_src/57954700.htm" class="localvar">p</a> = &amp;<a href="../h_src/57954020.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;  <a  class="comments">/* go to next element */</a>
    }
  }
<a id=1145></a>  return <a href="../h_src/57954700.htm" class="localvar">p</a>;
}


<a id=1149></a><a  class="comments">/*</a>
<a id=1150></a><a  class="comments">** Traverse a list making all its elements white and clearing their</a>
<a id=1151></a><a  class="comments">** age. In incremental mode, all objects are 'new' all the time,</a>
<a id=1152></a><a  class="comments">** except for fixed strings (which are always old).</a>
<a id=1153></a><a  class="comments">*/</a>
<a id=1154></a>static void <a href="../h_src/57953748.htm" class="function">whitelist</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57953612.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57953476.htm" class="localvar">p</a>) {
<a id=1155></a>  int <a href="../h_src/57953340.htm" class="localvar">white</a> = <a href="../h_src/57625148.htm" class="macro">luaC_white</a>(<a href="../h_src/57953612.htm" class="localvar">g</a>);
<a id=1156></a>  for (; <a href="../h_src/57953476.htm" class="localvar">p</a> != NULL; <a href="../h_src/57953476.htm" class="localvar">p</a> = <a href="../h_src/57953476.htm" class="localvar">p</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>)
<a id=1157></a>    <a href="../h_src/57953476.htm" class="localvar">p</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>((<a href="../h_src/57953476.htm" class="localvar">p</a>-&gt;<a href="../h_src/57528040.htm" class="variable">marked</a> &amp; ~<a href="../h_src/57828248.htm" class="macro">maskgcbits</a>) | <a href="../h_src/57953340.htm" class="localvar">white</a>);
}


<a id=1161></a><a  class="comments">/*</a>
<a id=1162></a><a  class="comments">** Correct a list of gray objects. Return pointer to where rest of the</a>
<a id=1163></a><a  class="comments">** list should be linked.</a>
<a id=1164></a><a  class="comments">** Because this correction is done after sweeping, young objects might</a>
<a id=1165></a><a  class="comments">** be turned white and still be in the list. They are only removed.</a>
<a id=1166></a><a  class="comments">** 'TOUCHED1' objects are advanced to 'TOUCHED2' and remain on the list;</a>
<a id=1167></a><a  class="comments">** Non-white threads also remain on the list; 'TOUCHED2' objects become</a>
<a id=1168></a><a  class="comments">** regular old; they and anything else are removed from the list.</a>
<a id=1169></a><a  class="comments">*/</a>
<a id=1170></a>static <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57953204.htm" class="function">correctgraylist</a> (<a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57953068.htm" class="localvar">p</a>) {
<a id=1171></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57952932.htm" class="localvar">curr</a>;
<a id=1172></a>  while ((<a href="../h_src/57952932.htm" class="localvar">curr</a> = *<a href="../h_src/57953068.htm" class="localvar">p</a>) != NULL) {
<a id=1173></a>    <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57952796.htm" class="localvar">next</a> = <a href="../h_src/57826208.htm" class="function">getgclist</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>);
<a id=1174></a>    if (<a href="../h_src/57626372.htm" class="macro">iswhite</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>))
<a id=1175></a>      goto remove;  <a  class="comments">/* remove all white objects */</a>
<a id=1176></a>    else if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>) == <a href="../h_src/57624332.htm" class="macro">G_TOUCHED1</a>) {  <a  class="comments">/* touched in this cycle? */</a>
<a id=1177></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57626100.htm" class="macro">isgray</a>(curr));
<a id=1178></a>      <a href="../h_src/57625284.htm" class="macro">nw2black</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>);  <a  class="comments">/* make it black, for next barrier */</a>
<a id=1179></a>      <a href="../h_src/57623516.htm" class="macro">changeage</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>, <a href="../h_src/57624332.htm" class="macro">G_TOUCHED1</a>, <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>);
<a id=1180></a>      goto remain;  <a  class="comments">/* keep it in the list and go to next element */</a>
    }
<a id=1182></a>    else if (<a href="../h_src/57952932.htm" class="localvar">curr</a>-&gt;<a href="../h_src/57528108.htm" class="variable">tt</a> == <a href="../h_src/57528992.htm" class="macro">LUA_VTHREAD</a>) {
<a id=1183></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57626100.htm" class="macro">isgray</a>(curr));
<a id=1184></a>      goto remain;  <a  class="comments">/* keep non-white threads on the list */</a>
    }
<a id=1186></a>    else {  <a  class="comments">/* everything else is removed */</a>
<a id=1187></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57623652.htm" class="macro">isold</a>(curr));  <a  class="comments">/* young objects should be white here */</a>
<a id=1188></a>      if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>) == <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>)  <a  class="comments">/* advance from TOUCHED2... */</a>
<a id=1189></a>        <a href="../h_src/57623516.htm" class="macro">changeage</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>, <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>, <a href="../h_src/57624468.htm" class="macro">G_OLD</a>);  <a  class="comments">/* ... to OLD */</a>
<a id=1190></a>      <a href="../h_src/57625284.htm" class="macro">nw2black</a>(<a href="../h_src/57952932.htm" class="localvar">curr</a>);  <a  class="comments">/* make object black (to be removed) */</a>
      goto remove;
    }
<a id=1193></a>    remove: *<a href="../h_src/57953068.htm" class="localvar">p</a> = *<a href="../h_src/57952796.htm" class="localvar">next</a>; continue;
<a id=1194></a>    remain: <a href="../h_src/57953068.htm" class="localvar">p</a> = <a href="../h_src/57952796.htm" class="localvar">next</a>; continue;
  }
<a id=1196></a>  return <a href="../h_src/57953068.htm" class="localvar">p</a>;
}


<a id=1200></a><a  class="comments">/*</a>
<a id=1201></a><a  class="comments">** Correct all gray lists, coalescing them into 'grayagain'.</a>
<a id=1202></a><a  class="comments">*/</a>
<a id=1203></a>static void <a href="../h_src/57952660.htm" class="function">correctgraylists</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57952524.htm" class="localvar">g</a>) {
<a id=1204></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57952388.htm" class="localvar">list</a> = <a href="../h_src/57953204.htm" class="function">correctgraylist</a>(&amp;<a href="../h_src/57952524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>);
<a id=1205></a>  *<a href="../h_src/57952388.htm" class="localvar">list</a> = <a href="../h_src/57952524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644936.htm" class="variable">weak</a>; <a href="../h_src/57952524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644936.htm" class="variable">weak</a> = NULL;
<a id=1206></a>  <a href="../h_src/57952388.htm" class="localvar">list</a> = <a href="../h_src/57953204.htm" class="function">correctgraylist</a>(<a href="../h_src/57952388.htm" class="localvar">list</a>);
<a id=1207></a>  *<a href="../h_src/57952388.htm" class="localvar">list</a> = <a href="../h_src/57952524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a>; <a href="../h_src/57952524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a> = NULL;
<a id=1208></a>  <a href="../h_src/57952388.htm" class="localvar">list</a> = <a href="../h_src/57953204.htm" class="function">correctgraylist</a>(<a href="../h_src/57952388.htm" class="localvar">list</a>);
<a id=1209></a>  *<a href="../h_src/57952388.htm" class="localvar">list</a> = <a href="../h_src/57952524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644868.htm" class="variable">ephemeron</a>; <a href="../h_src/57952524.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644868.htm" class="variable">ephemeron</a> = NULL;
<a id=1210></a>  <a href="../h_src/57953204.htm" class="function">correctgraylist</a>(<a href="../h_src/57952388.htm" class="localvar">list</a>);
}


<a id=1214></a><a  class="comments">/*</a>
<a id=1215></a><a  class="comments">** Mark black 'OLD1' objects when starting a new young collection.</a>
<a id=1216></a><a  class="comments">** Gray objects are already in some gray list, and so will be visited</a>
<a id=1217></a><a  class="comments">** in the atomic step.</a>
<a id=1218></a><a  class="comments">*/</a>
<a id=1219></a>static void <a href="../h_src/57952252.htm" class="function">markold</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57952116.htm" class="localvar">g</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57951980.htm" class="localvar">from</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57951844.htm" class="localvar">to</a>) {
<a id=1220></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57951708.htm" class="localvar">p</a>;
<a id=1221></a>  for (<a href="../h_src/57951708.htm" class="localvar">p</a> = <a href="../h_src/57951980.htm" class="localvar">from</a>; <a href="../h_src/57951708.htm" class="localvar">p</a> != <a href="../h_src/57951844.htm" class="localvar">to</a>; <a href="../h_src/57951708.htm" class="localvar">p</a> = <a href="../h_src/57951708.htm" class="localvar">p</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>) {
<a id=1222></a>    if (<a href="../h_src/57623924.htm" class="macro">getage</a>(<a href="../h_src/57951708.htm" class="localvar">p</a>) == <a href="../h_src/57624604.htm" class="macro">G_OLD1</a>) {
<a id=1223></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57626372.htm" class="macro">iswhite</a>(p));
<a id=1224></a>      <a href="../h_src/57623516.htm" class="macro">changeage</a>(<a href="../h_src/57951708.htm" class="localvar">p</a>, <a href="../h_src/57624604.htm" class="macro">G_OLD1</a>, <a href="../h_src/57624468.htm" class="macro">G_OLD</a>);  <a  class="comments">/* now they are old */</a>
<a id=1225></a>      if (<a href="../h_src/57626236.htm" class="macro">isblack</a>(<a href="../h_src/57951708.htm" class="localvar">p</a>))
<a id=1226></a>        <a href="../h_src/57826752.htm" class="function">reallymarkobject</a>(<a href="../h_src/57952116.htm" class="localvar">g</a>, <a href="../h_src/57951708.htm" class="localvar">p</a>);
    }
  }
}


<a id=1232></a><a  class="comments">/*</a>
<a id=1233></a><a  class="comments">** Finish a young-generation collection.</a>
<a id=1234></a><a  class="comments">*/</a>
<a id=1235></a>static void <a href="../h_src/57951572.htm" class="function">finishgencycle</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57951436.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57951300.htm" class="localvar">g</a>) {
<a id=1236></a>  <a href="../h_src/57952660.htm" class="function">correctgraylists</a>(<a href="../h_src/57951300.htm" class="localvar">g</a>);
<a id=1237></a>  <a href="../h_src/57963676.htm" class="function">checkSizes</a>(<a href="../h_src/57951436.htm" class="localvar">L</a>, <a href="../h_src/57951300.htm" class="localvar">g</a>);
<a id=1238></a>  <a href="../h_src/57951300.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>;  <a  class="comments">/* skip restart */</a>
<a id=1239></a>  if (!<a href="../h_src/57951300.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645616.htm" class="variable">gcemergency</a>)
<a id=1240></a>    <a href="../h_src/57959732.htm" class="function">callallpendingfinalizers</a>(<a href="../h_src/57951436.htm" class="localvar">L</a>);
}


<a id=1244></a><a  class="comments">/*</a>
<a id=1245></a><a  class="comments">** Does a young collection. First, mark 'OLD1' objects. Then does the</a>
<a id=1246></a><a  class="comments">** atomic step. Then, sweep all lists and advance pointers. Finally,</a>
<a id=1247></a><a  class="comments">** finish the collection.</a>
<a id=1248></a><a  class="comments">*/</a>
<a id=1249></a>static void <a href="../h_src/57951164.htm" class="function">youngcollection</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57951028.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57950892.htm" class="localvar">g</a>) {
<a id=1250></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57950756.htm" class="localvar">psurvival</a>;  <a  class="comments">/* to point to first non-dead survival object */</a>
<a id=1251></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57950620.htm" class="localvar">dummy</a>;  <a  class="comments">/* dummy out parameter to 'sweepgen' */</a>
<a id=1252></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;gcstate == <a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>);
<a id=1253></a>  if (<a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a>) {  <a  class="comments">/* are there regular OLD1 objects? */</a>
<a id=1254></a>    <a href="../h_src/57952252.htm" class="function">markold</a>(<a href="../h_src/57950892.htm" class="localvar">g</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644460.htm" class="variable">reallyold</a>);  <a  class="comments">/* mark them */</a>
<a id=1255></a>    <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a> = NULL;  <a  class="comments">/* no more OLD1 objects (for now) */</a>
  }
<a id=1257></a>  <a href="../h_src/57952252.htm" class="function">markold</a>(<a href="../h_src/57950892.htm" class="localvar">g</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644188.htm" class="variable">finobjrold</a>);
<a id=1258></a>  <a href="../h_src/57952252.htm" class="function">markold</a>(<a href="../h_src/57950892.htm" class="localvar">g</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>, NULL);
<a id=1259></a>  <a href="../h_src/57826616.htm" class="function">atomic</a>(<a href="../h_src/57951028.htm" class="localvar">L</a>);

<a id=1261></a>  <a  class="comments">/* sweep nursery and get a pointer to its last live element */</a>
<a id=1262></a>  <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57629364.htm" class="macro">GCSswpallgc</a>;
<a id=1263></a>  <a href="../h_src/57950756.htm" class="localvar">psurvival</a> = <a href="../h_src/57955108.htm" class="function">sweepgen</a>(<a href="../h_src/57951028.htm" class="localvar">L</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>, &amp;<a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644596.htm" class="variable">survival</a>, &amp;<a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a>);
<a id=1264></a>  <a  class="comments">/* sweep 'survival' */</a>
<a id=1265></a>  <a href="../h_src/57955108.htm" class="function">sweepgen</a>(<a href="../h_src/57951028.htm" class="localvar">L</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>, <a href="../h_src/57950756.htm" class="localvar">psurvival</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644528.htm" class="variable">old1</a>, &amp;<a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a>);
<a id=1266></a>  <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644460.htm" class="variable">reallyold</a> = <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644528.htm" class="variable">old1</a>;
<a id=1267></a>  <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644528.htm" class="variable">old1</a> = *<a href="../h_src/57950756.htm" class="localvar">psurvival</a>;  <a  class="comments">/* 'survival' survivals are old now */</a>
<a id=1268></a>  <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644596.htm" class="variable">survival</a> = <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>;  <a  class="comments">/* all news are survivals */</a>

<a id=1270></a>  <a  class="comments">/* repeat for 'finobj' lists */</a>
<a id=1271></a>  <a href="../h_src/57950620.htm" class="localvar">dummy</a> = NULL;  <a  class="comments">/* no 'firstold1' optimization for 'finobj' lists */</a>
<a id=1272></a>  <a href="../h_src/57950756.htm" class="localvar">psurvival</a> = <a href="../h_src/57955108.htm" class="function">sweepgen</a>(<a href="../h_src/57951028.htm" class="localvar">L</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>, &amp;<a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644324.htm" class="variable">finobjsur</a>, &amp;<a href="../h_src/57950620.htm" class="localvar">dummy</a>);
<a id=1273></a>  <a  class="comments">/* sweep 'survival' */</a>
<a id=1274></a>  <a href="../h_src/57955108.htm" class="function">sweepgen</a>(<a href="../h_src/57951028.htm" class="localvar">L</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>, <a href="../h_src/57950756.htm" class="localvar">psurvival</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644256.htm" class="variable">finobjold1</a>, &amp;<a href="../h_src/57950620.htm" class="localvar">dummy</a>);
<a id=1275></a>  <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644188.htm" class="variable">finobjrold</a> = <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644256.htm" class="variable">finobjold1</a>;
<a id=1276></a>  <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644256.htm" class="variable">finobjold1</a> = *<a href="../h_src/57950756.htm" class="localvar">psurvival</a>;  <a  class="comments">/* 'survival' survivals are old now */</a>
<a id=1277></a>  <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644324.htm" class="variable">finobjsur</a> = <a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>;  <a  class="comments">/* all news are survivals */</a>

<a id=1279></a>  <a href="../h_src/57955108.htm" class="function">sweepgen</a>(<a href="../h_src/57951028.htm" class="localvar">L</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>, &amp;<a href="../h_src/57950892.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>, NULL, &amp;<a href="../h_src/57950620.htm" class="localvar">dummy</a>);
<a id=1280></a>  <a href="../h_src/57951572.htm" class="function">finishgencycle</a>(<a href="../h_src/57951028.htm" class="localvar">L</a>, <a href="../h_src/57950892.htm" class="localvar">g</a>);
}


<a id=1284></a><a  class="comments">/*</a>
<a id=1285></a><a  class="comments">** Clears all gray lists, sweeps objects, and prepare sublists to enter</a>
<a id=1286></a><a  class="comments">** generational mode. The sweeps remove dead objects and turn all</a>
<a id=1287></a><a  class="comments">** surviving objects to old. Threads go back to 'grayagain'; everything</a>
<a id=1288></a><a  class="comments">** else is turned black (not in any gray list).</a>
<a id=1289></a><a  class="comments">*/</a>
<a id=1290></a>static void <a href="../h_src/57950484.htm" class="function">atomic2gen</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57950348.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57950212.htm" class="localvar">g</a>) {
<a id=1291></a>  <a href="../h_src/57819204.htm" class="function">cleargraylists</a>(<a href="../h_src/57950212.htm" class="localvar">g</a>);
<a id=1292></a>  <a  class="comments">/* sweep all elements making them old */</a>
<a id=1293></a>  <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57629364.htm" class="macro">GCSswpallgc</a>;
<a id=1294></a>  <a href="../h_src/57955924.htm" class="function">sweep2old</a>(<a href="../h_src/57950348.htm" class="localvar">L</a>, &amp;<a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>);
<a id=1295></a>  <a  class="comments">/* everything alive now is old */</a>
<a id=1296></a>  <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644460.htm" class="variable">reallyold</a> = <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644528.htm" class="variable">old1</a> = <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644596.htm" class="variable">survival</a> = <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>;
<a id=1297></a>  <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644392.htm" class="variable">firstold1</a> = NULL;  <a  class="comments">/* there are no OLD1 objects anywhere */</a>

<a id=1299></a>  <a  class="comments">/* repeat for 'finobj' lists */</a>
<a id=1300></a>  <a href="../h_src/57955924.htm" class="function">sweep2old</a>(<a href="../h_src/57950348.htm" class="localvar">L</a>, &amp;<a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>);
<a id=1301></a>  <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644188.htm" class="variable">finobjrold</a> = <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644256.htm" class="variable">finobjold1</a> = <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644324.htm" class="variable">finobjsur</a> = <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>;

<a id=1303></a>  <a href="../h_src/57955924.htm" class="function">sweep2old</a>(<a href="../h_src/57950348.htm" class="localvar">L</a>, &amp;<a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>);

<a id=1305></a>  <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645956.htm" class="variable">gckind</a> = <a href="../h_src/57652144.htm" class="macro">KGC_GEN</a>;
<a id=1306></a>  <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646432.htm" class="variable">lastatomic</a> = 0;
<a id=1307></a>  <a href="../h_src/57950212.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a> = <a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(<a href="../h_src/57950212.htm" class="localvar">g</a>);  <a  class="comments">/* base for memory control */</a>
<a id=1308></a>  <a href="../h_src/57951572.htm" class="function">finishgencycle</a>(<a href="../h_src/57950348.htm" class="localvar">L</a>, <a href="../h_src/57950212.htm" class="localvar">g</a>);
}


<a id=1312></a><a  class="comments">/*</a>
<a id=1313></a><a  class="comments">** Set debt for the next minor collection, which will happen when</a>
<a id=1314></a><a  class="comments">** memory grows 'genminormul'%.</a>
<a id=1315></a><a  class="comments">*/</a>
<a id=1316></a>static void <a href="../h_src/57950076.htm" class="function">setminordebt</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57949940.htm" class="localvar">g</a>) {
<a id=1317></a>  <a href="../h_src/57638612.htm" class="function">luaE_setdebt</a>(<a href="../h_src/57949940.htm" class="localvar">g</a>, -(<a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57550548.htm" class="type">l_mem</a>, (<a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(<a href="../h_src/57949940.htm" class="localvar">g</a>) / 100)) * <a href="../h_src/57949940.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645820.htm" class="variable">genminormul</a>));
}


<a id=1321></a><a  class="comments">/*</a>
<a id=1322></a><a  class="comments">** Enter generational mode. Must go until the end of an atomic cycle</a>
<a id=1323></a><a  class="comments">** to ensure that all objects are correctly marked and weak tables</a>
<a id=1324></a><a  class="comments">** are cleared. Then, turn all objects into old and finishes the</a>
<a id=1325></a><a  class="comments">** collection.</a>
<a id=1326></a><a  class="comments">*/</a>
<a id=1327></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57949804.htm" class="function">entergen</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57949668.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57949532.htm" class="localvar">g</a>) {
<a id=1328></a>  <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57949396.htm" class="localvar">numobjs</a>;
<a id=1329></a>  <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a>(<a href="../h_src/57949668.htm" class="localvar">L</a>, <a href="../h_src/57627868.htm" class="macro">bitmask</a>(<a href="../h_src/57628684.htm" class="macro">GCSpause</a>));  <a  class="comments">/* prepare to start a new cycle */</a>
<a id=1330></a>  <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a>(<a href="../h_src/57949668.htm" class="localvar">L</a>, <a href="../h_src/57627868.htm" class="macro">bitmask</a>(<a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>));  <a  class="comments">/* start new cycle */</a>
<a id=1331></a>  <a href="../h_src/57949396.htm" class="localvar">numobjs</a> = <a href="../h_src/57826616.htm" class="function">atomic</a>(<a href="../h_src/57949668.htm" class="localvar">L</a>);  <a  class="comments">/* propagates all and then do the atomic stuff */</a>
<a id=1332></a>  <a href="../h_src/57950484.htm" class="function">atomic2gen</a>(<a href="../h_src/57949668.htm" class="localvar">L</a>, <a href="../h_src/57949532.htm" class="localvar">g</a>);
<a id=1333></a>  <a href="../h_src/57950076.htm" class="function">setminordebt</a>(<a href="../h_src/57949532.htm" class="localvar">g</a>);  <a  class="comments">/* set debt assuming next cycle will be minor */</a>
<a id=1334></a>  return <a href="../h_src/57949396.htm" class="localvar">numobjs</a>;
}


<a id=1338></a><a  class="comments">/*</a>
<a id=1339></a><a  class="comments">** Enter incremental mode. Turn all objects white, make all</a>
<a id=1340></a><a  class="comments">** intermediate lists point to NULL (to avoid invalid pointers),</a>
<a id=1341></a><a  class="comments">** and go to the pause state.</a>
<a id=1342></a><a  class="comments">*/</a>
<a id=1343></a>static void <a href="../h_src/57949260.htm" class="function">enterinc</a> (<a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57949124.htm" class="localvar">g</a>) {
<a id=1344></a>  <a href="../h_src/57953748.htm" class="function">whitelist</a>(<a href="../h_src/57949124.htm" class="localvar">g</a>, <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>);
<a id=1345></a>  <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644460.htm" class="variable">reallyold</a> = <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644528.htm" class="variable">old1</a> = <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644596.htm" class="variable">survival</a> = NULL;
<a id=1346></a>  <a href="../h_src/57953748.htm" class="function">whitelist</a>(<a href="../h_src/57949124.htm" class="localvar">g</a>, <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>);
<a id=1347></a>  <a href="../h_src/57953748.htm" class="function">whitelist</a>(<a href="../h_src/57949124.htm" class="localvar">g</a>, <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>);
<a id=1348></a>  <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644188.htm" class="variable">finobjrold</a> = <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644256.htm" class="variable">finobjold1</a> = <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644324.htm" class="variable">finobjsur</a> = NULL;
<a id=1349></a>  <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57628684.htm" class="macro">GCSpause</a>;
<a id=1350></a>  <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645956.htm" class="variable">gckind</a> = <a href="../h_src/57652280.htm" class="macro">KGC_INC</a>;
<a id=1351></a>  <a href="../h_src/57949124.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646432.htm" class="variable">lastatomic</a> = 0;
}


<a id=1355></a><a  class="comments">/*</a>
<a id=1356></a><a  class="comments">** Change collector mode to 'newmode'.</a>
<a id=1357></a><a  class="comments">*/</a>
<a id=1358></a>void <a href="../h_src/57620252.htm" class="function">luaC_changemode</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57948988.htm" class="localvar">L</a>, int <a href="../h_src/57948852.htm" class="localvar">newmode</a>) {
<a id=1359></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57948716.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57948988.htm" class="localvar">L</a>);
<a id=1360></a>  if (<a href="../h_src/57948852.htm" class="localvar">newmode</a> != <a href="../h_src/57948716.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645956.htm" class="variable">gckind</a>) {
<a id=1361></a>    if (<a href="../h_src/57948852.htm" class="localvar">newmode</a> == <a href="../h_src/57652144.htm" class="macro">KGC_GEN</a>)  <a  class="comments">/* entering generational mode? */</a>
<a id=1362></a>      <a href="../h_src/57949804.htm" class="function">entergen</a>(<a href="../h_src/57948988.htm" class="localvar">L</a>, <a href="../h_src/57948716.htm" class="localvar">g</a>);
    else
<a id=1364></a>      <a href="../h_src/57949260.htm" class="function">enterinc</a>(<a href="../h_src/57948716.htm" class="localvar">g</a>);  <a  class="comments">/* entering incremental mode */</a>
  }
<a id=1366></a>  <a href="../h_src/57948716.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646432.htm" class="variable">lastatomic</a> = 0;
}


<a id=1370></a><a  class="comments">/*</a>
<a id=1371></a><a  class="comments">** Does a full collection in generational mode.</a>
<a id=1372></a><a  class="comments">*/</a>
<a id=1373></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57948580.htm" class="function">fullgen</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57948444.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57948308.htm" class="localvar">g</a>) {
<a id=1374></a>  <a href="../h_src/57949260.htm" class="function">enterinc</a>(<a href="../h_src/57948308.htm" class="localvar">g</a>);
<a id=1375></a>  return <a href="../h_src/57949804.htm" class="function">entergen</a>(<a href="../h_src/57948444.htm" class="localvar">L</a>, <a href="../h_src/57948308.htm" class="localvar">g</a>);
}


<a id=1379></a><a  class="comments">/*</a>
<a id=1380></a><a  class="comments">** Does a major collection after last collection was a &quot;bad collection&quot;.</a>
<a id=1381></a><a  class="comments">**</a>
<a id=1382></a><a  class="comments">** When the program is building a big structure, it allocates lots of</a>
<a id=1383></a><a  class="comments">** memory but generates very little garbage. In those scenarios,</a>
<a id=1384></a><a  class="comments">** the generational mode just wastes time doing small collections, and</a>
<a id=1385></a><a  class="comments">** major collections are frequently what we call a &quot;bad collection&quot;, a</a>
<a id=1386></a><a  class="comments">** collection that frees too few objects. To avoid the cost of switching</a>
<a id=1387></a><a  class="comments">** between generational mode and the incremental mode needed for full</a>
<a id=1388></a><a  class="comments">** (major) collections, the collector tries to stay in incremental mode</a>
<a id=1389></a><a  class="comments">** after a bad collection, and to switch back to generational mode only</a>
<a id=1390></a><a  class="comments">** after a &quot;good&quot; collection (one that traverses less than 9/8 objects</a>
<a id=1391></a><a  class="comments">** of the previous one).</a>
<a id=1392></a><a  class="comments">** The collector must choose whether to stay in incremental mode or to</a>
<a id=1393></a><a  class="comments">** switch back to generational mode before sweeping. At this point, it</a>
<a id=1394></a><a  class="comments">** does not know the real memory in use, so it cannot use memory to</a>
<a id=1395></a><a  class="comments">** decide whether to return to generational mode. Instead, it uses the</a>
<a id=1396></a><a  class="comments">** number of objects traversed (returned by 'atomic') as a proxy. The</a>
<a id=1397></a><a  class="comments">** field 'g-&gt;lastatomic' keeps this count from the last collection.</a>
<a id=1398></a><a  class="comments">** ('g-&gt;lastatomic != 0' also means that the last collection was bad.)</a>
<a id=1399></a><a  class="comments">*/</a>
<a id=1400></a>static void <a href="../h_src/57948172.htm" class="function">stepgenfull</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57948036.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57947900.htm" class="localvar">g</a>) {
<a id=1401></a>  <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57947764.htm" class="localvar">newatomic</a>;  <a  class="comments">/* count of traversed objects */</a>
<a id=1402></a>  <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57947628.htm" class="localvar">lastatomic</a> = <a href="../h_src/57947900.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646432.htm" class="variable">lastatomic</a>;  <a  class="comments">/* count from last collection */</a>
<a id=1403></a>  if (<a href="../h_src/57947900.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645956.htm" class="variable">gckind</a> == <a href="../h_src/57652144.htm" class="macro">KGC_GEN</a>)  <a  class="comments">/* still in generational mode? */</a>
<a id=1404></a>    <a href="../h_src/57949260.htm" class="function">enterinc</a>(<a href="../h_src/57947900.htm" class="localvar">g</a>);  <a  class="comments">/* enter incremental mode */</a>
<a id=1405></a>  <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a>(<a href="../h_src/57948036.htm" class="localvar">L</a>, <a href="../h_src/57627868.htm" class="macro">bitmask</a>(<a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>));  <a  class="comments">/* start new cycle */</a>
<a id=1406></a>  <a href="../h_src/57947764.htm" class="localvar">newatomic</a> = <a href="../h_src/57826616.htm" class="function">atomic</a>(<a href="../h_src/57948036.htm" class="localvar">L</a>);  <a  class="comments">/* mark everybody */</a>
<a id=1407></a>  if (<a href="../h_src/57947764.htm" class="localvar">newatomic</a> &lt; <a href="../h_src/57947628.htm" class="localvar">lastatomic</a> + (<a href="../h_src/57947628.htm" class="localvar">lastatomic</a> &gt;&gt; 3)) {  <a  class="comments">/* good collection? */</a>
<a id=1408></a>    <a href="../h_src/57950484.htm" class="function">atomic2gen</a>(<a href="../h_src/57948036.htm" class="localvar">L</a>, <a href="../h_src/57947900.htm" class="localvar">g</a>);  <a  class="comments">/* return to generational mode */</a>
<a id=1409></a>    <a href="../h_src/57950076.htm" class="function">setminordebt</a>(<a href="../h_src/57947900.htm" class="localvar">g</a>);
  }
<a id=1411></a>  else {  <a  class="comments">/* another bad collection; stay in incremental mode */</a>
<a id=1412></a>    <a href="../h_src/57947900.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a> = <a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(<a href="../h_src/57947900.htm" class="localvar">g</a>);  <a  class="comments">/* first estimate */</a>;
<a id=1413></a>    <a href="../h_src/57826480.htm" class="function">entersweep</a>(<a href="../h_src/57948036.htm" class="localvar">L</a>);
<a id=1414></a>    <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a>(<a href="../h_src/57948036.htm" class="localvar">L</a>, <a href="../h_src/57627868.htm" class="macro">bitmask</a>(<a href="../h_src/57628684.htm" class="macro">GCSpause</a>));  <a  class="comments">/* finish collection */</a>
<a id=1415></a>    <a href="../h_src/57956740.htm" class="function">setpause</a>(<a href="../h_src/57947900.htm" class="localvar">g</a>);
<a id=1416></a>    <a href="../h_src/57947900.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646432.htm" class="variable">lastatomic</a> = <a href="../h_src/57947764.htm" class="localvar">newatomic</a>;
  }
}


<a id=1421></a><a  class="comments">/*</a>
<a id=1422></a><a  class="comments">** Does a generational &quot;step&quot;.</a>
<a id=1423></a><a  class="comments">** Usually, this means doing a minor collection and setting the debt to</a>
<a id=1424></a><a  class="comments">** make another collection when memory grows 'genminormul'% larger.</a>
<a id=1425></a><a  class="comments">**</a>
<a id=1426></a><a  class="comments">** However, there are exceptions.  If memory grows 'genmajormul'%</a>
<a id=1427></a><a  class="comments">** larger than it was at the end of the last major collection (kept</a>
<a id=1428></a><a  class="comments">** in 'g-&gt;GCestimate'), the function does a major collection. At the</a>
<a id=1429></a><a  class="comments">** end, it checks whether the major collection was able to free a</a>
<a id=1430></a><a  class="comments">** decent amount of memory (at least half the growth in memory since</a>
<a id=1431></a><a  class="comments">** previous major collection). If so, the collector keeps its state,</a>
<a id=1432></a><a  class="comments">** and the next collection will probably be minor again. Otherwise,</a>
<a id=1433></a><a  class="comments">** we have what we call a &quot;bad collection&quot;. In that case, set the field</a>
<a id=1434></a><a  class="comments">** 'g-&gt;lastatomic' to signal that fact, so that the next collection will</a>
<a id=1435></a><a  class="comments">** go to 'stepgenfull'.</a>
<a id=1436></a><a  class="comments">**</a>
<a id=1437></a><a  class="comments">** 'GCdebt &lt;= 0' means an explicit call to GC step with &quot;size&quot; zero;</a>
<a id=1438></a><a  class="comments">** in that case, do a minor collection.</a>
<a id=1439></a><a  class="comments">*/</a>
<a id=1440></a>static void <a href="../h_src/57947492.htm" class="function">genstep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57947356.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57947220.htm" class="localvar">g</a>) {
<a id=1441></a>  if (<a href="../h_src/57947220.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646432.htm" class="variable">lastatomic</a> != 0)  <a  class="comments">/* last collection was a bad one? */</a>
<a id=1442></a>    <a href="../h_src/57948172.htm" class="function">stepgenfull</a>(<a href="../h_src/57947356.htm" class="localvar">L</a>, <a href="../h_src/57947220.htm" class="localvar">g</a>);  <a  class="comments">/* do a full step */</a>
  else {
<a id=1444></a>    <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57947084.htm" class="localvar">majorbase</a> = <a href="../h_src/57947220.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a>;  <a  class="comments">/* memory after last major collection */</a>
<a id=1445></a>    <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57946948.htm" class="localvar">majorinc</a> = (<a href="../h_src/57947084.htm" class="localvar">majorbase</a> / 100) * <a href="../h_src/57622972.htm" class="macro">getgcparam</a>(<a href="../h_src/57947220.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645752.htm" class="variable">genmajormul</a>);
<a id=1446></a>    if (<a href="../h_src/57947220.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> &gt; 0 &amp;&amp; <a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(<a href="../h_src/57947220.htm" class="localvar">g</a>) &gt; <a href="../h_src/57947084.htm" class="localvar">majorbase</a> + <a href="../h_src/57946948.htm" class="localvar">majorinc</a>) {
<a id=1447></a>      <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57946812.htm" class="localvar">numobjs</a> = <a href="../h_src/57948580.htm" class="function">fullgen</a>(<a href="../h_src/57947356.htm" class="localvar">L</a>, <a href="../h_src/57947220.htm" class="localvar">g</a>);  <a  class="comments">/* do a major collection */</a>
<a id=1448></a>      if (<a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(<a href="../h_src/57947220.htm" class="localvar">g</a>) &lt; <a href="../h_src/57947084.htm" class="localvar">majorbase</a> + (<a href="../h_src/57946948.htm" class="localvar">majorinc</a> / 2)) {
<a id=1449></a>        <a  class="comments">/* collected at least half of memory growth since last major</a>
<a id=1450></a><a  class="comments">           collection; keep doing minor collections. */</a>
<a id=1451></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;lastatomic == 0);
      }
<a id=1453></a>      else {  <a  class="comments">/* bad collection */</a>
<a id=1454></a>        <a href="../h_src/57947220.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646432.htm" class="variable">lastatomic</a> = <a href="../h_src/57946812.htm" class="localvar">numobjs</a>;  <a  class="comments">/* signal that last collection was bad */</a>
<a id=1455></a>        <a href="../h_src/57956740.htm" class="function">setpause</a>(<a href="../h_src/57947220.htm" class="localvar">g</a>);  <a  class="comments">/* do a long wait for next (major) collection */</a>
      }
    }
<a id=1458></a>    else {  <a  class="comments">/* regular case; do a minor collection */</a>
<a id=1459></a>      <a href="../h_src/57951164.htm" class="function">youngcollection</a>(<a href="../h_src/57947356.htm" class="localvar">L</a>, <a href="../h_src/57947220.htm" class="localvar">g</a>);
<a id=1460></a>      <a href="../h_src/57950076.htm" class="function">setminordebt</a>(<a href="../h_src/57947220.htm" class="localvar">g</a>);
<a id=1461></a>      <a href="../h_src/57947220.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a> = <a href="../h_src/57947084.htm" class="localvar">majorbase</a>;  <a  class="comments">/* preserve base value */</a>
    }
  }
<a id=1464></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57622428.htm" class="macro">isdecGCmodegen</a>(g));
}

<a id=1467></a><a  class="comments">/* }====================================================== */</a>


<a id=1470></a><a  class="comments">/*</a>
<a id=1471></a><a  class="comments">** {======================================================</a>
<a id=1472></a><a  class="comments">** GC control</a>
<a id=1473></a><a  class="comments">** =======================================================</a>
<a id=1474></a><a  class="comments">*/</a>


<a id=1477></a><a  class="comments">/*</a>
<a id=1478></a><a  class="comments">** Enter first sweep phase.</a>
<a id=1479></a><a  class="comments">** The call to 'sweeptolive' makes the pointer point to an object</a>
<a id=1480></a><a  class="comments">** inside the list (instead of to the header), so that the real sweep do</a>
<a id=1481></a><a  class="comments">** not need to skip objects created between &quot;now&quot; and the start of the</a>
<a id=1482></a><a  class="comments">** real sweep.</a>
<a id=1483></a><a  class="comments">*/</a>
<a id=1484></a>static void <a href="../h_src/57826480.htm" class="function">entersweep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57946676.htm" class="localvar">L</a>) {
<a id=1485></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57946540.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57946676.htm" class="localvar">L</a>);
<a id=1486></a>  <a href="../h_src/57946540.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57629364.htm" class="macro">GCSswpallgc</a>;
<a id=1487></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;sweepgc == NULL);
<a id=1488></a>  <a href="../h_src/57946540.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a> = <a href="../h_src/57964220.htm" class="function">sweeptolive</a>(<a href="../h_src/57946676.htm" class="localvar">L</a>, &amp;<a href="../h_src/57946540.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>);
}


<a id=1492></a><a  class="comments">/*</a>
<a id=1493></a><a  class="comments">** Delete all objects in list 'p' until (but not including) object</a>
<a id=1494></a><a  class="comments">** 'limit'.</a>
<a id=1495></a><a  class="comments">*/</a>
<a id=1496></a>static void <a href="../h_src/57946404.htm" class="function">deletelist</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57946268.htm" class="localvar">L</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57946132.htm" class="localvar">p</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57945996.htm" class="localvar">limit</a>) {
<a id=1497></a>  while (<a href="../h_src/57946132.htm" class="localvar">p</a> != <a href="../h_src/57945996.htm" class="localvar">limit</a>) {
<a id=1498></a>    <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57945860.htm" class="localvar">next</a> = <a href="../h_src/57946132.htm" class="localvar">p</a>-&gt;<a href="../h_src/57528176.htm" class="variable">next</a>;
<a id=1499></a>    <a href="../h_src/57966804.htm" class="function">freeobj</a>(<a href="../h_src/57946268.htm" class="localvar">L</a>, <a href="../h_src/57946132.htm" class="localvar">p</a>);
<a id=1500></a>    <a href="../h_src/57946132.htm" class="localvar">p</a> = <a href="../h_src/57945860.htm" class="localvar">next</a>;
  }
}


<a id=1505></a><a  class="comments">/*</a>
<a id=1506></a><a  class="comments">** Call all finalizers of the objects in the given Lua state, and</a>
<a id=1507></a><a  class="comments">** then free all objects, except for the main thread.</a>
<a id=1508></a><a  class="comments">*/</a>
<a id=1509></a>void <a href="../h_src/57620864.htm" class="function">luaC_freeallobjects</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57945724.htm" class="localvar">L</a>) {
<a id=1510></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57945588.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57945724.htm" class="localvar">L</a>);
<a id=1511></a>  <a href="../h_src/57945588.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645684.htm" class="variable">gcstp</a> = <a href="../h_src/57622020.htm" class="macro">GCSTPCLS</a>;  <a  class="comments">/* no extra finalizers after here */</a>
<a id=1512></a>  <a href="../h_src/57620252.htm" class="function">luaC_changemode</a>(<a href="../h_src/57945724.htm" class="localvar">L</a>, <a href="../h_src/57652280.htm" class="macro">KGC_INC</a>);
<a id=1513></a>  <a href="../h_src/57959052.htm" class="function">separatetobefnz</a>(<a href="../h_src/57945588.htm" class="localvar">g</a>, 1);  <a  class="comments">/* separate all objects with finalizers */</a>
<a id=1514></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;finobj == NULL);
<a id=1515></a>  <a href="../h_src/57959732.htm" class="function">callallpendingfinalizers</a>(<a href="../h_src/57945724.htm" class="localvar">L</a>);
<a id=1516></a>  <a href="../h_src/57946404.htm" class="function">deletelist</a>(<a href="../h_src/57945724.htm" class="localvar">L</a>, <a href="../h_src/57945588.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645344.htm" class="variable">allgc</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/57945588.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643848.htm" class="variable">mainthread</a>));
<a id=1517></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;finobj == NULL);  <a  class="comments">/* no new finalizers */</a>
<a id=1518></a>  <a href="../h_src/57946404.htm" class="function">deletelist</a>(<a href="../h_src/57945724.htm" class="localvar">L</a>, <a href="../h_src/57945588.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644664.htm" class="variable">fixedgc</a>, NULL);  <a  class="comments">/* collect fixed objects */</a>
<a id=1519></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;strt.nuse == 0);
}


<a id=1523></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57826616.htm" class="function">atomic</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57945452.htm" class="localvar">L</a>) {
<a id=1524></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57945316.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57945452.htm" class="localvar">L</a>);
<a id=1525></a>  <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57945180.htm" class="localvar">work</a> = 0;
<a id=1526></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57945044.htm" class="localvar">origweak</a>, *<a href="../h_src/57944908.htm" class="localvar">origall</a>;
<a id=1527></a>  <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57944772.htm" class="localvar">grayagain</a> = <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a>;  <a  class="comments">/* save original list */</a>
<a id=1528></a>  <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645004.htm" class="variable">grayagain</a> = NULL;
<a id=1529></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;ephemeron == NULL &amp;&amp; g-&gt;weak == NULL);
<a id=1530></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57626372.htm" class="macro">iswhite</a>(g-&gt;mainthread));
<a id=1531></a>  <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57629500.htm" class="macro">GCSatomic</a>;
<a id=1532></a>  <a href="../h_src/57827024.htm" class="macro">markobject</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, <a href="../h_src/57945452.htm" class="localvar">L</a>);  <a  class="comments">/* mark running thread */</a>
<a id=1533></a>  <a  class="comments">/* registry and global metatables may be changed by API */</a>
<a id=1534></a>  <a href="../h_src/57827296.htm" class="macro">markvalue</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, &amp;<a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646296.htm" class="variable">l_registry</a>);
<a id=1535></a>  <a href="../h_src/57821040.htm" class="function">markmt</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);  <a  class="comments">/* mark global metatables */</a>
<a id=1536></a>  <a href="../h_src/57945180.htm" class="localvar">work</a> += <a href="../h_src/57970748.htm" class="function">propagateall</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);  <a  class="comments">/* empties 'gray' list */</a>
<a id=1537></a>  <a  class="comments">/* remark occasional upvalues of (maybe) dead threads */</a>
<a id=1538></a>  <a href="../h_src/57945180.htm" class="localvar">work</a> += <a href="../h_src/57820088.htm" class="function">remarkupvals</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);
<a id=1539></a>  <a href="../h_src/57945180.htm" class="localvar">work</a> += <a href="../h_src/57970748.htm" class="function">propagateall</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);  <a  class="comments">/* propagate changes */</a>
<a id=1540></a>  <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645072.htm" class="variable">gray</a> = <a href="../h_src/57944772.htm" class="localvar">grayagain</a>;
<a id=1541></a>  <a href="../h_src/57945180.htm" class="localvar">work</a> += <a href="../h_src/57970748.htm" class="function">propagateall</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);  <a  class="comments">/* traverse 'grayagain' list */</a>
<a id=1542></a>  <a href="../h_src/57970340.htm" class="function">convergeephemerons</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);
<a id=1543></a>  <a  class="comments">/* at this point, all strongly accessible objects are marked. */</a>
<a id=1544></a>  <a  class="comments">/* Clear values from weak tables, before checking finalizers */</a>
<a id=1545></a>  <a href="../h_src/57968572.htm" class="function">clearbyvalues</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644936.htm" class="variable">weak</a>, NULL);
<a id=1546></a>  <a href="../h_src/57968572.htm" class="function">clearbyvalues</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a>, NULL);
<a id=1547></a>  <a href="../h_src/57945044.htm" class="localvar">origweak</a> = <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644936.htm" class="variable">weak</a>; <a href="../h_src/57944908.htm" class="localvar">origall</a> = <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a>;
<a id=1548></a>  <a href="../h_src/57959052.htm" class="function">separatetobefnz</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, 0);  <a  class="comments">/* separate objects to be finalized */</a>
<a id=1549></a>  <a href="../h_src/57945180.htm" class="localvar">work</a> += <a href="../h_src/57820632.htm" class="function">markbeingfnz</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);  <a  class="comments">/* mark objects that will be finalized */</a>
<a id=1550></a>  <a href="../h_src/57945180.htm" class="localvar">work</a> += <a href="../h_src/57970748.htm" class="function">propagateall</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);  <a  class="comments">/* remark, to propagate 'resurrection' */</a>
<a id=1551></a>  <a href="../h_src/57970340.htm" class="function">convergeephemerons</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);
<a id=1552></a>  <a  class="comments">/* at this point, all resurrected objects are marked. */</a>
<a id=1553></a>  <a  class="comments">/* remove dead objects from weak tables */</a>
<a id=1554></a>  <a href="../h_src/57969388.htm" class="function">clearbykeys</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644868.htm" class="variable">ephemeron</a>);  <a  class="comments">/* clear keys from all ephemeron tables */</a>
<a id=1555></a>  <a href="../h_src/57969388.htm" class="function">clearbykeys</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a>);  <a  class="comments">/* clear keys from all 'allweak' tables */</a>
<a id=1556></a>  <a  class="comments">/* clear values from resurrected weak tables */</a>
<a id=1557></a>  <a href="../h_src/57968572.htm" class="function">clearbyvalues</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644936.htm" class="variable">weak</a>, <a href="../h_src/57945044.htm" class="localvar">origweak</a>);
<a id=1558></a>  <a href="../h_src/57968572.htm" class="function">clearbyvalues</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>, <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644800.htm" class="variable">allweak</a>, <a href="../h_src/57944908.htm" class="localvar">origall</a>);
<a id=1559></a>  <a href="../h_src/57618892.htm" class="function">luaS_clearcache</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>);
<a id=1560></a>  <a href="../h_src/57945316.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646092.htm" class="variable">currentwhite</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/57625828.htm" class="macro">otherwhite</a>(<a href="../h_src/57945316.htm" class="localvar">g</a>));  <a  class="comments">/* flip current white */</a>
<a id=1561></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;gray == NULL);
<a id=1562></a>  return <a href="../h_src/57945180.htm" class="localvar">work</a>;  <a  class="comments">/* estimate of slots marked by 'atomic' */</a>
}


<a id=1566></a>static int <a href="../h_src/57944636.htm" class="function">sweepstep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57944500.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57944364.htm" class="localvar">g</a>,
<a id=1567></a>                      int <a href="../h_src/57944228.htm" class="localvar">nextstate</a>, <a href="../h_src/57527972.htm" class="type">GCObject</a> **<a href="../h_src/57944092.htm" class="localvar">nextlist</a>) {
<a id=1568></a>  if (<a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a>) {
<a id=1569></a>    <a href="../h_src/57550548.htm" class="type">l_mem</a> <a href="../h_src/57943956.htm" class="localvar">olddebt</a> = <a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a>;
<a id=1570></a>    int <a href="../h_src/57943820.htm" class="localvar">count</a>;
<a id=1571></a>    <a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a> = <a href="../h_src/57965716.htm" class="function">sweeplist</a>(<a href="../h_src/57944500.htm" class="localvar">L</a>, <a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a>, <a href="../h_src/57829064.htm" class="macro">GCSWEEPMAX</a>, &amp;<a href="../h_src/57943820.htm" class="localvar">count</a>);
<a id=1572></a>    <a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a> += <a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> - <a href="../h_src/57943956.htm" class="localvar">olddebt</a>;  <a  class="comments">/* update estimate */</a>
<a id=1573></a>    return <a href="../h_src/57943820.htm" class="localvar">count</a>;
  }
<a id=1575></a>  else {  <a  class="comments">/* enter next state */</a>
<a id=1576></a>    <a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57944228.htm" class="localvar">nextstate</a>;
<a id=1577></a>    <a href="../h_src/57944364.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645208.htm" class="variable">sweepgc</a> = <a href="../h_src/57944092.htm" class="localvar">nextlist</a>;
<a id=1578></a>    return 0;  <a  class="comments">/* no work done */</a>
  }
}


<a id=1583></a>static <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57943684.htm" class="function">singlestep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57943548.htm" class="localvar">L</a>) {
<a id=1584></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57943412.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>);
<a id=1585></a>  <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57943276.htm" class="localvar">work</a>;
<a id=1586></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!g-&gt;gcstopem);  <a  class="comments">/* collector is not reentrant */</a>
<a id=1587></a>  <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645888.htm" class="variable">gcstopem</a> = 1;  <a  class="comments">/* no emergency collections while collecting */</a>
<a id=1588></a>  switch (<a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a>) {
<a id=1589></a>    case <a href="../h_src/57628684.htm" class="macro">GCSpause</a>: {
<a id=1590></a>      <a href="../h_src/57818932.htm" class="function">restartcollection</a>(<a href="../h_src/57943412.htm" class="localvar">g</a>);
<a id=1591></a>      <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>;
<a id=1592></a>      <a href="../h_src/57943276.htm" class="localvar">work</a> = 1;
      break;
    }
<a id=1595></a>    case <a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>: {
<a id=1596></a>      if (<a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645072.htm" class="variable">gray</a> == NULL) {  <a  class="comments">/* no more gray objects? */</a>
<a id=1597></a>        <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57629636.htm" class="macro">GCSenteratomic</a>;  <a  class="comments">/* finish propagate phase */</a>
<a id=1598></a>        <a href="../h_src/57943276.htm" class="localvar">work</a> = 0;
      }
      else
<a id=1601></a>        <a href="../h_src/57943276.htm" class="localvar">work</a> = <a href="../h_src/57971156.htm" class="function">propagatemark</a>(<a href="../h_src/57943412.htm" class="localvar">g</a>);  <a  class="comments">/* traverse one gray object */</a>
      break;
    }
<a id=1604></a>    case <a href="../h_src/57629636.htm" class="macro">GCSenteratomic</a>: {
<a id=1605></a>      <a href="../h_src/57943276.htm" class="localvar">work</a> = <a href="../h_src/57826616.htm" class="function">atomic</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>);  <a  class="comments">/* work is what was traversed by 'atomic' */</a>
<a id=1606></a>      <a href="../h_src/57826480.htm" class="function">entersweep</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>);
<a id=1607></a>      <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646500.htm" class="variable">GCestimate</a> = <a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(<a href="../h_src/57943412.htm" class="localvar">g</a>);  <a  class="comments">/* first estimate */</a>;
      break;
    }
<a id=1610></a>    case <a href="../h_src/57629364.htm" class="macro">GCSswpallgc</a>: {  <a  class="comments">/* sweep &quot;regular&quot; objects */</a>
<a id=1611></a>      <a href="../h_src/57943276.htm" class="localvar">work</a> = <a href="../h_src/57944636.htm" class="function">sweepstep</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>, <a href="../h_src/57943412.htm" class="localvar">g</a>, <a href="../h_src/57629228.htm" class="macro">GCSswpfinobj</a>, &amp;<a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645140.htm" class="variable">finobj</a>);
      break;
    }
<a id=1614></a>    case <a href="../h_src/57629228.htm" class="macro">GCSswpfinobj</a>: {  <a  class="comments">/* sweep objects with finalizers */</a>
<a id=1615></a>      <a href="../h_src/57943276.htm" class="localvar">work</a> = <a href="../h_src/57944636.htm" class="function">sweepstep</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>, <a href="../h_src/57943412.htm" class="localvar">g</a>, <a href="../h_src/57629092.htm" class="macro">GCSswptobefnz</a>, &amp;<a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a>);
      break;
    }
<a id=1618></a>    case <a href="../h_src/57629092.htm" class="macro">GCSswptobefnz</a>: {  <a  class="comments">/* sweep objects to be finalized */</a>
<a id=1619></a>      <a href="../h_src/57943276.htm" class="localvar">work</a> = <a href="../h_src/57944636.htm" class="function">sweepstep</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>, <a href="../h_src/57943412.htm" class="localvar">g</a>, <a href="../h_src/57628956.htm" class="macro">GCSswpend</a>, NULL);
      break;
    }
<a id=1622></a>    case <a href="../h_src/57628956.htm" class="macro">GCSswpend</a>: {  <a  class="comments">/* finish sweeps */</a>
<a id=1623></a>      <a href="../h_src/57963676.htm" class="function">checkSizes</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>, <a href="../h_src/57943412.htm" class="localvar">g</a>);
<a id=1624></a>      <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57628820.htm" class="macro">GCScallfin</a>;
<a id=1625></a>      <a href="../h_src/57943276.htm" class="localvar">work</a> = 0;
      break;
    }
<a id=1628></a>    case <a href="../h_src/57628820.htm" class="macro">GCScallfin</a>: {  <a  class="comments">/* call remaining finalizers */</a>
<a id=1629></a>      if (<a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57644732.htm" class="variable">tobefnz</a> &amp;&amp; !<a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645616.htm" class="variable">gcemergency</a>) {
<a id=1630></a>        <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645888.htm" class="variable">gcstopem</a> = 0;  <a  class="comments">/* ok collections during finalizers */</a>
<a id=1631></a>        <a href="../h_src/57943276.htm" class="localvar">work</a> = <a href="../h_src/57960412.htm" class="function">runafewfinalizers</a>(<a href="../h_src/57943548.htm" class="localvar">L</a>, <a href="../h_src/57828928.htm" class="macro">GCFINMAX</a>) * <a href="../h_src/57828792.htm" class="macro">GCFINALIZECOST</a>;
      }
<a id=1633></a>      else {  <a  class="comments">/* emergency mode or no more finalizers */</a>
<a id=1634></a>        <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> = <a href="../h_src/57628684.htm" class="macro">GCSpause</a>;  <a  class="comments">/* finish collection */</a>
<a id=1635></a>        <a href="../h_src/57943276.htm" class="localvar">work</a> = 0;
      }
      break;
    }
<a id=1639></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0); return 0;
  }
<a id=1641></a>  <a href="../h_src/57943412.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645888.htm" class="variable">gcstopem</a> = 0;
<a id=1642></a>  return <a href="../h_src/57943276.htm" class="localvar">work</a>;
}


<a id=1646></a><a  class="comments">/*</a>
<a id=1647></a><a  class="comments">** advances the garbage collector until it reaches a state allowed</a>
<a id=1648></a><a  class="comments">** by 'statemask'</a>
<a id=1649></a><a  class="comments">*/</a>
<a id=1650></a>void <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57943140.htm" class="localvar">L</a>, int <a href="../h_src/57943004.htm" class="localvar">statesmask</a>) {
<a id=1651></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57942868.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57943140.htm" class="localvar">L</a>);
<a id=1652></a>  while (!<a href="../h_src/57627324.htm" class="macro">testbit</a>(<a href="../h_src/57943004.htm" class="localvar">statesmask</a>, <a href="../h_src/57942868.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a>))
<a id=1653></a>    <a href="../h_src/57943684.htm" class="function">singlestep</a>(<a href="../h_src/57943140.htm" class="localvar">L</a>);
}



<a id=1658></a><a  class="comments">/*</a>
<a id=1659></a><a  class="comments">** Performs a basic incremental step. The debt and step size are</a>
<a id=1660></a><a  class="comments">** converted from bytes to &quot;units of work&quot;; then the function loops</a>
<a id=1661></a><a  class="comments">** running single steps until adding that many units of work or</a>
<a id=1662></a><a  class="comments">** finishing a cycle (pause state). Finally, it sets the debt that</a>
<a id=1663></a><a  class="comments">** controls when next step will be performed.</a>
<a id=1664></a><a  class="comments">*/</a>
<a id=1665></a>static void <a href="../h_src/57942732.htm" class="function">incstep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57942596.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57942460.htm" class="localvar">g</a>) {
<a id=1666></a>  int <a href="../h_src/57942324.htm" class="localvar">stepmul</a> = (<a href="../h_src/57622972.htm" class="macro">getgcparam</a>(<a href="../h_src/57942460.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645480.htm" class="variable">gcstepmul</a>) | 1);  <a  class="comments">/* avoid division by 0 */</a>
<a id=1667></a>  <a href="../h_src/57550548.htm" class="type">l_mem</a> <a href="../h_src/57942188.htm" class="localvar">debt</a> = (<a href="../h_src/57942460.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646568.htm" class="variable">GCdebt</a> / <a href="../h_src/57828656.htm" class="macro">WORK2MEM</a>) * <a href="../h_src/57942324.htm" class="localvar">stepmul</a>;
<a id=1668></a>  <a href="../h_src/57550548.htm" class="type">l_mem</a> <a href="../h_src/57942052.htm" class="localvar">stepsize</a> = (<a href="../h_src/57942460.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645412.htm" class="variable">gcstepsize</a> &lt;= <a href="../h_src/57549664.htm" class="macro">log2maxs</a>(<a href="../h_src/57550548.htm" class="type">l_mem</a>))
<a id=1669></a>                 ? ((<a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57550548.htm" class="type">l_mem</a>, 1) &lt;&lt; <a href="../h_src/57942460.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645412.htm" class="variable">gcstepsize</a>) / <a href="../h_src/57828656.htm" class="macro">WORK2MEM</a>) * <a href="../h_src/57942324.htm" class="localvar">stepmul</a>
<a id=1670></a>                 : <a href="../h_src/57549936.htm" class="macro">MAX_LMEM</a>;  <a  class="comments">/* overflow; keep maximum value */</a>
<a id=1671></a>  do {  <a  class="comments">/* repeat until pause or enough &quot;credit&quot; (negative debt) */</a>
<a id=1672></a>    <a href="../h_src/57550616.htm" class="type">lu_mem</a> <a href="../h_src/57941916.htm" class="localvar">work</a> = <a href="../h_src/57943684.htm" class="function">singlestep</a>(<a href="../h_src/57942596.htm" class="localvar">L</a>);  <a  class="comments">/* perform one single step */</a>
<a id=1673></a>    <a href="../h_src/57942188.htm" class="localvar">debt</a> -= <a href="../h_src/57941916.htm" class="localvar">work</a>;
<a id=1674></a>  } while (<a href="../h_src/57942188.htm" class="localvar">debt</a> &gt; -<a href="../h_src/57942052.htm" class="localvar">stepsize</a> &amp;&amp; <a href="../h_src/57942460.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> != <a href="../h_src/57628684.htm" class="macro">GCSpause</a>);
<a id=1675></a>  if (<a href="../h_src/57942460.htm" class="localvar">g</a>-&gt;<a href="../h_src/57646024.htm" class="variable">gcstate</a> == <a href="../h_src/57628684.htm" class="macro">GCSpause</a>)
<a id=1676></a>    <a href="../h_src/57956740.htm" class="function">setpause</a>(<a href="../h_src/57942460.htm" class="localvar">g</a>);  <a  class="comments">/* pause until next cycle */</a>
  else {
<a id=1678></a>    <a href="../h_src/57942188.htm" class="localvar">debt</a> = (<a href="../h_src/57942188.htm" class="localvar">debt</a> / <a href="../h_src/57942324.htm" class="localvar">stepmul</a>) * <a href="../h_src/57828656.htm" class="macro">WORK2MEM</a>;  <a  class="comments">/* convert 'work units' to bytes */</a>
<a id=1679></a>    <a href="../h_src/57638612.htm" class="function">luaE_setdebt</a>(<a href="../h_src/57942460.htm" class="localvar">g</a>, <a href="../h_src/57942188.htm" class="localvar">debt</a>);
  }
}

<a id=1683></a><a  class="comments">/*</a>
<a id=1684></a><a  class="comments">** Performs a basic GC step if collector is running. (If collector is</a>
<a id=1685></a><a  class="comments">** not running, set a reasonable debt to avoid it being called at</a>
<a id=1686></a><a  class="comments">** every single check.)</a>
<a id=1687></a><a  class="comments">*/</a>
<a id=1688></a>void <a href="../h_src/57620796.htm" class="function">luaC_step</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57941780.htm" class="localvar">L</a>) {
<a id=1689></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57941644.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57941780.htm" class="localvar">L</a>);
<a id=1690></a>  if (!<a href="../h_src/57621884.htm" class="macro">gcrunning</a>(<a href="../h_src/57941644.htm" class="localvar">g</a>))  <a  class="comments">/* not running? */</a>
<a id=1691></a>    <a href="../h_src/57638612.htm" class="function">luaE_setdebt</a>(<a href="../h_src/57941644.htm" class="localvar">g</a>, -2000);
  else {
<a id=1693></a>    if(<a href="../h_src/57622428.htm" class="macro">isdecGCmodegen</a>(<a href="../h_src/57941644.htm" class="localvar">g</a>))
<a id=1694></a>      <a href="../h_src/57947492.htm" class="function">genstep</a>(<a href="../h_src/57941780.htm" class="localvar">L</a>, <a href="../h_src/57941644.htm" class="localvar">g</a>);
    else
<a id=1696></a>      <a href="../h_src/57942732.htm" class="function">incstep</a>(<a href="../h_src/57941780.htm" class="localvar">L</a>, <a href="../h_src/57941644.htm" class="localvar">g</a>);
  }
}


<a id=1701></a><a  class="comments">/*</a>
<a id=1702></a><a  class="comments">** Perform a full collection in incremental mode.</a>
<a id=1703></a><a  class="comments">** Before running the collection, check 'keepinvariant'; if it is true,</a>
<a id=1704></a><a  class="comments">** there may be some objects marked as black, so the collector has</a>
<a id=1705></a><a  class="comments">** to sweep all objects to turn them back to white (as white has not</a>
<a id=1706></a><a  class="comments">** changed, nothing will be collected).</a>
<a id=1707></a><a  class="comments">*/</a>
<a id=1708></a>static void <a href="../h_src/57941508.htm" class="function">fullinc</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57941372.htm" class="localvar">L</a>, <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57941236.htm" class="localvar">g</a>) {
<a id=1709></a>  if (<a href="../h_src/57628412.htm" class="macro">keepinvariant</a>(<a href="../h_src/57941236.htm" class="localvar">g</a>))  <a  class="comments">/* black objects? */</a>
<a id=1710></a>    <a href="../h_src/57826480.htm" class="function">entersweep</a>(<a href="../h_src/57941372.htm" class="localvar">L</a>); <a  class="comments">/* sweep everything to turn them back to white */</a>
<a id=1711></a>  <a  class="comments">/* finish any pending sweep phase to start a new cycle */</a>
<a id=1712></a>  <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a>(<a href="../h_src/57941372.htm" class="localvar">L</a>, <a href="../h_src/57627868.htm" class="macro">bitmask</a>(<a href="../h_src/57628684.htm" class="macro">GCSpause</a>));
<a id=1713></a>  <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a>(<a href="../h_src/57941372.htm" class="localvar">L</a>, <a href="../h_src/57627868.htm" class="macro">bitmask</a>(<a href="../h_src/57628820.htm" class="macro">GCScallfin</a>));  <a  class="comments">/* run up to finalizers */</a>
<a id=1714></a>  <a  class="comments">/* estimate must be correct after a full GC cycle */</a>
<a id=1715></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(g-&gt;GCestimate == <a href="../h_src/57638748.htm" class="macro">gettotalbytes</a>(g));
<a id=1716></a>  <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a>(<a href="../h_src/57941372.htm" class="localvar">L</a>, <a href="../h_src/57627868.htm" class="macro">bitmask</a>(<a href="../h_src/57628684.htm" class="macro">GCSpause</a>));  <a  class="comments">/* finish collection */</a>
<a id=1717></a>  <a href="../h_src/57956740.htm" class="function">setpause</a>(<a href="../h_src/57941236.htm" class="localvar">g</a>);
}


<a id=1721></a><a  class="comments">/*</a>
<a id=1722></a><a  class="comments">** Performs a full GC cycle; if 'isemergency', set a flag to avoid</a>
<a id=1723></a><a  class="comments">** some operations which could change the interpreter state in some</a>
<a id=1724></a><a  class="comments">** unexpected ways (running finalizers and shrinking some structures).</a>
<a id=1725></a><a  class="comments">*/</a>
<a id=1726></a>void <a href="../h_src/57620660.htm" class="function">luaC_fullgc</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57941100.htm" class="localvar">L</a>, int <a href="../h_src/57940964.htm" class="localvar">isemergency</a>) {
<a id=1727></a>  <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57940828.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57941100.htm" class="localvar">L</a>);
<a id=1728></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!g-&gt;gcemergency);
<a id=1729></a>  <a href="../h_src/57940828.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645616.htm" class="variable">gcemergency</a> = <a href="../h_src/57940964.htm" class="localvar">isemergency</a>;  <a  class="comments">/* set flag */</a>
<a id=1730></a>  if (<a href="../h_src/57940828.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645956.htm" class="variable">gckind</a> == <a href="../h_src/57652280.htm" class="macro">KGC_INC</a>)
<a id=1731></a>    <a href="../h_src/57941508.htm" class="function">fullinc</a>(<a href="../h_src/57941100.htm" class="localvar">L</a>, <a href="../h_src/57940828.htm" class="localvar">g</a>);
  else
<a id=1733></a>    <a href="../h_src/57948580.htm" class="function">fullgen</a>(<a href="../h_src/57941100.htm" class="localvar">L</a>, <a href="../h_src/57940828.htm" class="localvar">g</a>);
<a id=1734></a>  <a href="../h_src/57940828.htm" class="localvar">g</a>-&gt;<a href="../h_src/57645616.htm" class="variable">gcemergency</a> = 0;
}

<a id=1737></a><a  class="comments">/* }====================================================== */</a>


</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

