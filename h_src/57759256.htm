<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>ldebug.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57759256.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/57759256.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/57759256.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/57759256.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/57759256.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/57759256.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/57759256.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57759256.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/57759256.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: ldebug.c $</a>
<a id=3></a><a  class="comments">** Debug Interface</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/57759188.htm" class="macro">ldebug_c</a>
<a id=8></a>#define <a href="../h_src/57759052.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;stdarg.h&gt;
#include &lt;stddef.h&gt;
#include &lt;string.h&gt;

<a id=17></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=19></a>#include &quot;<a href="../h_src/57551432.htm" class="file">lapi.h</a>&quot;
<a id=20></a>#include &quot;<a href="../h_src/57706380.htm" class="file">lcode.h</a>&quot;
<a id=21></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=23></a>#include &quot;<a href="../h_src/57632424.htm" class="file">lfunc.h</a>&quot;
<a id=24></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=25></a>#include &quot;<a href="../h_src/57699512.htm" class="file">lopcodes.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;
<a id=27></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;
<a id=28></a>#include &quot;<a href="../h_src/57618348.htm" class="file">ltable.h</a>&quot;
<a id=29></a>#include &quot;<a href="../h_src/57501248.htm" class="file">ltm.h</a>&quot;
<a id=30></a>#include &quot;<a href="../h_src/57614676.htm" class="file">lvm.h</a>&quot;



<a id=34></a>#define <a href="../h_src/57758916.htm" class="macro">noLuaClosure</a>(f)		((f) == NULL || (f)-&gt;c.tt == LUA_VCCL)


<a id=37></a>static const char *<a href="../h_src/57758780.htm" class="function">funcnamefromcall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *ci,
                                                   const char **name);


<a id=41></a>static int <a href="../h_src/57758644.htm" class="function">currentpc</a> (<a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57758508.htm" class="localvar">ci</a>) {
<a id=42></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57647452.htm" class="macro">isLua</a>(ci));
<a id=43></a>  return <a href="../h_src/57636776.htm" class="macro">pcRel</a>(<a href="../h_src/57758508.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57507708.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>, <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57758508.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57531984.htm" class="variable">p</a>);
}


<a id=47></a><a  class="comments">/*</a>
<a id=48></a><a  class="comments">** Get a &quot;base line&quot; to find the line corresponding to an instruction.</a>
<a id=49></a><a  class="comments">** Base lines are regularly placed at MAXIWTHABS intervals, so usually</a>
<a id=50></a><a  class="comments">** an integer division gets the right place. When the source file has</a>
<a id=51></a><a  class="comments">** large sequences of empty/comment lines, it may need extra entries,</a>
<a id=52></a><a  class="comments">** so the original estimate needs a correction.</a>
<a id=53></a><a  class="comments">** If the original estimate is -1, the initial 'if' ensures that the</a>
<a id=54></a><a  class="comments">** 'while' will run at least once.</a>
<a id=55></a><a  class="comments">** The assertion that the estimate is a lower bound for the correct base</a>
<a id=56></a><a  class="comments">** is valid as long as the debug info has been generated with the same</a>
<a id=57></a><a  class="comments">** value for MAXIWTHABS or smaller. (Previous releases use a little</a>
<a id=58></a><a  class="comments">** smaller value.)</a>
<a id=59></a><a  class="comments">*/</a>
<a id=60></a>static int <a href="../h_src/57758372.htm" class="function">getbaseline</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57758236.htm" class="localvar">f</a>, int <a href="../h_src/57758100.htm" class="localvar">pc</a>, int *<a href="../h_src/57757964.htm" class="localvar">basepc</a>) {
<a id=61></a>  if (<a href="../h_src/57758236.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515324.htm" class="variable">sizeabslineinfo</a> == 0 || <a href="../h_src/57758100.htm" class="localvar">pc</a> &lt; <a href="../h_src/57758236.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>[0].<a href="../h_src/57516480.htm" class="variable">pc</a>) {
<a id=62></a>    *<a href="../h_src/57757964.htm" class="localvar">basepc</a> = -1;  <a  class="comments">/* start from the beginning */</a>
<a id=63></a>    return <a href="../h_src/57758236.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515256.htm" class="variable">linedefined</a>;
  }
  else {
<a id=66></a>    int <a href="../h_src/57757828.htm" class="localvar">i</a> = <a href="../h_src/57547080.htm" class="macro">cast_uint</a>(<a href="../h_src/57758100.htm" class="localvar">pc</a>) / <a href="../h_src/57636096.htm" class="macro">MAXIWTHABS</a> - 1;  <a  class="comments">/* get an estimate */</a>
<a id=67></a>    <a  class="comments">/* estimate must be a lower bound of the correct base */</a>
<a id=68></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(i &lt; 0 ||
              (i &lt; f-&gt;sizeabslineinfo &amp;&amp; f-&gt;abslineinfo[i].pc &lt;= pc));
<a id=70></a>    while (<a href="../h_src/57757828.htm" class="localvar">i</a> + 1 &lt; <a href="../h_src/57758236.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515324.htm" class="variable">sizeabslineinfo</a> &amp;&amp; <a href="../h_src/57758100.htm" class="localvar">pc</a> &gt;= <a href="../h_src/57758236.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>[<a href="../h_src/57757828.htm" class="localvar">i</a> + 1].<a href="../h_src/57516480.htm" class="variable">pc</a>)
<a id=71></a>      <a href="../h_src/57757828.htm" class="localvar">i</a>++;  <a  class="comments">/* low estimate; adjust it */</a>
<a id=72></a>    *<a href="../h_src/57757964.htm" class="localvar">basepc</a> = <a href="../h_src/57758236.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>[<a href="../h_src/57757828.htm" class="localvar">i</a>].<a href="../h_src/57516480.htm" class="variable">pc</a>;
<a id=73></a>    return <a href="../h_src/57758236.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>[<a href="../h_src/57757828.htm" class="localvar">i</a>].<a href="../h_src/57516412.htm" class="variable">line</a>;
  }
}


<a id=78></a><a  class="comments">/*</a>
<a id=79></a><a  class="comments">** Get the line corresponding to instruction 'pc' in function 'f';</a>
<a id=80></a><a  class="comments">** first gets a base line and from there does the increments until</a>
<a id=81></a><a  class="comments">** the desired instruction.</a>
<a id=82></a><a  class="comments">*/</a>
<a id=83></a>int <a href="../h_src/57635960.htm" class="function">luaG_getfuncline</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57757692.htm" class="localvar">f</a>, int <a href="../h_src/57757556.htm" class="localvar">pc</a>) {
<a id=84></a>  if (<a href="../h_src/57757692.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a> == NULL)  <a  class="comments">/* no debug information? */</a>
    return -1;
  else {
<a id=87></a>    int <a href="../h_src/57757420.htm" class="localvar">basepc</a>;
<a id=88></a>    int <a href="../h_src/57757284.htm" class="localvar">baseline</a> = <a href="../h_src/57758372.htm" class="function">getbaseline</a>(<a href="../h_src/57757692.htm" class="localvar">f</a>, <a href="../h_src/57757556.htm" class="localvar">pc</a>, &amp;<a href="../h_src/57757420.htm" class="localvar">basepc</a>);
<a id=89></a>    while (<a href="../h_src/57757420.htm" class="localvar">basepc</a>++ &lt; <a href="../h_src/57757556.htm" class="localvar">pc</a>) {  <a  class="comments">/* walk until given instruction */</a>
<a id=90></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(f-&gt;lineinfo[basepc] != <a href="../h_src/57636368.htm" class="macro">ABSLINEINFO</a>);
<a id=91></a>      <a href="../h_src/57757284.htm" class="localvar">baseline</a> += <a href="../h_src/57757692.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>[<a href="../h_src/57757420.htm" class="localvar">basepc</a>];  <a  class="comments">/* correct line */</a>
    }
<a id=93></a>    return <a href="../h_src/57757284.htm" class="localvar">baseline</a>;
  }
}


<a id=98></a>static int <a href="../h_src/57757148.htm" class="function">getcurrentline</a> (<a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57757012.htm" class="localvar">ci</a>) {
<a id=99></a>  return <a href="../h_src/57635960.htm" class="function">luaG_getfuncline</a>(<a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57757012.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>, <a href="../h_src/57758644.htm" class="function">currentpc</a>(<a href="../h_src/57757012.htm" class="localvar">ci</a>));
}


<a id=103></a><a  class="comments">/*</a>
<a id=104></a><a  class="comments">** Set 'trap' for all active Lua frames.</a>
<a id=105></a><a  class="comments">** This function can be called during a signal, under &quot;reasonable&quot;</a>
<a id=106></a><a  class="comments">** assumptions. A new 'ci' is completely linked in the list before it</a>
<a id=107></a><a  class="comments">** becomes part of the &quot;active&quot; list, and we assume that pointers are</a>
<a id=108></a><a  class="comments">** atomic; see comment in next function.</a>
<a id=109></a><a  class="comments">** (A compiler doing interprocedural optimizations could, theoretically,</a>
<a id=110></a><a  class="comments">** reorder memory writes in such a way that the list could be</a>
<a id=111></a><a  class="comments">** temporarily broken while inserting a new element. We simply assume it</a>
<a id=112></a><a  class="comments">** has no good reasons to do that.)</a>
<a id=113></a><a  class="comments">*/</a>
<a id=114></a>static void <a href="../h_src/57756876.htm" class="function">settraps</a> (<a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57756740.htm" class="localvar">ci</a>) {
<a id=115></a>  for (; <a href="../h_src/57756740.htm" class="localvar">ci</a> != NULL; <a href="../h_src/57756740.htm" class="localvar">ci</a> = <a href="../h_src/57756740.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>)
<a id=116></a>    if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57756740.htm" class="localvar">ci</a>))
<a id=117></a>      <a href="../h_src/57756740.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651056.htm" class="variable">trap</a> = 1;
}


<a id=121></a><a  class="comments">/*</a>
<a id=122></a><a  class="comments">** This function can be called during a signal, under &quot;reasonable&quot;</a>
<a id=123></a><a  class="comments">** assumptions.</a>
<a id=124></a><a  class="comments">** Fields 'basehookcount' and 'hookcount' (set by 'resethookcount')</a>
<a id=125></a><a  class="comments">** are for debug only, and it is no problem if they get arbitrary</a>
<a id=126></a><a  class="comments">** values (causes at most one wrong hook call). 'hookmask' is an atomic</a>
<a id=127></a><a  class="comments">** value. We assume that pointers are atomic too (e.g., gcc ensures that</a>
<a id=128></a><a  class="comments">** for all platforms where it runs). Moreover, 'hook' is always checked</a>
<a id=129></a><a  class="comments">** before being called (see 'luaD_hook').</a>
<a id=130></a><a  class="comments">*/</a>
<a id=131></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> void <a href="../h_src/57424124.htm" class="function">lua_sethook</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57756604.htm" class="localvar">L</a>, <a href="../h_src/57440240.htm" class="type">lua_Hook</a> <a href="../h_src/57756468.htm" class="localvar">func</a>, int <a href="../h_src/57756332.htm" class="localvar">mask</a>, int <a href="../h_src/57756196.htm" class="localvar">count</a>) {
<a id=132></a>  if (<a href="../h_src/57756468.htm" class="localvar">func</a> == NULL || <a href="../h_src/57756332.htm" class="localvar">mask</a> == 0) {  <a  class="comments">/* turn off hooks? */</a>
<a id=133></a>    <a href="../h_src/57756332.htm" class="localvar">mask</a> = 0;
<a id=134></a>    <a href="../h_src/57756468.htm" class="localvar">func</a> = NULL;
  }
<a id=136></a>  <a href="../h_src/57756604.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641672.htm" class="variable">hook</a> = <a href="../h_src/57756468.htm" class="localvar">func</a>;
<a id=137></a>  <a href="../h_src/57756604.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641400.htm" class="variable">basehookcount</a> = <a href="../h_src/57756196.htm" class="localvar">count</a>;
<a id=138></a>  <a href="../h_src/57636504.htm" class="macro">resethookcount</a>(<a href="../h_src/57756604.htm" class="localvar">L</a>);
<a id=139></a>  <a href="../h_src/57756604.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/57756332.htm" class="localvar">mask</a>);
<a id=140></a>  if (<a href="../h_src/57756332.htm" class="localvar">mask</a>)
<a id=141></a>    <a href="../h_src/57756876.htm" class="function">settraps</a>(<a href="../h_src/57756604.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>);  <a  class="comments">/* to trace inside 'luaV_execute' */</a>
}


<a id=145></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> <a href="../h_src/57440240.htm" class="type">lua_Hook</a> <a href="../h_src/57424056.htm" class="function">lua_gethook</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57756060.htm" class="localvar">L</a>) {
<a id=146></a>  return <a href="../h_src/57756060.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641672.htm" class="variable">hook</a>;
}


<a id=150></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> int <a href="../h_src/57423988.htm" class="function">lua_gethookmask</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57755856.htm" class="localvar">L</a>) {
<a id=151></a>  return <a href="../h_src/57755856.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>;
}


<a id=155></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> int <a href="../h_src/57423920.htm" class="function">lua_gethookcount</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57755720.htm" class="localvar">L</a>) {
<a id=156></a>  return <a href="../h_src/57755720.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641400.htm" class="variable">basehookcount</a>;
}


<a id=160></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> int <a href="../h_src/57424668.htm" class="function">lua_getstack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57755584.htm" class="localvar">L</a>, int <a href="../h_src/57755448.htm" class="localvar">level</a>, <a href="../h_src/57440308.htm" class="type">lua_Debug</a> *<a href="../h_src/57755312.htm" class="localvar">ar</a>) {
<a id=161></a>  int <a href="../h_src/57755176.htm" class="localvar">status</a>;
<a id=162></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57755040.htm" class="localvar">ci</a>;
<a id=163></a>  if (<a href="../h_src/57755448.htm" class="localvar">level</a> &lt; 0) return 0;  <a  class="comments">/* invalid (negative) level */</a>
<a id=164></a>  <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=165></a>  for (<a href="../h_src/57755040.htm" class="localvar">ci</a> = <a href="../h_src/57755584.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>; <a href="../h_src/57755448.htm" class="localvar">level</a> &gt; 0 &amp;&amp; <a href="../h_src/57755040.htm" class="localvar">ci</a> != &amp;<a href="../h_src/57755584.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641740.htm" class="variable">base_ci</a>; <a href="../h_src/57755040.htm" class="localvar">ci</a> = <a href="../h_src/57755040.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>)
<a id=166></a>    <a href="../h_src/57755448.htm" class="localvar">level</a>--;
<a id=167></a>  if (<a href="../h_src/57755448.htm" class="localvar">level</a> == 0 &amp;&amp; <a href="../h_src/57755040.htm" class="localvar">ci</a> != &amp;<a href="../h_src/57755584.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641740.htm" class="variable">base_ci</a>) {  <a  class="comments">/* level found? */</a>
<a id=168></a>    <a href="../h_src/57755176.htm" class="localvar">status</a> = 1;
<a id=169></a>    <a href="../h_src/57755312.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422424.htm" class="variable">i_ci</a> = <a href="../h_src/57755040.htm" class="localvar">ci</a>;
  }
<a id=171></a>  else <a href="../h_src/57755176.htm" class="localvar">status</a> = 0;  <a  class="comments">/* no such level */</a>
<a id=172></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=173></a>  return <a href="../h_src/57755176.htm" class="localvar">status</a>;
}


<a id=177></a>static const char *<a href="../h_src/57754904.htm" class="function">upvalname</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57754768.htm" class="localvar">p</a>, int <a href="../h_src/57754632.htm" class="localvar">uv</a>) {
<a id=178></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57754496.htm" class="localvar">s</a> = <a href="../h_src/57548712.htm" class="macro">check_exp</a>(uv &lt; p-&gt;sizeupvalues, <a href="../h_src/57754768.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>[<a href="../h_src/57754632.htm" class="localvar">uv</a>].<a href="../h_src/57517364.htm" class="variable">name</a>);
<a id=179></a>  if (<a href="../h_src/57754496.htm" class="localvar">s</a> == NULL) return &quot;?&quot;;
<a id=180></a>  else return <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/57754496.htm" class="localvar">s</a>);
}


<a id=184></a>static const char *<a href="../h_src/57754360.htm" class="function">findvararg</a> (<a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57754224.htm" class="localvar">ci</a>, int <a href="../h_src/57754088.htm" class="localvar">n</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> *<a href="../h_src/57753952.htm" class="localvar">pos</a>) {
<a id=185></a>  if (<a href="../h_src/57512264.htm" class="macro">clLvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57754224.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>))-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>) {
<a id=186></a>    int <a href="../h_src/57753816.htm" class="localvar">nextra</a> = <a href="../h_src/57754224.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57650988.htm" class="variable">nextraargs</a>;
<a id=187></a>    if (<a href="../h_src/57754088.htm" class="localvar">n</a> &gt;= -<a href="../h_src/57753816.htm" class="localvar">nextra</a>) {  <a  class="comments">/* 'n' is negative */</a>
<a id=188></a>      *<a href="../h_src/57753952.htm" class="localvar">pos</a> = <a href="../h_src/57754224.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57753816.htm" class="localvar">nextra</a> - (<a href="../h_src/57754088.htm" class="localvar">n</a> + 1);
<a id=189></a>      return &quot;(vararg)&quot;;  <a  class="comments">/* generic name for any vararg */</a>
    }
  }
<a id=192></a>  return NULL;  <a  class="comments">/* no such vararg */</a>
}


<a id=196></a>const char *<a href="../h_src/57635892.htm" class="function">luaG_findlocal</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57753680.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57753544.htm" class="localvar">ci</a>, int <a href="../h_src/57753408.htm" class="localvar">n</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> *<a href="../h_src/57753272.htm" class="localvar">pos</a>) {
<a id=197></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57753136.htm" class="localvar">base</a> = <a href="../h_src/57753544.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + 1;
<a id=198></a>  const char *<a href="../h_src/57753000.htm" class="localvar">name</a> = NULL;
<a id=199></a>  if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57753544.htm" class="localvar">ci</a>)) {
<a id=200></a>    if (<a href="../h_src/57753408.htm" class="localvar">n</a> &lt; 0)  <a  class="comments">/* access to vararg values? */</a>
<a id=201></a>      return <a href="../h_src/57754360.htm" class="function">findvararg</a>(<a href="../h_src/57753544.htm" class="localvar">ci</a>, <a href="../h_src/57753408.htm" class="localvar">n</a>, <a href="../h_src/57753272.htm" class="localvar">pos</a>);
    else
<a id=203></a>      <a href="../h_src/57753000.htm" class="localvar">name</a> = <a href="../h_src/57630180.htm" class="function">luaF_getlocalname</a>(<a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57753544.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>, <a href="../h_src/57753408.htm" class="localvar">n</a>, <a href="../h_src/57758644.htm" class="function">currentpc</a>(<a href="../h_src/57753544.htm" class="localvar">ci</a>));
  }
<a id=205></a>  if (<a href="../h_src/57753000.htm" class="localvar">name</a> == NULL) {  <a  class="comments">/* no 'standard' name? */</a>
<a id=206></a>    <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57752864.htm" class="localvar">limit</a> = (<a href="../h_src/57753544.htm" class="localvar">ci</a> == <a href="../h_src/57753680.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>) ? <a href="../h_src/57753680.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> : <a href="../h_src/57753544.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651328.htm" class="variable">next</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
<a id=207></a>    if (<a href="../h_src/57752864.htm" class="localvar">limit</a> - <a href="../h_src/57753136.htm" class="localvar">base</a> &gt;= <a href="../h_src/57753408.htm" class="localvar">n</a> &amp;&amp; <a href="../h_src/57753408.htm" class="localvar">n</a> &gt; 0) {  <a  class="comments">/* is 'n' inside 'ci' stack? */</a>
<a id=208></a>      <a  class="comments">/* generic name for any valid slot */</a>
<a id=209></a>      <a href="../h_src/57753000.htm" class="localvar">name</a> = <a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57753544.htm" class="localvar">ci</a>) ? &quot;(temporary)&quot; : &quot;(C temporary)&quot;;
    }
    else
<a id=212></a>      return NULL;  <a  class="comments">/* no name */</a>
  }
<a id=214></a>  if (<a href="../h_src/57753272.htm" class="localvar">pos</a>)
<a id=215></a>    *<a href="../h_src/57753272.htm" class="localvar">pos</a> = <a href="../h_src/57753136.htm" class="localvar">base</a> + (<a href="../h_src/57753408.htm" class="localvar">n</a> - 1);
<a id=216></a>  return <a href="../h_src/57753000.htm" class="localvar">name</a>;
}


<a id=220></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> const char *<a href="../h_src/57424532.htm" class="function">lua_getlocal</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57752728.htm" class="localvar">L</a>, const <a href="../h_src/57440308.htm" class="type">lua_Debug</a> *<a href="../h_src/57752592.htm" class="localvar">ar</a>, int <a href="../h_src/57752456.htm" class="localvar">n</a>) {
<a id=221></a>  const char *<a href="../h_src/57752320.htm" class="localvar">name</a>;
<a id=222></a>  <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=223></a>  if (<a href="../h_src/57752592.htm" class="localvar">ar</a> == NULL) {  <a  class="comments">/* information about non-active function? */</a>
<a id=224></a>    if (!<a href="../h_src/57512536.htm" class="macro">isLfunction</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57752728.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1)))  <a  class="comments">/* not a Lua function? */</a>
<a id=225></a>      <a href="../h_src/57752320.htm" class="localvar">name</a> = NULL;
<a id=226></a>    else  <a  class="comments">/* consider live variables at function start (parameters) */</a>
<a id=227></a>      <a href="../h_src/57752320.htm" class="localvar">name</a> = <a href="../h_src/57630180.htm" class="function">luaF_getlocalname</a>(<a href="../h_src/57512264.htm" class="macro">clLvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57752728.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1))-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>, <a href="../h_src/57752456.htm" class="localvar">n</a>, 0);
  }
<a id=229></a>  else {  <a  class="comments">/* active function; get information through 'ar' */</a>
<a id=230></a>    <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57752184.htm" class="localvar">pos</a> = NULL;  <a  class="comments">/* to avoid warnings */</a>
<a id=231></a>    <a href="../h_src/57752320.htm" class="localvar">name</a> = <a href="../h_src/57635892.htm" class="function">luaG_findlocal</a>(<a href="../h_src/57752728.htm" class="localvar">L</a>, <a href="../h_src/57752592.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422424.htm" class="variable">i_ci</a>, <a href="../h_src/57752456.htm" class="localvar">n</a>, &amp;<a href="../h_src/57752184.htm" class="localvar">pos</a>);
<a id=232></a>    if (<a href="../h_src/57752320.htm" class="localvar">name</a>) {
<a id=233></a>      <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57752728.htm" class="localvar">L</a>, <a href="../h_src/57752728.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57752184.htm" class="localvar">pos</a>);
<a id=234></a>      <a href="../h_src/57637932.htm" class="macro">api_incr_top</a>(<a href="../h_src/57752728.htm" class="localvar">L</a>);
    }
  }
<a id=237></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=238></a>  return <a href="../h_src/57752320.htm" class="localvar">name</a>;
}


<a id=242></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> const char *<a href="../h_src/57424464.htm" class="function">lua_setlocal</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57751776.htm" class="localvar">L</a>, const <a href="../h_src/57440308.htm" class="type">lua_Debug</a> *<a href="../h_src/57751640.htm" class="localvar">ar</a>, int <a href="../h_src/57751504.htm" class="localvar">n</a>) {
<a id=243></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57751368.htm" class="localvar">pos</a> = NULL;  <a  class="comments">/* to avoid warnings */</a>
<a id=244></a>  const char *<a href="../h_src/57751232.htm" class="localvar">name</a>;
<a id=245></a>  <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=246></a>  <a href="../h_src/57751232.htm" class="localvar">name</a> = <a href="../h_src/57635892.htm" class="function">luaG_findlocal</a>(<a href="../h_src/57751776.htm" class="localvar">L</a>, <a href="../h_src/57751640.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422424.htm" class="variable">i_ci</a>, <a href="../h_src/57751504.htm" class="localvar">n</a>, &amp;<a href="../h_src/57751368.htm" class="localvar">pos</a>);
<a id=247></a>  if (<a href="../h_src/57751232.htm" class="localvar">name</a>) {
<a id=248></a>    <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57751776.htm" class="localvar">L</a>, <a href="../h_src/57751368.htm" class="localvar">pos</a>, <a href="../h_src/57751776.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1);
<a id=249></a>    <a href="../h_src/57751776.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>--;  <a  class="comments">/* pop value */</a>
  }
<a id=251></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=252></a>  return <a href="../h_src/57751232.htm" class="localvar">name</a>;
}


<a id=256></a>static void <a href="../h_src/57750824.htm" class="function">funcinfo</a> (<a href="../h_src/57440308.htm" class="type">lua_Debug</a> *<a href="../h_src/57750688.htm" class="localvar">ar</a>, <a href="../h_src/57507640.htm" class="type">Closure</a> *<a href="../h_src/57750484.htm" class="localvar">cl</a>) {
<a id=257></a>  if (<a href="../h_src/57758916.htm" class="macro">noLuaClosure</a>(<a href="../h_src/57750484.htm" class="localvar">cl</a>)) {
<a id=258></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423512.htm" class="variable">source</a> = &quot;=[C]&quot;;
<a id=259></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423444.htm" class="variable">srclen</a> = <a href="../h_src/57549392.htm" class="macro">LL</a>(&quot;=[C]&quot;);
<a id=260></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423308.htm" class="variable">linedefined</a> = -1;
<a id=261></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423240.htm" class="variable">lastlinedefined</a> = -1;
<a id=262></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423580.htm" class="variable">what</a> = &quot;C&quot;;
  }
  else {
<a id=265></a>    const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57750348.htm" class="localvar">p</a> = <a href="../h_src/57750484.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57507708.htm" class="variable">l</a>.<a href="../h_src/57508184.htm" class="variable">p</a>;
<a id=266></a>    if (<a href="../h_src/57750348.htm" class="localvar">p</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>) {
<a id=267></a>      <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423512.htm" class="variable">source</a> = <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/57750348.htm" class="localvar">p</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>);
<a id=268></a>      <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423444.htm" class="variable">srclen</a> = <a href="../h_src/57522396.htm" class="macro">tsslen</a>(<a href="../h_src/57750348.htm" class="localvar">p</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>);
    }
    else {
<a id=271></a>      <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423512.htm" class="variable">source</a> = &quot;=?&quot;;
<a id=272></a>      <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423444.htm" class="variable">srclen</a> = <a href="../h_src/57549392.htm" class="macro">LL</a>(&quot;=?&quot;);
    }
<a id=274></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423308.htm" class="variable">linedefined</a> = <a href="../h_src/57750348.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515256.htm" class="variable">linedefined</a>;
<a id=275></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423240.htm" class="variable">lastlinedefined</a> = <a href="../h_src/57750348.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515188.htm" class="variable">lastlinedefined</a>;
<a id=276></a>    <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423580.htm" class="variable">what</a> = (<a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423308.htm" class="variable">linedefined</a> == 0) ? &quot;main&quot; : &quot;Lua&quot;;
  }
<a id=278></a>  <a href="../h_src/57501316.htm" class="function">luaO_chunkid</a>(<a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422764.htm" class="variable">short_src</a>, <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423512.htm" class="variable">source</a>, <a href="../h_src/57750688.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423444.htm" class="variable">srclen</a>);
}


<a id=282></a>static int <a href="../h_src/57750212.htm" class="function">nextline</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57750076.htm" class="localvar">p</a>, int <a href="../h_src/57749940.htm" class="localvar">currentline</a>, int <a href="../h_src/57749804.htm" class="localvar">pc</a>) {
<a id=283></a>  if (<a href="../h_src/57750076.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>[<a href="../h_src/57749804.htm" class="localvar">pc</a>] != <a href="../h_src/57636368.htm" class="macro">ABSLINEINFO</a>)
<a id=284></a>    return <a href="../h_src/57749940.htm" class="localvar">currentline</a> + <a href="../h_src/57750076.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>[<a href="../h_src/57749804.htm" class="localvar">pc</a>];
  else
<a id=286></a>    return <a href="../h_src/57635960.htm" class="function">luaG_getfuncline</a>(<a href="../h_src/57750076.htm" class="localvar">p</a>, <a href="../h_src/57749804.htm" class="localvar">pc</a>);
}


<a id=290></a>static void <a href="../h_src/57749668.htm" class="function">collectvalidlines</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57749532.htm" class="localvar">L</a>, <a href="../h_src/57507640.htm" class="type">Closure</a> *<a href="../h_src/57749396.htm" class="localvar">f</a>) {
<a id=291></a>  if (<a href="../h_src/57758916.htm" class="macro">noLuaClosure</a>(<a href="../h_src/57749396.htm" class="localvar">f</a>)) {
<a id=292></a>    <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57749532.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>));
<a id=293></a>    <a href="../h_src/57637932.htm" class="macro">api_incr_top</a>(<a href="../h_src/57749532.htm" class="localvar">L</a>);
  }
  else {
<a id=296></a>    int <a href="../h_src/57749260.htm" class="localvar">i</a>;
<a id=297></a>    <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57749124.htm" class="localvar">v</a>;
<a id=298></a>    const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57748988.htm" class="localvar">p</a> = <a href="../h_src/57749396.htm" class="localvar">f</a>-&gt;<a href="../h_src/57507708.htm" class="variable">l</a>.<a href="../h_src/57508184.htm" class="variable">p</a>;
<a id=299></a>    int <a href="../h_src/57748852.htm" class="localvar">currentline</a> = <a href="../h_src/57748988.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515256.htm" class="variable">linedefined</a>;
<a id=300></a>    <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/57748716.htm" class="localvar">t</a> = <a href="../h_src/57616512.htm" class="function">luaH_new</a>(<a href="../h_src/57749532.htm" class="localvar">L</a>);  <a  class="comments">/* new table to store active lines */</a>
<a id=301></a>    <a href="../h_src/57506892.htm" class="macro">sethvalue2s</a>(<a href="../h_src/57749532.htm" class="localvar">L</a>, <a href="../h_src/57749532.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57748716.htm" class="localvar">t</a>);  <a  class="comments">/* push it on stack */</a>
<a id=302></a>    <a href="../h_src/57637932.htm" class="macro">api_incr_top</a>(<a href="../h_src/57749532.htm" class="localvar">L</a>);
<a id=303></a>    <a href="../h_src/57529128.htm" class="macro">setbtvalue</a>(&amp;<a href="../h_src/57749124.htm" class="localvar">v</a>);  <a  class="comments">/* boolean 'true' to be the value of all indices */</a>
<a id=304></a>    if (!<a href="../h_src/57748988.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>)  <a  class="comments">/* regular function? */</a>
<a id=305></a>      <a href="../h_src/57749260.htm" class="localvar">i</a> = 0;  <a  class="comments">/* consider all instructions */</a>
<a id=306></a>    else {  <a  class="comments">/* vararg function */</a>
<a id=307></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(p-&gt;code[0]) == OP_VARARGPREP);
<a id=308></a>      <a href="../h_src/57748852.htm" class="localvar">currentline</a> = <a href="../h_src/57750212.htm" class="function">nextline</a>(<a href="../h_src/57748988.htm" class="localvar">p</a>, <a href="../h_src/57748852.htm" class="localvar">currentline</a>, 0);
<a id=309></a>      <a href="../h_src/57749260.htm" class="localvar">i</a> = 1;  <a  class="comments">/* skip first instruction (OP_VARARGPREP) */</a>
    }
<a id=311></a>    for (; <a href="../h_src/57749260.htm" class="localvar">i</a> &lt; <a href="../h_src/57748988.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515528.htm" class="variable">sizelineinfo</a>; <a href="../h_src/57749260.htm" class="localvar">i</a>++) {  <a  class="comments">/* for each instruction */</a>
<a id=312></a>      <a href="../h_src/57748852.htm" class="localvar">currentline</a> = <a href="../h_src/57750212.htm" class="function">nextline</a>(<a href="../h_src/57748988.htm" class="localvar">p</a>, <a href="../h_src/57748852.htm" class="localvar">currentline</a>, <a href="../h_src/57749260.htm" class="localvar">i</a>);  <a  class="comments">/* get its line */</a>
<a id=313></a>      <a href="../h_src/57616988.htm" class="function">luaH_setint</a>(<a href="../h_src/57749532.htm" class="localvar">L</a>, <a href="../h_src/57748716.htm" class="localvar">t</a>, <a href="../h_src/57748852.htm" class="localvar">currentline</a>, &amp;<a href="../h_src/57749124.htm" class="localvar">v</a>);  <a  class="comments">/* table[line] = true */</a>
    }
  }
}


<a id=319></a>static const char *<a href="../h_src/57748308.htm" class="function">getfuncname</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57748172.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57748036.htm" class="localvar">ci</a>, const char **<a href="../h_src/57747900.htm" class="localvar">name</a>) {
<a id=320></a>  <a  class="comments">/* calling function is a known function? */</a>
<a id=321></a>  if (<a href="../h_src/57748036.htm" class="localvar">ci</a> != NULL &amp;&amp; !(<a href="../h_src/57748036.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648676.htm" class="macro">CIST_TAIL</a>))
<a id=322></a>    return <a href="../h_src/57758780.htm" class="function">funcnamefromcall</a>(<a href="../h_src/57748172.htm" class="localvar">L</a>, <a href="../h_src/57748036.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>, <a href="../h_src/57747900.htm" class="localvar">name</a>);
<a id=323></a>  else return NULL;  <a  class="comments">/* no way to find a name */</a>
}


<a id=327></a>static int <a href="../h_src/57747764.htm" class="function">auxgetinfo</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57747628.htm" class="localvar">L</a>, const char *<a href="../h_src/57747492.htm" class="localvar">what</a>, <a href="../h_src/57440308.htm" class="type">lua_Debug</a> *<a href="../h_src/57747356.htm" class="localvar">ar</a>,
<a id=328></a>                       <a href="../h_src/57507640.htm" class="type">Closure</a> *<a href="../h_src/57747220.htm" class="localvar">f</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57747084.htm" class="localvar">ci</a>) {
<a id=329></a>  int <a href="../h_src/57746948.htm" class="localvar">status</a> = 1;
<a id=330></a>  for (; *<a href="../h_src/57747492.htm" class="localvar">what</a>; <a href="../h_src/57747492.htm" class="localvar">what</a>++) {
<a id=331></a>    switch (*<a href="../h_src/57747492.htm" class="localvar">what</a>) {
      case 'S': {
<a id=333></a>        <a href="../h_src/57750824.htm" class="function">funcinfo</a>(<a href="../h_src/57747356.htm" class="localvar">ar</a>, <a href="../h_src/57747220.htm" class="localvar">f</a>);
        break;
      }
      case 'l': {
<a id=337></a>        <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423376.htm" class="variable">currentline</a> = (<a href="../h_src/57747084.htm" class="localvar">ci</a> &amp;&amp; <a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57747084.htm" class="localvar">ci</a>)) ? <a href="../h_src/57757148.htm" class="function">getcurrentline</a>(<a href="../h_src/57747084.htm" class="localvar">ci</a>) : -1;
        break;
      }
      case 'u': {
<a id=341></a>        <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423172.htm" class="variable">nups</a> = (<a href="../h_src/57747220.htm" class="localvar">f</a> == NULL) ? 0 : <a href="../h_src/57747220.htm" class="localvar">f</a>-&gt;<a href="../h_src/57507776.htm" class="variable">c</a>.<a href="../h_src/57509068.htm" class="variable">nupvalues</a>;
<a id=342></a>        if (<a href="../h_src/57758916.htm" class="macro">noLuaClosure</a>(<a href="../h_src/57747220.htm" class="localvar">f</a>)) {
<a id=343></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423036.htm" class="variable">isvararg</a> = 1;
<a id=344></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423104.htm" class="variable">nparams</a> = 0;
        }
        else {
<a id=347></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423036.htm" class="variable">isvararg</a> = <a href="../h_src/57747220.htm" class="localvar">f</a>-&gt;<a href="../h_src/57507708.htm" class="variable">l</a>.<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>;
<a id=348></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423104.htm" class="variable">nparams</a> = <a href="../h_src/57747220.htm" class="localvar">f</a>-&gt;<a href="../h_src/57507708.htm" class="variable">l</a>.<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a>;
        }
        break;
      }
      case 't': {
<a id=353></a>        <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422968.htm" class="variable">istailcall</a> = (<a href="../h_src/57747084.htm" class="localvar">ci</a>) ? <a href="../h_src/57747084.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648676.htm" class="macro">CIST_TAIL</a> : 0;
        break;
      }
      case 'n': {
<a id=357></a>        <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423648.htm" class="variable">namewhat</a> = <a href="../h_src/57748308.htm" class="function">getfuncname</a>(<a href="../h_src/57747628.htm" class="localvar">L</a>, <a href="../h_src/57747084.htm" class="localvar">ci</a>, &amp;<a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423716.htm" class="variable">name</a>);
<a id=358></a>        if (<a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423648.htm" class="variable">namewhat</a> == NULL) {
<a id=359></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423648.htm" class="variable">namewhat</a> = &quot;&quot;;  <a  class="comments">/* not found */</a>
<a id=360></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57423716.htm" class="variable">name</a> = NULL;
        }
        break;
      }
      case 'r': {
<a id=365></a>        if (<a href="../h_src/57747084.htm" class="localvar">ci</a> == NULL || !(<a href="../h_src/57747084.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648268.htm" class="macro">CIST_TRAN</a>))
<a id=366></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422900.htm" class="variable">ftransfer</a> = <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422832.htm" class="variable">ntransfer</a> = 0;
        else {
<a id=368></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422900.htm" class="variable">ftransfer</a> = <a href="../h_src/57747084.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57649696.htm" class="variable">transferinfo</a>.<a href="../h_src/57649900.htm" class="variable">ftransfer</a>;
<a id=369></a>          <a href="../h_src/57747356.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422832.htm" class="variable">ntransfer</a> = <a href="../h_src/57747084.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57649696.htm" class="variable">transferinfo</a>.<a href="../h_src/57649832.htm" class="variable">ntransfer</a>;
        }
        break;
      }
      case 'L':
<a id=374></a>      case 'f':  <a  class="comments">/* handled by lua_getinfo */</a>
        break;
<a id=376></a>      default: <a href="../h_src/57746948.htm" class="localvar">status</a> = 0;  <a  class="comments">/* invalid option */</a>
    }
  }
<a id=379></a>  return <a href="../h_src/57746948.htm" class="localvar">status</a>;
}


<a id=383></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> int <a href="../h_src/57424600.htm" class="function">lua_getinfo</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57746812.htm" class="localvar">L</a>, const char *<a href="../h_src/57746676.htm" class="localvar">what</a>, <a href="../h_src/57440308.htm" class="type">lua_Debug</a> *<a href="../h_src/57746540.htm" class="localvar">ar</a>) {
<a id=384></a>  int <a href="../h_src/57746404.htm" class="localvar">status</a>;
<a id=385></a>  <a href="../h_src/57507640.htm" class="type">Closure</a> *<a href="../h_src/57746268.htm" class="localvar">cl</a>;
<a id=386></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57746132.htm" class="localvar">ci</a>;
<a id=387></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57745996.htm" class="localvar">func</a>;
<a id=388></a>  <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=389></a>  if (*<a href="../h_src/57746676.htm" class="localvar">what</a> == '&gt;') {
<a id=390></a>    <a href="../h_src/57746132.htm" class="localvar">ci</a> = NULL;
<a id=391></a>    <a href="../h_src/57745996.htm" class="localvar">func</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57746812.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1);
<a id=392></a>    <a href="../h_src/57548168.htm" class="macro">api_check</a>(<a href="../h_src/57746812.htm" class="localvar">L</a>, <a href="../h_src/57513216.htm" class="macro">ttisfunction</a>(func), &quot;function expected&quot;);
<a id=393></a>    <a href="../h_src/57746676.htm" class="localvar">what</a>++;  <a  class="comments">/* skip the '&gt;' */</a>
<a id=394></a>    <a href="../h_src/57746812.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>--;  <a  class="comments">/* pop function */</a>
  }
  else {
<a id=397></a>    <a href="../h_src/57746132.htm" class="localvar">ci</a> = <a href="../h_src/57746540.htm" class="localvar">ar</a>-&gt;<a href="../h_src/57422424.htm" class="variable">i_ci</a>;
<a id=398></a>    <a href="../h_src/57745996.htm" class="localvar">func</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57746132.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
<a id=399></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57513216.htm" class="macro">ttisfunction</a>(func));
  }
<a id=401></a>  <a href="../h_src/57746268.htm" class="localvar">cl</a> = <a href="../h_src/57512672.htm" class="macro">ttisclosure</a>(<a href="../h_src/57745996.htm" class="localvar">func</a>) ? <a href="../h_src/57512400.htm" class="macro">clvalue</a>(<a href="../h_src/57745996.htm" class="localvar">func</a>) : NULL;
<a id=402></a>  <a href="../h_src/57746404.htm" class="localvar">status</a> = <a href="../h_src/57747764.htm" class="function">auxgetinfo</a>(<a href="../h_src/57746812.htm" class="localvar">L</a>, <a href="../h_src/57746676.htm" class="localvar">what</a>, <a href="../h_src/57746540.htm" class="localvar">ar</a>, <a href="../h_src/57746268.htm" class="localvar">cl</a>, <a href="../h_src/57746132.htm" class="localvar">ci</a>);
<a id=403></a>  if (<a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57746676.htm" class="localvar">what</a>, 'f')) {
<a id=404></a>    <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/57746812.htm" class="localvar">L</a>, <a href="../h_src/57746812.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57745996.htm" class="localvar">func</a>);
<a id=405></a>    <a href="../h_src/57637932.htm" class="macro">api_incr_top</a>(<a href="../h_src/57746812.htm" class="localvar">L</a>);
  }
<a id=407></a>  if (<a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57746676.htm" class="localvar">what</a>, 'L'))
<a id=408></a>    <a href="../h_src/57749668.htm" class="function">collectvalidlines</a>(<a href="../h_src/57746812.htm" class="localvar">L</a>, <a href="../h_src/57746268.htm" class="localvar">cl</a>);
<a id=409></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=410></a>  return <a href="../h_src/57746404.htm" class="localvar">status</a>;
}


<a id=414></a><a  class="comments">/*</a>
<a id=415></a><a  class="comments">** {======================================================</a>
<a id=416></a><a  class="comments">** Symbolic Execution</a>
<a id=417></a><a  class="comments">** =======================================================</a>
<a id=418></a><a  class="comments">*/</a>

<a id=420></a>static const char *<a href="../h_src/57745588.htm" class="function">getobjname</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *p, int lastpc, int reg,
                               const char **name);


<a id=424></a><a  class="comments">/*</a>
<a id=425></a><a  class="comments">** Find a &quot;name&quot; for the constant 'c'.</a>
<a id=426></a><a  class="comments">*/</a>
<a id=427></a>static void <a href="../h_src/57745452.htm" class="function">kname</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57745316.htm" class="localvar">p</a>, int <a href="../h_src/57745180.htm" class="localvar">c</a>, const char **<a href="../h_src/57745044.htm" class="localvar">name</a>) {
<a id=428></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57744908.htm" class="localvar">kvalue</a> = &amp;<a href="../h_src/57745316.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57745180.htm" class="localvar">c</a>];
<a id=429></a>  *<a href="../h_src/57745044.htm" class="localvar">name</a> = (<a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/57744908.htm" class="localvar">kvalue</a>)) ? <a href="../h_src/57522532.htm" class="macro">svalue</a>(<a href="../h_src/57744908.htm" class="localvar">kvalue</a>) : &quot;?&quot;;
}


<a id=433></a><a  class="comments">/*</a>
<a id=434></a><a  class="comments">** Find a &quot;name&quot; for the register 'c'.</a>
<a id=435></a><a  class="comments">*/</a>
<a id=436></a>static void <a href="../h_src/57744772.htm" class="function">rname</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57744636.htm" class="localvar">p</a>, int <a href="../h_src/57744500.htm" class="localvar">pc</a>, int <a href="../h_src/57744364.htm" class="localvar">c</a>, const char **<a href="../h_src/57744228.htm" class="localvar">name</a>) {
<a id=437></a>  const char *<a href="../h_src/57744092.htm" class="localvar">what</a> = <a href="../h_src/57745588.htm" class="function">getobjname</a>(<a href="../h_src/57744636.htm" class="localvar">p</a>, <a href="../h_src/57744500.htm" class="localvar">pc</a>, <a href="../h_src/57744364.htm" class="localvar">c</a>, <a href="../h_src/57744228.htm" class="localvar">name</a>); <a  class="comments">/* search for 'c' */</a>
<a id=438></a>  if (!(<a href="../h_src/57744092.htm" class="localvar">what</a> &amp;&amp; *<a href="../h_src/57744092.htm" class="localvar">what</a> == 'c'))  <a  class="comments">/* did not find a constant name? */</a>
<a id=439></a>    *<a href="../h_src/57744228.htm" class="localvar">name</a> = &quot;?&quot;;
}


<a id=443></a><a  class="comments">/*</a>
<a id=444></a><a  class="comments">** Find a &quot;name&quot; for a 'C' value in an RK instruction.</a>
<a id=445></a><a  class="comments">*/</a>
<a id=446></a>static void <a href="../h_src/57743956.htm" class="function">rkname</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57743820.htm" class="localvar">p</a>, int <a href="../h_src/57743684.htm" class="localvar">pc</a>, <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57743548.htm" class="localvar">i</a>, const char **<a href="../h_src/57743412.htm" class="localvar">name</a>) {
<a id=447></a>  int <a href="../h_src/57743276.htm" class="localvar">c</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/57743548.htm" class="localvar">i</a>);  <a  class="comments">/* key index */</a>
<a id=448></a>  if (<a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/57743548.htm" class="localvar">i</a>))  <a  class="comments">/* is 'c' a constant? */</a>
<a id=449></a>    <a href="../h_src/57745452.htm" class="function">kname</a>(<a href="../h_src/57743820.htm" class="localvar">p</a>, <a href="../h_src/57743276.htm" class="localvar">c</a>, <a href="../h_src/57743412.htm" class="localvar">name</a>);
<a id=450></a>  else  <a  class="comments">/* 'c' is a register */</a>
<a id=451></a>    <a href="../h_src/57744772.htm" class="function">rname</a>(<a href="../h_src/57743820.htm" class="localvar">p</a>, <a href="../h_src/57743684.htm" class="localvar">pc</a>, <a href="../h_src/57743276.htm" class="localvar">c</a>, <a href="../h_src/57743412.htm" class="localvar">name</a>);
}


<a id=455></a>static int <a href="../h_src/57743140.htm" class="function">filterpc</a> (int <a href="../h_src/57743004.htm" class="localvar">pc</a>, int <a href="../h_src/57742868.htm" class="localvar">jmptarget</a>) {
<a id=456></a>  if (<a href="../h_src/57743004.htm" class="localvar">pc</a> &lt; <a href="../h_src/57742868.htm" class="localvar">jmptarget</a>)  <a  class="comments">/* is code conditional (inside a jump)? */</a>
<a id=457></a>    return -1;  <a  class="comments">/* cannot know who sets that register */</a>
<a id=458></a>  else return <a href="../h_src/57743004.htm" class="localvar">pc</a>;  <a  class="comments">/* current position sets that register */</a>
}


<a id=462></a><a  class="comments">/*</a>
<a id=463></a><a  class="comments">** Try to find last instruction before 'lastpc' that modified register 'reg'.</a>
<a id=464></a><a  class="comments">*/</a>
<a id=465></a>static int <a href="../h_src/57742732.htm" class="function">findsetreg</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57742596.htm" class="localvar">p</a>, int <a href="../h_src/57742460.htm" class="localvar">lastpc</a>, int <a href="../h_src/57742324.htm" class="localvar">reg</a>) {
<a id=466></a>  int <a href="../h_src/57742188.htm" class="localvar">pc</a>;
<a id=467></a>  int <a href="../h_src/57742052.htm" class="localvar">setreg</a> = -1;  <a  class="comments">/* keep last instruction that changed 'reg' */</a>
<a id=468></a>  int <a href="../h_src/57741916.htm" class="localvar">jmptarget</a> = 0;  <a  class="comments">/* any code before this address is conditional */</a>
<a id=469></a>  if (<a href="../h_src/57683736.htm" class="macro">testMMMode</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/57742596.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57742460.htm" class="localvar">lastpc</a>])))
<a id=470></a>    <a href="../h_src/57742460.htm" class="localvar">lastpc</a>--;  <a  class="comments">/* previous instruction was not actually executed */</a>
<a id=471></a>  for (<a href="../h_src/57742188.htm" class="localvar">pc</a> = 0; <a href="../h_src/57742188.htm" class="localvar">pc</a> &lt; <a href="../h_src/57742460.htm" class="localvar">lastpc</a>; <a href="../h_src/57742188.htm" class="localvar">pc</a>++) {
<a id=472></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57741780.htm" class="localvar">i</a> = <a href="../h_src/57742596.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57742188.htm" class="localvar">pc</a>];
<a id=473></a>    <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57741644.htm" class="localvar">op</a> = <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/57741780.htm" class="localvar">i</a>);
<a id=474></a>    int <a href="../h_src/57741508.htm" class="localvar">a</a> = <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/57741780.htm" class="localvar">i</a>);
<a id=475></a>    int <a href="../h_src/57741372.htm" class="localvar">change</a>;  <a  class="comments">/* true if current instruction changed 'reg' */</a>
<a id=476></a>    switch (<a href="../h_src/57741644.htm" class="localvar">op</a>) {
<a id=477></a>      case <a href="../h_src/57689992.htm" class="variable">OP_LOADNIL</a>: {  <a  class="comments">/* set registers from 'a' to 'a+b' */</a>
<a id=478></a>        int <a href="../h_src/57741236.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/57741780.htm" class="localvar">i</a>);
<a id=479></a>        <a href="../h_src/57741372.htm" class="localvar">change</a> = (<a href="../h_src/57741508.htm" class="localvar">a</a> &lt;= <a href="../h_src/57742324.htm" class="localvar">reg</a> &amp;&amp; <a href="../h_src/57742324.htm" class="localvar">reg</a> &lt;= <a href="../h_src/57741508.htm" class="localvar">a</a> + <a href="../h_src/57741236.htm" class="localvar">b</a>);
        break;
      }
<a id=482></a>      case <a href="../h_src/57685368.htm" class="variable">OP_TFORCALL</a>: {  <a  class="comments">/* affect all regs above its base */</a>
<a id=483></a>        <a href="../h_src/57741372.htm" class="localvar">change</a> = (<a href="../h_src/57742324.htm" class="localvar">reg</a> &gt;= <a href="../h_src/57741508.htm" class="localvar">a</a> + 2);
        break;
      }
<a id=486></a>      case <a href="../h_src/57685912.htm" class="variable">OP_CALL</a>:
<a id=487></a>      case <a href="../h_src/57685844.htm" class="variable">OP_TAILCALL</a>: {  <a  class="comments">/* affect all registers above base */</a>
<a id=488></a>        <a href="../h_src/57741372.htm" class="localvar">change</a> = (<a href="../h_src/57742324.htm" class="localvar">reg</a> &gt;= <a href="../h_src/57741508.htm" class="localvar">a</a>);
        break;
      }
<a id=491></a>      case <a href="../h_src/57686728.htm" class="variable">OP_JMP</a>: {  <a  class="comments">/* doesn't change registers, but changes 'jmptarget' */</a>
<a id=492></a>        int <a href="../h_src/57741100.htm" class="localvar">b</a> = <a href="../h_src/57691760.htm" class="macro">GETARG_sJ</a>(<a href="../h_src/57741780.htm" class="localvar">i</a>);
<a id=493></a>        int <a href="../h_src/57740964.htm" class="localvar">dest</a> = <a href="../h_src/57742188.htm" class="localvar">pc</a> + 1 + <a href="../h_src/57741100.htm" class="localvar">b</a>;
<a id=494></a>        <a  class="comments">/* jump does not skip 'lastpc' and is larger than current one? */</a>
<a id=495></a>        if (<a href="../h_src/57740964.htm" class="localvar">dest</a> &lt;= <a href="../h_src/57742460.htm" class="localvar">lastpc</a> &amp;&amp; <a href="../h_src/57740964.htm" class="localvar">dest</a> &gt; <a href="../h_src/57741916.htm" class="localvar">jmptarget</a>)
<a id=496></a>          <a href="../h_src/57741916.htm" class="localvar">jmptarget</a> = <a href="../h_src/57740964.htm" class="localvar">dest</a>;  <a  class="comments">/* update 'jmptarget' */</a>
<a id=497></a>        <a href="../h_src/57741372.htm" class="localvar">change</a> = 0;
        break;
      }
<a id=500></a>      default:  <a  class="comments">/* any instruction that sets A */</a>
<a id=501></a>        <a href="../h_src/57741372.htm" class="localvar">change</a> = (<a href="../h_src/57684280.htm" class="macro">testAMode</a>(<a href="../h_src/57741644.htm" class="localvar">op</a>) &amp;&amp; <a href="../h_src/57742324.htm" class="localvar">reg</a> == <a href="../h_src/57741508.htm" class="localvar">a</a>);
        break;
    }
<a id=504></a>    if (<a href="../h_src/57741372.htm" class="localvar">change</a>)
<a id=505></a>      <a href="../h_src/57742052.htm" class="localvar">setreg</a> = <a href="../h_src/57743140.htm" class="function">filterpc</a>(<a href="../h_src/57742188.htm" class="localvar">pc</a>, <a href="../h_src/57741916.htm" class="localvar">jmptarget</a>);
  }
<a id=507></a>  return <a href="../h_src/57742052.htm" class="localvar">setreg</a>;
}


<a id=511></a><a  class="comments">/*</a>
<a id=512></a><a  class="comments">** Check whether table being indexed by instruction 'i' is the</a>
<a id=513></a><a  class="comments">** environment '_ENV'</a>
<a id=514></a><a  class="comments">*/</a>
<a id=515></a>static const char *<a href="../h_src/57740828.htm" class="function">gxf</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57740692.htm" class="localvar">p</a>, int <a href="../h_src/57740556.htm" class="localvar">pc</a>, <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57740420.htm" class="localvar">i</a>, int <a href="../h_src/57740284.htm" class="localvar">isup</a>) {
<a id=516></a>  int <a href="../h_src/57740148.htm" class="localvar">t</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/57740420.htm" class="localvar">i</a>);  <a  class="comments">/* table index */</a>
<a id=517></a>  const char *<a href="../h_src/57740012.htm" class="localvar">name</a>;  <a  class="comments">/* name of indexed variable */</a>
<a id=518></a>  if (<a href="../h_src/57740284.htm" class="localvar">isup</a>)  <a  class="comments">/* is an upvalue? */</a>
<a id=519></a>    <a href="../h_src/57740012.htm" class="localvar">name</a> = <a href="../h_src/57754904.htm" class="function">upvalname</a>(<a href="../h_src/57740692.htm" class="localvar">p</a>, <a href="../h_src/57740148.htm" class="localvar">t</a>);
  else
<a id=521></a>    <a href="../h_src/57745588.htm" class="function">getobjname</a>(<a href="../h_src/57740692.htm" class="localvar">p</a>, <a href="../h_src/57740556.htm" class="localvar">pc</a>, <a href="../h_src/57740148.htm" class="localvar">t</a>, &amp;<a href="../h_src/57740012.htm" class="localvar">name</a>);
<a id=522></a>  return (<a href="../h_src/57740012.htm" class="localvar">name</a> &amp;&amp; <a href="../h_aa/57564488.htm" class="libfunc">strcmp</a>(<a href="../h_src/57740012.htm" class="localvar">name</a>, <a href="../h_src/57705428.htm" class="macro">LUA_ENV</a>) == 0) ? &quot;global&quot; : &quot;field&quot;;
}


<a id=526></a>static const char *<a href="../h_src/57745588.htm" class="function">getobjname</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57739876.htm" class="localvar">p</a>, int <a href="../h_src/57739740.htm" class="localvar">lastpc</a>, int <a href="../h_src/57739604.htm" class="localvar">reg</a>,
<a id=527></a>                               const char **<a href="../h_src/57739468.htm" class="localvar">name</a>) {
<a id=528></a>  int <a href="../h_src/57739332.htm" class="localvar">pc</a>;
<a id=529></a>  *<a href="../h_src/57739468.htm" class="localvar">name</a> = <a href="../h_src/57630180.htm" class="function">luaF_getlocalname</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739604.htm" class="localvar">reg</a> + 1, <a href="../h_src/57739740.htm" class="localvar">lastpc</a>);
<a id=530></a>  if (*<a href="../h_src/57739468.htm" class="localvar">name</a>)  <a  class="comments">/* is a local? */</a>
    return &quot;local&quot;;
<a id=532></a>  <a  class="comments">/* else try symbolic execution */</a>
<a id=533></a>  <a href="../h_src/57739332.htm" class="localvar">pc</a> = <a href="../h_src/57742732.htm" class="function">findsetreg</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739740.htm" class="localvar">lastpc</a>, <a href="../h_src/57739604.htm" class="localvar">reg</a>);
<a id=534></a>  if (<a href="../h_src/57739332.htm" class="localvar">pc</a> != -1) {  <a  class="comments">/* could find instruction? */</a>
<a id=535></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57739196.htm" class="localvar">i</a> = <a href="../h_src/57739876.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57739332.htm" class="localvar">pc</a>];
<a id=536></a>    <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57739060.htm" class="localvar">op</a> = <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>);
<a id=537></a>    switch (<a href="../h_src/57739060.htm" class="localvar">op</a>) {
<a id=538></a>      case <a href="../h_src/57690536.htm" class="variable">OP_MOVE</a>: {
<a id=539></a>        int <a href="../h_src/57738924.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>);  <a  class="comments">/* move from 'b' to 'a' */</a>
<a id=540></a>        if (<a href="../h_src/57738924.htm" class="localvar">b</a> &lt; <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>))
<a id=541></a>          return <a href="../h_src/57745588.htm" class="function">getobjname</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739332.htm" class="localvar">pc</a>, <a href="../h_src/57738924.htm" class="localvar">b</a>, <a href="../h_src/57739468.htm" class="localvar">name</a>);  <a  class="comments">/* get name for 'b' */</a>
        break;
      }
<a id=544></a>      case <a href="../h_src/57689788.htm" class="variable">OP_GETTABUP</a>: {
<a id=545></a>        int <a href="../h_src/57738788.htm" class="localvar">k</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>);  <a  class="comments">/* key index */</a>
<a id=546></a>        <a href="../h_src/57745452.htm" class="function">kname</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57738788.htm" class="localvar">k</a>, <a href="../h_src/57739468.htm" class="localvar">name</a>);
<a id=547></a>        return <a href="../h_src/57740828.htm" class="function">gxf</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739332.htm" class="localvar">pc</a>, <a href="../h_src/57739196.htm" class="localvar">i</a>, 1);
      }
<a id=549></a>      case <a href="../h_src/57689720.htm" class="variable">OP_GETTABLE</a>: {
<a id=550></a>        int <a href="../h_src/57738652.htm" class="localvar">k</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>);  <a  class="comments">/* key index */</a>
<a id=551></a>        <a href="../h_src/57744772.htm" class="function">rname</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739332.htm" class="localvar">pc</a>, <a href="../h_src/57738652.htm" class="localvar">k</a>, <a href="../h_src/57739468.htm" class="localvar">name</a>);
<a id=552></a>        return <a href="../h_src/57740828.htm" class="function">gxf</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739332.htm" class="localvar">pc</a>, <a href="../h_src/57739196.htm" class="localvar">i</a>, 0);
      }
<a id=554></a>      case <a href="../h_src/57689652.htm" class="variable">OP_GETI</a>: {
<a id=555></a>        *<a href="../h_src/57739468.htm" class="localvar">name</a> = &quot;integer index&quot;;
        return &quot;field&quot;;
      }
<a id=558></a>      case <a href="../h_src/57689584.htm" class="variable">OP_GETFIELD</a>: {
<a id=559></a>        int <a href="../h_src/57738516.htm" class="localvar">k</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>);  <a  class="comments">/* key index */</a>
<a id=560></a>        <a href="../h_src/57745452.htm" class="function">kname</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57738516.htm" class="localvar">k</a>, <a href="../h_src/57739468.htm" class="localvar">name</a>);
<a id=561></a>        return <a href="../h_src/57740828.htm" class="function">gxf</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739332.htm" class="localvar">pc</a>, <a href="../h_src/57739196.htm" class="localvar">i</a>, 0);
      }
<a id=563></a>      case <a href="../h_src/57689924.htm" class="variable">OP_GETUPVAL</a>: {
<a id=564></a>        *<a href="../h_src/57739468.htm" class="localvar">name</a> = <a href="../h_src/57754904.htm" class="function">upvalname</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>));
        return &quot;upvalue&quot;;
      }
<a id=567></a>      case <a href="../h_src/57690332.htm" class="variable">OP_LOADK</a>:
<a id=568></a>      case <a href="../h_src/57690264.htm" class="variable">OP_LOADKX</a>: {
<a id=569></a>        int <a href="../h_src/57738380.htm" class="localvar">b</a> = (<a href="../h_src/57739060.htm" class="localvar">op</a> == <a href="../h_src/57690332.htm" class="variable">OP_LOADK</a>) ? <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/57739196.htm" class="localvar">i</a>)
<a id=570></a>                                 : <a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57739332.htm" class="localvar">pc</a> + 1]);
<a id=571></a>        if (<a href="../h_src/57524912.htm" class="macro">ttisstring</a>(&amp;<a href="../h_src/57739876.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57738380.htm" class="localvar">b</a>])) {
<a id=572></a>          *<a href="../h_src/57739468.htm" class="localvar">name</a> = <a href="../h_src/57522532.htm" class="macro">svalue</a>(&amp;<a href="../h_src/57739876.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>[<a href="../h_src/57738380.htm" class="localvar">b</a>]);
          return &quot;constant&quot;;
        }
        break;
      }
<a id=577></a>      case <a href="../h_src/57689176.htm" class="variable">OP_SELF</a>: {
<a id=578></a>        <a href="../h_src/57743956.htm" class="function">rkname</a>(<a href="../h_src/57739876.htm" class="localvar">p</a>, <a href="../h_src/57739332.htm" class="localvar">pc</a>, <a href="../h_src/57739196.htm" class="localvar">i</a>, <a href="../h_src/57739468.htm" class="localvar">name</a>);
        return &quot;method&quot;;
      }
<a id=581></a>      default: break;  <a  class="comments">/* go through to return NULL */</a>
    }
  }
<a id=584></a>  return NULL;  <a  class="comments">/* could not find reasonable name */</a>
}


<a id=588></a><a  class="comments">/*</a>
<a id=589></a><a  class="comments">** Try to find a name for a function based on the code that called it.</a>
<a id=590></a><a  class="comments">** (Only works when function was called by a Lua function.)</a>
<a id=591></a><a  class="comments">** Returns what the name is (e.g., &quot;for iterator&quot;, &quot;method&quot;,</a>
<a id=592></a><a  class="comments">** &quot;metamethod&quot;) and sets '*name' to point to the name.</a>
<a id=593></a><a  class="comments">*/</a>
<a id=594></a>static const char *<a href="../h_src/57738244.htm" class="function">funcnamefromcode</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57738108.htm" class="localvar">L</a>, const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57737972.htm" class="localvar">p</a>,
<a id=595></a>                                     int <a href="../h_src/57737836.htm" class="localvar">pc</a>, const char **<a href="../h_src/57737700.htm" class="localvar">name</a>) {
<a id=596></a>  <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/57737564.htm" class="localvar">tm</a> = (<a href="../h_src/57499004.htm" class="type">TMS</a>)0;  <a  class="comments">/* (initial value avoids warnings) */</a>
<a id=597></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/57737428.htm" class="localvar">i</a> = <a href="../h_src/57737972.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/57737836.htm" class="localvar">pc</a>];  <a  class="comments">/* calling instruction */</a>
<a id=598></a>  switch (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/57737428.htm" class="localvar">i</a>)) {
<a id=599></a>    case <a href="../h_src/57685912.htm" class="variable">OP_CALL</a>:
<a id=600></a>    case <a href="../h_src/57685844.htm" class="variable">OP_TAILCALL</a>:
<a id=601></a>      return <a href="../h_src/57745588.htm" class="function">getobjname</a>(<a href="../h_src/57737972.htm" class="localvar">p</a>, <a href="../h_src/57737836.htm" class="localvar">pc</a>, <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/57737428.htm" class="localvar">i</a>), <a href="../h_src/57737700.htm" class="localvar">name</a>);  <a  class="comments">/* get function name */</a>
<a id=602></a>    case <a href="../h_src/57685368.htm" class="variable">OP_TFORCALL</a>: {  <a  class="comments">/* for iterator */</a>
<a id=603></a>      *<a href="../h_src/57737700.htm" class="localvar">name</a> = &quot;for iterator&quot;;
       return &quot;for iterator&quot;;
    }
<a id=606></a>    <a  class="comments">/* other instructions can do calls through metamethods */</a>
<a id=607></a>    case <a href="../h_src/57689176.htm" class="variable">OP_SELF</a>: case <a href="../h_src/57689788.htm" class="variable">OP_GETTABUP</a>: case <a href="../h_src/57689720.htm" class="variable">OP_GETTABLE</a>:
<a id=608></a>    case <a href="../h_src/57689652.htm" class="variable">OP_GETI</a>: case <a href="../h_src/57689584.htm" class="variable">OP_GETFIELD</a>:
<a id=609></a>      <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57500908.htm" class="variable">TM_INDEX</a>;
      break;
<a id=611></a>    case <a href="../h_src/57689516.htm" class="variable">OP_SETTABUP</a>: case <a href="../h_src/57689448.htm" class="variable">OP_SETTABLE</a>: case <a href="../h_src/57689380.htm" class="variable">OP_SETI</a>: case <a href="../h_src/57689312.htm" class="variable">OP_SETFIELD</a>:
<a id=612></a>      <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57500840.htm" class="variable">TM_NEWINDEX</a>;
      break;
<a id=614></a>    case <a href="../h_src/57687408.htm" class="variable">OP_MMBIN</a>: case <a href="../h_src/57687340.htm" class="variable">OP_MMBINI</a>: case <a href="../h_src/57687272.htm" class="variable">OP_MMBINK</a>: {
<a id=615></a>      <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57499004.htm" class="type">TMS</a>, <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/57737428.htm" class="localvar">i</a>));
      break;
    }
<a id=618></a>    case <a href="../h_src/57687204.htm" class="variable">OP_UNM</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57499684.htm" class="variable">TM_UNM</a>; break;
<a id=619></a>    case <a href="../h_src/57687136.htm" class="variable">OP_BNOT</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57499616.htm" class="variable">TM_BNOT</a>; break;
<a id=620></a>    case <a href="../h_src/57687000.htm" class="variable">OP_LEN</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57500636.htm" class="variable">TM_LEN</a>; break;
<a id=621></a>    case <a href="../h_src/57686932.htm" class="variable">OP_CONCAT</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57499412.htm" class="variable">TM_CONCAT</a>; break;
<a id=622></a>    case <a href="../h_src/57686660.htm" class="variable">OP_EQ</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57500568.htm" class="variable">TM_EQ</a>; break;
<a id=623></a>    <a  class="comments">/* no cases for OP_EQI and OP_EQK, as they don't call metamethods */</a>
<a id=624></a>    case <a href="../h_src/57686592.htm" class="variable">OP_LT</a>: case <a href="../h_src/57686320.htm" class="variable">OP_LTI</a>: case <a href="../h_src/57686184.htm" class="variable">OP_GTI</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57499548.htm" class="variable">TM_LT</a>; break;
<a id=625></a>    case <a href="../h_src/57686524.htm" class="variable">OP_LE</a>: case <a href="../h_src/57686252.htm" class="variable">OP_LEI</a>: case <a href="../h_src/57686116.htm" class="variable">OP_GEI</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57499480.htm" class="variable">TM_LE</a>; break;
<a id=626></a>    case <a href="../h_src/57686864.htm" class="variable">OP_CLOSE</a>: case <a href="../h_src/57685776.htm" class="variable">OP_RETURN</a>: <a href="../h_src/57737564.htm" class="localvar">tm</a> = <a href="../h_src/57499276.htm" class="variable">TM_CLOSE</a>; break;
    default:
<a id=628></a>      return NULL;  <a  class="comments">/* cannot find a reasonable name */</a>
  }
<a id=630></a>  *<a href="../h_src/57737700.htm" class="localvar">name</a> = <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57738108.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57643644.htm" class="variable">tmname</a>[<a href="../h_src/57737564.htm" class="localvar">tm</a>]) + 2;
  return &quot;metamethod&quot;;
}


<a id=635></a><a  class="comments">/*</a>
<a id=636></a><a  class="comments">** Try to find a name for a function based on how it was called.</a>
<a id=637></a><a  class="comments">*/</a>
<a id=638></a>static const char *<a href="../h_src/57758780.htm" class="function">funcnamefromcall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57897268.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57897132.htm" class="localvar">ci</a>,
<a id=639></a>                                                   const char **<a href="../h_src/57896996.htm" class="localvar">name</a>) {
<a id=640></a>  if (<a href="../h_src/57897132.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648948.htm" class="macro">CIST_HOOKED</a>) {  <a  class="comments">/* was it called inside a hook? */</a>
<a id=641></a>    *<a href="../h_src/57896996.htm" class="localvar">name</a> = &quot;?&quot;;
    return &quot;hook&quot;;
  }
<a id=644></a>  else if (<a href="../h_src/57897132.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648404.htm" class="macro">CIST_FIN</a>) {  <a  class="comments">/* was it called as a finalizer? */</a>
<a id=645></a>    *<a href="../h_src/57896996.htm" class="localvar">name</a> = &quot;__gc&quot;;
<a id=646></a>    return &quot;metamethod&quot;;  <a  class="comments">/* report it as such */</a>
  }
<a id=648></a>  else if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57897132.htm" class="localvar">ci</a>))
<a id=649></a>    return <a href="../h_src/57738244.htm" class="function">funcnamefromcode</a>(<a href="../h_src/57897268.htm" class="localvar">L</a>, <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57897132.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>, <a href="../h_src/57758644.htm" class="function">currentpc</a>(<a href="../h_src/57897132.htm" class="localvar">ci</a>), <a href="../h_src/57896996.htm" class="localvar">name</a>);
  else
    return NULL;
}

<a id=654></a><a  class="comments">/* }====================================================== */</a>



<a id=658></a><a  class="comments">/*</a>
<a id=659></a><a  class="comments">** Check whether pointer 'o' points to some value in the stack frame of</a>
<a id=660></a><a  class="comments">** the current function and, if so, returns its index.  Because 'o' may</a>
<a id=661></a><a  class="comments">** not point to a value in this stack, we cannot compare it with the</a>
<a id=662></a><a  class="comments">** region boundaries (undefined behavior in ISO C).</a>
<a id=663></a><a  class="comments">*/</a>
<a id=664></a>static int <a href="../h_src/57896860.htm" class="function">instack</a> (<a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57896724.htm" class="localvar">ci</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57896588.htm" class="localvar">o</a>) {
<a id=665></a>  int <a href="../h_src/57896452.htm" class="localvar">pos</a>;
<a id=666></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57896316.htm" class="localvar">base</a> = <a href="../h_src/57896724.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + 1;
<a id=667></a>  for (<a href="../h_src/57896452.htm" class="localvar">pos</a> = 0; <a href="../h_src/57896316.htm" class="localvar">base</a> + <a href="../h_src/57896452.htm" class="localvar">pos</a> &lt; <a href="../h_src/57896724.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>; <a href="../h_src/57896452.htm" class="localvar">pos</a>++) {
<a id=668></a>    if (<a href="../h_src/57896588.htm" class="localvar">o</a> == <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57896316.htm" class="localvar">base</a> + <a href="../h_src/57896452.htm" class="localvar">pos</a>))
<a id=669></a>      return <a href="../h_src/57896452.htm" class="localvar">pos</a>;
  }
<a id=671></a>  return -1;  <a  class="comments">/* not found */</a>
}


<a id=675></a><a  class="comments">/*</a>
<a id=676></a><a  class="comments">** Checks whether value 'o' came from an upvalue. (That can only happen</a>
<a id=677></a><a  class="comments">** with instructions OP_GETTABUP/OP_SETTABUP, which operate directly on</a>
<a id=678></a><a  class="comments">** upvalues.)</a>
<a id=679></a><a  class="comments">*/</a>
<a id=680></a>static const char *<a href="../h_src/57896180.htm" class="function">getupvalname</a> (<a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57896044.htm" class="localvar">ci</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57895908.htm" class="localvar">o</a>,
<a id=681></a>                                 const char **<a href="../h_src/57895772.htm" class="localvar">name</a>) {
<a id=682></a>  <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/57895636.htm" class="localvar">c</a> = <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57896044.htm" class="localvar">ci</a>);
<a id=683></a>  int <a href="../h_src/57895500.htm" class="localvar">i</a>;
<a id=684></a>  for (<a href="../h_src/57895500.htm" class="localvar">i</a> = 0; <a href="../h_src/57895500.htm" class="localvar">i</a> &lt; <a href="../h_src/57895636.htm" class="localvar">c</a>-&gt;<a href="../h_src/57508320.htm" class="variable">nupvalues</a>; <a href="../h_src/57895500.htm" class="localvar">i</a>++) {
<a id=685></a>    if (<a href="../h_src/57895636.htm" class="localvar">c</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57895500.htm" class="localvar">i</a>]-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a> == <a href="../h_src/57895908.htm" class="localvar">o</a>) {
<a id=686></a>      *<a href="../h_src/57895772.htm" class="localvar">name</a> = <a href="../h_src/57754904.htm" class="function">upvalname</a>(<a href="../h_src/57895636.htm" class="localvar">c</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>, <a href="../h_src/57895500.htm" class="localvar">i</a>);
      return &quot;upvalue&quot;;
    }
  }
  return NULL;
}


<a id=694></a>static const char *<a href="../h_src/57895364.htm" class="function">formatvarinfo</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57895228.htm" class="localvar">L</a>, const char *<a href="../h_src/57895092.htm" class="localvar">kind</a>,
<a id=695></a>                                                const char *<a href="../h_src/57894956.htm" class="localvar">name</a>) {
<a id=696></a>  if (<a href="../h_src/57895092.htm" class="localvar">kind</a> == NULL)
<a id=697></a>    return &quot;&quot;;  <a  class="comments">/* no information */</a>
  else
<a id=699></a>    return <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/57895228.htm" class="localvar">L</a>, &quot; (%s '%s')&quot;, <a href="../h_src/57895092.htm" class="localvar">kind</a>, <a href="../h_src/57894956.htm" class="localvar">name</a>);
}

<a id=702></a><a  class="comments">/*</a>
<a id=703></a><a  class="comments">** Build a string with a &quot;description&quot; for the value 'o', such as</a>
<a id=704></a><a  class="comments">** &quot;variable 'x'&quot; or &quot;upvalue 'y'&quot;.</a>
<a id=705></a><a  class="comments">*/</a>
<a id=706></a>static const char *<a href="../h_src/57894820.htm" class="function">varinfo</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57894684.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57894548.htm" class="localvar">o</a>) {
<a id=707></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57894412.htm" class="localvar">ci</a> = <a href="../h_src/57894684.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=708></a>  const char *<a href="../h_src/57894276.htm" class="localvar">name</a> = NULL;  <a  class="comments">/* to avoid warnings */</a>
<a id=709></a>  const char *<a href="../h_src/57894140.htm" class="localvar">kind</a> = NULL;
<a id=710></a>  if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57894412.htm" class="localvar">ci</a>)) {
<a id=711></a>    <a href="../h_src/57894140.htm" class="localvar">kind</a> = <a href="../h_src/57896180.htm" class="function">getupvalname</a>(<a href="../h_src/57894412.htm" class="localvar">ci</a>, <a href="../h_src/57894548.htm" class="localvar">o</a>, &amp;<a href="../h_src/57894276.htm" class="localvar">name</a>);  <a  class="comments">/* check whether 'o' is an upvalue */</a>
<a id=712></a>    if (!<a href="../h_src/57894140.htm" class="localvar">kind</a>) {  <a  class="comments">/* not an upvalue? */</a>
<a id=713></a>      int <a href="../h_src/57894004.htm" class="localvar">reg</a> = <a href="../h_src/57896860.htm" class="function">instack</a>(<a href="../h_src/57894412.htm" class="localvar">ci</a>, <a href="../h_src/57894548.htm" class="localvar">o</a>);  <a  class="comments">/* try a register */</a>
<a id=714></a>      if (<a href="../h_src/57894004.htm" class="localvar">reg</a> &gt;= 0)  <a  class="comments">/* is 'o' a register? */</a>
<a id=715></a>        <a href="../h_src/57894140.htm" class="localvar">kind</a> = <a href="../h_src/57745588.htm" class="function">getobjname</a>(<a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57894412.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>, <a href="../h_src/57758644.htm" class="function">currentpc</a>(<a href="../h_src/57894412.htm" class="localvar">ci</a>), <a href="../h_src/57894004.htm" class="localvar">reg</a>, &amp;<a href="../h_src/57894276.htm" class="localvar">name</a>);
    }
  }
<a id=718></a>  return <a href="../h_src/57895364.htm" class="function">formatvarinfo</a>(<a href="../h_src/57894684.htm" class="localvar">L</a>, <a href="../h_src/57894140.htm" class="localvar">kind</a>, <a href="../h_src/57894276.htm" class="localvar">name</a>);
}


<a id=722></a><a  class="comments">/*</a>
<a id=723></a><a  class="comments">** Raise a type error</a>
<a id=724></a><a  class="comments">*/</a>
<a id=725></a>static <a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57893868.htm" class="function">typeerror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57893732.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57893596.htm" class="localvar">o</a>, const char *<a href="../h_src/57893460.htm" class="localvar">op</a>,
<a id=726></a>                          const char *<a href="../h_src/57893324.htm" class="localvar">extra</a>) {
<a id=727></a>  const char *<a href="../h_src/57893188.htm" class="localvar">t</a> = <a href="../h_src/57498188.htm" class="function">luaT_objtypename</a>(<a href="../h_src/57893732.htm" class="localvar">L</a>, <a href="../h_src/57893596.htm" class="localvar">o</a>);
<a id=728></a>  <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57893732.htm" class="localvar">L</a>, &quot;attempt to %s a %s value%s&quot;, <a href="../h_src/57893460.htm" class="localvar">op</a>, <a href="../h_src/57893188.htm" class="localvar">t</a>, <a href="../h_src/57893324.htm" class="localvar">extra</a>);
}


<a id=732></a><a  class="comments">/*</a>
<a id=733></a><a  class="comments">** Raise a type error with &quot;standard&quot; information about the faulty</a>
<a id=734></a><a  class="comments">** object 'o' (using 'varinfo').</a>
<a id=735></a><a  class="comments">*/</a>
<a id=736></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635756.htm" class="function">luaG_typeerror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57893052.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57892916.htm" class="localvar">o</a>, const char *<a href="../h_src/57892780.htm" class="localvar">op</a>) {
<a id=737></a>  <a href="../h_src/57893868.htm" class="function">typeerror</a>(<a href="../h_src/57893052.htm" class="localvar">L</a>, <a href="../h_src/57892916.htm" class="localvar">o</a>, <a href="../h_src/57892780.htm" class="localvar">op</a>, <a href="../h_src/57894820.htm" class="function">varinfo</a>(<a href="../h_src/57893052.htm" class="localvar">L</a>, <a href="../h_src/57892916.htm" class="localvar">o</a>));
}


<a id=741></a><a  class="comments">/*</a>
<a id=742></a><a  class="comments">** Raise an error for calling a non-callable object. Try to find a name</a>
<a id=743></a><a  class="comments">** for the object based on how it was called ('funcnamefromcall'); if it</a>
<a id=744></a><a  class="comments">** cannot get a name there, try 'varinfo'.</a>
<a id=745></a><a  class="comments">*/</a>
<a id=746></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635688.htm" class="function">luaG_callerror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57892644.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57892508.htm" class="localvar">o</a>) {
<a id=747></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57892372.htm" class="localvar">ci</a> = <a href="../h_src/57892644.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=748></a>  const char *<a href="../h_src/57892236.htm" class="localvar">name</a> = NULL;  <a  class="comments">/* to avoid warnings */</a>
<a id=749></a>  const char *<a href="../h_src/57892100.htm" class="localvar">kind</a> = <a href="../h_src/57758780.htm" class="function">funcnamefromcall</a>(<a href="../h_src/57892644.htm" class="localvar">L</a>, <a href="../h_src/57892372.htm" class="localvar">ci</a>, &amp;<a href="../h_src/57892236.htm" class="localvar">name</a>);
<a id=750></a>  const char *<a href="../h_src/57891964.htm" class="localvar">extra</a> = <a href="../h_src/57892100.htm" class="localvar">kind</a> ? <a href="../h_src/57895364.htm" class="function">formatvarinfo</a>(<a href="../h_src/57892644.htm" class="localvar">L</a>, <a href="../h_src/57892100.htm" class="localvar">kind</a>, <a href="../h_src/57892236.htm" class="localvar">name</a>) : <a href="../h_src/57894820.htm" class="function">varinfo</a>(<a href="../h_src/57892644.htm" class="localvar">L</a>, <a href="../h_src/57892508.htm" class="localvar">o</a>);
<a id=751></a>  <a href="../h_src/57893868.htm" class="function">typeerror</a>(<a href="../h_src/57892644.htm" class="localvar">L</a>, <a href="../h_src/57892508.htm" class="localvar">o</a>, &quot;call&quot;, <a href="../h_src/57891964.htm" class="localvar">extra</a>);
}


<a id=755></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635620.htm" class="function">luaG_forerror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57891828.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57891692.htm" class="localvar">o</a>, const char *<a href="../h_src/57891556.htm" class="localvar">what</a>) {
<a id=756></a>  <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57891828.htm" class="localvar">L</a>, &quot;bad 'for' %s (number expected, got %s)&quot;,
<a id=757></a>                   <a href="../h_src/57891556.htm" class="localvar">what</a>, <a href="../h_src/57498188.htm" class="function">luaT_objtypename</a>(<a href="../h_src/57891828.htm" class="localvar">L</a>, <a href="../h_src/57891692.htm" class="localvar">o</a>));
}


<a id=761></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635552.htm" class="function">luaG_concaterror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57891420.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57891284.htm" class="localvar">p1</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57891148.htm" class="localvar">p2</a>) {
<a id=762></a>  if (<a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/57891284.htm" class="localvar">p1</a>) || <a href="../h_src/57614200.htm" class="macro">cvt2str</a>(<a href="../h_src/57891284.htm" class="localvar">p1</a>)) <a href="../h_src/57891284.htm" class="localvar">p1</a> = <a href="../h_src/57891148.htm" class="localvar">p2</a>;
<a id=763></a>  <a href="../h_src/57635756.htm" class="function">luaG_typeerror</a>(<a href="../h_src/57891420.htm" class="localvar">L</a>, <a href="../h_src/57891284.htm" class="localvar">p1</a>, &quot;concatenate&quot;);
}


<a id=767></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635484.htm" class="function">luaG_opinterror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57891012.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57890876.htm" class="localvar">p1</a>,
<a id=768></a>                         const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57890740.htm" class="localvar">p2</a>, const char *<a href="../h_src/57890604.htm" class="localvar">msg</a>) {
<a id=769></a>  if (!<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(<a href="../h_src/57890876.htm" class="localvar">p1</a>))  <a  class="comments">/* first operand is wrong? */</a>
<a id=770></a>    <a href="../h_src/57890740.htm" class="localvar">p2</a> = <a href="../h_src/57890876.htm" class="localvar">p1</a>;  <a  class="comments">/* now second is wrong */</a>
<a id=771></a>  <a href="../h_src/57635756.htm" class="function">luaG_typeerror</a>(<a href="../h_src/57891012.htm" class="localvar">L</a>, <a href="../h_src/57890740.htm" class="localvar">p2</a>, <a href="../h_src/57890604.htm" class="localvar">msg</a>);
}


<a id=775></a><a  class="comments">/*</a>
<a id=776></a><a  class="comments">** Error when both values are convertible to numbers, but not to integers</a>
<a id=777></a><a  class="comments">*/</a>
<a id=778></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635416.htm" class="function">luaG_tointerror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57890468.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57890332.htm" class="localvar">p1</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57890196.htm" class="localvar">p2</a>) {
<a id=779></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57890060.htm" class="localvar">temp</a>;
<a id=780></a>  if (!<a href="../h_src/57611276.htm" class="function">luaV_tointegerns</a>(<a href="../h_src/57890332.htm" class="localvar">p1</a>, &amp;<a href="../h_src/57890060.htm" class="localvar">temp</a>, <a href="../h_src/57613656.htm" class="macro">LUA_FLOORN2I</a>))
<a id=781></a>    <a href="../h_src/57890196.htm" class="localvar">p2</a> = <a href="../h_src/57890332.htm" class="localvar">p1</a>;
<a id=782></a>  <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57890468.htm" class="localvar">L</a>, &quot;number%s has no integer representation&quot;, <a href="../h_src/57894820.htm" class="function">varinfo</a>(<a href="../h_src/57890468.htm" class="localvar">L</a>, <a href="../h_src/57890196.htm" class="localvar">p2</a>));
}


<a id=786></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635348.htm" class="function">luaG_ordererror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57889924.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57889788.htm" class="localvar">p1</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57889652.htm" class="localvar">p2</a>) {
<a id=787></a>  const char *<a href="../h_src/57889516.htm" class="localvar">t1</a> = <a href="../h_src/57498188.htm" class="function">luaT_objtypename</a>(<a href="../h_src/57889924.htm" class="localvar">L</a>, <a href="../h_src/57889788.htm" class="localvar">p1</a>);
<a id=788></a>  const char *<a href="../h_src/57889380.htm" class="localvar">t2</a> = <a href="../h_src/57498188.htm" class="function">luaT_objtypename</a>(<a href="../h_src/57889924.htm" class="localvar">L</a>, <a href="../h_src/57889652.htm" class="localvar">p2</a>);
<a id=789></a>  if (<a href="../h_aa/57564488.htm" class="libfunc">strcmp</a>(<a href="../h_src/57889516.htm" class="localvar">t1</a>, <a href="../h_src/57889380.htm" class="localvar">t2</a>) == 0)
<a id=790></a>    <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57889924.htm" class="localvar">L</a>, &quot;attempt to compare two %s values&quot;, <a href="../h_src/57889516.htm" class="localvar">t1</a>);
  else
<a id=792></a>    <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57889924.htm" class="localvar">L</a>, &quot;attempt to compare %s with %s&quot;, <a href="../h_src/57889516.htm" class="localvar">t1</a>, <a href="../h_src/57889380.htm" class="localvar">t2</a>);
}


<a id=796></a><a  class="comments">/* add src:line information to 'msg' */</a>
<a id=797></a>const char *<a href="../h_src/57635212.htm" class="function">luaG_addinfo</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57889244.htm" class="localvar">L</a>, const char *<a href="../h_src/57889108.htm" class="localvar">msg</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57888972.htm" class="localvar">src</a>,
<a id=798></a>                                        int <a href="../h_src/57888836.htm" class="localvar">line</a>) {
<a id=799></a>  char <a href="../h_src/57888700.htm" class="localvar">buff</a>[<a href="../h_src/57447380.htm" class="macro">LUA_IDSIZE</a>];
<a id=800></a>  if (<a href="../h_src/57888972.htm" class="localvar">src</a>)
<a id=801></a>    <a href="../h_src/57501316.htm" class="function">luaO_chunkid</a>(<a href="../h_src/57888700.htm" class="localvar">buff</a>, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/57888972.htm" class="localvar">src</a>), <a href="../h_src/57522396.htm" class="macro">tsslen</a>(<a href="../h_src/57888972.htm" class="localvar">src</a>));
<a id=802></a>  else {  <a  class="comments">/* no source available; use &quot;?&quot; instead */</a>
<a id=803></a>    <a href="../h_src/57888700.htm" class="localvar">buff</a>[0] = '?'; <a href="../h_src/57888700.htm" class="localvar">buff</a>[1] = '\0';
  }
<a id=805></a>  return <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/57889244.htm" class="localvar">L</a>, &quot;%s:%d: %s&quot;, <a href="../h_src/57888700.htm" class="localvar">buff</a>, <a href="../h_src/57888836.htm" class="localvar">line</a>, <a href="../h_src/57889108.htm" class="localvar">msg</a>);
}


<a id=809></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635144.htm" class="function">luaG_errormsg</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57888564.htm" class="localvar">L</a>) {
<a id=810></a>  if (<a href="../h_src/57888564.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641604.htm" class="variable">errfunc</a> != 0) {  <a  class="comments">/* is there an error handling function? */</a>
<a id=811></a>    <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57888428.htm" class="localvar">errfunc</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57888564.htm" class="localvar">L</a>, <a href="../h_src/57888564.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641604.htm" class="variable">errfunc</a>);
<a id=812></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57513216.htm" class="macro">ttisfunction</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(errfunc)));
<a id=813></a>    <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57888564.htm" class="localvar">L</a>, <a href="../h_src/57888564.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57888564.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1);  <a  class="comments">/* move argument */</a>
<a id=814></a>    <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57888564.htm" class="localvar">L</a>, <a href="../h_src/57888564.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1, <a href="../h_src/57888428.htm" class="localvar">errfunc</a>);  <a  class="comments">/* push function */</a>
<a id=815></a>    <a href="../h_src/57888564.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++;  <a  class="comments">/* assume EXTRA_STACK */</a>
<a id=816></a>    <a href="../h_src/57633172.htm" class="function">luaD_callnoyield</a>(<a href="../h_src/57888564.htm" class="localvar">L</a>, <a href="../h_src/57888564.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 2, 1);  <a  class="comments">/* call it */</a>
  }
<a id=818></a>  <a href="../h_src/57632560.htm" class="function">luaD_throw</a>(<a href="../h_src/57888564.htm" class="localvar">L</a>, <a href="../h_src/57444932.htm" class="macro">LUA_ERRRUN</a>);
}


<a id=822></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57635280.htm" class="function">luaG_runerror</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57887748.htm" class="localvar">L</a>, const char *<a href="../h_src/57887612.htm" class="localvar">fmt</a>, <a href="../h_src/57887476.htm" class="localvar">...</a>) {
<a id=823></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57887340.htm" class="localvar">ci</a> = <a href="../h_src/57887748.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=824></a>  const char *<a href="../h_src/57887204.htm" class="localvar">msg</a>;
<a id=825></a>  <a href="../h_aa/57434868.htm" class="type">va_list</a> <a href="../h_src/57887068.htm" class="localvar">argp</a>;
<a id=826></a>  <a href="../h_src/57621612.htm" class="macro">luaC_checkGC</a>(<a href="../h_src/57887748.htm" class="localvar">L</a>);  <a  class="comments">/* error message uses memory */</a>
<a id=827></a>  va_start(<a href="../h_src/57887068.htm" class="localvar">argp</a>, <a href="../h_src/57887612.htm" class="localvar">fmt</a>);
<a id=828></a>  <a href="../h_src/57887204.htm" class="localvar">msg</a> = <a href="../h_src/57501452.htm" class="function">luaO_pushvfstring</a>(<a href="../h_src/57887748.htm" class="localvar">L</a>, <a href="../h_src/57887612.htm" class="localvar">fmt</a>, <a href="../h_src/57887068.htm" class="localvar">argp</a>);  <a  class="comments">/* format message */</a>
<a id=829></a>  va_end(<a href="../h_src/57887068.htm" class="localvar">argp</a>);
<a id=830></a>  if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57887340.htm" class="localvar">ci</a>)) {  <a  class="comments">/* if Lua function, add source:line information */</a>
<a id=831></a>    <a href="../h_src/57635212.htm" class="function">luaG_addinfo</a>(<a href="../h_src/57887748.htm" class="localvar">L</a>, <a href="../h_src/57887204.htm" class="localvar">msg</a>, <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57887340.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57531984.htm" class="variable">p</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>, <a href="../h_src/57757148.htm" class="function">getcurrentline</a>(<a href="../h_src/57887340.htm" class="localvar">ci</a>));
<a id=832></a>    <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57887748.htm" class="localvar">L</a>, <a href="../h_src/57887748.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 2, <a href="../h_src/57887748.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1);  <a  class="comments">/* remove 'msg' */</a>
<a id=833></a>    <a href="../h_src/57887748.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>--;
  }
<a id=835></a>  <a href="../h_src/57635144.htm" class="function">luaG_errormsg</a>(<a href="../h_src/57887748.htm" class="localvar">L</a>);
}


<a id=839></a><a  class="comments">/*</a>
<a id=840></a><a  class="comments">** Check whether new instruction 'newpc' is in a different line from</a>
<a id=841></a><a  class="comments">** previous instruction 'oldpc'. More often than not, 'newpc' is only</a>
<a id=842></a><a  class="comments">** one or a few instructions after 'oldpc' (it must be after, see</a>
<a id=843></a><a  class="comments">** caller), so try to avoid calling 'luaG_getfuncline'. If they are</a>
<a id=844></a><a  class="comments">** too far apart, there is a good chance of a ABSLINEINFO in the way,</a>
<a id=845></a><a  class="comments">** so it goes directly to 'luaG_getfuncline'.</a>
<a id=846></a><a  class="comments">*/</a>
<a id=847></a>static int <a href="../h_src/57886660.htm" class="function">changedline</a> (const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57886524.htm" class="localvar">p</a>, int <a href="../h_src/57886388.htm" class="localvar">oldpc</a>, int <a href="../h_src/57886252.htm" class="localvar">newpc</a>) {
<a id=848></a>  if (<a href="../h_src/57886524.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a> == NULL)  <a  class="comments">/* no debug information? */</a>
    return 0;
<a id=850></a>  if (<a href="../h_src/57886252.htm" class="localvar">newpc</a> - <a href="../h_src/57886388.htm" class="localvar">oldpc</a> &lt; <a href="../h_src/57636096.htm" class="macro">MAXIWTHABS</a> / 2) {  <a  class="comments">/* not too far apart? */</a>
<a id=851></a>    int <a href="../h_src/57886116.htm" class="localvar">delta</a> = 0;  <a  class="comments">/* line difference */</a>
<a id=852></a>    int <a href="../h_src/57885980.htm" class="localvar">pc</a> = <a href="../h_src/57886388.htm" class="localvar">oldpc</a>;
    for (;;) {
<a id=854></a>      int <a href="../h_src/57885844.htm" class="localvar">lineinfo</a> = <a href="../h_src/57886524.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>[++<a href="../h_src/57885980.htm" class="localvar">pc</a>];
<a id=855></a>      if (<a href="../h_src/57885844.htm" class="localvar">lineinfo</a> == <a href="../h_src/57636368.htm" class="macro">ABSLINEINFO</a>)
<a id=856></a>        break;  <a  class="comments">/* cannot compute delta; fall through */</a>
<a id=857></a>      <a href="../h_src/57886116.htm" class="localvar">delta</a> += <a href="../h_src/57885844.htm" class="localvar">lineinfo</a>;
<a id=858></a>      if (<a href="../h_src/57885980.htm" class="localvar">pc</a> == <a href="../h_src/57886252.htm" class="localvar">newpc</a>)
<a id=859></a>        return (<a href="../h_src/57886116.htm" class="localvar">delta</a> != 0);  <a  class="comments">/* delta computed successfully */</a>
    }
  }
<a id=862></a>  <a  class="comments">/* either instructions are too far apart or there is an absolute line</a>
<a id=863></a><a  class="comments">     info in the way; compute line difference explicitly */</a>
<a id=864></a>  return (<a href="../h_src/57635960.htm" class="function">luaG_getfuncline</a>(<a href="../h_src/57886524.htm" class="localvar">p</a>, <a href="../h_src/57886388.htm" class="localvar">oldpc</a>) != <a href="../h_src/57635960.htm" class="function">luaG_getfuncline</a>(<a href="../h_src/57886524.htm" class="localvar">p</a>, <a href="../h_src/57886252.htm" class="localvar">newpc</a>));
}


<a id=868></a><a  class="comments">/*</a>
<a id=869></a><a  class="comments">** Traces the execution of a Lua function. Called before the execution</a>
<a id=870></a><a  class="comments">** of each opcode, when debug is on. 'L-&gt;oldpc' stores the last</a>
<a id=871></a><a  class="comments">** instruction traced, to detect line changes. When entering a new</a>
<a id=872></a><a  class="comments">** function, 'npci' will be zero and will test as a new line whatever</a>
<a id=873></a><a  class="comments">** the value of 'oldpc'.  Some exceptional conditions may return to</a>
<a id=874></a><a  class="comments">** a function without setting 'oldpc'. In that case, 'oldpc' may be</a>
<a id=875></a><a  class="comments">** invalid; if so, use zero as a valid value. (A wrong but valid 'oldpc'</a>
<a id=876></a><a  class="comments">** at most causes an extra call to a line hook.)</a>
<a id=877></a><a  class="comments">** This function is not &quot;Protected&quot; when called, so it should correct</a>
<a id=878></a><a  class="comments">** 'L-&gt;top.p' before calling anything that can run the GC.</a>
<a id=879></a><a  class="comments">*/</a>
<a id=880></a>int <a href="../h_src/57635076.htm" class="function">luaG_traceexec</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57885708.htm" class="localvar">L</a>, const <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57885572.htm" class="localvar">pc</a>) {
<a id=881></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57885436.htm" class="localvar">ci</a> = <a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=882></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/57885300.htm" class="localvar">mask</a> = <a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>;
<a id=883></a>  const <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57885164.htm" class="localvar">p</a> = <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57885436.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>;
<a id=884></a>  int <a href="../h_src/57885028.htm" class="localvar">counthook</a>;
<a id=885></a>  if (!(<a href="../h_src/57885300.htm" class="localvar">mask</a> &amp; (<a href="../h_src/57424940.htm" class="macro">LUA_MASKLINE</a> | <a href="../h_src/57424804.htm" class="macro">LUA_MASKCOUNT</a>))) {  <a  class="comments">/* no hooks? */</a>
<a id=886></a>    <a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651056.htm" class="variable">trap</a> = 0;  <a  class="comments">/* don't need to stop again */</a>
<a id=887></a>    return 0;  <a  class="comments">/* turn off 'trap' */</a>
  }
<a id=889></a>  <a href="../h_src/57885572.htm" class="localvar">pc</a>++;  <a  class="comments">/* reference is always next instruction */</a>
<a id=890></a>  <a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a> = <a href="../h_src/57885572.htm" class="localvar">pc</a>;  <a  class="comments">/* save 'pc' */</a>
<a id=891></a>  <a href="../h_src/57885028.htm" class="localvar">counthook</a> = (--<a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641332.htm" class="variable">hookcount</a> == 0 &amp;&amp; (<a href="../h_src/57885300.htm" class="localvar">mask</a> &amp; <a href="../h_src/57424804.htm" class="macro">LUA_MASKCOUNT</a>));
<a id=892></a>  if (<a href="../h_src/57885028.htm" class="localvar">counthook</a>)
<a id=893></a>    <a href="../h_src/57636504.htm" class="macro">resethookcount</a>(<a href="../h_src/57885708.htm" class="localvar">L</a>);  <a  class="comments">/* reset count */</a>
<a id=894></a>  else if (!(<a href="../h_src/57885300.htm" class="localvar">mask</a> &amp; <a href="../h_src/57424940.htm" class="macro">LUA_MASKLINE</a>))
<a id=895></a>    return 1;  <a  class="comments">/* no line hook and count != 0; nothing to be done now */</a>
<a id=896></a>  if (<a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648540.htm" class="macro">CIST_HOOKYIELD</a>) {  <a  class="comments">/* called hook last time? */</a>
<a id=897></a>    <a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp;= ~<a href="../h_src/57648540.htm" class="macro">CIST_HOOKYIELD</a>;  <a  class="comments">/* erase mark */</a>
<a id=898></a>    return 1;  <a  class="comments">/* do not call hook again (VM yielded, so it did not move) */</a>
  }
<a id=900></a>  if (!<a href="../h_src/57683464.htm" class="macro">isIT</a>(*(<a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a> - 1)))  <a  class="comments">/* top not being used? */</a>
<a id=901></a>    <a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;  <a  class="comments">/* correct top */</a>
<a id=902></a>  if (<a href="../h_src/57885028.htm" class="localvar">counthook</a>)
<a id=903></a>    <a href="../h_src/57633512.htm" class="function">luaD_hook</a>(<a href="../h_src/57885708.htm" class="localvar">L</a>, <a href="../h_src/57425484.htm" class="macro">LUA_HOOKCOUNT</a>, -1, 0, 0);  <a  class="comments">/* call count hook */</a>
<a id=904></a>  if (<a href="../h_src/57885300.htm" class="localvar">mask</a> &amp; <a href="../h_src/57424940.htm" class="macro">LUA_MASKLINE</a>) {
<a id=905></a>    <a  class="comments">/* 'L-&gt;oldpc' may be invalid; use zero in this case */</a>
<a id=906></a>    int <a href="../h_src/57884892.htm" class="localvar">oldpc</a> = (<a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641468.htm" class="variable">oldpc</a> &lt; <a href="../h_src/57885164.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515596.htm" class="variable">sizecode</a>) ? <a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641468.htm" class="variable">oldpc</a> : 0;
<a id=907></a>    int <a href="../h_src/57884756.htm" class="localvar">npci</a> = <a href="../h_src/57636776.htm" class="macro">pcRel</a>(<a href="../h_src/57885572.htm" class="localvar">pc</a>, <a href="../h_src/57885164.htm" class="localvar">p</a>);
<a id=908></a>    if (<a href="../h_src/57884756.htm" class="localvar">npci</a> &lt;= <a href="../h_src/57884892.htm" class="localvar">oldpc</a> ||  <a  class="comments">/* call hook when jump back (loop), */</a>
<a id=909></a>        <a href="../h_src/57886660.htm" class="function">changedline</a>(<a href="../h_src/57885164.htm" class="localvar">p</a>, <a href="../h_src/57884892.htm" class="localvar">oldpc</a>, <a href="../h_src/57884756.htm" class="localvar">npci</a>)) {  <a  class="comments">/* or when enter new line */</a>
<a id=910></a>      int <a href="../h_src/57884620.htm" class="localvar">newline</a> = <a href="../h_src/57635960.htm" class="function">luaG_getfuncline</a>(<a href="../h_src/57885164.htm" class="localvar">p</a>, <a href="../h_src/57884756.htm" class="localvar">npci</a>);
<a id=911></a>      <a href="../h_src/57633512.htm" class="function">luaD_hook</a>(<a href="../h_src/57885708.htm" class="localvar">L</a>, <a href="../h_src/57425620.htm" class="macro">LUA_HOOKLINE</a>, <a href="../h_src/57884620.htm" class="localvar">newline</a>, 0, 0);  <a  class="comments">/* call line hook */</a>
    }
<a id=913></a>    <a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641468.htm" class="variable">oldpc</a> = <a href="../h_src/57884756.htm" class="localvar">npci</a>;  <a  class="comments">/* 'pc' of last call to line hook */</a>
  }
<a id=915></a>  if (<a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642828.htm" class="variable">status</a> == <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>) {  <a  class="comments">/* did hook yield? */</a>
<a id=916></a>    if (<a href="../h_src/57885028.htm" class="localvar">counthook</a>)
<a id=917></a>      <a href="../h_src/57885708.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641332.htm" class="variable">hookcount</a> = 1;  <a  class="comments">/* undo decrement to zero */</a>
<a id=918></a>    <a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>--;  <a  class="comments">/* undo increment (resume will increment it again) */</a>
<a id=919></a>    <a href="../h_src/57885436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> |= <a href="../h_src/57648540.htm" class="macro">CIST_HOOKYIELD</a>;  <a  class="comments">/* mark that it yielded */</a>
<a id=920></a>    <a href="../h_src/57632560.htm" class="function">luaD_throw</a>(<a href="../h_src/57885708.htm" class="localvar">L</a>, <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>);
  }
<a id=922></a>  return 1;  <a  class="comments">/* keep 'trap' on */</a>
}

</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

