<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lvm.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/58062016.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/58062016.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/58062016.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/58062016.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/58062016.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/58062016.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/58062016.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/58062016.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/58062016.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lvm.c $</a>
<a id=3></a><a  class="comments">** Lua virtual machine</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/58061948.htm" class="macro">lvm_c</a>
<a id=8></a>#define <a href="../h_src/58061812.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;

#include &lt;float.h&gt;
#include &lt;limits.h&gt;
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

<a id=19></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=21></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=23></a>#include &quot;<a href="../h_src/57632424.htm" class="file">lfunc.h</a>&quot;
<a id=24></a>#include &quot;<a href="../h_src/57630112.htm" class="file">lgc.h</a>&quot;
<a id=25></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57699512.htm" class="file">lopcodes.h</a>&quot;
<a id=27></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;
<a id=28></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;
<a id=29></a>#include &quot;<a href="../h_src/57618348.htm" class="file">ltable.h</a>&quot;
<a id=30></a>#include &quot;<a href="../h_src/57501248.htm" class="file">ltm.h</a>&quot;
<a id=31></a>#include &quot;<a href="../h_src/57614676.htm" class="file">lvm.h</a>&quot;


<a id=34></a><a  class="comments">/*</a>
<a id=35></a><a  class="comments">** By default, use jump tables in the main interpreter loop on gcc</a>
<a id=36></a><a  class="comments">** and compatible compilers.</a>
<a id=37></a><a  class="comments">*/</a>
<a id=38></a>#if !defined(<a href="../h_src/58061676.htm" class="macro">LUA_USE_JUMPTABLE</a>)
#if defined(__GNUC__)
<a id=40></a>#define <a href="../h_src/58061540.htm" class="macro">LUA_USE_JUMPTABLE</a>	1
#else
#define LUA_USE_JUMPTABLE	0
#endif
#endif



<a id=48></a><a  class="comments">/* limit for table tag-method chains (to avoid infinite loops) */</a>
<a id=49></a>#define <a href="../h_src/58061404.htm" class="macro">MAXTAGLOOP</a>	2000


<a id=52></a><a  class="comments">/*</a>
<a id=53></a><a  class="comments">** 'l_intfitsf' checks whether a given integer is in the range that</a>
<a id=54></a><a  class="comments">** can be converted to a float without rounding. Used in comparisons.</a>
<a id=55></a><a  class="comments">*/</a>

<a id=57></a><a  class="comments">/* number of bits in the mantissa of a float */</a>
<a id=58></a>#define <a href="../h_src/58061268.htm" class="macro">NBM</a>		(l_floatatt(MANT_DIG))

<a id=60></a><a  class="comments">/*</a>
<a id=61></a><a  class="comments">** Check whether some integers may not fit in a float, testing whether</a>
<a id=62></a><a  class="comments">** (maxinteger &gt;&gt; NBM) &gt; 0. (That implies (1 &lt;&lt; NBM) &lt;= maxinteger.)</a>
<a id=63></a><a  class="comments">** (The shifts are done in parts, to avoid shifting by more than the size</a>
<a id=64></a><a  class="comments">** of an integer. In a worst case, NBM == 113 for long double and</a>
<a id=65></a><a  class="comments">** sizeof(long) == 32.)</a>
<a id=66></a><a  class="comments">*/</a>
<a id=67></a>#if ((((<a href="../h_src/57450100.htm" class="macro">LUA_MAXINTEGER</a> &gt;&gt; (<a href="../h_src/58061268.htm" class="macro">NBM</a> / 4)) &gt;&gt; (<a href="../h_src/58061268.htm" class="macro">NBM</a> / 4)) &gt;&gt; (<a href="../h_src/58061268.htm" class="macro">NBM</a> / 4)) \
<a id=68></a>	&gt;&gt; (<a href="../h_src/58061268.htm" class="macro">NBM</a> - (3 * (<a href="../h_src/58061268.htm" class="macro">NBM</a> / 4))))  &gt;  0

<a id=70></a><a  class="comments">/* limit for integers that fit in a float */</a>
#define MAXINTFITSF	((lua_Unsigned)1 &lt;&lt; NBM)

<a id=73></a><a  class="comments">/* check whether 'i' is in the interval [-MAXINTFITSF, MAXINTFITSF] */</a>
#define l_intfitsf(i)	((MAXINTFITSF + l_castS2U(i)) &lt;= (2 * MAXINTFITSF))

<a id=76></a>#else  <a  class="comments">/* all integers fit in a float precisely */</a>

<a id=78></a>#define <a href="../h_src/58061132.htm" class="macro">l_intfitsf</a>(i)	1

#endif


<a id=83></a><a  class="comments">/*</a>
<a id=84></a><a  class="comments">** Try to convert a value from string to a number value.</a>
<a id=85></a><a  class="comments">** If the value is not a string or is a string not representing</a>
<a id=86></a><a  class="comments">** a valid numeral (or if coercions from strings to numbers</a>
<a id=87></a><a  class="comments">** are disabled via macro 'cvt2num'), do not modify 'result'</a>
<a id=88></a><a  class="comments">** and return 0.</a>
<a id=89></a><a  class="comments">*/</a>
<a id=90></a>static int <a href="../h_src/58060996.htm" class="function">l_strton</a> (const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58060860.htm" class="localvar">obj</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58060724.htm" class="localvar">result</a>) {
<a id=91></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(obj != result);
<a id=92></a>  if (!<a href="../h_src/57613928.htm" class="macro">cvt2num</a>(<a href="../h_src/58060860.htm" class="localvar">obj</a>))  <a  class="comments">/* is object not a string? */</a>
    return 0;
  else
<a id=95></a>    return (<a href="../h_src/57501656.htm" class="function">luaO_str2num</a>(<a href="../h_src/57522532.htm" class="macro">svalue</a>(<a href="../h_src/58060860.htm" class="localvar">obj</a>), <a href="../h_src/58060724.htm" class="localvar">result</a>) == <a href="../h_src/57522260.htm" class="macro">vslen</a>(<a href="../h_src/58060860.htm" class="localvar">obj</a>) + 1);
}


<a id=99></a><a  class="comments">/*</a>
<a id=100></a><a  class="comments">** Try to convert a value to a float. The float case is already handled</a>
<a id=101></a><a  class="comments">** by the macro 'tonumber'.</a>
<a id=102></a><a  class="comments">*/</a>
<a id=103></a>int <a href="../h_src/57611548.htm" class="function">luaV_tonumber_</a> (const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58060588.htm" class="localvar">obj</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> *<a href="../h_src/58060452.htm" class="localvar">n</a>) {
<a id=104></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/58060316.htm" class="localvar">v</a>;
<a id=105></a>  if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58060588.htm" class="localvar">obj</a>)) {
<a id=106></a>    *<a href="../h_src/58060452.htm" class="localvar">n</a> = <a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58060588.htm" class="localvar">obj</a>));
    return 1;
  }
<a id=109></a>  else if (<a href="../h_src/58060996.htm" class="function">l_strton</a>(<a href="../h_src/58060588.htm" class="localvar">obj</a>, &amp;<a href="../h_src/58060316.htm" class="localvar">v</a>)) {  <a  class="comments">/* string coercible to number? */</a>
<a id=110></a>    *<a href="../h_src/58060452.htm" class="localvar">n</a> = <a href="../h_src/57526408.htm" class="macro">nvalue</a>(&amp;<a href="../h_src/58060316.htm" class="localvar">v</a>);  <a  class="comments">/* convert result of 'luaO_str2num' to a float */</a>
    return 1;
  }
  else
<a id=114></a>    return 0;  <a  class="comments">/* conversion failed */</a>
}


<a id=118></a><a  class="comments">/*</a>
<a id=119></a><a  class="comments">** try to convert a float to an integer, rounding according to 'mode'.</a>
<a id=120></a><a  class="comments">*/</a>
<a id=121></a>int <a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a> (<a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58060180.htm" class="localvar">n</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> *<a href="../h_src/58060044.htm" class="localvar">p</a>, <a href="../h_src/57613180.htm" class="type">F2Imod</a> <a href="../h_src/58059908.htm" class="localvar">mode</a>) {
<a id=122></a>  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58059772.htm" class="localvar">f</a> = <a href="../h_src/57452412.htm" class="macro">l_floor</a>(<a href="../h_src/58060180.htm" class="localvar">n</a>);
<a id=123></a>  if (<a href="../h_src/58060180.htm" class="localvar">n</a> != <a href="../h_src/58059772.htm" class="localvar">f</a>) {  <a  class="comments">/* not an integral value? */</a>
<a id=124></a>    if (<a href="../h_src/58059908.htm" class="localvar">mode</a> == <a href="../h_src/57613520.htm" class="variable">F2Ieq</a>) return 0;  <a  class="comments">/* fails if mode demands integral value */</a>
<a id=125></a>    else if (<a href="../h_src/58059908.htm" class="localvar">mode</a> == <a href="../h_src/57613384.htm" class="variable">F2Iceil</a>)  <a  class="comments">/* needs ceil? */</a>
<a id=126></a>      <a href="../h_src/58059772.htm" class="localvar">f</a> += 1;  <a  class="comments">/* convert floor to ceil (remember: n != f) */</a>
  }
<a id=128></a>  return <a href="../h_src/57452140.htm" class="macro">lua_numbertointeger</a>(<a href="../h_src/58059772.htm" class="localvar">f</a>, <a href="../h_src/58060044.htm" class="localvar">p</a>);
}


<a id=132></a><a  class="comments">/*</a>
<a id=133></a><a  class="comments">** try to convert a value to an integer, rounding according to 'mode',</a>
<a id=134></a><a  class="comments">** without string coercion.</a>
<a id=135></a><a  class="comments">** (&quot;Fast track&quot; handled by macro 'tointegerns'.)</a>
<a id=136></a><a  class="comments">*/</a>
<a id=137></a>int <a href="../h_src/57611276.htm" class="function">luaV_tointegerns</a> (const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58059636.htm" class="localvar">obj</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> *<a href="../h_src/58059500.htm" class="localvar">p</a>, <a href="../h_src/57613180.htm" class="type">F2Imod</a> <a href="../h_src/58059364.htm" class="localvar">mode</a>) {
<a id=138></a>  if (<a href="../h_src/57526680.htm" class="macro">ttisfloat</a>(<a href="../h_src/58059636.htm" class="localvar">obj</a>))
<a id=139></a>    return <a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58059636.htm" class="localvar">obj</a>), <a href="../h_src/58059500.htm" class="localvar">p</a>, <a href="../h_src/58059364.htm" class="localvar">mode</a>);
<a id=140></a>  else if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58059636.htm" class="localvar">obj</a>)) {
<a id=141></a>    *<a href="../h_src/58059500.htm" class="localvar">p</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58059636.htm" class="localvar">obj</a>);
    return 1;
  }
  else
    return 0;
}


<a id=149></a><a  class="comments">/*</a>
<a id=150></a><a  class="comments">** try to convert a value to an integer.</a>
<a id=151></a><a  class="comments">*/</a>
<a id=152></a>int <a href="../h_src/57611412.htm" class="function">luaV_tointeger</a> (const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58059228.htm" class="localvar">obj</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> *<a href="../h_src/58059092.htm" class="localvar">p</a>, <a href="../h_src/57613180.htm" class="type">F2Imod</a> <a href="../h_src/58058956.htm" class="localvar">mode</a>) {
<a id=153></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/58058820.htm" class="localvar">v</a>;
<a id=154></a>  if (<a href="../h_src/58060996.htm" class="function">l_strton</a>(<a href="../h_src/58059228.htm" class="localvar">obj</a>, &amp;<a href="../h_src/58058820.htm" class="localvar">v</a>))  <a  class="comments">/* does 'obj' point to a numerical string? */</a>
<a id=155></a>    <a href="../h_src/58059228.htm" class="localvar">obj</a> = &amp;<a href="../h_src/58058820.htm" class="localvar">v</a>;  <a  class="comments">/* change it to point to its corresponding number */</a>
<a id=156></a>  return <a href="../h_src/57611276.htm" class="function">luaV_tointegerns</a>(<a href="../h_src/58059228.htm" class="localvar">obj</a>, <a href="../h_src/58059092.htm" class="localvar">p</a>, <a href="../h_src/58058956.htm" class="localvar">mode</a>);
}


<a id=160></a><a  class="comments">/*</a>
<a id=161></a><a  class="comments">** Try to convert a 'for' limit to an integer, preserving the semantics</a>
<a id=162></a><a  class="comments">** of the loop. Return true if the loop must not run; otherwise, '*p'</a>
<a id=163></a><a  class="comments">** gets the integer limit.</a>
<a id=164></a><a  class="comments">** (The following explanation assumes a positive step; it is valid for</a>
<a id=165></a><a  class="comments">** negative steps mutatis mutandis.)</a>
<a id=166></a><a  class="comments">** If the limit is an integer or can be converted to an integer,</a>
<a id=167></a><a  class="comments">** rounding down, that is the limit.</a>
<a id=168></a><a  class="comments">** Otherwise, check whether the limit can be converted to a float. If</a>
<a id=169></a><a  class="comments">** the float is too large, clip it to LUA_MAXINTEGER.  If the float</a>
<a id=170></a><a  class="comments">** is too negative, the loop should not run, because any initial</a>
<a id=171></a><a  class="comments">** integer value is greater than such limit; so, the function returns</a>
<a id=172></a><a  class="comments">** true to signal that. (For this latter case, no integer limit would be</a>
<a id=173></a><a  class="comments">** correct; even a limit of LUA_MININTEGER would run the loop once for</a>
<a id=174></a><a  class="comments">** an initial value equal to LUA_MININTEGER.)</a>
<a id=175></a><a  class="comments">*/</a>
<a id=176></a>static int <a href="../h_src/58058684.htm" class="function">forlimit</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58058548.htm" class="localvar">L</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58058412.htm" class="localvar">init</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58058276.htm" class="localvar">lim</a>,
<a id=177></a>                                   <a href="../h_src/57442076.htm" class="type">lua_Integer</a> *<a href="../h_src/58058140.htm" class="localvar">p</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58058004.htm" class="localvar">step</a>) {
<a id=178></a>  if (!<a href="../h_src/57611412.htm" class="function">luaV_tointeger</a>(<a href="../h_src/58058276.htm" class="localvar">lim</a>, <a href="../h_src/58058140.htm" class="localvar">p</a>, (<a href="../h_src/58058004.htm" class="localvar">step</a> &lt; 0 ? <a href="../h_src/57613384.htm" class="variable">F2Iceil</a> : <a href="../h_src/57613452.htm" class="variable">F2Ifloor</a>))) {
<a id=179></a>    <a  class="comments">/* not coercible to in integer */</a>
<a id=180></a>    <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58057868.htm" class="localvar">flim</a>;  <a  class="comments">/* try to convert to float */</a>
<a id=181></a>    if (!<a href="../h_src/57613112.htm" class="macro">tonumber</a>(<a href="../h_src/58058276.htm" class="localvar">lim</a>, &amp;<a href="../h_src/58057868.htm" class="localvar">flim</a>)) <a  class="comments">/* cannot convert to float? */</a>
<a id=182></a>      <a href="../h_src/57635620.htm" class="function">luaG_forerror</a>(<a href="../h_src/58058548.htm" class="localvar">L</a>, <a href="../h_src/58058276.htm" class="localvar">lim</a>, &quot;limit&quot;);
<a id=183></a>    <a  class="comments">/* else 'flim' is a float out of integer bounds */</a>
<a id=184></a>    if (<a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(0, <a href="../h_src/58057868.htm" class="localvar">flim</a>)) {  <a  class="comments">/* if it is positive, it is too large */</a>
<a id=185></a>      if (<a href="../h_src/58058004.htm" class="localvar">step</a> &lt; 0) return 1;  <a  class="comments">/* initial value must be less than it */</a>
<a id=186></a>      *<a href="../h_src/58058140.htm" class="localvar">p</a> = <a href="../h_src/57450100.htm" class="macro">LUA_MAXINTEGER</a>;  <a  class="comments">/* truncate */</a>
    }
<a id=188></a>    else {  <a  class="comments">/* it is less than min integer */</a>
<a id=189></a>      if (<a href="../h_src/58058004.htm" class="localvar">step</a> &gt; 0) return 1;  <a  class="comments">/* initial value must be greater than it */</a>
<a id=190></a>      *<a href="../h_src/58058140.htm" class="localvar">p</a> = <a href="../h_src/57449964.htm" class="macro">LUA_MININTEGER</a>;  <a  class="comments">/* truncate */</a>
    }
  }
<a id=193></a>  return (<a href="../h_src/58058004.htm" class="localvar">step</a> &gt; 0 ? <a href="../h_src/58058412.htm" class="localvar">init</a> &gt; *<a href="../h_src/58058140.htm" class="localvar">p</a> : <a href="../h_src/58058412.htm" class="localvar">init</a> &lt; *<a href="../h_src/58058140.htm" class="localvar">p</a>);  <a  class="comments">/* not to run? */</a>
}


<a id=197></a><a  class="comments">/*</a>
<a id=198></a><a  class="comments">** Prepare a numerical for loop (opcode OP_FORPREP).</a>
<a id=199></a><a  class="comments">** Return true to skip the loop. Otherwise,</a>
<a id=200></a><a  class="comments">** after preparation, stack will be as follows:</a>
<a id=201></a><a  class="comments">**   ra : internal index (safe copy of the control variable)</a>
<a id=202></a><a  class="comments">**   ra + 1 : loop counter (integer loops) or limit (float loops)</a>
<a id=203></a><a  class="comments">**   ra + 2 : step</a>
<a id=204></a><a  class="comments">**   ra + 3 : control variable</a>
<a id=205></a><a  class="comments">*/</a>
<a id=206></a>static int <a href="../h_src/58057732.htm" class="function">forprep</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58057596.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58057460.htm" class="localvar">ra</a>) {
<a id=207></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58217300.htm" class="localvar">pinit</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58057460.htm" class="localvar">ra</a>);
<a id=208></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58217164.htm" class="localvar">plimit</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58057460.htm" class="localvar">ra</a> + 1);
<a id=209></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58217028.htm" class="localvar">pstep</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58057460.htm" class="localvar">ra</a> + 2);
<a id=210></a>  if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58217300.htm" class="localvar">pinit</a>) &amp;&amp; <a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58217028.htm" class="localvar">pstep</a>)) { <a  class="comments">/* integer loop? */</a>
<a id=211></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58216892.htm" class="localvar">init</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58217300.htm" class="localvar">pinit</a>);
<a id=212></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58216756.htm" class="localvar">step</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58217028.htm" class="localvar">pstep</a>);
<a id=213></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58216620.htm" class="localvar">limit</a>;
<a id=214></a>    if (<a href="../h_src/58216756.htm" class="localvar">step</a> == 0)
<a id=215></a>      <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/58057596.htm" class="localvar">L</a>, &quot;'for' step is zero&quot;);
<a id=216></a>    <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58057460.htm" class="localvar">ra</a> + 3), <a href="../h_src/58216892.htm" class="localvar">init</a>);  <a  class="comments">/* control variable */</a>
<a id=217></a>    if (<a href="../h_src/58058684.htm" class="function">forlimit</a>(<a href="../h_src/58057596.htm" class="localvar">L</a>, <a href="../h_src/58216892.htm" class="localvar">init</a>, <a href="../h_src/58217164.htm" class="localvar">plimit</a>, &amp;<a href="../h_src/58216620.htm" class="localvar">limit</a>, <a href="../h_src/58216756.htm" class="localvar">step</a>))
<a id=218></a>      return 1;  <a  class="comments">/* skip the loop */</a>
<a id=219></a>    else {  <a  class="comments">/* prepare loop counter */</a>
<a id=220></a>      <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/58216348.htm" class="localvar">count</a>;
<a id=221></a>      if (<a href="../h_src/58216756.htm" class="localvar">step</a> &gt; 0) {  <a  class="comments">/* ascending loop? */</a>
<a id=222></a>        <a href="../h_src/58216348.htm" class="localvar">count</a> = <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/58216620.htm" class="localvar">limit</a>) - <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/58216892.htm" class="localvar">init</a>);
<a id=223></a>        if (<a href="../h_src/58216756.htm" class="localvar">step</a> != 1)  <a  class="comments">/* avoid division in the too common case */</a>
<a id=224></a>          <a href="../h_src/58216348.htm" class="localvar">count</a> /= <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/58216756.htm" class="localvar">step</a>);
      }
<a id=226></a>      else {  <a  class="comments">/* step &lt; 0; descending loop */</a>
<a id=227></a>        <a href="../h_src/58216348.htm" class="localvar">count</a> = <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/58216892.htm" class="localvar">init</a>) - <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/58216620.htm" class="localvar">limit</a>);
<a id=228></a>        <a  class="comments">/* 'step+1' avoids negating 'mininteger' */</a>
<a id=229></a>        <a href="../h_src/58216348.htm" class="localvar">count</a> /= <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(-(<a href="../h_src/58216756.htm" class="localvar">step</a> + 1)) + 1u;
      }
<a id=231></a>      <a  class="comments">/* store the counter in place of the limit (which won't be</a>
<a id=232></a><a  class="comments">         needed anymore) */</a>
<a id=233></a>      <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/58217164.htm" class="localvar">plimit</a>, <a href="../h_src/57545856.htm" class="macro">l_castU2S</a>(<a href="../h_src/58216348.htm" class="localvar">count</a>));
    }
  }
<a id=236></a>  else {  <a  class="comments">/* try making all values floats */</a>
<a id=237></a>    <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58216076.htm" class="localvar">init</a>; <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58215940.htm" class="localvar">limit</a>; <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58215804.htm" class="localvar">step</a>;
<a id=238></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(!<a href="../h_src/57613112.htm" class="macro">tonumber</a>(<a href="../h_src/58217164.htm" class="localvar">plimit</a>, &amp;<a href="../h_src/58215940.htm" class="localvar">limit</a>)))
<a id=239></a>      <a href="../h_src/57635620.htm" class="function">luaG_forerror</a>(<a href="../h_src/58057596.htm" class="localvar">L</a>, <a href="../h_src/58217164.htm" class="localvar">plimit</a>, &quot;limit&quot;);
<a id=240></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(!<a href="../h_src/57613112.htm" class="macro">tonumber</a>(<a href="../h_src/58217028.htm" class="localvar">pstep</a>, &amp;<a href="../h_src/58215804.htm" class="localvar">step</a>)))
<a id=241></a>      <a href="../h_src/57635620.htm" class="function">luaG_forerror</a>(<a href="../h_src/58057596.htm" class="localvar">L</a>, <a href="../h_src/58217028.htm" class="localvar">pstep</a>, &quot;step&quot;);
<a id=242></a>    if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(!<a href="../h_src/57613112.htm" class="macro">tonumber</a>(<a href="../h_src/58217300.htm" class="localvar">pinit</a>, &amp;<a href="../h_src/58216076.htm" class="localvar">init</a>)))
<a id=243></a>      <a href="../h_src/57635620.htm" class="function">luaG_forerror</a>(<a href="../h_src/58057596.htm" class="localvar">L</a>, <a href="../h_src/58217300.htm" class="localvar">pinit</a>, &quot;initial value&quot;);
<a id=244></a>    if (<a href="../h_src/58215804.htm" class="localvar">step</a> == 0)
<a id=245></a>      <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/58057596.htm" class="localvar">L</a>, &quot;'for' step is zero&quot;);
<a id=246></a>    if (<a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(0, <a href="../h_src/58215804.htm" class="localvar">step</a>) ? <a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(<a href="../h_src/58215940.htm" class="localvar">limit</a>, <a href="../h_src/58216076.htm" class="localvar">init</a>)
<a id=247></a>                            : <a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(<a href="../h_src/58216076.htm" class="localvar">init</a>, <a href="../h_src/58215940.htm" class="localvar">limit</a>))
<a id=248></a>      return 1;  <a  class="comments">/* skip the loop */</a>
    else {
<a id=250></a>      <a  class="comments">/* make sure internal values are all floats */</a>
<a id=251></a>      <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/58217164.htm" class="localvar">plimit</a>, <a href="../h_src/58215940.htm" class="localvar">limit</a>);
<a id=252></a>      <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/58217028.htm" class="localvar">pstep</a>, <a href="../h_src/58215804.htm" class="localvar">step</a>);
<a id=253></a>      <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58057460.htm" class="localvar">ra</a>), <a href="../h_src/58216076.htm" class="localvar">init</a>);  <a  class="comments">/* internal index */</a><a href="../h_src/57535996.htm" class="variable">n</a>al index */
<a id=254></a>      <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58057460.htm" class="localvar">ra</a> + 3), <a href="../h_src/58216076.htm" class="localvar">init</a>);  <a  class="comments">/* control variable */</a>
    }
  }
  return 0;
}


<a id=261></a><a  class="comments">/*</a>
<a id=262></a><a  class="comments">** Execute a step of a float numerical for loop, returning</a>
<a id=263></a><a  class="comments">** true iff the loop must continue. (The integer case is</a>
<a id=264></a><a  class="comments">** written online with opcode OP_FORLOOP, for performance.)</a>
<a id=265></a><a  class="comments">*/</a>
<a id=266></a>static int <a href="../h_src/58215124.htm" class="function">floatforloop</a> (<a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58214988.htm" class="localvar">ra</a>) {
<a id=267></a>  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58214852.htm" class="localvar">step</a> = <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58214988.htm" class="localvar">ra</a> + 2));
<a id=268></a>  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58214716.htm" class="localvar">limit</a> = <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58214988.htm" class="localvar">ra</a> + 1));
<a id=269></a>  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58214580.htm" class="localvar">idx</a> = <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58214988.htm" class="localvar">ra</a>));  <a  class="comments">/* internal index */</a><a href="../h_src/57535996.htm" class="variable">n</a>dex */
<a id=270></a>  <a href="../h_src/58214580.htm" class="localvar">idx</a> = <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>(L, <a href="../h_src/58214580.htm" class="localvar">idx</a>, <a href="../h_src/58214852.htm" class="localvar">step</a>);  <a  class="comments">/* increment index */</a>
<a id=271></a>  if (<a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(0, <a href="../h_src/58214852.htm" class="localvar">step</a>) ? <a href="../h_src/57539192.htm" class="macro">luai_numle</a>(<a href="../h_src/58214580.htm" class="localvar">idx</a>, <a href="../h_src/58214716.htm" class="localvar">limit</a>)
<a id=272></a>                          : <a href="../h_src/57539192.htm" class="macro">luai_numle</a>(<a href="../h_src/58214716.htm" class="localvar">limit</a>, <a href="../h_src/58214580.htm" class="localvar">idx</a>)) {
<a id=273></a>    <a href="../h_src/57525592.htm" class="macro">chgfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58214988.htm" class="localvar">ra</a>), <a href="../h_src/58214580.htm" class="localvar">idx</a>);  <a  class="comments">/* update internal index */</a>
<a id=274></a>    <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58214988.htm" class="localvar">ra</a> + 3), <a href="../h_src/58214580.htm" class="localvar">idx</a>);  <a  class="comments">/* and control variable */</a><a href="../h_src/57535996.htm" class="variable">n</a>trol variable */
<a id=275></a>    return 1;  <a  class="comments">/* jump back */</a>
  }
  else
<a id=278></a>    return 0;  <a  class="comments">/* finish the loop */</a>
}


<a id=282></a><a  class="comments">/*</a>
<a id=283></a><a  class="comments">** Finish the table access 'val = t[key]'.</a>
<a id=284></a><a  class="comments">** if 'slot' is NULL, 't' is not a table; otherwise, 'slot' points to</a>
<a id=285></a><a  class="comments">** t[k] entry (which must be empty).</a>
<a id=286></a><a  class="comments">*/</a>
<a id=287></a>void <a href="../h_src/57611140.htm" class="function">luaV_finishget</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58214172.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58214036.htm" class="localvar">t</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58213900.htm" class="localvar">key</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58213764.htm" class="localvar">val</a>,
<a id=288></a>                      const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58213628.htm" class="localvar">slot</a>) {
<a id=289></a>  int <a href="../h_src/58213492.htm" class="localvar">loop</a>;  <a  class="comments">/* counter to avoid infinite loops */</a>
<a id=290></a>  const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58213356.htm" class="localvar">tm</a>;  <a  class="comments">/* metamethod */</a>
<a id=291></a>  for (<a href="../h_src/58213492.htm" class="localvar">loop</a> = 0; <a href="../h_src/58213492.htm" class="localvar">loop</a> &lt; <a href="../h_src/58061404.htm" class="macro">MAXTAGLOOP</a>; <a href="../h_src/58213492.htm" class="localvar">loop</a>++) {
<a id=292></a>    if (<a href="../h_src/58213628.htm" class="localvar">slot</a> == NULL) {  <a  class="comments">/* 't' is not a table? */</a>
<a id=293></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57507300.htm" class="macro">ttistable</a>(t));
<a id=294></a>      <a href="../h_src/58213356.htm" class="localvar">tm</a> = <a href="../h_src/57498052.htm" class="function">luaT_gettmbyobj</a>(<a href="../h_src/58214172.htm" class="localvar">L</a>, <a href="../h_src/58214036.htm" class="localvar">t</a>, <a href="../h_src/57500908.htm" class="variable">TM_INDEX</a>);
<a id=295></a>      if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57498800.htm" class="macro">notm</a>(<a href="../h_src/58213356.htm" class="localvar">tm</a>)))
<a id=296></a>        <a href="../h_src/57635756.htm" class="function">luaG_typeerror</a>(<a href="../h_src/58214172.htm" class="localvar">L</a>, <a href="../h_src/58214036.htm" class="localvar">t</a>, &quot;index&quot;);  <a  class="comments">/* no metamethod */</a>
<a id=297></a>      <a  class="comments">/* else will try the metamethod */</a>
    }
<a id=299></a>    else {  <a  class="comments">/* 't' is a table */</a>
<a id=300></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57530488.htm" class="macro">isempty</a>(slot));
<a id=301></a>      <a href="../h_src/58213356.htm" class="localvar">tm</a> = <a href="../h_src/57498528.htm" class="macro">fasttm</a>(<a href="../h_src/58214172.htm" class="localvar">L</a>, <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/58214036.htm" class="localvar">t</a>)-&gt;<a href="../h_src/57504444.htm" class="variable">metatable</a>, <a href="../h_src/57500908.htm" class="variable">TM_INDEX</a>);  <a  class="comments">/* table's metamethod */</a>
<a id=302></a>      if (<a href="../h_src/58213356.htm" class="localvar">tm</a> == NULL) {  <a  class="comments">/* no metamethod? */</a>
<a id=303></a>        <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57532732.htm" class="variable">val</a>));  <a  class="comments">/* result is nil */</a>
        return;
      }
<a id=306></a>      <a  class="comments">/* else will try the metamethod */</a>
    }
<a id=308></a>    if (<a href="../h_src/57513216.htm" class="macro">ttisfunction</a>(<a href="../h_src/58213356.htm" class="localvar">tm</a>)) {  <a  class="comments">/* is metamethod a function? */</a>
<a id=309></a>      <a href="../h_src/57497848.htm" class="function">luaT_callTMres</a>(<a href="../h_src/58214172.htm" class="localvar">L</a>, <a href="../h_src/58213356.htm" class="localvar">tm</a>, <a href="../h_src/58214036.htm" class="localvar">t</a>, <a href="../h_src/58213900.htm" class="localvar">key</a>, <a href="../h_src/58213764.htm" class="localvar">val</a>);  <a  class="comments">/* call it */</a>
      return;
    }
<a id=312></a>    <a href="../h_src/58214036.htm" class="localvar">t</a> = <a href="../h_src/58213356.htm" class="localvar">tm</a>;  <a  class="comments">/* else try to access 'tm[key]' */</a>
<a id=313></a>    if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58214036.htm" class="localvar">t</a>, <a href="../h_src/58213900.htm" class="localvar">key</a>, <a href="../h_src/58213628.htm" class="localvar">slot</a>, <a href="../h_src/57616784.htm" class="function">luaH_get</a>)) {  <a  class="comments">/* fast track? */</a>
<a id=314></a>      <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58214172.htm" class="localvar">L</a>, <a href="../h_src/57532732.htm" class="variable">val</a>, <a href="../h_src/58213628.htm" class="localvar">slot</a>);  <a  class="comments">/* done */</a>
      return;
    }
<a id=317></a>    <a  class="comments">/* else repeat (tail call 'luaV_finishget') */</a>
  }
<a id=319></a>  <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/58214172.htm" class="localvar">L</a>, &quot;'__index' chain too long; possible loop&quot;);
}


<a id=323></a><a  class="comments">/*</a>
<a id=324></a><a  class="comments">** Finish a table assignment 't[key] = val'.</a>
<a id=325></a><a  class="comments">** If 'slot' is NULL, 't' is not a table.  Otherwise, 'slot' points</a>
<a id=326></a><a  class="comments">** to the entry 't[key]', or to a value with an absent key if there</a>
<a id=327></a><a  class="comments">** is no such entry.  (The value at 'slot' must be empty, otherwise</a>
<a id=328></a><a  class="comments">** 'luaV_fastget' would have done the job.)</a>
<a id=329></a><a  class="comments">*/</a>
<a id=330></a>void <a href="../h_src/57611072.htm" class="function">luaV_finishset</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58212948.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58212812.htm" class="localvar">t</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58212676.htm" class="localvar">key</a>,
<a id=331></a>                     <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58212540.htm" class="localvar">val</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58212404.htm" class="localvar">slot</a>) {
<a id=332></a>  int <a href="../h_src/58212268.htm" class="localvar">loop</a>;  <a  class="comments">/* counter to avoid infinite loops */</a>
<a id=333></a>  for (<a href="../h_src/58212268.htm" class="localvar">loop</a> = 0; <a href="../h_src/58212268.htm" class="localvar">loop</a> &lt; <a href="../h_src/58061404.htm" class="macro">MAXTAGLOOP</a>; <a href="../h_src/58212268.htm" class="localvar">loop</a>++) {
<a id=334></a>    const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58212132.htm" class="localvar">tm</a>;  <a  class="comments">/* '__newindex' metamethod */</a>
<a id=335></a>    if (<a href="../h_src/58212404.htm" class="localvar">slot</a> != NULL) {  <a  class="comments">/* is 't' a table? */</a>
<a id=336></a>      <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/58211996.htm" class="localvar">h</a> = <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/58212812.htm" class="localvar">t</a>);  <a  class="comments">/* save 't' table */</a>
<a id=337></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57530488.htm" class="macro">isempty</a>(slot));  <a  class="comments">/* slot must be empty */</a>
<a id=338></a>      <a href="../h_src/58212132.htm" class="localvar">tm</a> = <a href="../h_src/57498528.htm" class="macro">fasttm</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, <a href="../h_src/58211996.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504444.htm" class="variable">metatable</a>, <a href="../h_src/57500840.htm" class="variable">TM_NEWINDEX</a>);  <a  class="comments">/* get metamethod */</a>
<a id=339></a>      if (<a href="../h_src/58212132.htm" class="localvar">tm</a> == NULL) {  <a  class="comments">/* no metamethod? */</a>
<a id=340></a>        <a href="../h_src/57616580.htm" class="function">luaH_finishset</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, <a href="../h_src/58211996.htm" class="localvar">h</a>, <a href="../h_src/58212676.htm" class="localvar">key</a>, <a href="../h_src/58212404.htm" class="localvar">slot</a>, <a href="../h_src/58212540.htm" class="localvar">val</a>);  <a  class="comments">/* set new value */</a>
<a id=341></a>        <a href="../h_src/57617600.htm" class="macro">invalidateTMcache</a>(<a href="../h_src/58211996.htm" class="localvar">h</a>);
<a id=342></a>        <a href="../h_src/57621068.htm" class="macro">luaC_barrierback</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/58211996.htm" class="localvar">h</a>), <a href="../h_src/58212540.htm" class="localvar">val</a>);
        return;
      }
<a id=345></a>      <a  class="comments">/* else will try the metamethod */</a>
    }
<a id=347></a>    else {  <a  class="comments">/* not a table; check metamethod */</a>
<a id=348></a>      <a href="../h_src/58212132.htm" class="localvar">tm</a> = <a href="../h_src/57498052.htm" class="function">luaT_gettmbyobj</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, <a href="../h_src/58212812.htm" class="localvar">t</a>, <a href="../h_src/57500840.htm" class="variable">TM_NEWINDEX</a>);
<a id=349></a>      if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57498800.htm" class="macro">notm</a>(<a href="../h_src/58212132.htm" class="localvar">tm</a>)))
<a id=350></a>        <a href="../h_src/57635756.htm" class="function">luaG_typeerror</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, <a href="../h_src/58212812.htm" class="localvar">t</a>, &quot;index&quot;);
    }
<a id=352></a>    <a  class="comments">/* try the metamethod */</a>
<a id=353></a>    if (<a href="../h_src/57513216.htm" class="macro">ttisfunction</a>(<a href="../h_src/58212132.htm" class="localvar">tm</a>)) {
<a id=354></a>      <a href="../h_src/57497916.htm" class="function">luaT_callTM</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, <a href="../h_src/58212132.htm" class="localvar">tm</a>, <a href="../h_src/58212812.htm" class="localvar">t</a>, <a href="../h_src/58212676.htm" class="localvar">key</a>, <a href="../h_src/58212540.htm" class="localvar">val</a>);
      return;
    }
<a id=357></a>    <a href="../h_src/58212812.htm" class="localvar">t</a> = <a href="../h_src/58212132.htm" class="localvar">tm</a>;  <a  class="comments">/* else repeat assignment over 'tm' */</a>
<a id=358></a>    if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58212812.htm" class="localvar">t</a>, <a href="../h_src/58212676.htm" class="localvar">key</a>, <a href="../h_src/58212404.htm" class="localvar">slot</a>, <a href="../h_src/57616784.htm" class="function">luaH_get</a>)) {
<a id=359></a>      <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, <a href="../h_src/58212812.htm" class="localvar">t</a>, <a href="../h_src/58212404.htm" class="localvar">slot</a>, <a href="../h_src/58212540.htm" class="localvar">val</a>);
<a id=360></a>      return;  <a  class="comments">/* done */</a>
    }
<a id=362></a>    <a  class="comments">/* else 'return luaV_finishset(L, t, key, val, slot)' (loop) */</a>
  }
<a id=364></a>  <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/58212948.htm" class="localvar">L</a>, &quot;'__newindex' chain too long; possible loop&quot;);
}


<a id=368></a><a  class="comments">/*</a>
<a id=369></a><a  class="comments">** Compare two strings 'ls' x 'rs', returning an integer less-equal-</a>
<a id=370></a><a  class="comments">** -greater than zero if 'ls' is less-equal-greater than 'rs'.</a>
<a id=371></a><a  class="comments">** The code is a little tricky because it allows '\0' in the strings</a>
<a id=372></a><a  class="comments">** and it uses 'strcoll' (to respect locales) for each segments</a>
<a id=373></a><a  class="comments">** of the strings.</a>
<a id=374></a><a  class="comments">*/</a>
<a id=375></a>static int <a href="../h_src/58211588.htm" class="function">l_strcmp</a> (const <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58211452.htm" class="localvar">ls</a>, const <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58211316.htm" class="localvar">rs</a>) {
<a id=376></a>  const char *<a href="../h_src/58211180.htm" class="localvar">l</a> = <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58211452.htm" class="localvar">ls</a>);
<a id=377></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58211044.htm" class="localvar">ll</a> = <a href="../h_src/57522396.htm" class="macro">tsslen</a>(<a href="../h_src/58211452.htm" class="localvar">ls</a>);
<a id=378></a>  const char *<a href="../h_src/58210908.htm" class="localvar">r</a> = <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58211316.htm" class="localvar">rs</a>);
<a id=379></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58210772.htm" class="localvar">lr</a> = <a href="../h_src/57522396.htm" class="macro">tsslen</a>(<a href="../h_src/58211316.htm" class="localvar">rs</a>);
<a id=380></a>  for (;;) {  <a  class="comments">/* for each segment */</a>
<a id=381></a>    int <a href="../h_src/58210568.htm" class="localvar">temp</a> = <a href="../h_aa/58210636.htm" class="libfunc">strcoll</a>(<a href="../h_src/58211180.htm" class="localvar">l</a>, <a href="../h_src/58210908.htm" class="localvar">r</a>);
<a id=382></a>    if (<a href="../h_src/58210568.htm" class="localvar">temp</a> != 0)  <a  class="comments">/* not equal? */</a>
<a id=383></a>      return <a href="../h_src/58210568.htm" class="localvar">temp</a>;  <a  class="comments">/* done */</a>
<a id=384></a>    else {  <a  class="comments">/* strings are equal up to a '\0' */</a>
<a id=385></a>      <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58210432.htm" class="localvar">len</a> = <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/58211180.htm" class="localvar">l</a>);  <a  class="comments">/* index of first '\0' in both strings */</a>
<a id=386></a>      if (<a href="../h_src/58210432.htm" class="localvar">len</a> == <a href="../h_src/58210772.htm" class="localvar">lr</a>)  <a  class="comments">/* 'rs' is finished? */</a>
<a id=387></a>        return (<a href="../h_src/58210432.htm" class="localvar">len</a> == <a href="../h_src/58211044.htm" class="localvar">ll</a>) ? 0 : 1;  <a  class="comments">/* check 'ls' */</a>
<a id=388></a>      else if (<a href="../h_src/58210432.htm" class="localvar">len</a> == <a href="../h_src/58211044.htm" class="localvar">ll</a>)  <a  class="comments">/* 'ls' is finished? */</a>
<a id=389></a>        return -1;  <a  class="comments">/* 'ls' is less than 'rs' ('rs' is not finished) */</a>
<a id=390></a>      <a  class="comments">/* both strings longer than 'len'; go on comparing after the '\0' */</a>
<a id=391></a>      <a href="../h_src/58210432.htm" class="localvar">len</a>++;
<a id=392></a>      <a href="../h_src/58211180.htm" class="localvar">l</a> += <a href="../h_src/58210432.htm" class="localvar">len</a>; <a href="../h_src/58211044.htm" class="localvar">ll</a> -= <a href="../h_src/58210432.htm" class="localvar">len</a>; <a href="../h_src/58210908.htm" class="localvar">r</a> += <a href="../h_src/58210432.htm" class="localvar">len</a>; <a href="../h_src/58210772.htm" class="localvar">lr</a> -= <a href="../h_src/58210432.htm" class="localvar">len</a>;
    }
  }
}


<a id=398></a><a  class="comments">/*</a>
<a id=399></a><a  class="comments">** Check whether integer 'i' is less than float 'f'. If 'i' has an</a>
<a id=400></a><a  class="comments">** exact representation as a float ('l_intfitsf'), compare numbers as</a>
<a id=401></a><a  class="comments">** floats. Otherwise, use the equivalence 'i &lt; f &lt;=&gt; i &lt; ceil(f)'.</a>
<a id=402></a><a  class="comments">** If 'ceil(f)' is out of integer range, either 'f' is greater than</a>
<a id=403></a><a  class="comments">** all integers or less than all integers.</a>
<a id=404></a><a  class="comments">** (The test with 'l_intfitsf' is only for performance; the else</a>
<a id=405></a><a  class="comments">** case is correct for all values, but it is slow due to the conversion</a>
<a id=406></a><a  class="comments">** from float to int.)</a>
<a id=407></a><a  class="comments">** When 'f' is NaN, comparisons must result in false.</a>
<a id=408></a><a  class="comments">*/</a>
<a id=409></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> int <a href="../h_src/58210296.htm" class="function">LTintfloat</a> (<a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58210160.htm" class="localvar">i</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58210024.htm" class="localvar">f</a>) {
<a id=410></a>  if (<a href="../h_src/58061132.htm" class="macro">l_intfitsf</a>(i))
<a id=411></a>    return <a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(<a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58210160.htm" class="localvar">i</a>), <a href="../h_src/58210024.htm" class="localvar">f</a>);  <a  class="comments">/* compare them as floats */</a>
<a id=412></a>  else {  <a  class="comments">/* i &lt; f &lt;=&gt; i &lt; ceil(f) */</a>
<a id=413></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58209888.htm" class="localvar">fi</a>;
<a id=414></a>    if (<a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/58210024.htm" class="localvar">f</a>, &amp;<a href="../h_src/58209888.htm" class="localvar">fi</a>, <a href="../h_src/57613384.htm" class="variable">F2Iceil</a>))  <a  class="comments">/* fi = ceil(f) */</a>
<a id=415></a>      return <a href="../h_src/58210160.htm" class="localvar">i</a> &lt; <a href="../h_src/58209888.htm" class="localvar">fi</a>;   <a  class="comments">/* compare them as integers */</a>
<a id=416></a>    else  <a  class="comments">/* 'f' is either greater or less than all integers */</a>
<a id=417></a>      return <a href="../h_src/58210024.htm" class="localvar">f</a> &gt; 0;  <a  class="comments">/* greater? */</a>
  }
}


<a id=422></a><a  class="comments">/*</a>
<a id=423></a><a  class="comments">** Check whether integer 'i' is less than or equal to float 'f'.</a>
<a id=424></a><a  class="comments">** See comments on previous function.</a>
<a id=425></a><a  class="comments">*/</a>
<a id=426></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> int <a href="../h_src/58209752.htm" class="function">LEintfloat</a> (<a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58209616.htm" class="localvar">i</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58209480.htm" class="localvar">f</a>) {
<a id=427></a>  if (<a href="../h_src/58061132.htm" class="macro">l_intfitsf</a>(i))
<a id=428></a>    return <a href="../h_src/57539192.htm" class="macro">luai_numle</a>(<a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58209616.htm" class="localvar">i</a>), <a href="../h_src/58209480.htm" class="localvar">f</a>);  <a  class="comments">/* compare them as floats */</a>
<a id=429></a>  else {  <a  class="comments">/* i &lt;= f &lt;=&gt; i &lt;= floor(f) */</a>
<a id=430></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58209344.htm" class="localvar">fi</a>;
<a id=431></a>    if (<a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/58209480.htm" class="localvar">f</a>, &amp;<a href="../h_src/58209344.htm" class="localvar">fi</a>, <a href="../h_src/57613452.htm" class="variable">F2Ifloor</a>))  <a  class="comments">/* fi = floor(f) */</a>
<a id=432></a>      return <a href="../h_src/58209616.htm" class="localvar">i</a> &lt;= <a href="../h_src/58209344.htm" class="localvar">fi</a>;   <a  class="comments">/* compare them as integers */</a>
<a id=433></a>    else  <a  class="comments">/* 'f' is either greater or less than all integers */</a>
<a id=434></a>      return <a href="../h_src/58209480.htm" class="localvar">f</a> &gt; 0;  <a  class="comments">/* greater? */</a>
  }
}


<a id=439></a><a  class="comments">/*</a>
<a id=440></a><a  class="comments">** Check whether float 'f' is less than integer 'i'.</a>
<a id=441></a><a  class="comments">** See comments on previous function.</a>
<a id=442></a><a  class="comments">*/</a>
<a id=443></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> int <a href="../h_src/58209208.htm" class="function">LTfloatint</a> (<a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58209072.htm" class="localvar">f</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58208936.htm" class="localvar">i</a>) {
<a id=444></a>  if (<a href="../h_src/58061132.htm" class="macro">l_intfitsf</a>(i))
<a id=445></a>    return <a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(<a href="../h_src/58209072.htm" class="localvar">f</a>, <a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58208936.htm" class="localvar">i</a>));  <a  class="comments">/* compare them as floats */</a>
<a id=446></a>  else {  <a  class="comments">/* f &lt; i &lt;=&gt; floor(f) &lt; i */</a>
<a id=447></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58208800.htm" class="localvar">fi</a>;
<a id=448></a>    if (<a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/58209072.htm" class="localvar">f</a>, &amp;<a href="../h_src/58208800.htm" class="localvar">fi</a>, <a href="../h_src/57613452.htm" class="variable">F2Ifloor</a>))  <a  class="comments">/* fi = floor(f) */</a>
<a id=449></a>      return <a href="../h_src/58208800.htm" class="localvar">fi</a> &lt; <a href="../h_src/58208936.htm" class="localvar">i</a>;   <a  class="comments">/* compare them as integers */</a>
<a id=450></a>    else  <a  class="comments">/* 'f' is either greater or less than all integers */</a>
<a id=451></a>      return <a href="../h_src/58209072.htm" class="localvar">f</a> &lt; 0;  <a  class="comments">/* less? */</a>
  }
}


<a id=456></a><a  class="comments">/*</a>
<a id=457></a><a  class="comments">** Check whether float 'f' is less than or equal to integer 'i'.</a>
<a id=458></a><a  class="comments">** See comments on previous function.</a>
<a id=459></a><a  class="comments">*/</a>
<a id=460></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> int <a href="../h_src/58208664.htm" class="function">LEfloatint</a> (<a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58208528.htm" class="localvar">f</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58208392.htm" class="localvar">i</a>) {
<a id=461></a>  if (<a href="../h_src/58061132.htm" class="macro">l_intfitsf</a>(i))
<a id=462></a>    return <a href="../h_src/57539192.htm" class="macro">luai_numle</a>(<a href="../h_src/58208528.htm" class="localvar">f</a>, <a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58208392.htm" class="localvar">i</a>));  <a  class="comments">/* compare them as floats */</a>
<a id=463></a>  else {  <a  class="comments">/* f &lt;= i &lt;=&gt; ceil(f) &lt;= i */</a>
<a id=464></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58208256.htm" class="localvar">fi</a>;
<a id=465></a>    if (<a href="../h_src/57611208.htm" class="function">luaV_flttointeger</a>(<a href="../h_src/58208528.htm" class="localvar">f</a>, &amp;<a href="../h_src/58208256.htm" class="localvar">fi</a>, <a href="../h_src/57613384.htm" class="variable">F2Iceil</a>))  <a  class="comments">/* fi = ceil(f) */</a>
<a id=466></a>      return <a href="../h_src/58208256.htm" class="localvar">fi</a> &lt;= <a href="../h_src/58208392.htm" class="localvar">i</a>;   <a  class="comments">/* compare them as integers */</a>
<a id=467></a>    else  <a  class="comments">/* 'f' is either greater or less than all integers */</a>
<a id=468></a>      return <a href="../h_src/58208528.htm" class="localvar">f</a> &lt; 0;  <a  class="comments">/* less? */</a>
  }
}


<a id=473></a><a  class="comments">/*</a>
<a id=474></a><a  class="comments">** Return 'l &lt; r', for numbers.</a>
<a id=475></a><a  class="comments">*/</a>
<a id=476></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> int <a href="../h_src/58208120.htm" class="function">LTnum</a> (const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58207984.htm" class="localvar">l</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58207848.htm" class="localvar">r</a>) {
<a id=477></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(l) &amp;&amp; <a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(r));
<a id=478></a>  if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58207984.htm" class="localvar">l</a>)) {
<a id=479></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58207712.htm" class="localvar">li</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58207984.htm" class="localvar">l</a>);
<a id=480></a>    if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58207848.htm" class="localvar">r</a>))
<a id=481></a>      return <a href="../h_src/58207712.htm" class="localvar">li</a> &lt; <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58207848.htm" class="localvar">r</a>);  <a  class="comments">/* both are integers */</a>
<a id=482></a>    else  <a  class="comments">/* 'l' is int and 'r' is float */</a>
<a id=483></a>      return <a href="../h_src/58210296.htm" class="function">LTintfloat</a>(<a href="../h_src/58207712.htm" class="localvar">li</a>, <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58207848.htm" class="localvar">r</a>));  <a  class="comments">/* l &lt; r ? */</a>
  }
  else {
<a id=486></a>    <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58207576.htm" class="localvar">lf</a> = <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58207984.htm" class="localvar">l</a>);  <a  class="comments">/* 'l' must be float */</a>
<a id=487></a>    if (<a href="../h_src/57526680.htm" class="macro">ttisfloat</a>(<a href="../h_src/58207848.htm" class="localvar">r</a>))
<a id=488></a>      return <a href="../h_src/57539328.htm" class="macro">luai_numlt</a>(<a href="../h_src/58207576.htm" class="localvar">lf</a>, <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58207848.htm" class="localvar">r</a>));  <a  class="comments">/* both are float */</a>
<a id=489></a>    else  <a  class="comments">/* 'l' is float and 'r' is int */</a>
<a id=490></a>      return <a href="../h_src/58209208.htm" class="function">LTfloatint</a>(<a href="../h_src/58207576.htm" class="localvar">lf</a>, <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58207848.htm" class="localvar">r</a>));
  }
}


<a id=495></a><a  class="comments">/*</a>
<a id=496></a><a  class="comments">** Return 'l &lt;= r', for numbers.</a>
<a id=497></a><a  class="comments">*/</a>
<a id=498></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> int <a href="../h_src/58207440.htm" class="function">LEnum</a> (const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58207304.htm" class="localvar">l</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58207168.htm" class="localvar">r</a>) {
<a id=499></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(l) &amp;&amp; <a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(r));
<a id=500></a>  if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58207304.htm" class="localvar">l</a>)) {
<a id=501></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58207032.htm" class="localvar">li</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58207304.htm" class="localvar">l</a>);
<a id=502></a>    if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58207168.htm" class="localvar">r</a>))
<a id=503></a>      return <a href="../h_src/58207032.htm" class="localvar">li</a> &lt;= <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58207168.htm" class="localvar">r</a>);  <a  class="comments">/* both are integers */</a>
<a id=504></a>    else  <a  class="comments">/* 'l' is int and 'r' is float */</a>
<a id=505></a>      return <a href="../h_src/58209752.htm" class="function">LEintfloat</a>(<a href="../h_src/58207032.htm" class="localvar">li</a>, <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58207168.htm" class="localvar">r</a>));  <a  class="comments">/* l &lt;= r ? */</a>
  }
  else {
<a id=508></a>    <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58206896.htm" class="localvar">lf</a> = <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58207304.htm" class="localvar">l</a>);  <a  class="comments">/* 'l' must be float */</a>
<a id=509></a>    if (<a href="../h_src/57526680.htm" class="macro">ttisfloat</a>(<a href="../h_src/58207168.htm" class="localvar">r</a>))
<a id=510></a>      return <a href="../h_src/57539192.htm" class="macro">luai_numle</a>(<a href="../h_src/58206896.htm" class="localvar">lf</a>, <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58207168.htm" class="localvar">r</a>));  <a  class="comments">/* both are float */</a>
<a id=511></a>    else  <a  class="comments">/* 'l' is float and 'r' is int */</a>
<a id=512></a>      return <a href="../h_src/58208664.htm" class="function">LEfloatint</a>(<a href="../h_src/58206896.htm" class="localvar">lf</a>, <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58207168.htm" class="localvar">r</a>));
  }
}


<a id=517></a><a  class="comments">/*</a>
<a id=518></a><a  class="comments">** return 'l &lt; r' for non-numbers.</a>
<a id=519></a><a  class="comments">*/</a>
<a id=520></a>static int <a href="../h_src/58206760.htm" class="function">lessthanothers</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58206624.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58206488.htm" class="localvar">l</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58206352.htm" class="localvar">r</a>) {
<a id=521></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(l) || !<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(r));
<a id=522></a>  if (<a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/58206488.htm" class="localvar">l</a>) &amp;&amp; <a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/58206352.htm" class="localvar">r</a>))  <a  class="comments">/* both are strings? */</a>
<a id=523></a>    return <a href="../h_src/58211588.htm" class="function">l_strcmp</a>(<a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58206488.htm" class="localvar">l</a>), <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58206352.htm" class="localvar">r</a>)) &lt; 0;
  else
<a id=525></a>    return <a href="../h_src/57497508.htm" class="function">luaT_callorderTM</a>(<a href="../h_src/58206624.htm" class="localvar">L</a>, <a href="../h_src/58206488.htm" class="localvar">l</a>, <a href="../h_src/58206352.htm" class="localvar">r</a>, <a href="../h_src/57499548.htm" class="variable">TM_LT</a>);
}


<a id=529></a><a  class="comments">/*</a>
<a id=530></a><a  class="comments">** Main operation less than; return 'l &lt; r'.</a>
<a id=531></a><a  class="comments">*/</a>
<a id=532></a>int <a href="../h_src/57611684.htm" class="function">luaV_lessthan</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58206216.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58206080.htm" class="localvar">l</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58205944.htm" class="localvar">r</a>) {
<a id=533></a>  if (<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(<a href="../h_src/58206080.htm" class="localvar">l</a>) &amp;&amp; <a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(<a href="../h_src/58205944.htm" class="localvar">r</a>))  <a  class="comments">/* both operands are numbers? */</a>
<a id=534></a>    return <a href="../h_src/58208120.htm" class="function">LTnum</a>(<a href="../h_src/58206080.htm" class="localvar">l</a>, <a href="../h_src/58205944.htm" class="localvar">r</a>);
<a id=535></a>  else return <a href="../h_src/58206760.htm" class="function">lessthanothers</a>(<a href="../h_src/58206216.htm" class="localvar">L</a>, <a href="../h_src/58206080.htm" class="localvar">l</a>, <a href="../h_src/58205944.htm" class="localvar">r</a>);
}


<a id=539></a><a  class="comments">/*</a>
<a id=540></a><a  class="comments">** return 'l &lt;= r' for non-numbers.</a>
<a id=541></a><a  class="comments">*/</a>
<a id=542></a>static int <a href="../h_src/58205808.htm" class="function">lessequalothers</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58205672.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58205536.htm" class="localvar">l</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58205400.htm" class="localvar">r</a>) {
<a id=543></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(l) || !<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(r));
<a id=544></a>  if (<a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/58205536.htm" class="localvar">l</a>) &amp;&amp; <a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/58205400.htm" class="localvar">r</a>))  <a  class="comments">/* both are strings? */</a>
<a id=545></a>    return <a href="../h_src/58211588.htm" class="function">l_strcmp</a>(<a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58205536.htm" class="localvar">l</a>), <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58205400.htm" class="localvar">r</a>)) &lt;= 0;
  else
<a id=547></a>    return <a href="../h_src/57497508.htm" class="function">luaT_callorderTM</a>(<a href="../h_src/58205672.htm" class="localvar">L</a>, <a href="../h_src/58205536.htm" class="localvar">l</a>, <a href="../h_src/58205400.htm" class="localvar">r</a>, <a href="../h_src/57499480.htm" class="variable">TM_LE</a>);
}


<a id=551></a><a  class="comments">/*</a>
<a id=552></a><a  class="comments">** Main operation less than or equal to; return 'l &lt;= r'.</a>
<a id=553></a><a  class="comments">*/</a>
<a id=554></a>int <a href="../h_src/57611616.htm" class="function">luaV_lessequal</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58205264.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58205128.htm" class="localvar">l</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58204992.htm" class="localvar">r</a>) {
<a id=555></a>  if (<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(<a href="../h_src/58205128.htm" class="localvar">l</a>) &amp;&amp; <a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(<a href="../h_src/58204992.htm" class="localvar">r</a>))  <a  class="comments">/* both operands are numbers? */</a>
<a id=556></a>    return <a href="../h_src/58207440.htm" class="function">LEnum</a>(<a href="../h_src/58205128.htm" class="localvar">l</a>, <a href="../h_src/58204992.htm" class="localvar">r</a>);
<a id=557></a>  else return <a href="../h_src/58205808.htm" class="function">lessequalothers</a>(<a href="../h_src/58205264.htm" class="localvar">L</a>, <a href="../h_src/58205128.htm" class="localvar">l</a>, <a href="../h_src/58204992.htm" class="localvar">r</a>);
}


<a id=561></a><a  class="comments">/*</a>
<a id=562></a><a  class="comments">** Main operation for equality of Lua values; return 't1 == t2'.</a>
<a id=563></a><a  class="comments">** L == NULL means raw equality (no metamethods)</a>
<a id=564></a><a  class="comments">*/</a>
<a id=565></a>int <a href="../h_src/57611752.htm" class="function">luaV_equalobj</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58204856.htm" class="localvar">L</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58204720.htm" class="localvar">t1</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58204584.htm" class="localvar">t2</a>) {
<a id=566></a>  const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58204448.htm" class="localvar">tm</a>;
<a id=567></a>  if (<a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) != <a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>)) {  <a  class="comments">/* not the same variant? */</a>
<a id=568></a>    if (<a href="../h_src/57534500.htm" class="macro">ttype</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) != <a href="../h_src/57534500.htm" class="macro">ttype</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>) || <a href="../h_src/57534500.htm" class="macro">ttype</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) != <a href="../h_src/57443640.htm" class="macro">LUA_TNUMBER</a>)
<a id=569></a>      return 0;  <a  class="comments">/* only numbers can be equal with different variants */</a>
<a id=570></a>    else {  <a  class="comments">/* two numbers with different variants */</a>
<a id=571></a>      <a  class="comments">/* One of them is an integer. If the other does not have an</a>
<a id=572></a><a  class="comments">         integer value, they cannot be equal; otherwise, compare their</a>
<a id=573></a><a  class="comments">         integer values. */</a>
<a id=574></a>      <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58204312.htm" class="localvar">i1</a>, <a href="../h_src/58204176.htm" class="localvar">i2</a>;
<a id=575></a>      return (<a href="../h_src/57611276.htm" class="function">luaV_tointegerns</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>, &amp;<a href="../h_src/58204312.htm" class="localvar">i1</a>, <a href="../h_src/57613520.htm" class="variable">F2Ieq</a>) &amp;&amp;
<a id=576></a>              <a href="../h_src/57611276.htm" class="function">luaV_tointegerns</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>, &amp;<a href="../h_src/58204176.htm" class="localvar">i2</a>, <a href="../h_src/57613520.htm" class="variable">F2Ieq</a>) &amp;&amp;
<a id=577></a>              <a href="../h_src/58204312.htm" class="localvar">i1</a> == <a href="../h_src/58204176.htm" class="localvar">i2</a>);
    }
  }
<a id=580></a>  <a  class="comments">/* values have same type and same variant */</a>
<a id=581></a>  switch (<a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>)) {
<a id=582></a>    case <a href="../h_src/57531576.htm" class="macro">LUA_VNIL</a>: case <a href="../h_src/57530080.htm" class="macro">LUA_VFALSE</a>: case <a href="../h_src/57529944.htm" class="macro">LUA_VTRUE</a>: return 1;
<a id=583></a>    case <a href="../h_src/57527088.htm" class="macro">LUA_VNUMINT</a>: return (<a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) == <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>));
<a id=584></a>    case <a href="../h_src/57526952.htm" class="macro">LUA_VNUMFLT</a>: return <a href="../h_src/57539464.htm" class="macro">luai_numeq</a>(<a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>), <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>));
<a id=585></a>    case <a href="../h_src/57522124.htm" class="macro">LUA_VLIGHTUSERDATA</a>: return <a href="../h_src/57521580.htm" class="macro">pvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) == <a href="../h_src/57521580.htm" class="macro">pvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>);
<a id=586></a>    case <a href="../h_src/57513488.htm" class="macro">LUA_VLCF</a>: return <a href="../h_src/57512128.htm" class="macro">fvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) == <a href="../h_src/57512128.htm" class="macro">fvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>);
<a id=587></a>    case <a href="../h_src/57525184.htm" class="macro">LUA_VSHRSTR</a>: return <a href="../h_src/57619300.htm" class="macro">eqshrstr</a>(<a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>), <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>));
<a id=588></a>    case <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>: return <a href="../h_src/57619028.htm" class="function">luaS_eqlngstr</a>(<a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>), <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>));
<a id=589></a>    case <a href="../h_src/57521988.htm" class="macro">LUA_VUSERDATA</a>: {
<a id=590></a>      if (<a href="../h_src/57521444.htm" class="macro">uvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) == <a href="../h_src/57521444.htm" class="macro">uvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>)) return 1;
<a id=591></a>      else if (<a href="../h_src/58204856.htm" class="localvar">L</a> == NULL) return 0;
<a id=592></a>      <a href="../h_src/58204448.htm" class="localvar">tm</a> = <a href="../h_src/57498528.htm" class="macro">fasttm</a>(<a href="../h_src/58204856.htm" class="localvar">L</a>, <a href="../h_src/57521444.htm" class="macro">uvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>)-&gt;<a href="../h_src/57519540.htm" class="variable">metatable</a>, <a href="../h_src/57500568.htm" class="variable">TM_EQ</a>);
<a id=593></a>      if (<a href="../h_src/58204448.htm" class="localvar">tm</a> == NULL)
<a id=594></a>        <a href="../h_src/58204448.htm" class="localvar">tm</a> = <a href="../h_src/57498528.htm" class="macro">fasttm</a>(<a href="../h_src/58204856.htm" class="localvar">L</a>, <a href="../h_src/57521444.htm" class="macro">uvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>)-&gt;<a href="../h_src/57519540.htm" class="variable">metatable</a>, <a href="../h_src/57500568.htm" class="variable">TM_EQ</a>);
<a id=595></a>      break;  <a  class="comments">/* will try TM */</a>
    }
<a id=597></a>    case <a href="../h_src/57507436.htm" class="macro">LUA_VTABLE</a>: {
<a id=598></a>      if (<a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) == <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>)) return 1;
<a id=599></a>      else if (<a href="../h_src/58204856.htm" class="localvar">L</a> == NULL) return 0;
<a id=600></a>      <a href="../h_src/58204448.htm" class="localvar">tm</a> = <a href="../h_src/57498528.htm" class="macro">fasttm</a>(<a href="../h_src/58204856.htm" class="localvar">L</a>, <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>)-&gt;<a href="../h_src/57504444.htm" class="variable">metatable</a>, <a href="../h_src/57500568.htm" class="variable">TM_EQ</a>);
<a id=601></a>      if (<a href="../h_src/58204448.htm" class="localvar">tm</a> == NULL)
<a id=602></a>        <a href="../h_src/58204448.htm" class="localvar">tm</a> = <a href="../h_src/57498528.htm" class="macro">fasttm</a>(<a href="../h_src/58204856.htm" class="localvar">L</a>, <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>)-&gt;<a href="../h_src/57504444.htm" class="variable">metatable</a>, <a href="../h_src/57500568.htm" class="variable">TM_EQ</a>);
<a id=603></a>      break;  <a  class="comments">/* will try TM */</a>
    }
    default:
<a id=606></a>      return <a href="../h_src/57527496.htm" class="macro">gcvalue</a>(<a href="../h_src/58204720.htm" class="localvar">t1</a>) == <a href="../h_src/57527496.htm" class="macro">gcvalue</a>(<a href="../h_src/58204584.htm" class="localvar">t2</a>);
  }
<a id=608></a>  if (<a href="../h_src/58204448.htm" class="localvar">tm</a> == NULL)  <a  class="comments">/* no TM? */</a>
<a id=609></a>    return 0;  <a  class="comments">/* objects are different */</a>
  else {
<a id=611></a>    <a href="../h_src/57497848.htm" class="function">luaT_callTMres</a>(<a href="../h_src/58204856.htm" class="localvar">L</a>, <a href="../h_src/58204448.htm" class="localvar">tm</a>, <a href="../h_src/58204720.htm" class="localvar">t1</a>, <a href="../h_src/58204584.htm" class="localvar">t2</a>, <a href="../h_src/58204856.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);  <a  class="comments">/* call TM */</a>
<a id=612></a>    return !<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58204856.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>));
  }
}


<a id=617></a><a  class="comments">/* macro used by 'luaV_concat' to ensure that element at 'o' is a string */</a>
<a id=618></a>#define <a href="../h_src/58204040.htm" class="macro">tostring</a>(L,o)  \
	(ttisstring(o) || (cvt2str(o) &amp;&amp; (luaO_tostring(L, o), 1)))

<a id=621></a>#define <a href="../h_src/58203904.htm" class="macro">isemptystr</a>(o)	(ttisshrstring(o) &amp;&amp; tsvalue(o)-&gt;shrlen == 0)

<a id=623></a><a  class="comments">/* copy strings in stack from top - n up to top - 1 to buffer */</a>
<a id=624></a>static void <a href="../h_src/58203768.htm" class="function">copy2buff</a> (<a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58203632.htm" class="localvar">top</a>, int <a href="../h_src/58203496.htm" class="localvar">n</a>, char *<a href="../h_src/58203360.htm" class="localvar">buff</a>) {
<a id=625></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58203224.htm" class="localvar">tl</a> = 0;  <a  class="comments">/* size already copied */</a>
  do {
<a id=627></a>    <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58203088.htm" class="localvar">l</a> = <a href="../h_src/57522260.htm" class="macro">vslen</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58203632.htm" class="localvar">top</a> - <a href="../h_src/58203496.htm" class="localvar">n</a>));  <a  class="comments">/* length of string being copied */</a>
<a id=628></a>    <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/58203360.htm" class="localvar">buff</a> + <a href="../h_src/58203224.htm" class="localvar">tl</a>, <a href="../h_src/57522532.htm" class="macro">svalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58203632.htm" class="localvar">top</a> - <a href="../h_src/58203496.htm" class="localvar">n</a>)), <a href="../h_src/58203088.htm" class="localvar">l</a> * sizeof(char));
<a id=629></a>    <a href="../h_src/58203224.htm" class="localvar">tl</a> += <a href="../h_src/58203088.htm" class="localvar">l</a>;
<a id=630></a>  } while (--<a href="../h_src/58203496.htm" class="localvar">n</a> &gt; 0);
}


<a id=634></a><a  class="comments">/*</a>
<a id=635></a><a  class="comments">** Main operation for concatenation: concat 'total' values in the stack,</a>
<a id=636></a><a  class="comments">** from 'L-&gt;top.p - total' up to 'L-&gt;top.p - 1'.</a>
<a id=637></a><a  class="comments">*/</a>
<a id=638></a>void <a href="../h_src/57610868.htm" class="function">luaV_concat</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58202952.htm" class="localvar">L</a>, int <a href="../h_src/58202816.htm" class="localvar">total</a>) {
<a id=639></a>  if (<a href="../h_src/58202816.htm" class="localvar">total</a> == 1)
<a id=640></a>    return;  <a  class="comments">/* &quot;all&quot; values already concatenated */</a>
  do {
<a id=642></a>    <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58202680.htm" class="localvar">top</a> = <a href="../h_src/58202952.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
<a id=643></a>    int <a href="../h_src/58202544.htm" class="localvar">n</a> = 2;  <a  class="comments">/* number of elements handled in this pass (at least 2) */</a>
<a id=644></a>    if (!(<a href="../h_src/57524912.htm" class="macro">ttisstring</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - 2)) || <a href="../h_src/57614200.htm" class="macro">cvt2str</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - 2))) ||
<a id=645></a>        !<a href="../h_src/58204040.htm" class="macro">tostring</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - 1)))
<a id=646></a>      <a href="../h_src/57497712.htm" class="function">luaT_tryconcatTM</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>);  <a  class="comments">/* may invalidate 'top' */</a>
<a id=647></a>    else if (<a href="../h_src/58203904.htm" class="macro">isemptystr</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - 1)))  <a  class="comments">/* second operand is empty? */</a>
<a id=648></a>      <a href="../h_src/57547624.htm" class="macro">cast_void</a>(<a href="../h_src/58204040.htm" class="macro">tostring</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - 2)));  <a  class="comments">/* result is first operand */</a>
<a id=649></a>    else if (<a href="../h_src/58203904.htm" class="macro">isemptystr</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - 2))) {  <a  class="comments">/* first operand is empty string? */</a>
<a id=650></a>      <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, <a href="../h_src/58202680.htm" class="localvar">top</a> - 2, <a href="../h_src/58202680.htm" class="localvar">top</a> - 1);  <a  class="comments">/* result is second op. */</a>
    }
    else {
<a id=653></a>      <a  class="comments">/* at least two non-empty string values; get as many as possible */</a>
<a id=654></a>      <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58202136.htm" class="localvar">tl</a> = <a href="../h_src/57522260.htm" class="macro">vslen</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - 1));
<a id=655></a>      <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58202000.htm" class="localvar">ts</a>;
<a id=656></a>      <a  class="comments">/* collect total length and number of strings */</a>
<a id=657></a>      for (<a href="../h_src/58202544.htm" class="localvar">n</a> = 1; <a href="../h_src/58202544.htm" class="localvar">n</a> &lt; <a href="../h_src/58202816.htm" class="localvar">total</a> &amp;&amp; <a href="../h_src/58204040.htm" class="macro">tostring</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - <a href="../h_src/58202544.htm" class="localvar">n</a> - 1)); <a href="../h_src/58202544.htm" class="localvar">n</a>++) {
<a id=658></a>        <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/58201864.htm" class="localvar">l</a> = <a href="../h_src/57522260.htm" class="macro">vslen</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58202680.htm" class="localvar">top</a> - <a href="../h_src/58202544.htm" class="localvar">n</a> - 1));
<a id=659></a>        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58201864.htm" class="localvar">l</a> &gt;= (<a href="../h_src/57550208.htm" class="macro">MAX_SIZE</a>/sizeof(char)) - <a href="../h_src/58202136.htm" class="localvar">tl</a>)) {
<a id=660></a>          <a href="../h_src/58202952.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58202680.htm" class="localvar">top</a> - <a href="../h_src/58202816.htm" class="localvar">total</a>;  <a  class="comments">/* pop strings to avoid wasting stack */</a>
<a id=661></a>          <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, &quot;string length overflow&quot;);
        }
<a id=663></a>        <a href="../h_src/58202136.htm" class="localvar">tl</a> += <a href="../h_src/58201864.htm" class="localvar">l</a>;
      }
<a id=665></a>      if (<a href="../h_src/58202136.htm" class="localvar">tl</a> &lt;= <a href="../h_src/57544904.htm" class="macro">LUAI_MAXSHORTLEN</a>) {  <a  class="comments">/* is result a short string? */</a>
<a id=666></a>        char <a href="../h_src/58201728.htm" class="localvar">buff</a>[<a href="../h_src/57544904.htm" class="macro">LUAI_MAXSHORTLEN</a>];
<a id=667></a>        <a href="../h_src/58203768.htm" class="function">copy2buff</a>(<a href="../h_src/58202680.htm" class="localvar">top</a>, <a href="../h_src/58202544.htm" class="localvar">n</a>, <a href="../h_src/58201728.htm" class="localvar">buff</a>);  <a  class="comments">/* copy strings to buffer */</a>
<a id=668></a>        <a href="../h_src/58202000.htm" class="localvar">ts</a> = <a href="../h_src/57618552.htm" class="function">luaS_newlstr</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, <a href="../h_src/58201728.htm" class="localvar">buff</a>, <a href="../h_src/58202136.htm" class="localvar">tl</a>);
      }
<a id=670></a>      else {  <a  class="comments">/* long string; copy strings directly to final result */</a>
<a id=671></a>        <a href="../h_src/58202000.htm" class="localvar">ts</a> = <a href="../h_src/57618416.htm" class="function">luaS_createlngstrobj</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, <a href="../h_src/58202136.htm" class="localvar">tl</a>);
<a id=672></a>        <a href="../h_src/58203768.htm" class="function">copy2buff</a>(<a href="../h_src/58202680.htm" class="localvar">top</a>, <a href="../h_src/58202544.htm" class="localvar">n</a>, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58202000.htm" class="localvar">ts</a>));
      }
<a id=674></a>      <a href="../h_src/57524096.htm" class="macro">setsvalue2s</a>(<a href="../h_src/58202952.htm" class="localvar">L</a>, <a href="../h_src/58202680.htm" class="localvar">top</a> - <a href="../h_src/58202544.htm" class="localvar">n</a>, <a href="../h_src/58202000.htm" class="localvar">ts</a>);  <a  class="comments">/* create result */</a>
    }
<a id=676></a>    <a href="../h_src/58202816.htm" class="localvar">total</a> -= <a href="../h_src/58202544.htm" class="localvar">n</a> - 1;  <a  class="comments">/* got 'n' strings to create one new */</a>
<a id=677></a>    <a href="../h_src/58202952.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/58202544.htm" class="localvar">n</a> - 1;  <a  class="comments">/* popped 'n' strings and pushed one */</a>
<a id=678></a>  } while (<a href="../h_src/58202816.htm" class="localvar">total</a> &gt; 1);  <a  class="comments">/* repeat until only 1 result left */</a>
}


<a id=682></a><a  class="comments">/*</a>
<a id=683></a><a  class="comments">** Main operation 'ra = #rb'.</a>
<a id=684></a><a  class="comments">*/</a>
<a id=685></a>void <a href="../h_src/57610528.htm" class="function">luaV_objlen</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58201320.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58201184.htm" class="localvar">ra</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58201048.htm" class="localvar">rb</a>) {
<a id=686></a>  const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58200912.htm" class="localvar">tm</a>;
<a id=687></a>  switch (<a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/58201048.htm" class="localvar">rb</a>)) {
<a id=688></a>    case <a href="../h_src/57507436.htm" class="macro">LUA_VTABLE</a>: {
<a id=689></a>      <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/58200776.htm" class="localvar">h</a> = <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/58201048.htm" class="localvar">rb</a>);
<a id=690></a>      <a href="../h_src/58200912.htm" class="localvar">tm</a> = <a href="../h_src/57498528.htm" class="macro">fasttm</a>(<a href="../h_src/58201320.htm" class="localvar">L</a>, <a href="../h_src/58200776.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504444.htm" class="variable">metatable</a>, <a href="../h_src/57500636.htm" class="variable">TM_LEN</a>);
<a id=691></a>      if (<a href="../h_src/58200912.htm" class="localvar">tm</a>) break;  <a  class="comments">/* metamethod? break switch to call it */</a>
<a id=692></a>      <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58201184.htm" class="localvar">ra</a>), <a href="../h_src/57592440.htm" class="function">luaH_getn</a>(<a href="../h_src/58200776.htm" class="localvar">h</a>));  <a  class="comments">/* else primitive len */</a>
      return;
    }
<a id=695></a>    case <a href="../h_src/57525184.htm" class="macro">LUA_VSHRSTR</a>: {
<a id=696></a>      <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58201184.htm" class="localvar">ra</a>), <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58201048.htm" class="localvar">rb</a>)-&gt;<a href="../h_src/57523416.htm" class="variable">shrlen</a>);
      return;
    }
<a id=699></a>    case <a href="../h_src/57525048.htm" class="macro">LUA_VLNGSTR</a>: {
<a id=700></a>      <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58201184.htm" class="localvar">ra</a>), <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58201048.htm" class="localvar">rb</a>)-&gt;<a href="../h_src/57522872.htm" class="variable">u</a>.<a href="../h_src/57523212.htm" class="variable">lnglen</a>);
      return;
    }
<a id=703></a>    default: {  <a  class="comments">/* try metamethod */</a>
<a id=704></a>      <a href="../h_src/58200912.htm" class="localvar">tm</a> = <a href="../h_src/57498052.htm" class="function">luaT_gettmbyobj</a>(<a href="../h_src/58201320.htm" class="localvar">L</a>, <a href="../h_src/58201048.htm" class="localvar">rb</a>, <a href="../h_src/57500636.htm" class="variable">TM_LEN</a>);
<a id=705></a>      if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57498800.htm" class="macro">notm</a>(<a href="../h_src/58200912.htm" class="localvar">tm</a>)))  <a  class="comments">/* no metamethod? */</a>
<a id=706></a>        <a href="../h_src/57635756.htm" class="function">luaG_typeerror</a>(<a href="../h_src/58201320.htm" class="localvar">L</a>, <a href="../h_src/58201048.htm" class="localvar">rb</a>, &quot;get length of&quot;);
      break;
    }
  }
<a id=710></a>  <a href="../h_src/57497848.htm" class="function">luaT_callTMres</a>(<a href="../h_src/58201320.htm" class="localvar">L</a>, <a href="../h_src/58200912.htm" class="localvar">tm</a>, <a href="../h_src/58201048.htm" class="localvar">rb</a>, <a href="../h_src/58201048.htm" class="localvar">rb</a>, <a href="../h_src/58201184.htm" class="localvar">ra</a>);
}


<a id=714></a><a  class="comments">/*</a>
<a id=715></a><a  class="comments">** Integer division; return 'm // n', that is, floor(m/n).</a>
<a id=716></a><a  class="comments">** C division truncates its result (rounds towards zero).</a>
<a id=717></a><a  class="comments">** 'floor(q) == trunc(q)' when 'q &gt;= 0' or when 'q' is integer,</a>
<a id=718></a><a  class="comments">** otherwise 'floor(q) == trunc(q) - 1'.</a>
<a id=719></a><a  class="comments">*/</a>
<a id=720></a><a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57610800.htm" class="function">luaV_idiv</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58200232.htm" class="localvar">L</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58200096.htm" class="localvar">m</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58199960.htm" class="localvar">n</a>) {
<a id=721></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/58199960.htm" class="localvar">n</a>) + 1u &lt;= 1u)) {  <a  class="comments">/* special cases: -1 or 0 */</a>
<a id=722></a>    if (<a href="../h_src/58199960.htm" class="localvar">n</a> == 0)
<a id=723></a>      <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/58200232.htm" class="localvar">L</a>, &quot;attempt to divide by zero&quot;);
<a id=724></a>    return <a href="../h_src/57612568.htm" class="macro">intop</a>(-, 0, <a href="../h_src/58200096.htm" class="localvar">m</a>);   <a  class="comments">/* n==-1; avoid overflow with 0x80000...//-1 */</a>
  }
  else {
<a id=727></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58199824.htm" class="localvar">q</a> = <a href="../h_src/58200096.htm" class="localvar">m</a> / <a href="../h_src/58199960.htm" class="localvar">n</a>;  <a  class="comments">/* perform C division */</a>
<a id=728></a>    if ((<a href="../h_src/58200096.htm" class="localvar">m</a> ^ <a href="../h_src/58199960.htm" class="localvar">n</a>) &lt; 0 &amp;&amp; <a href="../h_src/58200096.htm" class="localvar">m</a> % <a href="../h_src/58199960.htm" class="localvar">n</a> != 0)  <a  class="comments">/* 'm/n' would be negative non-integer? */</a>
<a id=729></a>      <a href="../h_src/58199824.htm" class="localvar">q</a> -= 1;  <a  class="comments">/* correct result for different rounding */</a>
<a id=730></a>    return <a href="../h_src/58199824.htm" class="localvar">q</a>;
  }
}


<a id=735></a><a  class="comments">/*</a>
<a id=736></a><a  class="comments">** Integer modulus; return 'm % n'. (Assume that C '%' with</a>
<a id=737></a><a  class="comments">** negative operands follows C99 behavior. See previous comment</a>
<a id=738></a><a  class="comments">** about luaV_idiv.)</a>
<a id=739></a><a  class="comments">*/</a>
<a id=740></a><a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57610732.htm" class="function">luaV_mod</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58199688.htm" class="localvar">L</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58199552.htm" class="localvar">m</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58199416.htm" class="localvar">n</a>) {
<a id=741></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/58199416.htm" class="localvar">n</a>) + 1u &lt;= 1u)) {  <a  class="comments">/* special cases: -1 or 0 */</a>
<a id=742></a>    if (<a href="../h_src/58199416.htm" class="localvar">n</a> == 0)
<a id=743></a>      <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/58199688.htm" class="localvar">L</a>, &quot;attempt to perform 'n%%0'&quot;);
<a id=744></a>    return 0;   <a  class="comments">/* m % -1 == 0; avoid overflow with 0x80000...%-1 */</a>
  }
  else {
<a id=747></a>    <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58199280.htm" class="localvar">r</a> = <a href="../h_src/58199552.htm" class="localvar">m</a> % <a href="../h_src/58199416.htm" class="localvar">n</a>;
<a id=748></a>    if (<a href="../h_src/58199280.htm" class="localvar">r</a> != 0 &amp;&amp; (<a href="../h_src/58199280.htm" class="localvar">r</a> ^ <a href="../h_src/58199416.htm" class="localvar">n</a>) &lt; 0)  <a  class="comments">/* 'm/n' would be non-integer negative? */</a>
<a id=749></a>      <a href="../h_src/58199280.htm" class="localvar">r</a> += <a href="../h_src/58199416.htm" class="localvar">n</a>;  <a  class="comments">/* correct result for different rounding */</a>
<a id=750></a>    return <a href="../h_src/58199280.htm" class="localvar">r</a>;
  }
}


<a id=755></a><a  class="comments">/*</a>
<a id=756></a><a  class="comments">** Float modulus</a>
<a id=757></a><a  class="comments">*/</a>
<a id=758></a><a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57610664.htm" class="function">luaV_modf</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58199144.htm" class="localvar">L</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58199008.htm" class="localvar">m</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58198872.htm" class="localvar">n</a>) {
<a id=759></a>  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58198736.htm" class="localvar">r</a>;
<a id=760></a>  <a href="../h_src/57540552.htm" class="macro">luai_nummod</a>(<a href="../h_src/58199144.htm" class="localvar">L</a>, <a href="../h_src/58199008.htm" class="localvar">m</a>, <a href="../h_src/58198872.htm" class="localvar">n</a>, <a href="../h_src/58198736.htm" class="localvar">r</a>);
<a id=761></a>  return <a href="../h_src/58198736.htm" class="localvar">r</a>;
}


<a id=765></a><a  class="comments">/* number of bits in an integer */</a>
<a id=766></a>#define <a href="../h_src/58198532.htm" class="macro">NBITS</a>	cast_int(sizeof(lua_Integer) * CHAR_BIT)


<a id=769></a><a  class="comments">/*</a>
<a id=770></a><a  class="comments">** Shift left operation. (Shift right just negates 'y'.)</a>
<a id=771></a><a  class="comments">*/</a>
<a id=772></a><a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a> (<a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58198396.htm" class="localvar">x</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58198260.htm" class="localvar">y</a>) {
<a id=773></a>  if (<a href="../h_src/58198260.htm" class="localvar">y</a> &lt; 0) {  <a  class="comments">/* shift right? */</a>
<a id=774></a>    if (<a href="../h_src/58198260.htm" class="localvar">y</a> &lt;= -<a href="../h_src/58198532.htm" class="macro">NBITS</a>) return 0;
<a id=775></a>    else return <a href="../h_src/57612568.htm" class="macro">intop</a>(&gt;&gt;, <a href="../h_src/58198396.htm" class="localvar">x</a>, -<a href="../h_src/58198260.htm" class="localvar">y</a>);
  }
<a id=777></a>  else {  <a  class="comments">/* shift left */</a>
<a id=778></a>    if (<a href="../h_src/58198260.htm" class="localvar">y</a> &gt;= <a href="../h_src/58198532.htm" class="macro">NBITS</a>) return 0;
<a id=779></a>    else return <a href="../h_src/57612568.htm" class="macro">intop</a>(&lt;&lt;, <a href="../h_src/58198396.htm" class="localvar">x</a>, <a href="../h_src/58198260.htm" class="localvar">y</a>);
  }
}


<a id=784></a><a  class="comments">/*</a>
<a id=785></a><a  class="comments">** create a new Lua closure, push it in the stack, and initialize</a>
<a id=786></a><a  class="comments">** its upvalues.</a>
<a id=787></a><a  class="comments">*/</a>
<a id=788></a>static void <a href="../h_src/58198124.htm" class="function">pushclosure</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58197988.htm" class="localvar">L</a>, <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58197852.htm" class="localvar">p</a>, <a href="../h_src/57509612.htm" class="type">UpVal</a> **<a href="../h_src/58197716.htm" class="localvar">encup</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58197580.htm" class="localvar">base</a>,
<a id=789></a>                         <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58197444.htm" class="localvar">ra</a>) {
<a id=790></a>  int <a href="../h_src/58197308.htm" class="localvar">nup</a> = <a href="../h_src/58197852.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515732.htm" class="variable">sizeupvalues</a>;
<a id=791></a>  <a href="../h_src/57517092.htm" class="type">Upvaldesc</a> *<a href="../h_src/58197172.htm" class="localvar">uv</a> = <a href="../h_src/58197852.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>;
<a id=792></a>  int <a href="../h_src/58197036.htm" class="localvar">i</a>;
<a id=793></a>  <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/58196900.htm" class="localvar">ncl</a> = <a href="../h_src/57630724.htm" class="function">luaF_newLclosure</a>(<a href="../h_src/58197988.htm" class="localvar">L</a>, <a href="../h_src/58197308.htm" class="localvar">nup</a>);
<a id=794></a>  <a href="../h_src/58196900.htm" class="localvar">ncl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a> = <a href="../h_src/58197852.htm" class="localvar">p</a>;
<a id=795></a>  <a href="../h_src/57511584.htm" class="macro">setclLvalue2s</a>(<a href="../h_src/58197988.htm" class="localvar">L</a>, <a href="../h_src/58197444.htm" class="localvar">ra</a>, <a href="../h_src/58196900.htm" class="localvar">ncl</a>);  <a  class="comments">/* anchor new closure in stack */</a>
<a id=796></a>  for (<a href="../h_src/58197036.htm" class="localvar">i</a> = 0; <a href="../h_src/58197036.htm" class="localvar">i</a> &lt; <a href="../h_src/58197308.htm" class="localvar">nup</a>; <a href="../h_src/58197036.htm" class="localvar">i</a>++) {  <a  class="comments">/* fill in its upvalues */</a>
<a id=797></a>    if (<a href="../h_src/58197172.htm" class="localvar">uv</a>[<a href="../h_src/58197036.htm" class="localvar">i</a>].<a href="../h_src/57517296.htm" class="variable">instack</a>)  <a  class="comments">/* upvalue refers to local variable? */</a>
<a id=798></a>      <a href="../h_src/58196900.htm" class="localvar">ncl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/58197036.htm" class="localvar">i</a>] = <a href="../h_src/57630588.htm" class="function">luaF_findupval</a>(<a href="../h_src/58197988.htm" class="localvar">L</a>, <a href="../h_src/58197580.htm" class="localvar">base</a> + <a href="../h_src/58197172.htm" class="localvar">uv</a>[<a href="../h_src/58197036.htm" class="localvar">i</a>].<a href="../h_src/57517228.htm" class="variable">idx</a>);
<a id=799></a>    else  <a  class="comments">/* get upvalue from enclosing function */</a>
<a id=800></a>      <a href="../h_src/58196900.htm" class="localvar">ncl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/58197036.htm" class="localvar">i</a>] = <a href="../h_src/58197716.htm" class="localvar">encup</a>[<a href="../h_src/58197172.htm" class="localvar">uv</a>[<a href="../h_src/58197036.htm" class="localvar">i</a>].<a href="../h_src/57517228.htm" class="variable">idx</a>];
<a id=801></a>    <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/58197988.htm" class="localvar">L</a>, <a href="../h_src/58196900.htm" class="localvar">ncl</a>, <a href="../h_src/58196900.htm" class="localvar">ncl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/58197036.htm" class="localvar">i</a>]);
  }
}


<a id=806></a><a  class="comments">/*</a>
<a id=807></a><a  class="comments">** finish execution of an opcode interrupted by a yield</a>
<a id=808></a><a  class="comments">*/</a>
<a id=809></a>void <a href="../h_src/57611004.htm" class="function">luaV_finishOp</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58196492.htm" class="localvar">L</a>) {
<a id=810></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/58196356.htm" class="localvar">ci</a> = <a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=811></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58196220.htm" class="localvar">base</a> = <a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + 1;
<a id=812></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58196084.htm" class="localvar">inst</a> = *(<a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a> - 1);  <a  class="comments">/* interrupted instruction */</a>
<a id=813></a>  <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/58195948.htm" class="localvar">op</a> = <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/58196084.htm" class="localvar">inst</a>);
<a id=814></a>  switch (<a href="../h_src/58195948.htm" class="localvar">op</a>) {  <a  class="comments">/* finish its execution */</a>
<a id=815></a>    case <a href="../h_src/57687408.htm" class="variable">OP_MMBIN</a>: case <a href="../h_src/57687340.htm" class="variable">OP_MMBINI</a>: case <a href="../h_src/57687272.htm" class="variable">OP_MMBINK</a>: {
<a id=816></a>      <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58196492.htm" class="localvar">L</a>, <a href="../h_src/58196220.htm" class="localvar">base</a> + <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(*(<a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a> - 2)), --<a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
      break;
    }
<a id=819></a>    case <a href="../h_src/57687204.htm" class="variable">OP_UNM</a>: case <a href="../h_src/57687136.htm" class="variable">OP_BNOT</a>: case <a href="../h_src/57687000.htm" class="variable">OP_LEN</a>:
<a id=820></a>    case <a href="../h_src/57689788.htm" class="variable">OP_GETTABUP</a>: case <a href="../h_src/57689720.htm" class="variable">OP_GETTABLE</a>: case <a href="../h_src/57689652.htm" class="variable">OP_GETI</a>:
<a id=821></a>    case <a href="../h_src/57689584.htm" class="variable">OP_GETFIELD</a>: case <a href="../h_src/57689176.htm" class="variable">OP_SELF</a>: {
<a id=822></a>      <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58196492.htm" class="localvar">L</a>, <a href="../h_src/58196220.htm" class="localvar">base</a> + <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/58196084.htm" class="localvar">inst</a>), --<a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
      break;
    }
<a id=825></a>    case <a href="../h_src/57686592.htm" class="variable">OP_LT</a>: case <a href="../h_src/57686524.htm" class="variable">OP_LE</a>:
<a id=826></a>    case <a href="../h_src/57686320.htm" class="variable">OP_LTI</a>: case <a href="../h_src/57686252.htm" class="variable">OP_LEI</a>:
<a id=827></a>    case <a href="../h_src/57686184.htm" class="variable">OP_GTI</a>: case <a href="../h_src/57686116.htm" class="variable">OP_GEI</a>:
<a id=828></a>    case <a href="../h_src/57686660.htm" class="variable">OP_EQ</a>: {  <a  class="comments">/* note that 'OP_EQI'/'OP_EQK' cannot yield */</a>
<a id=829></a>      int <a href="../h_src/58195268.htm" class="localvar">res</a> = !<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1));
<a id=830></a>      <a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>--;
<a id=831></a>#if defined(<a href="../h_src/57453092.htm" class="macro">LUA_COMPAT_LT_LE</a>)
<a id=832></a>      if (<a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57647860.htm" class="macro">CIST_LEQ</a>) {  <a  class="comments">/* &quot;&lt;=&quot; using &quot;&lt;&quot; instead? */</a>
<a id=833></a>        <a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> ^= <a href="../h_src/57647860.htm" class="macro">CIST_LEQ</a>;  <a  class="comments">/* clear mark */</a>
<a id=834></a>        <a href="../h_src/58195268.htm" class="localvar">res</a> = !<a href="../h_src/58195268.htm" class="localvar">res</a>;  <a  class="comments">/* negate result */</a>
      }
#endif
<a id=837></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(*ci-&gt;u.l.savedpc) == OP_JMP);
<a id=838></a>      if (<a href="../h_src/58195268.htm" class="localvar">res</a> != <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/58196084.htm" class="localvar">inst</a>))  <a  class="comments">/* condition failed? */</a>
<a id=839></a>        <a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>++;  <a  class="comments">/* skip jump instruction */</a>
      break;
    }
<a id=842></a>    case <a href="../h_src/57686932.htm" class="variable">OP_CONCAT</a>: {
<a id=843></a>      <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58195132.htm" class="localvar">top</a> = <a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1;  <a  class="comments">/* top when 'luaT_tryconcatTM' was called */</a>
<a id=844></a>      int <a href="../h_src/58194996.htm" class="localvar">a</a> = <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/58196084.htm" class="localvar">inst</a>);      <a  class="comments">/* first element to concatenate */</a>
<a id=845></a>      int <a href="../h_src/58194860.htm" class="localvar">total</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58195132.htm" class="localvar">top</a> - 1 - (<a href="../h_src/58196220.htm" class="localvar">base</a> + <a href="../h_src/58194996.htm" class="localvar">a</a>));  <a  class="comments">/* yet to concatenate */</a>
<a id=846></a>      <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58196492.htm" class="localvar">L</a>, <a href="../h_src/58195132.htm" class="localvar">top</a> - 2, <a href="../h_src/58195132.htm" class="localvar">top</a>);  <a  class="comments">/* put TM result in proper position */</a>
<a id=847></a>      <a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58195132.htm" class="localvar">top</a> - 1;  <a  class="comments">/* top is one after last element (at top-2) */</a>
<a id=848></a>      <a href="../h_src/57610868.htm" class="function">luaV_concat</a>(<a href="../h_src/58196492.htm" class="localvar">L</a>, <a href="../h_src/58194860.htm" class="localvar">total</a>);  <a  class="comments">/* concat them (may yield again) */</a>
      break;
    }
<a id=851></a>    case <a href="../h_src/57686864.htm" class="variable">OP_CLOSE</a>: {  <a  class="comments">/* yielded closing variables */</a>
<a id=852></a>      <a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>--;  <a  class="comments">/* repeat instruction to close other vars. */</a>
      break;
    }
<a id=855></a>    case <a href="../h_src/57685776.htm" class="variable">OP_RETURN</a>: {  <a  class="comments">/* yielded closing variables */</a>
<a id=856></a>      <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58194452.htm" class="localvar">ra</a> = <a href="../h_src/58196220.htm" class="localvar">base</a> + <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/58196084.htm" class="localvar">inst</a>);
<a id=857></a>      <a  class="comments">/* adjust top to signal correct number of returns, in case the</a>
<a id=858></a><a  class="comments">         return is &quot;up to top&quot; ('isIT') */</a>
<a id=859></a>      <a href="../h_src/58196492.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58194452.htm" class="localvar">ra</a> + <a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650036.htm" class="variable">nres</a>;
<a id=860></a>      <a  class="comments">/* repeat instruction to close other vars. and complete the return */</a>
<a id=861></a>      <a href="../h_src/58196356.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>--;
      break;
    }
    default: {
<a id=865></a>      <a  class="comments">/* only these other opcodes can yield */</a>
<a id=866></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(op == OP_TFORCALL || op == OP_CALL ||
           op == OP_TAILCALL || op == OP_SETTABUP || op == OP_SETTABLE ||
           op == OP_SETI || op == OP_SETFIELD);
      break;
    }
  }
}




<a id=877></a><a  class="comments">/*</a>
<a id=878></a><a  class="comments">** {==================================================================</a>
<a id=879></a><a  class="comments">** Macros for arithmetic/bitwise/comparison opcodes in 'luaV_execute'</a>
<a id=880></a><a  class="comments">** ===================================================================</a>
<a id=881></a><a  class="comments">*/</a>

<a id=883></a>#define <a href="../h_src/58194316.htm" class="macro">l_addi</a>(L,a,b)	intop(+, a, b)
<a id=884></a>#define <a href="../h_src/58194180.htm" class="macro">l_subi</a>(L,a,b)	intop(-, a, b)
<a id=885></a>#define <a href="../h_src/58194044.htm" class="macro">l_muli</a>(L,a,b)	intop(*, a, b)
<a id=886></a>#define <a href="../h_src/58193908.htm" class="macro">l_band</a>(a,b)	intop(&amp;, a, b)
<a id=887></a>#define <a href="../h_src/58193772.htm" class="macro">l_bor</a>(a,b)	intop(|, a, b)
<a id=888></a>#define <a href="../h_src/58193636.htm" class="macro">l_bxor</a>(a,b)	intop(^, a, b)

<a id=890></a>#define <a href="../h_src/58193500.htm" class="macro">l_lti</a>(a,b)	(a &lt; b)
<a id=891></a>#define <a href="../h_src/58193364.htm" class="macro">l_lei</a>(a,b)	(a &lt;= b)
<a id=892></a>#define <a href="../h_src/58193228.htm" class="macro">l_gti</a>(a,b)	(a &gt; b)
<a id=893></a>#define <a href="../h_src/58193092.htm" class="macro">l_gei</a>(a,b)	(a &gt;= b)


<a id=896></a><a  class="comments">/*</a>
<a id=897></a><a  class="comments">** Arithmetic operations with immediate operands. 'iop' is the integer</a>
<a id=898></a><a  class="comments">** operation, 'fop' is the float operation.</a>
<a id=899></a><a  class="comments">*/</a>
<a id=900></a>#define <a href="../h_src/58192956.htm" class="macro">op_arithI</a>(L,iop,fop) {  \
  StkId ra = RA(i); \
  TValue *v1 = vRB(i);  \
  int imm = GETARG_sC(i);  \
  if (ttisinteger(v1)) {  \
    lua_Integer iv1 = ivalue(v1);  \
    pc++; setivalue(s2v(ra), iop(L, iv1, imm));  \
  }  \
  else if (ttisfloat(v1)) {  \
    lua_Number nb = fltvalue(v1);  \
    lua_Number fimm = cast_num(imm);  \
    pc++; setfltvalue(s2v(ra), fop(L, nb, fimm)); \
  }}


<a id=915></a><a  class="comments">/*</a>
<a id=916></a><a  class="comments">** Auxiliary function for arithmetic operations over floats and others</a>
<a id=917></a><a  class="comments">** with two register operands.</a>
<a id=918></a><a  class="comments">*/</a>
<a id=919></a>#define <a href="../h_src/58192820.htm" class="macro">op_arithf_aux</a>(L,v1,v2,fop) {  \
  lua_Number n1; lua_Number n2;  \
  if (tonumberns(v1, n1) &amp;&amp; tonumberns(v2, n2)) {  \
    pc++; setfltvalue(s2v(ra), fop(L, n1, n2));  \
  }}


<a id=926></a><a  class="comments">/*</a>
<a id=927></a><a  class="comments">** Arithmetic operations over floats and others with register operands.</a>
<a id=928></a><a  class="comments">*/</a>
<a id=929></a>#define <a href="../h_src/58192684.htm" class="macro">op_arithf</a>(L,fop) {  \
  StkId ra = RA(i); \
  TValue *v1 = vRB(i);  \
  TValue *v2 = vRC(i);  \
  op_arithf_aux(L, v1, v2, fop); }


<a id=936></a><a  class="comments">/*</a>
<a id=937></a><a  class="comments">** Arithmetic operations with K operands for floats.</a>
<a id=938></a><a  class="comments">*/</a>
<a id=939></a>#define <a href="../h_src/58192548.htm" class="macro">op_arithfK</a>(L,fop) {  \
  StkId ra = RA(i); \
  TValue *v1 = vRB(i);  \
  TValue *v2 = KC(i); lua_assert(ttisnumber(v2));  \
  op_arithf_aux(L, v1, v2, fop); }


<a id=946></a><a  class="comments">/*</a>
<a id=947></a><a  class="comments">** Arithmetic operations over integers and floats.</a>
<a id=948></a><a  class="comments">*/</a>
<a id=949></a>#define <a href="../h_src/58192412.htm" class="macro">op_arith_aux</a>(L,v1,v2,iop,fop) {  \
  StkId ra = RA(i); \
  if (ttisinteger(v1) &amp;&amp; ttisinteger(v2)) {  \
    lua_Integer i1 = ivalue(v1); lua_Integer i2 = ivalue(v2);  \
    pc++; setivalue(s2v(ra), iop(L, i1, i2));  \
  }  \
  else op_arithf_aux(L, v1, v2, fop); }


<a id=958></a><a  class="comments">/*</a>
<a id=959></a><a  class="comments">** Arithmetic operations with register operands.</a>
<a id=960></a><a  class="comments">*/</a>
<a id=961></a>#define <a href="../h_src/58192276.htm" class="macro">op_arith</a>(L,iop,fop) {  \
  TValue *v1 = vRB(i);  \
  TValue *v2 = vRC(i);  \
  op_arith_aux(L, v1, v2, iop, fop); }


<a id=967></a><a  class="comments">/*</a>
<a id=968></a><a  class="comments">** Arithmetic operations with K operands.</a>
<a id=969></a><a  class="comments">*/</a>
<a id=970></a>#define <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(L,iop,fop) {  \
  TValue *v1 = vRB(i);  \
  TValue *v2 = KC(i); lua_assert(ttisnumber(v2));  \
  op_arith_aux(L, v1, v2, iop, fop); }


<a id=976></a><a  class="comments">/*</a>
<a id=977></a><a  class="comments">** Bitwise operations with constant operand.</a>
<a id=978></a><a  class="comments">*/</a>
<a id=979></a>#define <a href="../h_src/58192004.htm" class="macro">op_bitwiseK</a>(L,op) {  \
  StkId ra = RA(i); \
  TValue *v1 = vRB(i);  \
  TValue *v2 = KC(i);  \
  lua_Integer i1;  \
  lua_Integer i2 = ivalue(v2);  \
  if (tointegerns(v1, &amp;i1)) {  \
    pc++; setivalue(s2v(ra), op(i1, i2));  \
  }}


<a id=990></a><a  class="comments">/*</a>
<a id=991></a><a  class="comments">** Bitwise operations with register operands.</a>
<a id=992></a><a  class="comments">*/</a>
<a id=993></a>#define <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L,op) {  \
  StkId ra = RA(i); \
  TValue *v1 = vRB(i);  \
  TValue *v2 = vRC(i);  \
  lua_Integer i1; lua_Integer i2;  \
  if (tointegerns(v1, &amp;i1) &amp;&amp; tointegerns(v2, &amp;i2)) {  \
    pc++; setivalue(s2v(ra), op(i1, i2));  \
  }}


<a id=1003></a><a  class="comments">/*</a>
<a id=1004></a><a  class="comments">** Order operations with register operands. 'opn' actually works</a>
<a id=1005></a><a  class="comments">** for all numbers, but the fast track improves performance for</a>
<a id=1006></a><a  class="comments">** integers.</a>
<a id=1007></a><a  class="comments">*/</a>
<a id=1008></a>#define <a href="../h_src/58191732.htm" class="macro">op_order</a>(L,opi,opn,other) {  \
  StkId ra = RA(i); \
  int cond;  \
  TValue *rb = vRB(i);  \
  if (ttisinteger(s2v(ra)) &amp;&amp; ttisinteger(rb)) {  \
    lua_Integer ia = ivalue(s2v(ra));  \
    lua_Integer ib = ivalue(rb);  \
    cond = opi(ia, ib);  \
  }  \
  else if (ttisnumber(s2v(ra)) &amp;&amp; ttisnumber(rb))  \
    cond = opn(s2v(ra), rb);  \
  else  \
    Protect(cond = other(L, s2v(ra), rb));  \
  docondjump(); }


<a id=1024></a><a  class="comments">/*</a>
<a id=1025></a><a  class="comments">** Order operations with immediate operand. (Immediate operand is</a>
<a id=1026></a><a  class="comments">** always small enough to have an exact representation as a float.)</a>
<a id=1027></a><a  class="comments">*/</a>
<a id=1028></a>#define <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(L,opi,opf,inv,tm) {  \
  StkId ra = RA(i); \
  int cond;  \
  int im = GETARG_sB(i);  \
  if (ttisinteger(s2v(ra)))  \
    cond = opi(ivalue(s2v(ra)), im);  \
  else if (ttisfloat(s2v(ra))) {  \
    lua_Number fa = fltvalue(s2v(ra));  \
    lua_Number fim = cast_num(im);  \
    cond = opf(fa, fim);  \
  }  \
  else {  \
    int isf = GETARG_C(i);  \
    Protect(cond = luaT_callorderiTM(L, s2v(ra), im, inv, isf, tm));  \
  }  \
  docondjump(); }

<a id=1045></a><a  class="comments">/* }================================================================== */</a>


<a id=1048></a><a  class="comments">/*</a>
<a id=1049></a><a  class="comments">** {==================================================================</a>
<a id=1050></a><a  class="comments">** Function 'luaV_execute': main interpreter loop</a>
<a id=1051></a><a  class="comments">** ===================================================================</a>
<a id=1052></a><a  class="comments">*/</a>

<a id=1054></a><a  class="comments">/*</a>
<a id=1055></a><a  class="comments">** some macros for common tasks in 'luaV_execute'</a>
<a id=1056></a><a  class="comments">*/</a>


<a id=1059></a>#define <a href="../h_src/58191460.htm" class="macro">RA</a>(i)	(base+GETARG_A(i))
<a id=1060></a>#define <a href="../h_src/58191324.htm" class="macro">RB</a>(i)	(base+GETARG_B(i))
<a id=1061></a>#define <a href="../h_src/58191188.htm" class="macro">vRB</a>(i)	s2v(RB(i))
<a id=1062></a>#define <a href="../h_src/58191052.htm" class="macro">KB</a>(i)	(k+GETARG_B(i))
<a id=1063></a>#define <a href="../h_src/58190916.htm" class="macro">RC</a>(i)	(base+GETARG_C(i))
<a id=1064></a>#define <a href="../h_src/58190780.htm" class="macro">vRC</a>(i)	s2v(RC(i))
<a id=1065></a>#define <a href="../h_src/58190644.htm" class="macro">KC</a>(i)	(k+GETARG_C(i))
<a id=1066></a>#define <a href="../h_src/58190508.htm" class="macro">RKC</a>(i)	((TESTARG_k(i)) ? k + GETARG_C(i) : s2v(base + GETARG_C(i)))



<a id=1070></a>#define <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(ci)  (trap = ci-&gt;u.l.trap)

<a id=1072></a>#define <a href="../h_src/58190236.htm" class="macro">updatebase</a>(ci)	(base = ci-&gt;func.p + 1)


<a id=1075></a>#define <a href="../h_src/58190100.htm" class="macro">updatestack</a>(ci)  \
	{ if (l_unlikely(trap)) { updatebase(ci); ra = RA(i); } }


<a id=1079></a><a  class="comments">/*</a>
<a id=1080></a><a  class="comments">** Execute a jump instruction. The 'updatetrap' allows signals to stop</a>
<a id=1081></a><a  class="comments">** tight loops. (Without it, the local copy of 'trap' could never change.)</a>
<a id=1082></a><a  class="comments">*/</a>
<a id=1083></a>#define <a href="../h_src/58189964.htm" class="macro">dojump</a>(ci,i,e)	{ pc += GETARG_sJ(i) + e; updatetrap(ci); }


<a id=1086></a><a  class="comments">/* for test instructions, execute the jump instruction that follows it */</a>
<a id=1087></a>#define <a href="../h_src/58189828.htm" class="macro">donextjump</a>(ci)	{ Instruction ni = *pc; dojump(ci, ni, 1); }

<a id=1089></a><a  class="comments">/*</a>
<a id=1090></a><a  class="comments">** do a conditional jump: skip next instruction if 'cond' is not what</a>
<a id=1091></a><a  class="comments">** was expected (parameter 'k'), else do next instruction, which must</a>
<a id=1092></a><a  class="comments">** be a jump.</a>
<a id=1093></a><a  class="comments">*/</a>
<a id=1094></a>#define <a href="../h_src/58189692.htm" class="macro">docondjump</a>()	if (cond != GETARG_k(i)) pc++; else donextjump(ci);


<a id=1097></a><a  class="comments">/*</a>
<a id=1098></a><a  class="comments">** Correct global 'pc'.</a>
<a id=1099></a><a  class="comments">*/</a>
<a id=1100></a>#define <a href="../h_src/58189556.htm" class="macro">savepc</a>(L)	(ci-&gt;u.l.savedpc = pc)


<a id=1103></a><a  class="comments">/*</a>
<a id=1104></a><a  class="comments">** Whenever code can raise errors, the global 'pc' and the global</a>
<a id=1105></a><a  class="comments">** 'top' must be correct to report occasional errors.</a>
<a id=1106></a><a  class="comments">*/</a>
<a id=1107></a>#define <a href="../h_src/58189420.htm" class="macro">savestate</a>(L,ci)		(savepc(L), L-&gt;top.p = ci-&gt;top.p)


<a id=1110></a><a  class="comments">/*</a>
<a id=1111></a><a  class="comments">** Protect code that, in general, can raise errors, reallocate the</a>
<a id=1112></a><a  class="comments">** stack, and change the hooks.</a>
<a id=1113></a><a  class="comments">*/</a>
<a id=1114></a>#define <a href="../h_src/58189284.htm" class="macro">Protect</a>(exp)  (savestate(L,ci), (exp), updatetrap(ci))

<a id=1116></a><a  class="comments">/* special version that does not change the top */</a>
<a id=1117></a>#define <a href="../h_src/58189148.htm" class="macro">ProtectNT</a>(exp)  (savepc(L), (exp), updatetrap(ci))

<a id=1119></a><a  class="comments">/*</a>
<a id=1120></a><a  class="comments">** Protect code that can only raise errors. (That is, it cannot change</a>
<a id=1121></a><a  class="comments">** the stack or hooks.)</a>
<a id=1122></a><a  class="comments">*/</a>
<a id=1123></a>#define <a href="../h_src/58189012.htm" class="macro">halfProtect</a>(exp)  (savestate(L,ci), (exp))

<a id=1125></a><a  class="comments">/* 'c' is the limit of live values in the stack */</a>
<a id=1126></a>#define <a href="../h_src/58188876.htm" class="macro">checkGC</a>(L,c)  \
	{ luaC_condGC(L, (savepc(L), L-&gt;top.p = (c)), \
                         updatetrap(ci)); \
           luai_threadyield(L); }


<a id=1132></a><a  class="comments">/* fetch an instruction and prepare its execution */</a>
<a id=1133></a>#define <a href="../h_src/58188740.htm" class="macro">vmfetch</a>()	{ \
<a id=1134></a>  if (l_unlikely(trap)) {  <a  class="comments">/* stack reallocation or hooks? */</a> \
<a id=1135></a>    trap = luaG_traceexec(L, pc);  <a  class="comments">/* handle hooks */</a> \
<a id=1136></a>    updatebase(ci);  <a  class="comments">/* correct stack */</a> \
  } \
  i = *(pc++); \
}

<a id=1141></a>#define <a href="../h_src/58188604.htm" class="macro">vmdispatch</a>(o)	switch(o)
<a id=1142></a>#define <a href="../h_src/58188468.htm" class="macro">vmcase</a>(l)	case l:
<a id=1143></a>#define <a href="../h_src/58188332.htm" class="macro">vmbreak</a>		break


<a id=1146></a>void <a href="../h_src/57610936.htm" class="function">luaV_execute</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/58188060.htm" class="localvar">ci</a>) {
<a id=1147></a>  <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/58187924.htm" class="localvar">cl</a>;
<a id=1148></a>  <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58187788.htm" class="localvar">k</a>;
<a id=1149></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58187652.htm" class="localvar">base</a>;
<a id=1150></a>  const <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/58187516.htm" class="localvar">pc</a>;
<a id=1151></a>  int <a href="../h_src/58187380.htm" class="localvar">trap</a>;
<a id=1152></a>#if <a href="../h_src/58061540.htm" class="macro">LUA_USE_JUMPTABLE</a>
<a id=1153></a>#include &quot;<a href="../h_src/58187244.htm" class="file">ljumptab.h</a>&quot;
#endif
 startfunc:
<a id=1156></a>  <a href="../h_src/58187380.htm" class="localvar">trap</a> = <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>;
<a id=1157></a> returning:  <a  class="comments">/* trap already set */</a>
<a id=1158></a>  <a href="../h_src/58187924.htm" class="localvar">cl</a> = <a href="../h_src/57512264.htm" class="macro">clLvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>));
<a id=1159></a>  <a href="../h_src/58187788.htm" class="localvar">k</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>;
<a id=1160></a>  <a href="../h_src/58187516.htm" class="localvar">pc</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>;
<a id=1161></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58187380.htm" class="localvar">trap</a>)) {
<a id=1162></a>    if (<a href="../h_src/58187516.htm" class="localvar">pc</a> == <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>) {  <a  class="comments">/* first instruction (not resuming)? */</a>
<a id=1163></a>      if (<a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>)
<a id=1164></a>        <a href="../h_src/58187380.htm" class="localvar">trap</a> = 0;  <a  class="comments">/* hooks will start after VARARGPREP instruction */</a>
<a id=1165></a>      else  <a  class="comments">/* check 'call' hook */</a>
<a id=1166></a>        <a href="../h_src/57633444.htm" class="function">luaD_hookcall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);
    }
<a id=1168></a>    <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651056.htm" class="variable">trap</a> = 1;  <a  class="comments">/* assume trap is on, for now */</a>
  }
<a id=1170></a>  <a href="../h_src/58187652.htm" class="localvar">base</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + 1;
<a id=1171></a>  <a  class="comments">/* main loop of interpreter */</a>
  for (;;) {
<a id=1173></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58186564.htm" class="localvar">i</a>;  <a  class="comments">/* instruction being executed */</a>
<a id=1174></a>    <a href="../h_src/58188740.htm" class="macro">vmfetch</a>();
    #if 0
<a id=1176></a>      <a  class="comments">/* low-level line tracing for debugging Lua */</a>
      printf(&quot;line: %d\n&quot;, luaG_getfuncline(cl-&gt;p, pcRel(pc, cl-&gt;p)));
    #endif
<a id=1179></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(base == ci-&gt;func.p + 1);
<a id=1180></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(base &lt;= L-&gt;top.p &amp;&amp; L-&gt;top.p &lt;= L-&gt;stack_last.p);
<a id=1181></a>    <a  class="comments">/* invalidate top for instructions not expecting it */</a>
<a id=1182></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57683464.htm" class="macro">isIT</a>(i) || (<a href="../h_src/57547624.htm" class="macro">cast_void</a>(L-&gt;top.p = base), 1));
<a id=1183></a>    <a href="../h_src/58187176.htm" class="macro">vmdispatch</a> (<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {
<a id=1184></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MOVE) {
<a id=1185></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58186428.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1186></a>        <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58186428.htm" class="localvar">ra</a>, <a href="../h_src/58191324.htm" class="macro">RB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>));
<a id=1187></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1189></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADI) {
<a id=1190></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58186020.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1191></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58185884.htm" class="localvar">b</a> = <a href="../h_src/57692032.htm" class="macro">GETARG_sBx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1192></a>        <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58186020.htm" class="localvar">ra</a>), <a href="../h_src/58185884.htm" class="localvar">b</a>);
<a id=1193></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1195></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADF) {
<a id=1196></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58185612.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1197></a>        int <a href="../h_src/58185476.htm" class="localvar">b</a> = <a href="../h_src/57692032.htm" class="macro">GETARG_sBx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1198></a>        <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58185612.htm" class="localvar">ra</a>), <a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58185476.htm" class="localvar">b</a>));
<a id=1199></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1201></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADK) {
<a id=1202></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58185204.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1203></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58185068.htm" class="localvar">rb</a> = <a href="../h_src/58187788.htm" class="localvar">k</a> + <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1204></a>        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58185204.htm" class="localvar">ra</a>, <a href="../h_src/58185068.htm" class="localvar">rb</a>);
<a id=1205></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1207></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADKX) {
<a id=1208></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58184660.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1209></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58184524.htm" class="localvar">rb</a>;
<a id=1210></a>        <a href="../h_src/58184524.htm" class="localvar">rb</a> = <a href="../h_src/58187788.htm" class="localvar">k</a> + <a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*<a href="../h_src/58187516.htm" class="localvar">pc</a>); <a href="../h_src/58187516.htm" class="localvar">pc</a>++;
<a id=1211></a>        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58184660.htm" class="localvar">ra</a>, <a href="../h_src/58184524.htm" class="localvar">rb</a>);
<a id=1212></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1214></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADFALSE) {
<a id=1215></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58184116.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1216></a>        <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58184116.htm" class="localvar">ra</a>));
<a id=1217></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1219></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LFALSESKIP) {
<a id=1220></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183980.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1221></a>        <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58183980.htm" class="localvar">ra</a>));
<a id=1222></a>        <a href="../h_src/58187516.htm" class="localvar">pc</a>++;  <a  class="comments">/* skip next instruction */</a>
<a id=1223></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1225></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADTRUE) {
<a id=1226></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183844.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1227></a>        <a href="../h_src/57529128.htm" class="macro">setbtvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58183844.htm" class="localvar">ra</a>));
<a id=1228></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1230></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LOADNIL) {
<a id=1231></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183708.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1232></a>        int <a href="../h_src/58183572.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
        do {
<a id=1234></a>          <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58183708.htm" class="localvar">ra</a>++));
<a id=1235></a>        } while (<a href="../h_src/58183572.htm" class="localvar">b</a>--);
<a id=1236></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1238></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETUPVAL) {
<a id=1239></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58183436.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1240></a>        int <a href="../h_src/58183300.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1241></a>        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58183436.htm" class="localvar">ra</a>, <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/58183300.htm" class="localvar">b</a>]-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>);
<a id=1242></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1244></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETUPVAL) {
<a id=1245></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58182892.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1246></a>        <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/58182756.htm" class="localvar">uv</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)];
<a id=1247></a>        <a href="../h_src/57533684.htm" class="macro">setobj</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182756.htm" class="localvar">uv</a>-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58182892.htm" class="localvar">ra</a>));
<a id=1248></a>        <a href="../h_src/57621340.htm" class="macro">luaC_barrier</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182756.htm" class="localvar">uv</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58182892.htm" class="localvar">ra</a>));
<a id=1249></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1251></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETTABUP) {
<a id=1252></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58182348.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1253></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58182212.htm" class="localvar">slot</a>;
<a id=1254></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58182076.htm" class="localvar">upval</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)]-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>;
<a id=1255></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58181940.htm" class="localvar">rc</a> = <a href="../h_src/58190644.htm" class="macro">KC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1256></a>        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58181804.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58181940.htm" class="localvar">rc</a>);  <a  class="comments">/* key must be a string */</a>
<a id=1257></a>        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58182076.htm" class="localvar">upval</a>, <a href="../h_src/58181804.htm" class="localvar">key</a>, <a href="../h_src/58182212.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
<a id=1258></a>          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182348.htm" class="localvar">ra</a>, <a href="../h_src/58182212.htm" class="localvar">slot</a>);
        }
        else
<a id=1261></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58182076.htm" class="localvar">upval</a>, <a href="../h_src/58181940.htm" class="localvar">rc</a>, <a href="../h_src/58182348.htm" class="localvar">ra</a>, <a href="../h_src/58182212.htm" class="localvar">slot</a>));
<a id=1262></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1264></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETTABLE) {
<a id=1265></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58181396.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1266></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58181260.htm" class="localvar">slot</a>;
<a id=1267></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58181124.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1268></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58180988.htm" class="localvar">rc</a> = <a href="../h_src/58190780.htm" class="macro">vRC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1269></a>        <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/58180852.htm" class="localvar">n</a>;
<a id=1270></a>        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58180988.htm" class="localvar">rc</a>)  <a  class="comments">/* fast track for integers? */</a>
<a id=1271></a>            ? (<a href="../h_src/57547624.htm" class="macro">cast_void</a>(<a href="../h_src/58180852.htm" class="localvar">n</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58180988.htm" class="localvar">rc</a>)), <a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/58181124.htm" class="localvar">rb</a>, <a href="../h_src/58180852.htm" class="localvar">n</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>))
<a id=1272></a>            : <a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58181124.htm" class="localvar">rb</a>, <a href="../h_src/58180988.htm" class="localvar">rc</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>, <a href="../h_src/57616784.htm" class="function">luaH_get</a>)) {
<a id=1273></a>          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58181396.htm" class="localvar">ra</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>);
        }
        else
<a id=1276></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58181124.htm" class="localvar">rb</a>, <a href="../h_src/58180988.htm" class="localvar">rc</a>, <a href="../h_src/58181396.htm" class="localvar">ra</a>, <a href="../h_src/58181260.htm" class="localvar">slot</a>));
<a id=1277></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1279></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETI) {
<a id=1280></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58180444.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1281></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58180308.htm" class="localvar">slot</a>;
<a id=1282></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58180172.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1283></a>        int <a href="../h_src/58180036.htm" class="localvar">c</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1284></a>        if (<a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/58180172.htm" class="localvar">rb</a>, <a href="../h_src/58180036.htm" class="localvar">c</a>, <a href="../h_src/58180308.htm" class="localvar">slot</a>)) {
<a id=1285></a>          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58180444.htm" class="localvar">ra</a>, <a href="../h_src/58180308.htm" class="localvar">slot</a>);
        }
        else {
<a id=1288></a>          <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/58179628.htm" class="localvar">key</a>;
<a id=1289></a>          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/58179628.htm" class="localvar">key</a>, <a href="../h_src/58180036.htm" class="localvar">c</a>);
<a id=1290></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58180172.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58179628.htm" class="localvar">key</a>, <a href="../h_src/58180444.htm" class="localvar">ra</a>, <a href="../h_src/58180308.htm" class="localvar">slot</a>));
        }
<a id=1292></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1294></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GETFIELD) {
<a id=1295></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58179356.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1296></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58179220.htm" class="localvar">slot</a>;
<a id=1297></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58179084.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1298></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178948.htm" class="localvar">rc</a> = <a href="../h_src/58190644.htm" class="macro">KC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1299></a>        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58178812.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58178948.htm" class="localvar">rc</a>);  <a  class="comments">/* key must be a string */</a>
<a id=1300></a>        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58179084.htm" class="localvar">rb</a>, <a href="../h_src/58178812.htm" class="localvar">key</a>, <a href="../h_src/58179220.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
<a id=1301></a>          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58179356.htm" class="localvar">ra</a>, <a href="../h_src/58179220.htm" class="localvar">slot</a>);
        }
        else
<a id=1304></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58179084.htm" class="localvar">rb</a>, <a href="../h_src/58178948.htm" class="localvar">rc</a>, <a href="../h_src/58179356.htm" class="localvar">ra</a>, <a href="../h_src/58179220.htm" class="localvar">slot</a>));
<a id=1305></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1307></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETTABUP) {
<a id=1308></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178404.htm" class="localvar">slot</a>;
<a id=1309></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178268.htm" class="localvar">upval</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>[<a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)]-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a>;
<a id=1310></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58178132.htm" class="localvar">rb</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1311></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177996.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1312></a>        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58177860.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58178132.htm" class="localvar">rb</a>);  <a  class="comments">/* key must be a string */</a>
<a id=1313></a>        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58178268.htm" class="localvar">upval</a>, <a href="../h_src/58177860.htm" class="localvar">key</a>, <a href="../h_src/58178404.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
<a id=1314></a>          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58178268.htm" class="localvar">upval</a>, <a href="../h_src/58178404.htm" class="localvar">slot</a>, <a href="../h_src/58177996.htm" class="localvar">rc</a>);
        }
        else
<a id=1317></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58178268.htm" class="localvar">upval</a>, <a href="../h_src/58178132.htm" class="localvar">rb</a>, <a href="../h_src/58177996.htm" class="localvar">rc</a>, <a href="../h_src/58178404.htm" class="localvar">slot</a>));
<a id=1318></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1320></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETTABLE) {
<a id=1321></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58177452.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1322></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177316.htm" class="localvar">slot</a>;
<a id=1323></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177180.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* key (table is in 'ra') */</a>
<a id=1324></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58177044.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* value */</a>
<a id=1325></a>        <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/58176908.htm" class="localvar">n</a>;
<a id=1326></a>        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58177180.htm" class="localvar">rb</a>)  <a  class="comments">/* fast track for integers? */</a>
<a id=1327></a>            ? (<a href="../h_src/57547624.htm" class="macro">cast_void</a>(<a href="../h_src/58176908.htm" class="localvar">n</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58177180.htm" class="localvar">rb</a>)), <a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58176908.htm" class="localvar">n</a>, <a href="../h_src/58177316.htm" class="localvar">slot</a>))
<a id=1328></a>            : <a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58177180.htm" class="localvar">rb</a>, <a href="../h_src/58177316.htm" class="localvar">slot</a>, <a href="../h_src/57616784.htm" class="function">luaH_get</a>)) {
<a id=1329></a>          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58177316.htm" class="localvar">slot</a>, <a href="../h_src/58177044.htm" class="localvar">rc</a>);
        }
        else
<a id=1332></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58177452.htm" class="localvar">ra</a>), <a href="../h_src/58177180.htm" class="localvar">rb</a>, <a href="../h_src/58177044.htm" class="localvar">rc</a>, <a href="../h_src/58177316.htm" class="localvar">slot</a>));
<a id=1333></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1335></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETI) {
<a id=1336></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58176500.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1337></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58176364.htm" class="localvar">slot</a>;
<a id=1338></a>        int <a href="../h_src/58176228.htm" class="localvar">c</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1339></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58176092.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1340></a>        if (<a href="../h_src/57612160.htm" class="macro">luaV_fastgeti</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58176500.htm" class="localvar">ra</a>), <a href="../h_src/58176228.htm" class="localvar">c</a>, <a href="../h_src/58176364.htm" class="localvar">slot</a>)) {
<a id=1341></a>          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58176500.htm" class="localvar">ra</a>), <a href="../h_src/58176364.htm" class="localvar">slot</a>, <a href="../h_src/58176092.htm" class="localvar">rc</a>);
        }
        else {
<a id=1344></a>          <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/58175684.htm" class="localvar">key</a>;
<a id=1345></a>          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/58175684.htm" class="localvar">key</a>, <a href="../h_src/58176228.htm" class="localvar">c</a>);
<a id=1346></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58176500.htm" class="localvar">ra</a>), &amp;<a href="../h_src/58175684.htm" class="localvar">key</a>, <a href="../h_src/58176092.htm" class="localvar">rc</a>, <a href="../h_src/58176364.htm" class="localvar">slot</a>));
        }
<a id=1348></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1350></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETFIELD) {
<a id=1351></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58175412.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1352></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58175276.htm" class="localvar">slot</a>;
<a id=1353></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58175140.htm" class="localvar">rb</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1354></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58175004.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1355></a>        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58174868.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58175140.htm" class="localvar">rb</a>);  <a  class="comments">/* key must be a string */</a>
<a id=1356></a>        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58175412.htm" class="localvar">ra</a>), <a href="../h_src/58174868.htm" class="localvar">key</a>, <a href="../h_src/58175276.htm" class="localvar">slot</a>, <a href="../h_src/57616920.htm" class="function">luaH_getshortstr</a>)) {
<a id=1357></a>          <a href="../h_src/57612024.htm" class="macro">luaV_finishfastset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58175412.htm" class="localvar">ra</a>), <a href="../h_src/58175276.htm" class="localvar">slot</a>, <a href="../h_src/58175004.htm" class="localvar">rc</a>);
        }
        else
<a id=1360></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611072.htm" class="function">luaV_finishset</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58175412.htm" class="localvar">ra</a>), <a href="../h_src/58175140.htm" class="localvar">rb</a>, <a href="../h_src/58175004.htm" class="localvar">rc</a>, <a href="../h_src/58175276.htm" class="localvar">slot</a>));
<a id=1361></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1363></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_NEWTABLE) {
<a id=1364></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58174460.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1365></a>        int <a href="../h_src/58174324.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* log2(hash size) + 1 */</a>
<a id=1366></a>        int <a href="../h_src/58174188.htm" class="localvar">c</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* array size */</a>
<a id=1367></a>        <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/58174052.htm" class="localvar">t</a>;
<a id=1368></a>        if (<a href="../h_src/58174324.htm" class="localvar">b</a> &gt; 0)
<a id=1369></a>          <a href="../h_src/58174324.htm" class="localvar">b</a> = 1 &lt;&lt; (<a href="../h_src/58174324.htm" class="localvar">b</a> - 1);  <a  class="comments">/* size is 2^(b - 1) */</a>
<a id=1370></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>((!<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(i)) == (<a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*pc) == 0));
<a id=1371></a>        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>))  <a  class="comments">/* non-zero extra argument? */</a>
<a id=1372></a>          <a href="../h_src/58174188.htm" class="localvar">c</a> += <a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*<a href="../h_src/58187516.htm" class="localvar">pc</a>) * (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);  <a  class="comments">/* add it to size */</a>
<a id=1373></a>        <a href="../h_src/58187516.htm" class="localvar">pc</a>++;  <a  class="comments">/* skip extra argument */</a>
<a id=1374></a>        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58174460.htm" class="localvar">ra</a> + 1;  <a  class="comments">/* correct top in case of emergency GC */</a>
<a id=1375></a>        <a href="../h_src/58174052.htm" class="localvar">t</a> = <a href="../h_src/57616512.htm" class="function">luaH_new</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>);  <a  class="comments">/* memory allocation */</a>
<a id=1376></a>        <a href="../h_src/57506892.htm" class="macro">sethvalue2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58174460.htm" class="localvar">ra</a>, <a href="../h_src/58174052.htm" class="localvar">t</a>);
<a id=1377></a>        if (<a href="../h_src/58174324.htm" class="localvar">b</a> != 0 || <a href="../h_src/58174188.htm" class="localvar">c</a> != 0)
<a id=1378></a>          <a href="../h_src/57616444.htm" class="function">luaH_resize</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58174052.htm" class="localvar">t</a>, <a href="../h_src/58174188.htm" class="localvar">c</a>, <a href="../h_src/58174324.htm" class="localvar">b</a>);  <a  class="comments">/* idem */</a>
<a id=1379></a>        <a href="../h_src/58188876.htm" class="macro">checkGC</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58174460.htm" class="localvar">ra</a> + 1);
<a id=1380></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1382></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SELF) {
<a id=1383></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58173644.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1384></a>        const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58173508.htm" class="localvar">slot</a>;
<a id=1385></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58173372.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1386></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58173236.htm" class="localvar">rc</a> = <a href="../h_src/58190508.htm" class="macro">RKC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1387></a>        <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58173100.htm" class="localvar">key</a> = <a href="../h_src/57524368.htm" class="macro">tsvalue</a>(<a href="../h_src/58173236.htm" class="localvar">rc</a>);  <a  class="comments">/* key must be a string */</a>
<a id=1388></a>        <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58173644.htm" class="localvar">ra</a> + 1, <a href="../h_src/58173372.htm" class="localvar">rb</a>);
<a id=1389></a>        if (<a href="../h_src/57612296.htm" class="macro">luaV_fastget</a>(L, <a href="../h_src/58173372.htm" class="localvar">rb</a>, <a href="../h_src/58173100.htm" class="localvar">key</a>, <a href="../h_src/58173508.htm" class="localvar">slot</a>, <a href="../h_src/57616852.htm" class="function">luaH_getstr</a>)) {
<a id=1390></a>          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58173644.htm" class="localvar">ra</a>, <a href="../h_src/58173508.htm" class="localvar">slot</a>);
        }
        else
<a id=1393></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57611140.htm" class="function">luaV_finishget</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58173372.htm" class="localvar">rb</a>, <a href="../h_src/58173236.htm" class="localvar">rc</a>, <a href="../h_src/58173644.htm" class="localvar">ra</a>, <a href="../h_src/58173508.htm" class="localvar">slot</a>));
<a id=1394></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1396></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_ADDI) {
<a id=1397></a>        <a href="../h_src/58192956.htm" class="macro">op_arithI</a>(L, <a href="../h_src/58194316.htm" class="macro">l_addi</a>, <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>);
<a id=1398></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1400></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_ADDK) {
<a id=1401></a>        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(L, <a href="../h_src/58194316.htm" class="macro">l_addi</a>, <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>);
<a id=1402></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1404></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SUBK) {
<a id=1405></a>        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(L, <a href="../h_src/58194180.htm" class="macro">l_subi</a>, <a href="../h_src/57539872.htm" class="macro">luai_numsub</a>);
<a id=1406></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1408></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MULK) {
<a id=1409></a>        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(L, <a href="../h_src/58194044.htm" class="macro">l_muli</a>, <a href="../h_src/57539736.htm" class="macro">luai_nummul</a>);
<a id=1410></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1412></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MODK) {
<a id=1413></a>        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
<a id=1414></a>        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610732.htm" class="function">luaV_mod</a>, <a href="../h_src/57610664.htm" class="function">luaV_modf</a>);
<a id=1415></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1417></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_POWK) {
<a id=1418></a>        <a href="../h_src/58192548.htm" class="macro">op_arithfK</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57540280.htm" class="macro">luai_numpow</a>);
<a id=1419></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1421></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_DIVK) {
<a id=1422></a>        <a href="../h_src/58192548.htm" class="macro">op_arithfK</a>(L, <a href="../h_src/57540824.htm" class="macro">luai_numdiv</a>);
<a id=1423></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1425></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_IDIVK) {
<a id=1426></a>        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
<a id=1427></a>        <a href="../h_src/58192140.htm" class="macro">op_arithK</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610800.htm" class="function">luaV_idiv</a>, <a href="../h_src/57541096.htm" class="macro">luai_numidiv</a>);
<a id=1428></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1430></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BANDK) {
<a id=1431></a>        <a href="../h_src/58192004.htm" class="macro">op_bitwiseK</a>(L, <a href="../h_src/58193908.htm" class="macro">l_band</a>);
<a id=1432></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1434></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BORK) {
<a id=1435></a>        <a href="../h_src/58192004.htm" class="macro">op_bitwiseK</a>(L, <a href="../h_src/58193772.htm" class="macro">l_bor</a>);
<a id=1436></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1438></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BXORK) {
<a id=1439></a>        <a href="../h_src/58192004.htm" class="macro">op_bitwiseK</a>(L, <a href="../h_src/58193636.htm" class="macro">l_bxor</a>);
<a id=1440></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1442></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHRI) {
<a id=1443></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58161132.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1444></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58160996.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1445></a>        int <a href="../h_src/58160860.htm" class="localvar">ic</a> = <a href="../h_src/57693256.htm" class="macro">GETARG_sC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1446></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58160724.htm" class="localvar">ib</a>;
<a id=1447></a>        if (<a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/58160996.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58160724.htm" class="localvar">ib</a>)) {
<a id=1448></a>          <a href="../h_src/58187516.htm" class="localvar">pc</a>++; <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58161132.htm" class="localvar">ra</a>), <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a>(<a href="../h_src/58160724.htm" class="localvar">ib</a>, -<a href="../h_src/58160860.htm" class="localvar">ic</a>));
        }
<a id=1450></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1452></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHLI) {
<a id=1453></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58160452.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1454></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58160316.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1455></a>        int <a href="../h_src/58160180.htm" class="localvar">ic</a> = <a href="../h_src/57693256.htm" class="macro">GETARG_sC</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1456></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58160044.htm" class="localvar">ib</a>;
<a id=1457></a>        if (<a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/58160316.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58160044.htm" class="localvar">ib</a>)) {
<a id=1458></a>          <a href="../h_src/58187516.htm" class="localvar">pc</a>++; <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58160452.htm" class="localvar">ra</a>), <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a>(<a href="../h_src/58160180.htm" class="localvar">ic</a>, <a href="../h_src/58160044.htm" class="localvar">ib</a>));
        }
<a id=1460></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1462></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_ADD) {
<a id=1463></a>        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(L, <a href="../h_src/58194316.htm" class="macro">l_addi</a>, <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>);
<a id=1464></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1466></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SUB) {
<a id=1467></a>        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(L, <a href="../h_src/58194180.htm" class="macro">l_subi</a>, <a href="../h_src/57539872.htm" class="macro">luai_numsub</a>);
<a id=1468></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1470></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MUL) {
<a id=1471></a>        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(L, <a href="../h_src/58194044.htm" class="macro">l_muli</a>, <a href="../h_src/57539736.htm" class="macro">luai_nummul</a>);
<a id=1472></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1474></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MOD) {
<a id=1475></a>        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
<a id=1476></a>        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610732.htm" class="function">luaV_mod</a>, <a href="../h_src/57610664.htm" class="function">luaV_modf</a>);
<a id=1477></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1479></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_POW) {
<a id=1480></a>        <a href="../h_src/58192684.htm" class="macro">op_arithf</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57540280.htm" class="macro">luai_numpow</a>);
<a id=1481></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1483></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_DIV) {  <a  class="comments">/* float division (always with floats) */</a>
<a id=1484></a>        <a href="../h_src/58192684.htm" class="macro">op_arithf</a>(L, <a href="../h_src/57540824.htm" class="macro">luai_numdiv</a>);
<a id=1485></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1487></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_IDIV) {  <a  class="comments">/* floor division */</a>
<a id=1488></a>        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of division by 0 */</a>
<a id=1489></a>        <a href="../h_src/58192276.htm" class="macro">op_arith</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57610800.htm" class="function">luaV_idiv</a>, <a href="../h_src/57541096.htm" class="macro">luai_numidiv</a>);
<a id=1490></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1492></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BAND) {
<a id=1493></a>        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/58193908.htm" class="macro">l_band</a>);
<a id=1494></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1496></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BOR) {
<a id=1497></a>        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/58193772.htm" class="macro">l_bor</a>);
<a id=1498></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1500></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BXOR) {
<a id=1501></a>        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/58193636.htm" class="macro">l_bxor</a>);
<a id=1502></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1504></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHR) {
<a id=1505></a>        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/57611888.htm" class="macro">luaV_shiftr</a>);
<a id=1506></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1508></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SHL) {
<a id=1509></a>        <a href="../h_src/58191868.htm" class="macro">op_bitwise</a>(L, <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a>);
<a id=1510></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1512></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MMBIN) {
<a id=1513></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58147940.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1514></a>        <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58147804.htm" class="localvar">pi</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a> - 2);  <a  class="comments">/* original arith. expression */</a>
<a id=1515></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58147668.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1516></a>        <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/58147532.htm" class="localvar">tm</a> = (<a href="../h_src/57499004.htm" class="type">TMS</a>)<a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1517></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58147396.htm" class="localvar">result</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58147804.htm" class="localvar">pi</a>);
<a id=1518></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(OP_ADD &lt;= <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(pi) &amp;&amp; <a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(pi) &lt;= OP_SHR);
<a id=1519></a>        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497780.htm" class="function">luaT_trybinTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58147940.htm" class="localvar">ra</a>), <a href="../h_src/58147668.htm" class="localvar">rb</a>, <a href="../h_src/58147396.htm" class="localvar">result</a>, <a href="../h_src/58147532.htm" class="localvar">tm</a>));
<a id=1520></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1522></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MMBINI) {
<a id=1523></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58147260.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1524></a>        <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58147124.htm" class="localvar">pi</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a> - 2);  <a  class="comments">/* original arith. expression */</a>
<a id=1525></a>        int <a href="../h_src/58146988.htm" class="localvar">imm</a> = <a href="../h_src/57693664.htm" class="macro">GETARG_sB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1526></a>        <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/58146852.htm" class="localvar">tm</a> = (<a href="../h_src/57499004.htm" class="type">TMS</a>)<a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1527></a>        int <a href="../h_src/58146716.htm" class="localvar">flip</a> = <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1528></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58146580.htm" class="localvar">result</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58147124.htm" class="localvar">pi</a>);
<a id=1529></a>        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497576.htm" class="function">luaT_trybiniTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58147260.htm" class="localvar">ra</a>), <a href="../h_src/58146988.htm" class="localvar">imm</a>, <a href="../h_src/58146716.htm" class="localvar">flip</a>, <a href="../h_src/58146580.htm" class="localvar">result</a>, <a href="../h_src/58146852.htm" class="localvar">tm</a>));
<a id=1530></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1532></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_MMBINK) {
<a id=1533></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58146444.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1534></a>        <a href="../h_src/57545108.htm" class="type">Instruction</a> <a href="../h_src/58146308.htm" class="localvar">pi</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a> - 2);  <a  class="comments">/* original arith. expression */</a>
<a id=1535></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58146172.htm" class="localvar">imm</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1536></a>        <a href="../h_src/57499004.htm" class="type">TMS</a> <a href="../h_src/58146036.htm" class="localvar">tm</a> = (<a href="../h_src/57499004.htm" class="type">TMS</a>)<a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1537></a>        int <a href="../h_src/58145900.htm" class="localvar">flip</a> = <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1538></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58145764.htm" class="localvar">result</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58146308.htm" class="localvar">pi</a>);
<a id=1539></a>        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497644.htm" class="function">luaT_trybinassocTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58146444.htm" class="localvar">ra</a>), <a href="../h_src/58146172.htm" class="localvar">imm</a>, <a href="../h_src/58145900.htm" class="localvar">flip</a>, <a href="../h_src/58145764.htm" class="localvar">result</a>, <a href="../h_src/58146036.htm" class="localvar">tm</a>));
<a id=1540></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1542></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_UNM) {
<a id=1543></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58145628.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1544></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58145492.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1545></a>        <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/58145356.htm" class="localvar">nb</a>;
<a id=1546></a>        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/58145492.htm" class="localvar">rb</a>)) {
<a id=1547></a>          <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58145220.htm" class="localvar">ib</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/58145492.htm" class="localvar">rb</a>);
<a id=1548></a>          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58145628.htm" class="localvar">ra</a>), <a href="../h_src/57612568.htm" class="macro">intop</a>(-, 0, <a href="../h_src/58145220.htm" class="localvar">ib</a>));
        }
<a id=1550></a>        else if (<a href="../h_src/57612976.htm" class="macro">tonumberns</a>(<a href="../h_src/58145492.htm" class="localvar">rb</a>, <a href="../h_src/58145356.htm" class="localvar">nb</a>)) {
<a id=1551></a>          <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58145628.htm" class="localvar">ra</a>), <a href="../h_src/57539600.htm" class="macro">luai_numunm</a>(L, <a href="../h_src/58145356.htm" class="localvar">nb</a>));
        }
        else
<a id=1554></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497780.htm" class="function">luaT_trybinTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58145492.htm" class="localvar">rb</a>, <a href="../h_src/58145492.htm" class="localvar">rb</a>, <a href="../h_src/58145628.htm" class="localvar">ra</a>, <a href="../h_src/57499684.htm" class="variable">TM_UNM</a>));
<a id=1555></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1557></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_BNOT) {
<a id=1558></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58144812.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1559></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58144676.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1560></a>        <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58144540.htm" class="localvar">ib</a>;
<a id=1561></a>        if (<a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/58144676.htm" class="localvar">rb</a>, &amp;<a href="../h_src/58144540.htm" class="localvar">ib</a>)) {
<a id=1562></a>          <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58144812.htm" class="localvar">ra</a>), <a href="../h_src/57612568.htm" class="macro">intop</a>(^, ~<a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(0), <a href="../h_src/58144540.htm" class="localvar">ib</a>));
        }
        else
<a id=1565></a>          <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497780.htm" class="function">luaT_trybinTM</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58144676.htm" class="localvar">rb</a>, <a href="../h_src/58144676.htm" class="localvar">rb</a>, <a href="../h_src/58144812.htm" class="localvar">ra</a>, <a href="../h_src/57499616.htm" class="variable">TM_BNOT</a>));
<a id=1566></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1568></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_NOT) {
<a id=1569></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58144268.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1570></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58144132.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1571></a>        if (<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/58144132.htm" class="localvar">rb</a>))
<a id=1572></a>          <a href="../h_src/57529128.htm" class="macro">setbtvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58144268.htm" class="localvar">ra</a>));
        else
<a id=1574></a>          <a href="../h_src/57529264.htm" class="macro">setbfvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58144268.htm" class="localvar">ra</a>));
<a id=1575></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1577></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LEN) {
<a id=1578></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143996.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1579></a>        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57610528.htm" class="function">luaV_objlen</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143996.htm" class="localvar">ra</a>, <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)));
<a id=1580></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1582></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CONCAT) {
<a id=1583></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143860.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1584></a>        int <a href="../h_src/58143724.htm" class="localvar">n</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* number of elements to concatenate */</a>
<a id=1585></a>        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58143860.htm" class="localvar">ra</a> + <a href="../h_src/58143724.htm" class="localvar">n</a>;  <a  class="comments">/* mark the end of concat operands */</a>
<a id=1586></a>        <a href="../h_src/58189148.htm" class="macro">ProtectNT</a>(<a href="../h_src/57610868.htm" class="function">luaV_concat</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143724.htm" class="localvar">n</a>));
<a id=1587></a>        <a href="../h_src/58188876.htm" class="macro">checkGC</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>); <a  class="comments">/* 'luaV_concat' ensures correct top */</a><a href="../h_src/57650852.htm" class="variable">l</a>uaV_concat' ensures correct top */
<a id=1588></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1590></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CLOSE) {
<a id=1591></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143588.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1592></a>        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57630384.htm" class="function">luaF_close</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143588.htm" class="localvar">ra</a>, <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>, 1));
<a id=1593></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1595></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TBC) {
<a id=1596></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143452.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1597></a>        <a  class="comments">/* create new to-be-closed upvalue */</a>
<a id=1598></a>        <a href="../h_src/58189012.htm" class="macro">halfProtect</a>(<a href="../h_src/57630520.htm" class="function">luaF_newtbcupval</a><a href="../h_src/57650308.htm" class="variable">u</a>pval(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58143452.htm" class="localvar">ra</a>));
<a id=1599></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1601></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_JMP) {
<a id=1602></a>        <a href="../h_src/58189964.htm" class="macro">dojump</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58186564.htm" class="localvar">i</a>, 0);
<a id=1603></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1605></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EQ) {
<a id=1606></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58143316.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1607></a>        int <a href="../h_src/58143180.htm" class="localvar">cond</a>;
<a id=1608></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58143044.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1609></a>        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/58143180.htm" class="localvar">cond</a> = <a href="../h_src/57611752.htm" class="function">luaV_equalobj</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58143316.htm" class="localvar">ra</a>), <a href="../h_src/58143044.htm" class="localvar">rb</a>));
<a id=1610></a>        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
<a id=1611></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1613></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LT) {
<a id=1614></a>        <a href="../h_src/58191732.htm" class="macro">op_order</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193500.htm" class="macro">l_lti</a>, <a href="../h_src/58208120.htm" class="function">LTnum</a>, <a href="../h_src/58206760.htm" class="function">lessthanothers</a>);
<a id=1615></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1617></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LE) {
<a id=1618></a>        <a href="../h_src/58191732.htm" class="macro">op_order</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193364.htm" class="macro">l_lei</a>, <a href="../h_src/58207440.htm" class="function">LEnum</a>, <a href="../h_src/58205808.htm" class="function">lessequalothers</a>);
<a id=1619></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1621></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EQK) {
<a id=1622></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58141140.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1623></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58141004.htm" class="localvar">rb</a> = <a href="../h_src/58191052.htm" class="macro">KB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1624></a>        <a  class="comments">/* basic types do not use '__eq'; we can use raw equality */</a>
<a id=1625></a>        int <a href="../h_src/58140868.htm" class="localvar">cond</a> = <a href="../h_src/57612432.htm" class="macro">luaV_rawequalobj</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58141140.htm" class="localvar">ra</a>), <a href="../h_src/58141004.htm" class="localvar">rb</a>);
<a id=1626></a>        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
<a id=1627></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1629></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EQI) {
<a id=1630></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58140596.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1631></a>        int <a href="../h_src/58140460.htm" class="localvar">cond</a>;
<a id=1632></a>        int <a href="../h_src/58140324.htm" class="localvar">im</a> = <a href="../h_src/57693664.htm" class="macro">GETARG_sB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1633></a>        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)))
<a id=1634></a>          <a href="../h_src/58140460.htm" class="localvar">cond</a> = (<a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)) == <a href="../h_src/58140324.htm" class="localvar">im</a>);
<a id=1635></a>        else if (<a href="../h_src/57526680.htm" class="macro">ttisfloat</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)))
<a id=1636></a>          <a href="../h_src/58140460.htm" class="localvar">cond</a> = <a href="../h_src/57539464.htm" class="macro">luai_numeq</a>(<a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58140596.htm" class="localvar">ra</a>)), <a href="../h_src/57547352.htm" class="macro">cast_num</a>(<a href="../h_src/58140324.htm" class="localvar">im</a>));
        else
<a id=1638></a>          <a href="../h_src/58140460.htm" class="localvar">cond</a> = 0;  <a  class="comments">/* other types cannot be equal to a number */</a>
<a id=1639></a>        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
<a id=1640></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1642></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LTI) {
<a id=1643></a>        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193500.htm" class="macro">l_lti</a>, <a href="../h_src/57539328.htm" class="macro">luai_numlt</a>, 0, <a href="../h_src/57499548.htm" class="variable">TM_LT</a>);
<a id=1644></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1646></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_LEI) {
<a id=1647></a>        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193364.htm" class="macro">l_lei</a>, <a href="../h_src/57539192.htm" class="macro">luai_numle</a>, 0, <a href="../h_src/57499480.htm" class="variable">TM_LE</a>);
<a id=1648></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1650></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GTI) {
<a id=1651></a>        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193228.htm" class="macro">l_gti</a>, <a href="../h_src/57539056.htm" class="macro">luai_numgt</a>, 1, <a href="../h_src/57499548.htm" class="variable">TM_LT</a>);
<a id=1652></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1654></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_GEI) {
<a id=1655></a>        <a href="../h_src/58191596.htm" class="macro">op_orderI</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58193092.htm" class="macro">l_gei</a>, <a href="../h_src/57538920.htm" class="macro">luai_numge</a>, 1, <a href="../h_src/57499480.htm" class="variable">TM_LE</a>);
<a id=1656></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1658></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TEST) {
<a id=1659></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58360228.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1660></a>        int <a href="../h_src/58360092.htm" class="localvar">cond</a> = !<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58360228.htm" class="localvar">ra</a>));
<a id=1661></a>        <a href="../h_src/58189692.htm" class="macro">docondjump</a>();
<a id=1662></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1664></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TESTSET) {
<a id=1665></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58359820.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1666></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58359684.htm" class="localvar">rb</a> = <a href="../h_src/58191188.htm" class="macro">vRB</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1667></a>        if (<a href="../h_src/57529400.htm" class="macro">l_isfalse</a>(<a href="../h_src/58359684.htm" class="localvar">rb</a>) == <a href="../h_src/57692848.htm" class="macro">GETARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>))
<a id=1668></a>          <a href="../h_src/58187516.htm" class="localvar">pc</a>++;
        else {
<a id=1670></a>          <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58359820.htm" class="localvar">ra</a>, <a href="../h_src/58359684.htm" class="localvar">rb</a>);
<a id=1671></a>          <a href="../h_src/58189828.htm" class="macro">donextjump</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
        }
<a id=1673></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1675></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CALL) {
<a id=1676></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58359140.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1677></a>        <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/58359004.htm" class="localvar">newci</a>;
<a id=1678></a>        int <a href="../h_src/58358868.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1679></a>        int <a href="../h_src/58358732.htm" class="localvar">nresults</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) - 1;
<a id=1680></a>        if (<a href="../h_src/58358868.htm" class="localvar">b</a> != 0)  <a  class="comments">/* fixed number of arguments? */</a>
<a id=1681></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58359140.htm" class="localvar">ra</a> + <a href="../h_src/58358868.htm" class="localvar">b</a>;  <a  class="comments">/* top signals number of arguments */</a>
<a id=1682></a>        <a  class="comments">/* else previous instruction set top */</a>
<a id=1683></a>        <a href="../h_src/58189556.htm" class="macro">savepc</a>(L);  <a  class="comments">/* in case of errors */</a>
<a id=1684></a>        if ((<a href="../h_src/58359004.htm" class="localvar">newci</a> = <a href="../h_src/57633308.htm" class="function">luaD_precall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58359140.htm" class="localvar">ra</a>, <a href="../h_src/58358732.htm" class="localvar">nresults</a>)) == NULL)
<a id=1685></a>          <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* C call; nothing else to be done */</a>
<a id=1686></a>        else {  <a  class="comments">/* Lua call: run function in this same C frame */</a>
<a id=1687></a>          <a href="../h_src/58188060.htm" class="localvar">ci</a> = <a href="../h_src/58359004.htm" class="localvar">newci</a>;
          goto startfunc;
        }
<a id=1690></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1692></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TAILCALL) {
<a id=1693></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58358596.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1694></a>        int <a href="../h_src/58358460.htm" class="localvar">b</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* number of arguments + 1 (function) */</a>
<a id=1695></a>        int <a href="../h_src/58358324.htm" class="localvar">n</a>;  <a  class="comments">/* number of results when calling a C function */</a>
<a id=1696></a>        int <a href="../h_src/58358188.htm" class="localvar">nparams1</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1697></a>        <a  class="comments">/* delta is virtual 'func' - real 'func' (vararg functions) */</a>
<a id=1698></a>        int <a href="../h_src/58358052.htm" class="localvar">delta</a> = (<a href="../h_src/58358188.htm" class="localvar">nparams1</a>) ? <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57650988.htm" class="variable">nextraargs</a> + <a href="../h_src/58358188.htm" class="localvar">nparams1</a> : 0;
<a id=1699></a>        if (<a href="../h_src/58358460.htm" class="localvar">b</a> != 0)
<a id=1700></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58358596.htm" class="localvar">ra</a> + <a href="../h_src/58358460.htm" class="localvar">b</a>;
<a id=1701></a>        else  <a  class="comments">/* previous instruction set top */</a>
<a id=1702></a>          <a href="../h_src/58358460.htm" class="localvar">b</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/58358596.htm" class="localvar">ra</a>);
<a id=1703></a>        <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* several calls here can raise errors */</a>
<a id=1704></a>        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {
<a id=1705></a>          <a href="../h_src/57630452.htm" class="function">luaF_closeupval</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58187652.htm" class="localvar">base</a>);  <a  class="comments">/* close upvalues from current call */</a>
<a id=1706></a>          <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(L-&gt;tbclist.p &lt; base);  <a  class="comments">/* no pending tbc variables */</a>
<a id=1707></a>          <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(base == ci-&gt;func.p + 1);
        }
<a id=1709></a>        if ((<a href="../h_src/58358324.htm" class="localvar">n</a> = <a href="../h_src/57633376.htm" class="function">luaD_pretailcall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58358596.htm" class="localvar">ra</a>, <a href="../h_src/58358460.htm" class="localvar">b</a>, <a href="../h_src/58358052.htm" class="localvar">delta</a>)) &lt; 0)  <a  class="comments">/* Lua function? */</a>
<a id=1710></a>          goto startfunc;  <a  class="comments">/* execute the callee */</a>
<a id=1711></a>        else {  <a  class="comments">/* C function? */</a>
<a id=1712></a>          <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/58358052.htm" class="localvar">delta</a>;  <a  class="comments">/* restore 'func' (if vararg) */</a>
<a id=1713></a>          <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58358324.htm" class="localvar">n</a>);  <a  class="comments">/* finish caller */</a>
<a id=1714></a>          <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* 'luaD_poscall' can change hooks */</a>
<a id=1715></a>          goto ret;  <a  class="comments">/* caller returns after the tail call */</a>
        }
      }
<a id=1718></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_RETURN) {
<a id=1719></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58357916.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1720></a>        int <a href="../h_src/58357780.htm" class="localvar">n</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) - 1;  <a  class="comments">/* number of results */</a>
<a id=1721></a>        int <a href="../h_src/58357644.htm" class="localvar">nparams1</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1722></a>        if (<a href="../h_src/58357780.htm" class="localvar">n</a> &lt; 0)  <a  class="comments">/* not fixed? */</a>
<a id=1723></a>          <a href="../h_src/58357780.htm" class="localvar">n</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/58357916.htm" class="localvar">ra</a>);  <a  class="comments">/* get what is available */</a>
<a id=1724></a>        <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
<a id=1725></a>        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {  <a  class="comments">/* may there be open upvalues? */</a>
<a id=1726></a>          <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650036.htm" class="variable">nres</a> = <a href="../h_src/58357780.htm" class="localvar">n</a>;  <a  class="comments">/* save number of returns */</a>
<a id=1727></a>          if (<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> &lt; <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>)
<a id=1728></a>            <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
<a id=1729></a>          <a href="../h_src/57630384.htm" class="function">luaF_close</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58187652.htm" class="localvar">base</a>, <a href="../h_src/57631132.htm" class="macro">CLOSEKTOP</a>, 1);
<a id=1730></a>          <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
<a id=1731></a>          <a href="../h_src/58190100.htm" class="macro">updatestack</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
        }
<a id=1733></a>        if (<a href="../h_src/58357644.htm" class="localvar">nparams1</a>)  <a  class="comments">/* vararg function? */</a>
<a id=1734></a>          <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57650988.htm" class="variable">nextraargs</a> + <a href="../h_src/58357644.htm" class="localvar">nparams1</a>;
<a id=1735></a>        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58357916.htm" class="localvar">ra</a> + <a href="../h_src/58357780.htm" class="localvar">n</a>;  <a  class="comments">/* set call for 'luaD_poscall' */</a>
<a id=1736></a>        <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58357780.htm" class="localvar">n</a>);
<a id=1737></a>        <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* 'luaD_poscall' can change hooks */</a>
        goto ret;
      }
<a id=1740></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_RETURN0) {
<a id=1741></a>        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>)) {
<a id=1742></a>          <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58357508.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1743></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58357508.htm" class="localvar">ra</a>;
<a id=1744></a>          <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
<a id=1745></a>          <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, 0);  <a  class="comments">/* no hurry... */</a>
<a id=1746></a>          <a href="../h_src/58187380.htm" class="localvar">trap</a> = 1;
        }
<a id=1748></a>        else {  <a  class="comments">/* do the 'poscall' here */</a>
<a id=1749></a>          int <a href="../h_src/58357372.htm" class="localvar">nres</a>;
<a id=1750></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>;  <a  class="comments">/* back to caller */</a>
<a id=1751></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58187652.htm" class="localvar">base</a> - 1;
<a id=1752></a>          for (<a href="../h_src/58357372.htm" class="localvar">nres</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649492.htm" class="variable">nresults</a>; <a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58357372.htm" class="localvar">nres</a> &gt; 0); <a href="../h_src/58357372.htm" class="localvar">nres</a>--)
<a id=1753></a>            <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++));  <a  class="comments">/* all results are nil */</a>
        }
        goto ret;
      }
<a id=1757></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_RETURN1) {
<a id=1758></a>        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>)) {
<a id=1759></a>          <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58357236.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1760></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58357236.htm" class="localvar">ra</a> + 1;
<a id=1761></a>          <a href="../h_src/58189556.htm" class="macro">savepc</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);
<a id=1762></a>          <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, 1);  <a  class="comments">/* no hurry... */</a>
<a id=1763></a>          <a href="../h_src/58187380.htm" class="localvar">trap</a> = 1;
        }
<a id=1765></a>        else {  <a  class="comments">/* do the 'poscall' here */</a>
<a id=1766></a>          int <a href="../h_src/58357100.htm" class="localvar">nres</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649492.htm" class="variable">nresults</a>;
<a id=1767></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>;  <a  class="comments">/* back to caller */</a>
<a id=1768></a>          if (<a href="../h_src/58357100.htm" class="localvar">nres</a> == 0)
<a id=1769></a>            <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58187652.htm" class="localvar">base</a> - 1;  <a  class="comments">/* asked for no results */</a>
          else {
<a id=1771></a>            <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58356964.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1772></a>            <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58187652.htm" class="localvar">base</a> - 1, <a href="../h_src/58356964.htm" class="localvar">ra</a>);  <a  class="comments">/* at least this result */</a>
<a id=1773></a>            <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58187652.htm" class="localvar">base</a>;
<a id=1774></a>            for (; <a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58357100.htm" class="localvar">nres</a> &gt; 1); <a href="../h_src/58357100.htm" class="localvar">nres</a>--)
<a id=1775></a>              <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++));  <a  class="comments">/* complete missing results */</a>
          }
        }
<a id=1778></a>       ret:  <a  class="comments">/* return from a Lua function */</a>
<a id=1779></a>        if (<a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57649084.htm" class="macro">CIST_FRESH</a>)
<a id=1780></a>          return;  <a  class="comments">/* end this frame */</a>
        else {
<a id=1782></a>          <a href="../h_src/58188060.htm" class="localvar">ci</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>;
<a id=1783></a>          goto returning;  <a  class="comments">/* continue running caller in this frame */</a>
        }
      }
<a id=1786></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_FORLOOP) {
<a id=1787></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58356556.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1788></a>        if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 2))) {  <a  class="comments">/* integer loop? */</a>
<a id=1789></a>          <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/58356420.htm" class="localvar">count</a> = <a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(<a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 1)));
<a id=1790></a>          if (<a href="../h_src/58356420.htm" class="localvar">count</a> &gt; 0) {  <a  class="comments">/* still more iterations? */</a>
<a id=1791></a>            <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58356284.htm" class="localvar">step</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 2));
<a id=1792></a>            <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/58356148.htm" class="localvar">idx</a> = <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a>));  <a  class="comments">/* internal index */</a>
<a id=1793></a>            <a href="../h_src/57525320.htm" class="macro">chgivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 1), <a href="../h_src/58356420.htm" class="localvar">count</a> - 1);  <a  class="comments">/* update counter */</a>
<a id=1794></a>            <a href="../h_src/58356148.htm" class="localvar">idx</a> = <a href="../h_src/57612568.htm" class="macro">intop</a>(+, <a href="../h_src/58356148.htm" class="localvar">idx</a>, <a href="../h_src/58356284.htm" class="localvar">step</a>);  <a  class="comments">/* add step to index */</a>
<a id=1795></a>            <a href="../h_src/57525320.htm" class="macro">chgivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a>), <a href="../h_src/58356148.htm" class="localvar">idx</a>);  <a  class="comments">/* update internal index */</a>
<a id=1796></a>            <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a> + 3), <a href="../h_src/58356148.htm" class="localvar">idx</a>);  <a  class="comments">/* and control variable */</a>
<a id=1797></a>            <a href="../h_src/58187516.htm" class="localvar">pc</a> -= <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* jump back */</a>
          }
        }
<a id=1800></a>        else if (<a href="../h_src/58215124.htm" class="function">floatforloop</a>(<a href="../h_src/58356556.htm" class="localvar">ra</a>))  <a  class="comments">/* float loop */</a>
<a id=1801></a>          <a href="../h_src/58187516.htm" class="localvar">pc</a> -= <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* jump back */</a>
<a id=1802></a>        <a href="../h_src/58190372.htm" class="macro">updatetrap</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* allows a signal to break the loop */</a>
<a id=1803></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1805></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_FORPREP) {
<a id=1806></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355604.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1807></a>        <a href="../h_src/58189420.htm" class="macro">savestate</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* in case of errors */</a>
<a id=1808></a>        if (<a href="../h_src/58057732.htm" class="function">forprep</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355604.htm" class="localvar">ra</a>))
<a id=1809></a>          <a href="../h_src/58187516.htm" class="localvar">pc</a> += <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) + 1;  <a  class="comments">/* skip the loop */</a>
<a id=1810></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1812></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TFORPREP) {
<a id=1813></a>       <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355468.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1814></a>        <a  class="comments">/* create to-be-closed upvalue (if needed) */</a>
<a id=1815></a>        <a href="../h_src/58189012.htm" class="macro">halfProtect</a>(<a href="../h_src/57630520.htm" class="function">luaF_newtbcupval</a><a href="../h_src/57650308.htm" class="variable">u</a>pval(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355468.htm" class="localvar">ra</a> + 3));
<a id=1816></a>        <a href="../h_src/58187516.htm" class="localvar">pc</a> += <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1817></a>        <a href="../h_src/58186564.htm" class="localvar">i</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a>++);  <a  class="comments">/* go to next instruction */</a>
<a id=1818></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(i) == OP_TFORCALL &amp;&amp; ra == <a href="../h_src/58191460.htm" class="macro">RA</a>(i));
        goto l_tforcall;
      }
<a id=1821></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TFORCALL) {
       l_tforcall: {
<a id=1823></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355332.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1824></a>        <a  class="comments">/* 'ra' has the iterator function, 'ra + 1' has the state,</a>
<a id=1825></a><a  class="comments">           'ra + 2' has the control variable, and 'ra + 3' has the</a>
<a id=1826></a><a  class="comments">           to-be-closed variable. The call will use the stack after</a>
<a id=1827></a><a  class="comments">           these values (starting at 'ra + 4')</a>
<a id=1828></a><a  class="comments">        */</a>
<a id=1829></a>        <a  class="comments">/* push function, state, and control variable */</a>
<a id=1830></a>        <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/58355332.htm" class="localvar">ra</a> + 4, <a href="../h_src/58355332.htm" class="localvar">ra</a>, 3 * sizeof(*<a href="../h_src/58355332.htm" class="localvar">ra</a>));
<a id=1831></a>        <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58355332.htm" class="localvar">ra</a> + 4 + 3;
<a id=1832></a>        <a href="../h_src/58189148.htm" class="macro">ProtectNT</a>(<a href="../h_src/57633240.htm" class="function">luaD_call</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355332.htm" class="localvar">ra</a> + 4, <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)));  <a  class="comments">/* do the call */</a>
<a id=1833></a>        <a href="../h_src/58190100.htm" class="macro">updatestack</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* stack may have changed */</a>
<a id=1834></a>        <a href="../h_src/58186564.htm" class="localvar">i</a> = *(<a href="../h_src/58187516.htm" class="localvar">pc</a>++);  <a  class="comments">/* go to next instruction */</a>
<a id=1835></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694752.htm" class="macro">GET_OPCODE</a>(i) == OP_TFORLOOP &amp;&amp; ra == <a href="../h_src/58191460.htm" class="macro">RA</a>(i));
        goto l_tforloop;
      }}
<a id=1838></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_TFORLOOP) {
       l_tforloop: {
<a id=1840></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58355196.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1841></a>        if (!<a href="../h_src/57531168.htm" class="macro">ttisnil</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58355196.htm" class="localvar">ra</a> + 4))) {  <a  class="comments">/* continue loop? */</a>
<a id=1842></a>          <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58355196.htm" class="localvar">ra</a> + 2, <a href="../h_src/58355196.htm" class="localvar">ra</a> + 4);  <a  class="comments">/* save control variable */</a>
<a id=1843></a>          <a href="../h_src/58187516.htm" class="localvar">pc</a> -= <a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);  <a  class="comments">/* jump back */</a>
        }
<a id=1845></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }}
<a id=1847></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_SETLIST) {
<a id=1848></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58354788.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1849></a>        int <a href="../h_src/58354652.htm" class="localvar">n</a> = <a href="../h_src/57693800.htm" class="macro">GETARG_B</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1850></a>        unsigned int <a href="../h_src/58354516.htm" class="localvar">last</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1851></a>        <a href="../h_src/57504308.htm" class="type">Table</a> *<a href="../h_src/58354380.htm" class="localvar">h</a> = <a href="../h_src/57507164.htm" class="macro">hvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58354788.htm" class="localvar">ra</a>));
<a id=1852></a>        if (<a href="../h_src/58354652.htm" class="localvar">n</a> == 0)
<a id=1853></a>          <a href="../h_src/58354652.htm" class="localvar">n</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/58354788.htm" class="localvar">ra</a>) - 1;  <a  class="comments">/* get up to the top */</a>
        else
<a id=1855></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/58188060.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;  <a  class="comments">/* correct top in case of emergency GC */</a>
<a id=1856></a>        <a href="../h_src/58354516.htm" class="localvar">last</a> += <a href="../h_src/58354652.htm" class="localvar">n</a>;
<a id=1857></a>        if (<a href="../h_src/57692984.htm" class="macro">TESTARG_k</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)) {
<a id=1858></a>          <a href="../h_src/58354516.htm" class="localvar">last</a> += <a href="../h_src/57692304.htm" class="macro">GETARG_Ax</a>(*<a href="../h_src/58187516.htm" class="localvar">pc</a>) * (<a href="../h_src/57695568.htm" class="macro">MAXARG_C</a> + 1);
<a id=1859></a>          <a href="../h_src/58187516.htm" class="localvar">pc</a>++;
        }
<a id=1861></a>        if (<a href="../h_src/58354516.htm" class="localvar">last</a> &gt; <a href="../h_src/57616172.htm" class="function">luaH_realasize</a>(<a href="../h_src/58354380.htm" class="localvar">h</a>))  <a  class="comments">/* needs more space? */</a>
<a id=1862></a>          <a href="../h_src/57616376.htm" class="function">luaH_resizearray</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58354380.htm" class="localvar">h</a>, <a href="../h_src/58354516.htm" class="localvar">last</a>);  <a  class="comments">/* preallocate it at once */</a>
<a id=1863></a>        for (; <a href="../h_src/58354652.htm" class="localvar">n</a> &gt; 0; <a href="../h_src/58354652.htm" class="localvar">n</a>--) {
<a id=1864></a>          <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/58354244.htm" class="localvar">val</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/58354788.htm" class="localvar">ra</a> + <a href="../h_src/58354652.htm" class="localvar">n</a>);
<a id=1865></a>          <a href="../h_src/57533004.htm" class="macro">setobj2t</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, &amp;<a href="../h_src/58354380.htm" class="localvar">h</a>-&gt;<a href="../h_src/57504716.htm" class="variable">array</a>[<a href="../h_src/58354516.htm" class="localvar">last</a> - 1], <a href="../h_src/58354244.htm" class="localvar">val</a>);
<a id=1866></a>          <a href="../h_src/58354516.htm" class="localvar">last</a>--;
<a id=1867></a>          <a href="../h_src/57621068.htm" class="macro">luaC_barrierback</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57638884.htm" class="macro">obj2gco</a>(<a href="../h_src/58354380.htm" class="localvar">h</a>), <a href="../h_src/58354244.htm" class="localvar">val</a>);
        }
<a id=1869></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1871></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_CLOSURE) {
<a id=1872></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58353836.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1873></a>        <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58353700.htm" class="localvar">p</a> = <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>-&gt;<a href="../h_src/57514576.htm" class="variable">p</a>[<a href="../h_src/57692576.htm" class="macro">GETARG_Bx</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>)];
<a id=1874></a>        <a href="../h_src/58189012.htm" class="macro">halfProtect</a>(<a href="../h_src/58198124.htm" class="function">pushclosure</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58353700.htm" class="localvar">p</a>, <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508048.htm" class="variable">upvals</a>, <a href="../h_src/58187652.htm" class="localvar">base</a>, <a href="../h_src/58353836.htm" class="localvar">ra</a>));
<a id=1875></a>        <a href="../h_src/58188876.htm" class="macro">checkGC</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58353836.htm" class="localvar">ra</a> + 1);
<a id=1876></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1878></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_VARARG) {
<a id=1879></a>        <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/58353564.htm" class="localvar">ra</a> = <a href="../h_src/58191460.htm" class="macro">RA</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>);
<a id=1880></a>        int <a href="../h_src/58353428.htm" class="localvar">n</a> = <a href="../h_src/57693392.htm" class="macro">GETARG_C</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>) - 1;  <a  class="comments">/* required results */</a>
<a id=1881></a>        <a href="../h_src/58189284.htm" class="macro">Protect</a>(<a href="../h_src/57497304.htm" class="function">luaT_getvarargs</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58353564.htm" class="localvar">ra</a>, <a href="../h_src/58353428.htm" class="localvar">n</a>));
<a id=1882></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1884></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_VARARGPREP) {
<a id=1885></a>        <a href="../h_src/58189148.htm" class="macro">ProtectNT</a>(<a href="../h_src/57497372.htm" class="function">luaT_adjustvarargs</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/58186564.htm" class="localvar">i</a>), <a href="../h_src/58188060.htm" class="localvar">ci</a>, <a href="../h_src/58187924.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>));
<a id=1886></a>        if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58187380.htm" class="localvar">trap</a>)) {  <a  class="comments">/* previous &quot;Protect&quot; updated trap */</a>
<a id=1887></a>          <a href="../h_src/57633444.htm" class="function">luaD_hookcall</a>(<a href="../h_src/58188196.htm" class="localvar">L</a>, <a href="../h_src/58188060.htm" class="localvar">ci</a>);
<a id=1888></a>          <a href="../h_src/58188196.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641468.htm" class="variable">oldpc</a> = 1;  <a  class="comments">/* next opcode will be seen as a &quot;new&quot; line */</a>
        }
<a id=1890></a>        <a href="../h_src/58190236.htm" class="macro">updatebase</a>(<a href="../h_src/58188060.htm" class="localvar">ci</a>);  <a  class="comments">/* function has new base after adjustment */</a><a href="../h_src/58187652.htm" class="localvar">base</a> after adjustment */
<a id=1891></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
<a id=1893></a>      <a href="../h_src/58187040.htm" class="macro">vmcase</a>(OP_EXTRAARG) {
<a id=1894></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0);
<a id=1895></a>        <a href="../h_src/58186904.htm" class="macro">vmbreak</a>;
      }
    }
  }
}

<a id=1901></a><a  class="comments">/* }================================================================== */</a>
</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

