<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lparser.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/58057080.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/58057080.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/58057080.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/58057080.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/58057080.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/58057080.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/58057080.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/58057080.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/58057080.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lparser.c $</a>
<a id=3></a><a  class="comments">** Lua Parser</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/58057012.htm" class="macro">lparser_c</a>
<a id=8></a>#define <a href="../h_src/58056876.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;limits.h&gt;
#include &lt;string.h&gt;

<a id=16></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=18></a>#include &quot;<a href="../h_src/57706380.htm" class="file">lcode.h</a>&quot;
<a id=19></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=20></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=21></a>#include &quot;<a href="../h_src/57632424.htm" class="file">lfunc.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57706040.htm" class="file">llex.h</a>&quot;
<a id=23></a>#include &quot;<a href="../h_src/57496896.htm" class="file">lmem.h</a>&quot;
<a id=24></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=25></a>#include &quot;<a href="../h_src/57699512.htm" class="file">lopcodes.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57683056.htm" class="file">lparser.h</a>&quot;
<a id=27></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;
<a id=28></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;
<a id=29></a>#include &quot;<a href="../h_src/57618348.htm" class="file">ltable.h</a>&quot;



<a id=33></a><a  class="comments">/* maximum number of local variables per function (must be smaller</a>
<a id=34></a><a  class="comments">   than 250, due to the bytecode format) */</a>
<a id=35></a>#define <a href="../h_src/58056740.htm" class="macro">MAXVARS</a>		200


<a id=38></a>#define <a href="../h_src/58056604.htm" class="macro">hasmultret</a>(k)		((k) == VCALL || (k) == VVARARG)


<a id=41></a><a  class="comments">/* because all strings are unified by the scanner, the parser</a>
<a id=42></a><a  class="comments">   can use pointer equality for string equality */</a>
<a id=43></a>#define <a href="../h_src/58056468.htm" class="macro">eqstr</a>(a,b)	((a) == (b))


<a id=46></a><a  class="comments">/*</a>
<a id=47></a><a  class="comments">** nodes for block list (list of active blocks)</a>
<a id=48></a><a  class="comments">*/</a>
<a id=49></a>typedef struct <a href="../h_src/57676188.htm" class="class">BlockCnt</a> {
<a id=50></a>  struct <a href="../h_src/57676188.htm" class="class">BlockCnt</a> *<a href="../h_src/58056332.htm" class="variable">previous</a>;  <a  class="comments">/* chain */</a>
<a id=51></a>  int <a href="../h_src/58056264.htm" class="variable">firstlabel</a>;  <a  class="comments">/* index of first label in this block */</a>
<a id=52></a>  int <a href="../h_src/58056196.htm" class="variable">firstgoto</a>;  <a  class="comments">/* index of first pending goto in this block */</a>
<a id=53></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/58056128.htm" class="variable">nactvar</a>;  <a  class="comments">/* # active locals outside the block */</a>
<a id=54></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/58056060.htm" class="variable">upval</a>;  <a  class="comments">/* true if some variable in the block is an upvalue */</a>
<a id=55></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/58055992.htm" class="variable">isloop</a>;  <a  class="comments">/* true if 'block' is a loop */</a>
<a id=56></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/58055924.htm" class="variable">insidetbc</a>;  <a  class="comments">/* true if inside the scope of a to-be-closed var. */</a>
<a id=57></a>} <a href="../h_src/58055856.htm" class="type">BlockCnt</a>;



<a id=61></a><a  class="comments">/*</a>
<a id=62></a><a  class="comments">** prototypes for recursive non-terminal functions</a>
<a id=63></a><a  class="comments">*/</a>
<a id=64></a>static void <a href="../h_src/58055788.htm" class="function">statement</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *ls);
<a id=65></a>static void <a href="../h_src/58055652.htm" class="function">expr</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *ls, <a href="../h_src/57679384.htm" class="type">expdesc</a> *v);


<a id=68></a>static <a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/58055516.htm" class="function">error_expected</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58055380.htm" class="localvar">ls</a>, int <a href="../h_src/58055244.htm" class="localvar">token</a>) {
<a id=69></a>  <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/58055380.htm" class="localvar">ls</a>,
<a id=70></a>      <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58055380.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &quot;%s expected&quot;, <a href="../h_src/57699580.htm" class="function">luaX_token2str</a>(<a href="../h_src/58055380.htm" class="localvar">ls</a>, <a href="../h_src/58055244.htm" class="localvar">token</a>)));
}


<a id=74></a>static <a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/58055108.htm" class="function">errorlimit</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58054972.htm" class="localvar">fs</a>, int <a href="../h_src/58054836.htm" class="localvar">limit</a>, const char *<a href="../h_src/58054700.htm" class="localvar">what</a>) {
<a id=75></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58054564.htm" class="localvar">L</a> = <a href="../h_src/58054972.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>;
<a id=76></a>  const char *<a href="../h_src/58054428.htm" class="localvar">msg</a>;
<a id=77></a>  int <a href="../h_src/58054292.htm" class="localvar">line</a> = <a href="../h_src/58054972.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515256.htm" class="variable">linedefined</a>;
<a id=78></a>  const char *<a href="../h_src/58054156.htm" class="localvar">where</a> = (<a href="../h_src/58054292.htm" class="localvar">line</a> == 0)
                      ? &quot;main function&quot;
<a id=80></a>                      : <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58054564.htm" class="localvar">L</a>, &quot;function at line %d&quot;, <a href="../h_src/58054292.htm" class="localvar">line</a>);
<a id=81></a>  <a href="../h_src/58054428.htm" class="localvar">msg</a> = <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58054564.htm" class="localvar">L</a>, &quot;too many %s (limit is %d) in %s&quot;,
<a id=82></a>                             <a href="../h_src/58054700.htm" class="localvar">what</a>, <a href="../h_src/58054836.htm" class="localvar">limit</a>, <a href="../h_src/58054156.htm" class="localvar">where</a>);
<a id=83></a>  <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/58054972.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>, <a href="../h_src/58054428.htm" class="localvar">msg</a>);
}


<a id=87></a>static void <a href="../h_src/58054020.htm" class="function">checklimit</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58053884.htm" class="localvar">fs</a>, int <a href="../h_src/58053748.htm" class="localvar">v</a>, int <a href="../h_src/58053612.htm" class="localvar">l</a>, const char *<a href="../h_src/58053476.htm" class="localvar">what</a>) {
<a id=88></a>  if (<a href="../h_src/58053748.htm" class="localvar">v</a> &gt; <a href="../h_src/58053612.htm" class="localvar">l</a>) <a href="../h_src/58055108.htm" class="function">errorlimit</a>(<a href="../h_src/58053884.htm" class="localvar">fs</a>, <a href="../h_src/58053612.htm" class="localvar">l</a>, <a href="../h_src/58053476.htm" class="localvar">what</a>);
}


<a id=92></a><a  class="comments">/*</a>
<a id=93></a><a  class="comments">** Test whether next token is 'c'; if so, skip it.</a>
<a id=94></a><a  class="comments">*/</a>
<a id=95></a>static int <a href="../h_src/58053340.htm" class="function">testnext</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58053204.htm" class="localvar">ls</a>, int <a href="../h_src/58053068.htm" class="localvar">c</a>) {
<a id=96></a>  if (<a href="../h_src/58053204.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/58053068.htm" class="localvar">c</a>) {
<a id=97></a>    <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58053204.htm" class="localvar">ls</a>);
    return 1;
  }
  else return 0;
}


<a id=104></a><a  class="comments">/*</a>
<a id=105></a><a  class="comments">** Check that next token is 'c'.</a>
<a id=106></a><a  class="comments">*/</a>
<a id=107></a>static void <a href="../h_src/58052932.htm" class="function">check</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58052796.htm" class="localvar">ls</a>, int <a href="../h_src/58052660.htm" class="localvar">c</a>) {
<a id=108></a>  if (<a href="../h_src/58052796.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> != <a href="../h_src/58052660.htm" class="localvar">c</a>)
<a id=109></a>    <a href="../h_src/58055516.htm" class="function">error_expected</a>(<a href="../h_src/58052796.htm" class="localvar">ls</a>, <a href="../h_src/58052660.htm" class="localvar">c</a>);
}


<a id=113></a><a  class="comments">/*</a>
<a id=114></a><a  class="comments">** Check that next token is 'c' and skip it.</a>
<a id=115></a><a  class="comments">*/</a>
<a id=116></a>static void <a href="../h_src/58052524.htm" class="function">checknext</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58052388.htm" class="localvar">ls</a>, int <a href="../h_src/58052252.htm" class="localvar">c</a>) {
<a id=117></a>  <a href="../h_src/58052932.htm" class="function">check</a>(<a href="../h_src/58052388.htm" class="localvar">ls</a>, <a href="../h_src/58052252.htm" class="localvar">c</a>);
<a id=118></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58052388.htm" class="localvar">ls</a>);
}


<a id=122></a>#define <a href="../h_src/58052116.htm" class="macro">check_condition</a>(ls,c,msg)	{ if (!(c)) luaX_syntaxerror(ls, msg); }


<a id=125></a><a  class="comments">/*</a>
<a id=126></a><a  class="comments">** Check that next token is 'what' and skip it. In case of error,</a>
<a id=127></a><a  class="comments">** raise an error that the expected 'what' should match a 'who'</a>
<a id=128></a><a  class="comments">** in line 'where' (if that is not the current line).</a>
<a id=129></a><a  class="comments">*/</a>
<a id=130></a>static void <a href="../h_src/58051980.htm" class="function">check_match</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58051844.htm" class="localvar">ls</a>, int <a href="../h_src/58051708.htm" class="localvar">what</a>, int <a href="../h_src/58051572.htm" class="localvar">who</a>, int <a href="../h_src/58051436.htm" class="localvar">where</a>) {
<a id=131></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(!<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/58051844.htm" class="localvar">ls</a>, <a href="../h_src/58051708.htm" class="localvar">what</a>))) {
<a id=132></a>    if (<a href="../h_src/58051436.htm" class="localvar">where</a> == <a href="../h_src/58051844.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>)  <a  class="comments">/* all in the same line? */</a>
<a id=133></a>      <a href="../h_src/58055516.htm" class="function">error_expected</a>(<a href="../h_src/58051844.htm" class="localvar">ls</a>, <a href="../h_src/58051708.htm" class="localvar">what</a>);  <a  class="comments">/* do not need a complex message */</a>
    else {
<a id=135></a>      <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/58051844.htm" class="localvar">ls</a>, <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58051844.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>,
             &quot;%s expected (to close %s at line %d)&quot;,
<a id=137></a>              <a href="../h_src/57699580.htm" class="function">luaX_token2str</a>(<a href="../h_src/58051844.htm" class="localvar">ls</a>, <a href="../h_src/58051708.htm" class="localvar">what</a>), <a href="../h_src/57699580.htm" class="function">luaX_token2str</a>(<a href="../h_src/58051844.htm" class="localvar">ls</a>, <a href="../h_src/58051572.htm" class="localvar">who</a>), <a href="../h_src/58051436.htm" class="localvar">where</a>));
    }
  }
}


<a id=143></a>static <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58051300.htm" class="function">str_checkname</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58051164.htm" class="localvar">ls</a>) {
<a id=144></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58051028.htm" class="localvar">ts</a>;
<a id=145></a>  <a href="../h_src/58052932.htm" class="function">check</a>(<a href="../h_src/58051164.htm" class="localvar">ls</a>, <a href="../h_src/57702912.htm" class="variable">TK_NAME</a>);
<a id=146></a>  <a href="../h_src/58051028.htm" class="localvar">ts</a> = <a href="../h_src/58051164.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701892.htm" class="variable">seminfo</a>.<a href="../h_src/57702300.htm" class="variable">ts</a>;
<a id=147></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58051164.htm" class="localvar">ls</a>);
<a id=148></a>  return <a href="../h_src/58051028.htm" class="localvar">ts</a>;
}


<a id=152></a>static void <a href="../h_src/58050892.htm" class="function">init_exp</a> (<a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58050756.htm" class="localvar">e</a>, <a href="../h_src/57681220.htm" class="type">expkind</a> <a href="../h_src/58050620.htm" class="localvar">k</a>, int <a href="../h_src/58050484.htm" class="localvar">i</a>) {
<a id=153></a>  <a href="../h_src/58050756.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a> = <a href="../h_src/58050756.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;
<a id=154></a>  <a href="../h_src/58050756.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/58050620.htm" class="localvar">k</a>;
<a id=155></a>  <a href="../h_src/58050756.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a> = <a href="../h_src/58050484.htm" class="localvar">i</a>;
}


<a id=159></a>static void <a href="../h_src/58050348.htm" class="function">codestring</a> (<a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58050212.htm" class="localvar">e</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58050076.htm" class="localvar">s</a>) {
<a id=160></a>  <a href="../h_src/58050212.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a> = <a href="../h_src/58050212.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;
<a id=161></a>  <a href="../h_src/58050212.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682240.htm" class="variable">VKSTR</a>;
<a id=162></a>  <a href="../h_src/58050212.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680472.htm" class="variable">strval</a> = <a href="../h_src/58050076.htm" class="localvar">s</a>;
}


<a id=166></a>static void <a href="../h_src/58049940.htm" class="function">codename</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58049804.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58049668.htm" class="localvar">e</a>) {
<a id=167></a>  <a href="../h_src/58050348.htm" class="function">codestring</a>(<a href="../h_src/58049668.htm" class="localvar">e</a>, <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/58049804.htm" class="localvar">ls</a>));
}


<a id=171></a><a  class="comments">/*</a>
<a id=172></a><a  class="comments">** Register a new local variable in the active 'Proto' (for debug</a>
<a id=173></a><a  class="comments">** information).</a>
<a id=174></a><a  class="comments">*/</a>
<a id=175></a>static int <a href="../h_src/58049532.htm" class="function">registerlocalvar</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58049396.htm" class="localvar">ls</a>, <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58049260.htm" class="localvar">fs</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58049124.htm" class="localvar">varname</a>) {
<a id=176></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58048988.htm" class="localvar">f</a> = <a href="../h_src/58049260.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=177></a>  int <a href="../h_src/58048852.htm" class="localvar">oldsize</a> = <a href="../h_src/58048988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515392.htm" class="variable">sizelocvars</a>;
<a id=178></a>  <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/58049396.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58048988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514032.htm" class="variable">locvars</a>, <a href="../h_src/58049260.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674964.htm" class="variable">ndebugvars</a>, <a href="../h_src/58048988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515392.htm" class="variable">sizelocvars</a>,
<a id=179></a>                  <a href="../h_src/57516684.htm" class="type">LocVar</a>, SHRT_MAX, &quot;local variables&quot;);
<a id=180></a>  while (<a href="../h_src/58048852.htm" class="localvar">oldsize</a> &lt; <a href="../h_src/58048988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515392.htm" class="variable">sizelocvars</a>)
<a id=181></a>    <a href="../h_src/58048988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514032.htm" class="variable">locvars</a>[<a href="../h_src/58048852.htm" class="localvar">oldsize</a>++].<a href="../h_src/57516888.htm" class="variable">varname</a> = NULL;
<a id=182></a>  <a href="../h_src/58048988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514032.htm" class="variable">locvars</a>[<a href="../h_src/58049260.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674964.htm" class="variable">ndebugvars</a>].<a href="../h_src/57516888.htm" class="variable">varname</a> = <a href="../h_src/58049124.htm" class="localvar">varname</a>;
<a id=183></a>  <a href="../h_src/58048988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514032.htm" class="variable">locvars</a>[<a href="../h_src/58049260.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674964.htm" class="variable">ndebugvars</a>].<a href="../h_src/57516820.htm" class="variable">startpc</a> = <a href="../h_src/58049260.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>;
<a id=184></a>  <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/58049396.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58048988.htm" class="localvar">f</a>, <a href="../h_src/58049124.htm" class="localvar">varname</a>);
<a id=185></a>  return <a href="../h_src/58049260.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674964.htm" class="variable">ndebugvars</a>++;
}


<a id=189></a><a  class="comments">/*</a>
<a id=190></a><a  class="comments">** Create a new local variable with the given 'name'. Return its index</a>
<a id=191></a><a  class="comments">** in the function.</a>
<a id=192></a><a  class="comments">*/</a>
<a id=193></a>static int <a href="../h_src/58048716.htm" class="function">new_localvar</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58048580.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58048444.htm" class="localvar">name</a>) {
<a id=194></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58048308.htm" class="localvar">L</a> = <a href="../h_src/58048580.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>;
<a id=195></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58048172.htm" class="localvar">fs</a> = <a href="../h_src/58048580.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=196></a>  <a href="../h_src/57676256.htm" class="type">Dyndata</a> *<a href="../h_src/58048036.htm" class="localvar">dyd</a> = <a href="../h_src/58048580.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>;
<a id=197></a>  <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/58047900.htm" class="localvar">var</a>;
<a id=198></a>  <a href="../h_src/58054020.htm" class="function">checklimit</a>(<a href="../h_src/58048172.htm" class="localvar">fs</a>, <a href="../h_src/58048036.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676664.htm" class="variable">n</a> + 1 - <a href="../h_src/58048172.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675100.htm" class="variable">firstlocal</a>,
<a id=199></a>                 <a href="../h_src/58056740.htm" class="macro">MAXVARS</a>, &quot;local variables&quot;);
<a id=200></a>  <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/58048308.htm" class="localvar">L</a>, <a href="../h_src/58048036.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676732.htm" class="variable">arr</a>, <a href="../h_src/58048036.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676664.htm" class="variable">n</a> + 1,
<a id=201></a>                  <a href="../h_src/58048036.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676596.htm" class="variable">size</a>, <a href="../h_src/57677956.htm" class="type">Vardesc</a>, USHRT_MAX, &quot;local variables&quot;);
<a id=202></a>  <a href="../h_src/58047900.htm" class="localvar">var</a> = &amp;<a href="../h_src/58048036.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676732.htm" class="variable">arr</a>[<a href="../h_src/58048036.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676664.htm" class="variable">n</a>++];
<a id=203></a>  <a href="../h_src/58047900.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> = <a href="../h_src/57679316.htm" class="macro">VDKREG</a>;  <a  class="comments">/* default */</a>
<a id=204></a>  <a href="../h_src/58047900.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678228.htm" class="variable">name</a> = <a href="../h_src/58048444.htm" class="localvar">name</a>;
<a id=205></a>  return <a href="../h_src/58048036.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676664.htm" class="variable">n</a> - 1 - <a href="../h_src/58048172.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675100.htm" class="variable">firstlocal</a>;
}

<a id=208></a>#define <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(ls,v) \
    new_localvar(ls,  \
      luaX_newstring(ls, &quot;&quot; v, (sizeof(v)/sizeof(char)) - 1));



<a id=214></a><a  class="comments">/*</a>
<a id=215></a><a  class="comments">** Return the &quot;variable description&quot; (Vardesc) of a given variable.</a>
<a id=216></a><a  class="comments">** (Unless noted otherwise, all variables are referred to by their</a>
<a id=217></a><a  class="comments">** compiler indices.)</a>
<a id=218></a><a  class="comments">*/</a>
<a id=219></a>static <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/58047628.htm" class="function">getlocalvardesc</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58047492.htm" class="localvar">fs</a>, int <a href="../h_src/58047356.htm" class="localvar">vidx</a>) {
<a id=220></a>  return &amp;<a href="../h_src/58047492.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676732.htm" class="variable">arr</a>[<a href="../h_src/58047492.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675100.htm" class="variable">firstlocal</a> + <a href="../h_src/58047356.htm" class="localvar">vidx</a>];
}


<a id=224></a><a  class="comments">/*</a>
<a id=225></a><a  class="comments">** Convert 'nvar', a compiler index level, to its corresponding</a>
<a id=226></a><a  class="comments">** register. For that, search for the highest variable below that level</a>
<a id=227></a><a  class="comments">** that is in a register and uses its register index ('ridx') plus one.</a>
<a id=228></a><a  class="comments">*/</a>
<a id=229></a>static int <a href="../h_src/58047220.htm" class="function">reglevel</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58047084.htm" class="localvar">fs</a>, int <a href="../h_src/58046948.htm" class="localvar">nvar</a>) {
<a id=230></a>  while (<a href="../h_src/58046948.htm" class="localvar">nvar</a>-- &gt; 0) {
<a id=231></a>    <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/58046812.htm" class="localvar">vd</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58047084.htm" class="localvar">fs</a>, <a href="../h_src/58046948.htm" class="localvar">nvar</a>);  <a  class="comments">/* get previous variable */</a>
<a id=232></a>    if (<a href="../h_src/58046812.htm" class="localvar">vd</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> != <a href="../h_src/57678908.htm" class="macro">RDKCTC</a>)  <a  class="comments">/* is in a register? */</a>
<a id=233></a>      return <a href="../h_src/58046812.htm" class="localvar">vd</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678364.htm" class="variable">ridx</a> + 1;
  }
<a id=235></a>  return 0;  <a  class="comments">/* no variables in registers */</a>
}


<a id=239></a><a  class="comments">/*</a>
<a id=240></a><a  class="comments">** Return the number of variables in the register stack for the given</a>
<a id=241></a><a  class="comments">** function.</a>
<a id=242></a><a  class="comments">*/</a>
<a id=243></a>int <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58046676.htm" class="localvar">fs</a>) {
<a id=244></a>  return <a href="../h_src/58047220.htm" class="function">reglevel</a>(<a href="../h_src/58046676.htm" class="localvar">fs</a>, <a href="../h_src/58046676.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>);
}


<a id=248></a><a  class="comments">/*</a>
<a id=249></a><a  class="comments">** Get the debug-information entry for current variable 'vidx'.</a>
<a id=250></a><a  class="comments">*/</a>
<a id=251></a>static <a href="../h_src/57516684.htm" class="type">LocVar</a> *<a href="../h_src/58046540.htm" class="function">localdebuginfo</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58046404.htm" class="localvar">fs</a>, int <a href="../h_src/58046268.htm" class="localvar">vidx</a>) {
<a id=252></a>  <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/58046132.htm" class="localvar">vd</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58046404.htm" class="localvar">fs</a>,  <a href="../h_src/58046268.htm" class="localvar">vidx</a>);
<a id=253></a>  if (<a href="../h_src/58046132.htm" class="localvar">vd</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> == <a href="../h_src/57678908.htm" class="macro">RDKCTC</a>)
<a id=254></a>    return NULL;  <a  class="comments">/* no debug info. for constants */</a>
  else {
<a id=256></a>    int <a href="../h_src/58045996.htm" class="localvar">idx</a> = <a href="../h_src/58046132.htm" class="localvar">vd</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678296.htm" class="variable">pidx</a>;
<a id=257></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(idx &lt; fs-&gt;ndebugvars);
<a id=258></a>    return &amp;<a href="../h_src/58046404.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514032.htm" class="variable">locvars</a>[<a href="../h_src/58045996.htm" class="localvar">idx</a>];
  }
}


<a id=263></a><a  class="comments">/*</a>
<a id=264></a><a  class="comments">** Create an expression representing variable 'vidx'</a>
<a id=265></a><a  class="comments">*/</a>
<a id=266></a>static void <a href="../h_src/58045860.htm" class="function">init_var</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58045724.htm" class="localvar">fs</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58045588.htm" class="localvar">e</a>, int <a href="../h_src/58045452.htm" class="localvar">vidx</a>) {
<a id=267></a>  <a href="../h_src/58045588.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679452.htm" class="variable">f</a> = <a href="../h_src/58045588.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679520.htm" class="variable">t</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;
<a id=268></a>  <a href="../h_src/58045588.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682104.htm" class="variable">VLOCAL</a>;
<a id=269></a>  <a href="../h_src/58045588.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679860.htm" class="variable">vidx</a> = <a href="../h_src/58045452.htm" class="localvar">vidx</a>;
<a id=270></a>  <a href="../h_src/58045588.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58045724.htm" class="localvar">fs</a>, <a href="../h_src/58045452.htm" class="localvar">vidx</a>)-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678364.htm" class="variable">ridx</a>;
}


<a id=274></a><a  class="comments">/*</a>
<a id=275></a><a  class="comments">** Raises an error if variable described by 'e' is read only</a>
<a id=276></a><a  class="comments">*/</a>
<a id=277></a>static void <a href="../h_src/58045316.htm" class="function">check_readonly</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58045180.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58045044.htm" class="localvar">e</a>) {
<a id=278></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58044908.htm" class="localvar">fs</a> = <a href="../h_src/58045180.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=279></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58044772.htm" class="localvar">varname</a> = NULL;  <a  class="comments">/* to be set if variable is const */</a>
<a id=280></a>  switch (<a href="../h_src/58045044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>) {
<a id=281></a>    case <a href="../h_src/57681968.htm" class="variable">VCONST</a>: {
<a id=282></a>      <a href="../h_src/58044772.htm" class="localvar">varname</a> = <a href="../h_src/58045180.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676732.htm" class="variable">arr</a>[<a href="../h_src/58045044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>].<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678228.htm" class="variable">name</a>;
      break;
    }
<a id=285></a>    case <a href="../h_src/57682104.htm" class="variable">VLOCAL</a>: {
<a id=286></a>      <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/58044636.htm" class="localvar">vardesc</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58044908.htm" class="localvar">fs</a>, <a href="../h_src/58045044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679860.htm" class="variable">vidx</a>);
<a id=287></a>      if (<a href="../h_src/58044636.htm" class="localvar">vardesc</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> != <a href="../h_src/57679316.htm" class="macro">VDKREG</a>)  <a  class="comments">/* not a regular variable? */</a>
<a id=288></a>        <a href="../h_src/58044772.htm" class="localvar">varname</a> = <a href="../h_src/58044636.htm" class="localvar">vardesc</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678228.htm" class="variable">name</a>;
      break;
    }
<a id=291></a>    case <a href="../h_src/57682036.htm" class="variable">VUPVAL</a>: {
<a id=292></a>      <a href="../h_src/57517092.htm" class="type">Upvaldesc</a> *<a href="../h_src/58044500.htm" class="localvar">up</a> = &amp;<a href="../h_src/58044908.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>[<a href="../h_src/58045044.htm" class="localvar">e</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>];
<a id=293></a>      if (<a href="../h_src/58044500.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517160.htm" class="variable">kind</a> != <a href="../h_src/57679316.htm" class="macro">VDKREG</a>)
<a id=294></a>        <a href="../h_src/58044772.htm" class="localvar">varname</a> = <a href="../h_src/58044500.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517364.htm" class="variable">name</a>;
      break;
    }
    default:
<a id=298></a>      return;  <a  class="comments">/* other cases cannot be read-only */</a>
  }
<a id=300></a>  if (<a href="../h_src/58044772.htm" class="localvar">varname</a>) {
<a id=301></a>    const char *<a href="../h_src/58044364.htm" class="localvar">msg</a> = <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58045180.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>,
<a id=302></a>       &quot;attempt to assign to const variable '%s'&quot;, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58044772.htm" class="localvar">varname</a>));
<a id=303></a>    <a href="../h_src/57668776.htm" class="function">luaK_semerror</a>(<a href="../h_src/58045180.htm" class="localvar">ls</a>, <a href="../h_src/58044364.htm" class="localvar">msg</a>);  <a  class="comments">/* error */</a>
  }
}


<a id=308></a><a  class="comments">/*</a>
<a id=309></a><a  class="comments">** Start the scope for the last 'nvars' created variables.</a>
<a id=310></a><a  class="comments">*/</a>
<a id=311></a>static void <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58044092.htm" class="localvar">ls</a>, int <a href="../h_src/58043956.htm" class="localvar">nvars</a>) {
<a id=312></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58043820.htm" class="localvar">fs</a> = <a href="../h_src/58044092.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=313></a>  int <a href="../h_src/58043684.htm" class="localvar">reglevel</a> = <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/58043820.htm" class="localvar">fs</a>);
<a id=314></a>  int <a href="../h_src/58043548.htm" class="localvar">i</a>;
<a id=315></a>  for (<a href="../h_src/58043548.htm" class="localvar">i</a> = 0; <a href="../h_src/58043548.htm" class="localvar">i</a> &lt; <a href="../h_src/58043956.htm" class="localvar">nvars</a>; <a href="../h_src/58043548.htm" class="localvar">i</a>++) {
<a id=316></a>    int <a href="../h_src/58043412.htm" class="localvar">vidx</a> = <a href="../h_src/58043820.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>++;
<a id=317></a>    <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/58043276.htm" class="localvar">var</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58043820.htm" class="localvar">fs</a>, <a href="../h_src/58043412.htm" class="localvar">vidx</a>);
<a id=318></a>    <a href="../h_src/58043276.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678364.htm" class="variable">ridx</a> = <a href="../h_src/58043684.htm" class="localvar">reglevel</a>++;
<a id=319></a>    <a href="../h_src/58043276.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678296.htm" class="variable">pidx</a> = <a href="../h_src/58049532.htm" class="function">registerlocalvar</a>(<a href="../h_src/58044092.htm" class="localvar">ls</a>, <a href="../h_src/58043820.htm" class="localvar">fs</a>, <a href="../h_src/58043276.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678228.htm" class="variable">name</a>);
  }
}


<a id=324></a><a  class="comments">/*</a>
<a id=325></a><a  class="comments">** Close the scope for all variables up to level 'tolevel'.</a>
<a id=326></a><a  class="comments">** (debug info.)</a>
<a id=327></a><a  class="comments">*/</a>
<a id=328></a>static void <a href="../h_src/58043140.htm" class="function">removevars</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58043004.htm" class="localvar">fs</a>, int <a href="../h_src/58042868.htm" class="localvar">tolevel</a>) {
<a id=329></a>  <a href="../h_src/58043004.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676664.htm" class="variable">n</a> -= (<a href="../h_src/58043004.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a> - <a href="../h_src/58042868.htm" class="localvar">tolevel</a>);
<a id=330></a>  while (<a href="../h_src/58043004.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a> &gt; <a href="../h_src/58042868.htm" class="localvar">tolevel</a>) {
<a id=331></a>    <a href="../h_src/57516684.htm" class="type">LocVar</a> *<a href="../h_src/58042732.htm" class="localvar">var</a> = <a href="../h_src/58046540.htm" class="function">localdebuginfo</a>(<a href="../h_src/58043004.htm" class="localvar">fs</a>, --<a href="../h_src/58043004.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>);
<a id=332></a>    if (<a href="../h_src/58042732.htm" class="localvar">var</a>)  <a  class="comments">/* does it have debug information? */</a>
<a id=333></a>      <a href="../h_src/58042732.htm" class="localvar">var</a>-&gt;<a href="../h_src/57516752.htm" class="variable">endpc</a> = <a href="../h_src/58043004.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>;
  }
}


<a id=338></a><a  class="comments">/*</a>
<a id=339></a><a  class="comments">** Search the upvalues of the function 'fs' for one</a>
<a id=340></a><a  class="comments">** with the given 'name'.</a>
<a id=341></a><a  class="comments">*/</a>
<a id=342></a>static int <a href="../h_src/58042596.htm" class="function">searchupvalue</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58042460.htm" class="localvar">fs</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58042324.htm" class="localvar">name</a>) {
<a id=343></a>  int <a href="../h_src/58042188.htm" class="localvar">i</a>;
<a id=344></a>  <a href="../h_src/57517092.htm" class="type">Upvaldesc</a> *<a href="../h_src/58042052.htm" class="localvar">up</a> = <a href="../h_src/58042460.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>;
<a id=345></a>  for (<a href="../h_src/58042188.htm" class="localvar">i</a> = 0; <a href="../h_src/58042188.htm" class="localvar">i</a> &lt; <a href="../h_src/58042460.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674828.htm" class="variable">nups</a>; <a href="../h_src/58042188.htm" class="localvar">i</a>++) {
<a id=346></a>    if (<a href="../h_src/58056468.htm" class="macro">eqstr</a>(<a href="../h_src/58042052.htm" class="localvar">up</a>[<a href="../h_src/58042188.htm" class="localvar">i</a>].<a href="../h_src/57517364.htm" class="variable">name</a>, <a href="../h_src/58042324.htm" class="localvar">name</a>)) return <a href="../h_src/58042188.htm" class="localvar">i</a>;
  }
<a id=348></a>  return -1;  <a  class="comments">/* not found */</a>
}


<a id=352></a>static <a href="../h_src/57517092.htm" class="type">Upvaldesc</a> *<a href="../h_src/58041916.htm" class="function">allocupvalue</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58041780.htm" class="localvar">fs</a>) {
<a id=353></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58041644.htm" class="localvar">f</a> = <a href="../h_src/58041780.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=354></a>  int <a href="../h_src/58041508.htm" class="localvar">oldsize</a> = <a href="../h_src/58041644.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515732.htm" class="variable">sizeupvalues</a>;
<a id=355></a>  <a href="../h_src/58054020.htm" class="function">checklimit</a>(<a href="../h_src/58041780.htm" class="localvar">fs</a>, <a href="../h_src/58041780.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674828.htm" class="variable">nups</a> + 1, <a href="../h_src/57631676.htm" class="macro">MAXUPVAL</a>, &quot;upvalues&quot;);
<a id=356></a>  <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/58041780.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58041644.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>, <a href="../h_src/58041780.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674828.htm" class="variable">nups</a>, <a href="../h_src/58041644.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515732.htm" class="variable">sizeupvalues</a>,
<a id=357></a>                  <a href="../h_src/57517092.htm" class="type">Upvaldesc</a>, <a href="../h_src/57631676.htm" class="macro">MAXUPVAL</a>, &quot;upvalues&quot;);
<a id=358></a>  while (<a href="../h_src/58041508.htm" class="localvar">oldsize</a> &lt; <a href="../h_src/58041644.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515732.htm" class="variable">sizeupvalues</a>)
<a id=359></a>    <a href="../h_src/58041644.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>[<a href="../h_src/58041508.htm" class="localvar">oldsize</a>++].<a href="../h_src/57517364.htm" class="variable">name</a> = NULL;
<a id=360></a>  return &amp;<a href="../h_src/58041644.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>[<a href="../h_src/58041780.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674828.htm" class="variable">nups</a>++];
}


<a id=364></a>static int <a href="../h_src/58041372.htm" class="function">newupvalue</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58041236.htm" class="localvar">fs</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58041100.htm" class="localvar">name</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58040964.htm" class="localvar">v</a>) {
<a id=365></a>  <a href="../h_src/57517092.htm" class="type">Upvaldesc</a> *<a href="../h_src/58040828.htm" class="localvar">up</a> = <a href="../h_src/58041916.htm" class="function">allocupvalue</a>(<a href="../h_src/58041236.htm" class="localvar">fs</a>);
<a id=366></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58040692.htm" class="localvar">prev</a> = <a href="../h_src/58041236.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675984.htm" class="variable">prev</a>;
<a id=367></a>  if (<a href="../h_src/58040964.htm" class="localvar">v</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682104.htm" class="variable">VLOCAL</a>) {
<a id=368></a>    <a href="../h_src/58040828.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517296.htm" class="variable">instack</a> = 1;
<a id=369></a>    <a href="../h_src/58040828.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517228.htm" class="variable">idx</a> = <a href="../h_src/58040964.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a>;
<a id=370></a>    <a href="../h_src/58040828.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517160.htm" class="variable">kind</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58040692.htm" class="localvar">prev</a>, <a href="../h_src/58040964.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679860.htm" class="variable">vidx</a>)-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a>;
<a id=371></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/58056468.htm" class="macro">eqstr</a>(name, getlocalvardesc(prev, v-&gt;u.var.vidx)-&gt;vd.name));
  }
  else {
<a id=374></a>    <a href="../h_src/58040828.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517296.htm" class="variable">instack</a> = 0;
<a id=375></a>    <a href="../h_src/58040828.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517228.htm" class="variable">idx</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/58040964.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>);
<a id=376></a>    <a href="../h_src/58040828.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517160.htm" class="variable">kind</a> = <a href="../h_src/58040692.htm" class="localvar">prev</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>[<a href="../h_src/58040964.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>].<a href="../h_src/57517160.htm" class="variable">kind</a>;
<a id=377></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/58056468.htm" class="macro">eqstr</a>(name, prev-&gt;f-&gt;upvalues[v-&gt;u.info].name));
  }
<a id=379></a>  <a href="../h_src/58040828.htm" class="localvar">up</a>-&gt;<a href="../h_src/57517364.htm" class="variable">name</a> = <a href="../h_src/58041100.htm" class="localvar">name</a>;
<a id=380></a>  <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/58041236.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58041236.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>, <a href="../h_src/58041100.htm" class="localvar">name</a>);
<a id=381></a>  return <a href="../h_src/58041236.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674828.htm" class="variable">nups</a> - 1;
}


<a id=385></a><a  class="comments">/*</a>
<a id=386></a><a  class="comments">** Look for an active local variable with the name 'n' in the</a>
<a id=387></a><a  class="comments">** function 'fs'. If found, initialize 'var' with it and return</a>
<a id=388></a><a  class="comments">** its expression kind; otherwise return -1.</a>
<a id=389></a><a  class="comments">*/</a>
<a id=390></a>static int <a href="../h_src/58040556.htm" class="function">searchvar</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58040420.htm" class="localvar">fs</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58040284.htm" class="localvar">n</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58040148.htm" class="localvar">var</a>) {
<a id=391></a>  int <a href="../h_src/58040012.htm" class="localvar">i</a>;
<a id=392></a>  for (<a href="../h_src/58040012.htm" class="localvar">i</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/58040420.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>) - 1; <a href="../h_src/58040012.htm" class="localvar">i</a> &gt;= 0; <a href="../h_src/58040012.htm" class="localvar">i</a>--) {
<a id=393></a>    <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/58039876.htm" class="localvar">vd</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58040420.htm" class="localvar">fs</a>, <a href="../h_src/58040012.htm" class="localvar">i</a>);
<a id=394></a>    if (<a href="../h_src/58056468.htm" class="macro">eqstr</a>(<a href="../h_src/58040284.htm" class="localvar">n</a>, <a href="../h_src/58039876.htm" class="localvar">vd</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678228.htm" class="variable">name</a>)) {  <a  class="comments">/* found? */</a>
<a id=395></a>      if (<a href="../h_src/58039876.htm" class="localvar">vd</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> == <a href="../h_src/57678908.htm" class="macro">RDKCTC</a>)  <a  class="comments">/* compile-time constant? */</a>
<a id=396></a>        <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58040148.htm" class="localvar">var</a>, <a href="../h_src/57681968.htm" class="variable">VCONST</a>, <a href="../h_src/58040420.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675100.htm" class="variable">firstlocal</a> + <a href="../h_src/58040012.htm" class="localvar">i</a>);
<a id=397></a>      else  <a  class="comments">/* real variable */</a>
<a id=398></a>        <a href="../h_src/58045860.htm" class="function">init_var</a>(<a href="../h_src/58040420.htm" class="localvar">fs</a>, <a href="../h_src/58040148.htm" class="localvar">var</a>, <a href="../h_src/58040012.htm" class="localvar">i</a>);
<a id=399></a>      return <a href="../h_src/58040148.htm" class="localvar">var</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>;
    }
  }
<a id=402></a>  return -1;  <a  class="comments">/* not found */</a>
}


<a id=406></a><a  class="comments">/*</a>
<a id=407></a><a  class="comments">** Mark block where variable at given level was defined</a>
<a id=408></a><a  class="comments">** (to emit close instructions later).</a>
<a id=409></a><a  class="comments">*/</a>
<a id=410></a>static void <a href="../h_src/58039740.htm" class="function">markupval</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58039604.htm" class="localvar">fs</a>, int <a href="../h_src/58039468.htm" class="localvar">level</a>) {
<a id=411></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> *<a href="../h_src/58039332.htm" class="localvar">bl</a> = <a href="../h_src/58039604.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>;
<a id=412></a>  while (<a href="../h_src/58039332.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056128.htm" class="variable">nactvar</a> &gt; <a href="../h_src/58039468.htm" class="localvar">level</a>)
<a id=413></a>    <a href="../h_src/58039332.htm" class="localvar">bl</a> = <a href="../h_src/58039332.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056332.htm" class="variable">previous</a>;
<a id=414></a>  <a href="../h_src/58039332.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056060.htm" class="variable">upval</a> = 1;
<a id=415></a>  <a href="../h_src/58039604.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674624.htm" class="variable">needclose</a> = 1;
}


<a id=419></a><a  class="comments">/*</a>
<a id=420></a><a  class="comments">** Mark that current block has a to-be-closed variable.</a>
<a id=421></a><a  class="comments">*/</a>
<a id=422></a>static void <a href="../h_src/58039196.htm" class="function">marktobeclosed</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58039060.htm" class="localvar">fs</a>) {
<a id=423></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> *<a href="../h_src/58038924.htm" class="localvar">bl</a> = <a href="../h_src/58039060.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>;
<a id=424></a>  <a href="../h_src/58038924.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056060.htm" class="variable">upval</a> = 1;
<a id=425></a>  <a href="../h_src/58038924.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58055924.htm" class="variable">insidetbc</a> = 1;
<a id=426></a>  <a href="../h_src/58039060.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674624.htm" class="variable">needclose</a> = 1;
}


<a id=430></a><a  class="comments">/*</a>
<a id=431></a><a  class="comments">** Find a variable with the given name 'n'. If it is an upvalue, add</a>
<a id=432></a><a  class="comments">** this upvalue into all intermediate functions. If it is a global, set</a>
<a id=433></a><a  class="comments">** 'var' as 'void' as a flag.</a>
<a id=434></a><a  class="comments">*/</a>
<a id=435></a>static void <a href="../h_src/58038788.htm" class="function">singlevaraux</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58038652.htm" class="localvar">fs</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58038516.htm" class="localvar">n</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58038380.htm" class="localvar">var</a>, int <a href="../h_src/58038244.htm" class="localvar">base</a>) {
<a id=436></a>  if (<a href="../h_src/58038652.htm" class="localvar">fs</a> == NULL)  <a  class="comments">/* no more levels? */</a>
<a id=437></a>    <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58038380.htm" class="localvar">var</a>, <a href="../h_src/57682716.htm" class="variable">VVOID</a>, 0);  <a  class="comments">/* default is global */</a>
  else {
<a id=439></a>    int <a href="../h_src/58038108.htm" class="localvar">v</a> = <a href="../h_src/58040556.htm" class="function">searchvar</a>(<a href="../h_src/58038652.htm" class="localvar">fs</a>, <a href="../h_src/58038516.htm" class="localvar">n</a>, <a href="../h_src/58038380.htm" class="localvar">var</a>);  <a  class="comments">/* look up locals at current level */</a>
<a id=440></a>    if (<a href="../h_src/58038108.htm" class="localvar">v</a> &gt;= 0) {  <a  class="comments">/* found? */</a>
<a id=441></a>      if (<a href="../h_src/58038108.htm" class="localvar">v</a> == <a href="../h_src/57682104.htm" class="variable">VLOCAL</a> &amp;&amp; !<a href="../h_src/58038244.htm" class="localvar">base</a>)
<a id=442></a>        <a href="../h_src/58039740.htm" class="function">markupval</a>(<a href="../h_src/58038652.htm" class="localvar">fs</a>, <a href="../h_src/58038380.htm" class="localvar">var</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679860.htm" class="variable">vidx</a>);  <a  class="comments">/* local will be used as an upval */</a>
    }
<a id=444></a>    else {  <a  class="comments">/* not found as local at current level; try upvalues */</a>
<a id=445></a>      int <a href="../h_src/58037972.htm" class="localvar">idx</a> = <a href="../h_src/58042596.htm" class="function">searchupvalue</a>(<a href="../h_src/58038652.htm" class="localvar">fs</a>, <a href="../h_src/58038516.htm" class="localvar">n</a>);  <a  class="comments">/* try existing upvalues */</a>
<a id=446></a>      if (<a href="../h_src/58037972.htm" class="localvar">idx</a> &lt; 0) {  <a  class="comments">/* not found? */</a>
<a id=447></a>        <a href="../h_src/58038788.htm" class="function">singlevaraux</a>(<a href="../h_src/58038652.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675984.htm" class="variable">prev</a>, <a href="../h_src/58038516.htm" class="localvar">n</a>, <a href="../h_src/58038380.htm" class="localvar">var</a>, 0);  <a  class="comments">/* try upper levels */</a>
<a id=448></a>        if (<a href="../h_src/58038380.htm" class="localvar">var</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682104.htm" class="variable">VLOCAL</a> || <a href="../h_src/58038380.htm" class="localvar">var</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682036.htm" class="variable">VUPVAL</a>)  <a  class="comments">/* local or upvalue? */</a>
<a id=449></a>          <a href="../h_src/58037972.htm" class="localvar">idx</a>  = <a href="../h_src/58041372.htm" class="function">newupvalue</a>(<a href="../h_src/58038652.htm" class="localvar">fs</a>, <a href="../h_src/58038516.htm" class="localvar">n</a>, <a href="../h_src/58038380.htm" class="localvar">var</a>);  <a  class="comments">/* will be a new upvalue */</a>
<a id=450></a>        else  <a  class="comments">/* it is a global or a constant */</a>
<a id=451></a>          return;  <a  class="comments">/* don't need to do anything at this level */</a>
      }
<a id=453></a>      <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58038380.htm" class="localvar">var</a>, <a href="../h_src/57682036.htm" class="variable">VUPVAL</a>, <a href="../h_src/58037972.htm" class="localvar">idx</a>);  <a  class="comments">/* new or old upvalue */</a>
    }
  }
}


<a id=459></a><a  class="comments">/*</a>
<a id=460></a><a  class="comments">** Find a variable with the given name 'n', handling global variables</a>
<a id=461></a><a  class="comments">** too.</a>
<a id=462></a><a  class="comments">*/</a>
<a id=463></a>static void <a href="../h_src/58037836.htm" class="function">singlevar</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58037700.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58037564.htm" class="localvar">var</a>) {
<a id=464></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58037428.htm" class="localvar">varname</a> = <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/58037700.htm" class="localvar">ls</a>);
<a id=465></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58037292.htm" class="localvar">fs</a> = <a href="../h_src/58037700.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=466></a>  <a href="../h_src/58038788.htm" class="function">singlevaraux</a>(<a href="../h_src/58037292.htm" class="localvar">fs</a>, <a href="../h_src/58037428.htm" class="localvar">varname</a>, <a href="../h_src/58037564.htm" class="localvar">var</a>, 1);
<a id=467></a>  if (<a href="../h_src/58037564.htm" class="localvar">var</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682716.htm" class="variable">VVOID</a>) {  <a  class="comments">/* global name? */</a>
<a id=468></a>    <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58037156.htm" class="localvar">key</a>;
<a id=469></a>    <a href="../h_src/58038788.htm" class="function">singlevaraux</a>(<a href="../h_src/58037292.htm" class="localvar">fs</a>, <a href="../h_src/58037700.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700192.htm" class="variable">envn</a>, <a href="../h_src/58037564.htm" class="localvar">var</a>, 1);  <a  class="comments">/* get environment variable */</a>
<a id=470></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(var-&gt;k != VVOID);  <a  class="comments">/* this one must exist */</a>
<a id=471></a>    <a href="../h_src/57670340.htm" class="function">luaK_exp2anyregup</a>(<a href="../h_src/58037292.htm" class="localvar">fs</a>, <a href="../h_src/58037564.htm" class="localvar">var</a>);  <a  class="comments">/* but could be a constant */</a>
<a id=472></a>    <a href="../h_src/58050348.htm" class="function">codestring</a>(&amp;<a href="../h_src/58037156.htm" class="localvar">key</a>, <a href="../h_src/58037428.htm" class="localvar">varname</a>);  <a  class="comments">/* key is variable name */</a>
<a id=473></a>    <a href="../h_src/57670000.htm" class="function">luaK_indexed</a>(<a href="../h_src/58037292.htm" class="localvar">fs</a>, <a href="../h_src/58037564.htm" class="localvar">var</a>, &amp;<a href="../h_src/58037156.htm" class="localvar">key</a>);  <a  class="comments">/* env[varname] */</a>
  }
}


<a id=478></a><a  class="comments">/*</a>
<a id=479></a><a  class="comments">** Adjust the number of results from an expression list 'e' with 'nexps'</a>
<a id=480></a><a  class="comments">** expressions to 'nvars' values.</a>
<a id=481></a><a  class="comments">*/</a>
<a id=482></a>static void <a href="../h_src/58037020.htm" class="function">adjust_assign</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58036884.htm" class="localvar">ls</a>, int <a href="../h_src/58036748.htm" class="localvar">nvars</a>, int <a href="../h_src/58036612.htm" class="localvar">nexps</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58036476.htm" class="localvar">e</a>) {
<a id=483></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58036340.htm" class="localvar">fs</a> = <a href="../h_src/58036884.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=484></a>  int <a href="../h_src/58036204.htm" class="localvar">needed</a> = <a href="../h_src/58036748.htm" class="localvar">nvars</a> - <a href="../h_src/58036612.htm" class="localvar">nexps</a>;  <a  class="comments">/* extra values needed */</a>
<a id=485></a>  if (<a href="../h_src/58056604.htm" class="macro">hasmultret</a>(<a href="../h_src/58036476.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a>)) {  <a  class="comments">/* last expression has multiple returns? */</a>
<a id=486></a>    int <a href="../h_src/58036068.htm" class="localvar">extra</a> = <a href="../h_src/58036204.htm" class="localvar">needed</a> + 1;  <a  class="comments">/* discount last expression itself */</a>
<a id=487></a>    if (<a href="../h_src/58036068.htm" class="localvar">extra</a> &lt; 0)
<a id=488></a>      <a href="../h_src/58036068.htm" class="localvar">extra</a> = 0;
<a id=489></a>    <a href="../h_src/57669728.htm" class="function">luaK_setreturns</a>(<a href="../h_src/58036340.htm" class="localvar">fs</a>, <a href="../h_src/58036476.htm" class="localvar">e</a>, <a href="../h_src/58036068.htm" class="localvar">extra</a>);  <a  class="comments">/* last exp. provides the difference */</a>
  }
  else {
<a id=492></a>    if (<a href="../h_src/58036476.htm" class="localvar">e</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> != <a href="../h_src/57682716.htm" class="variable">VVOID</a>)  <a  class="comments">/* at least one expression? */</a>
<a id=493></a>      <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58036340.htm" class="localvar">fs</a>, <a href="../h_src/58036476.htm" class="localvar">e</a>);  <a  class="comments">/* close last expression */</a>
<a id=494></a>    if (<a href="../h_src/58036204.htm" class="localvar">needed</a> &gt; 0)  <a  class="comments">/* missing values? */</a>
<a id=495></a>      <a href="../h_src/57670748.htm" class="function">luaK_nil</a>(<a href="../h_src/58036340.htm" class="localvar">fs</a>, <a href="../h_src/58036340.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>, <a href="../h_src/58036204.htm" class="localvar">needed</a>);  <a  class="comments">/* complete with nils */</a>
  }
<a id=497></a>  if (<a href="../h_src/58036204.htm" class="localvar">needed</a> &gt; 0)
<a id=498></a>    <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/58036340.htm" class="localvar">fs</a>, <a href="../h_src/58036204.htm" class="localvar">needed</a>);  <a  class="comments">/* registers for extra values */</a>
<a id=499></a>  else  <a  class="comments">/* adding 'needed' is actually a subtraction */</a>
<a id=500></a>    <a href="../h_src/58036340.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> += <a href="../h_src/58036204.htm" class="localvar">needed</a>;  <a  class="comments">/* remove extra values */</a>
}


<a id=504></a>#define <a href="../h_src/58035932.htm" class="macro">enterlevel</a>(ls)	luaE_incCstack(ls-&gt;L)


<a id=507></a>#define <a href="../h_src/58035796.htm" class="macro">leavelevel</a>(ls) ((ls)-&gt;L-&gt;nCcalls--)


<a id=510></a><a  class="comments">/*</a>
<a id=511></a><a  class="comments">** Generates an error that a goto jumps into the scope of some</a>
<a id=512></a><a  class="comments">** local variable.</a>
<a id=513></a><a  class="comments">*/</a>
<a id=514></a>static <a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/58035660.htm" class="function">jumpscopeerror</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58035524.htm" class="localvar">ls</a>, <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58035388.htm" class="localvar">gt</a>) {
<a id=515></a>  const char *<a href="../h_src/58035252.htm" class="localvar">varname</a> = <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/58035524.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58035388.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677548.htm" class="variable">nactvar</a>)-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678228.htm" class="variable">name</a>);
<a id=516></a>  const char *<a href="../h_src/58035116.htm" class="localvar">msg</a> = &quot;&lt;goto %s&gt; at line %d jumps into the scope of local '%s'&quot;;
<a id=517></a>  <a href="../h_src/58035116.htm" class="localvar">msg</a> = <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58035524.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58035116.htm" class="localvar">msg</a>, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58035388.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677752.htm" class="variable">name</a>), <a href="../h_src/58035388.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677616.htm" class="variable">line</a>, <a href="../h_src/58035252.htm" class="localvar">varname</a>);
<a id=518></a>  <a href="../h_src/57668776.htm" class="function">luaK_semerror</a>(<a href="../h_src/58035524.htm" class="localvar">ls</a>, <a href="../h_src/58035116.htm" class="localvar">msg</a>);  <a  class="comments">/* raise the error */</a>
}


<a id=522></a><a  class="comments">/*</a>
<a id=523></a><a  class="comments">** Solves the goto at index 'g' to given 'label' and removes it</a>
<a id=524></a><a  class="comments">** from the list of pending gotos.</a>
<a id=525></a><a  class="comments">** If it jumps into the scope of some variable, raises an error.</a>
<a id=526></a><a  class="comments">*/</a>
<a id=527></a>static void <a href="../h_src/58034980.htm" class="function">solvegoto</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58034844.htm" class="localvar">ls</a>, int <a href="../h_src/58034708.htm" class="localvar">g</a>, <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58034572.htm" class="localvar">label</a>) {
<a id=528></a>  int <a href="../h_src/58034436.htm" class="localvar">i</a>;
<a id=529></a>  <a href="../h_src/57676936.htm" class="type">Labellist</a> *<a href="../h_src/58034232.htm" class="localvar">gl</a> = &amp;<a href="../h_src/58034844.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>;  <a  class="comments">/* list of gotos */</a>
<a id=530></a>  <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58034096.htm" class="localvar">gt</a> = &amp;<a href="../h_src/58034232.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58034708.htm" class="localvar">g</a>];  <a  class="comments">/* goto to be resolved */</a>
<a id=531></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/58056468.htm" class="macro">eqstr</a>(gt-&gt;name, label-&gt;name));
<a id=532></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58034096.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677548.htm" class="variable">nactvar</a> &lt; <a href="../h_src/58034572.htm" class="localvar">label</a>-&gt;<a href="../h_src/57677548.htm" class="variable">nactvar</a>))  <a  class="comments">/* enter some scope? */</a>
<a id=533></a>    <a href="../h_src/58035660.htm" class="function">jumpscopeerror</a>(<a href="../h_src/58034844.htm" class="localvar">ls</a>, <a href="../h_src/58034096.htm" class="localvar">gt</a>);
<a id=534></a>  <a href="../h_src/57669456.htm" class="function">luaK_patchlist</a>(<a href="../h_src/58034844.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58034096.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677684.htm" class="variable">pc</a>, <a href="../h_src/58034572.htm" class="localvar">label</a>-&gt;<a href="../h_src/57677684.htm" class="variable">pc</a>);
<a id=535></a>  for (<a href="../h_src/58034436.htm" class="localvar">i</a> = <a href="../h_src/58034708.htm" class="localvar">g</a>; <a href="../h_src/58034436.htm" class="localvar">i</a> &lt; <a href="../h_src/58034232.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677072.htm" class="variable">n</a> - 1; <a href="../h_src/58034436.htm" class="localvar">i</a>++)  <a  class="comments">/* remove goto from pending list */</a>
<a id=536></a>    <a href="../h_src/58034232.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58034436.htm" class="localvar">i</a>] = <a href="../h_src/58034232.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58034436.htm" class="localvar">i</a> + 1];
<a id=537></a>  <a href="../h_src/58034232.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677072.htm" class="variable">n</a>--;
}


<a id=541></a><a  class="comments">/*</a>
<a id=542></a><a  class="comments">** Search for an active label with the given name.</a>
<a id=543></a><a  class="comments">*/</a>
<a id=544></a>static <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58033960.htm" class="function">findlabel</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58033824.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58033688.htm" class="localvar">name</a>) {
<a id=545></a>  int <a href="../h_src/58033552.htm" class="localvar">i</a>;
<a id=546></a>  <a href="../h_src/57676256.htm" class="type">Dyndata</a> *<a href="../h_src/58033416.htm" class="localvar">dyd</a> = <a href="../h_src/58033824.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>;
<a id=547></a>  <a  class="comments">/* check labels in current function for a match */</a>
<a id=548></a>  for (<a href="../h_src/58033552.htm" class="localvar">i</a> = <a href="../h_src/58033824.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>-&gt;<a href="../h_src/57675032.htm" class="variable">firstlabel</a>; <a href="../h_src/58033552.htm" class="localvar">i</a> &lt; <a href="../h_src/58033416.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677072.htm" class="variable">n</a>; <a href="../h_src/58033552.htm" class="localvar">i</a>++) {
<a id=549></a>    <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58033280.htm" class="localvar">lb</a> = &amp;<a href="../h_src/58033416.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58033552.htm" class="localvar">i</a>];
<a id=550></a>    if (<a href="../h_src/58056468.htm" class="macro">eqstr</a>(<a href="../h_src/58033280.htm" class="localvar">lb</a>-&gt;<a href="../h_src/57677752.htm" class="variable">name</a>, <a href="../h_src/58033688.htm" class="localvar">name</a>))  <a  class="comments">/* correct label? */</a>
<a id=551></a>      return <a href="../h_src/58033280.htm" class="localvar">lb</a>;
  }
<a id=553></a>  return NULL;  <a  class="comments">/* label not found */</a>
}


<a id=557></a><a  class="comments">/*</a>
<a id=558></a><a  class="comments">** Adds a new label/goto in the corresponding list.</a>
<a id=559></a><a  class="comments">*/</a>
<a id=560></a>static int <a href="../h_src/58033144.htm" class="function">newlabelentry</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58033008.htm" class="localvar">ls</a>, <a href="../h_src/57676936.htm" class="type">Labellist</a> *<a href="../h_src/58032872.htm" class="localvar">l</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58032736.htm" class="localvar">name</a>,
<a id=561></a>                          int <a href="../h_src/58032600.htm" class="localvar">line</a>, int <a href="../h_src/58032464.htm" class="localvar">pc</a>) {
<a id=562></a>  int <a href="../h_src/58032328.htm" class="localvar">n</a> = <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677072.htm" class="variable">n</a>;
<a id=563></a>  <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/58033008.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>, <a href="../h_src/58032328.htm" class="localvar">n</a>, <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677004.htm" class="variable">size</a>,
<a id=564></a>                  <a href="../h_src/57677412.htm" class="type">Labeldesc</a>, SHRT_MAX, &quot;labels/gotos&quot;);
<a id=565></a>  <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58032328.htm" class="localvar">n</a>].<a href="../h_src/57677752.htm" class="variable">name</a> = <a href="../h_src/58032736.htm" class="localvar">name</a>;
<a id=566></a>  <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58032328.htm" class="localvar">n</a>].<a href="../h_src/57677616.htm" class="variable">line</a> = <a href="../h_src/58032600.htm" class="localvar">line</a>;
<a id=567></a>  <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58032328.htm" class="localvar">n</a>].<a href="../h_src/57677548.htm" class="variable">nactvar</a> = <a href="../h_src/58033008.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>;
<a id=568></a>  <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58032328.htm" class="localvar">n</a>].<a href="../h_src/57677480.htm" class="variable">close</a> = 0;
<a id=569></a>  <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58032328.htm" class="localvar">n</a>].<a href="../h_src/57677684.htm" class="variable">pc</a> = <a href="../h_src/58032464.htm" class="localvar">pc</a>;
<a id=570></a>  <a href="../h_src/58032872.htm" class="localvar">l</a>-&gt;<a href="../h_src/57677072.htm" class="variable">n</a> = <a href="../h_src/58032328.htm" class="localvar">n</a> + 1;
<a id=571></a>  return <a href="../h_src/58032328.htm" class="localvar">n</a>;
}


<a id=575></a>static int <a href="../h_src/58032192.htm" class="function">newgotoentry</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58032056.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58031920.htm" class="localvar">name</a>, int <a href="../h_src/58031784.htm" class="localvar">line</a>, int <a href="../h_src/58031648.htm" class="localvar">pc</a>) {
<a id=576></a>  return <a href="../h_src/58033144.htm" class="function">newlabelentry</a>(<a href="../h_src/58032056.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58032056.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>, <a href="../h_src/58031920.htm" class="localvar">name</a>, <a href="../h_src/58031784.htm" class="localvar">line</a>, <a href="../h_src/58031648.htm" class="localvar">pc</a>);
}


<a id=580></a><a  class="comments">/*</a>
<a id=581></a><a  class="comments">** Solves forward jumps. Check whether new label 'lb' matches any</a>
<a id=582></a><a  class="comments">** pending gotos in current block and solves them. Return true</a>
<a id=583></a><a  class="comments">** if any of the gotos need to close upvalues.</a>
<a id=584></a><a  class="comments">*/</a>
<a id=585></a>static int <a href="../h_src/58031512.htm" class="function">solvegotos</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58031376.htm" class="localvar">ls</a>, <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58031240.htm" class="localvar">lb</a>) {
<a id=586></a>  <a href="../h_src/57676936.htm" class="type">Labellist</a> *<a href="../h_src/58031104.htm" class="localvar">gl</a> = &amp;<a href="../h_src/58031376.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>;
<a id=587></a>  int <a href="../h_src/58030968.htm" class="localvar">i</a> = <a href="../h_src/58031376.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>-&gt;<a href="../h_src/58056196.htm" class="variable">firstgoto</a>;
<a id=588></a>  int <a href="../h_src/58030832.htm" class="localvar">needsclose</a> = 0;
<a id=589></a>  while (<a href="../h_src/58030968.htm" class="localvar">i</a> &lt; <a href="../h_src/58031104.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677072.htm" class="variable">n</a>) {
<a id=590></a>    if (<a href="../h_src/58056468.htm" class="macro">eqstr</a>(<a href="../h_src/58031104.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58030968.htm" class="localvar">i</a>].<a href="../h_src/57677752.htm" class="variable">name</a>, <a href="../h_src/58031240.htm" class="localvar">lb</a>-&gt;<a href="../h_src/57677752.htm" class="variable">name</a>)) {
<a id=591></a>      <a href="../h_src/58030832.htm" class="localvar">needsclose</a> |= <a href="../h_src/58031104.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58030968.htm" class="localvar">i</a>].<a href="../h_src/57677480.htm" class="variable">close</a>;
<a id=592></a>      <a href="../h_src/58034980.htm" class="function">solvegoto</a>(<a href="../h_src/58031376.htm" class="localvar">ls</a>, <a href="../h_src/58030968.htm" class="localvar">i</a>, <a href="../h_src/58031240.htm" class="localvar">lb</a>);  <a  class="comments">/* will remove 'i' from the list */</a>
    }
    else
<a id=595></a>      <a href="../h_src/58030968.htm" class="localvar">i</a>++;
  }
<a id=597></a>  return <a href="../h_src/58030832.htm" class="localvar">needsclose</a>;
}


<a id=601></a><a  class="comments">/*</a>
<a id=602></a><a  class="comments">** Create a new label with the given 'name' at the given 'line'.</a>
<a id=603></a><a  class="comments">** 'last' tells whether label is the last non-op statement in its</a>
<a id=604></a><a  class="comments">** block. Solves all pending gotos to this new label and adds</a>
<a id=605></a><a  class="comments">** a close instruction if necessary.</a>
<a id=606></a><a  class="comments">** Returns true iff it added a close instruction.</a>
<a id=607></a><a  class="comments">*/</a>
<a id=608></a>static int <a href="../h_src/58030696.htm" class="function">createlabel</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58030560.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58030424.htm" class="localvar">name</a>, int <a href="../h_src/58030288.htm" class="localvar">line</a>,
<a id=609></a>                        int <a href="../h_src/58030152.htm" class="localvar">last</a>) {
<a id=610></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58030016.htm" class="localvar">fs</a> = <a href="../h_src/58030560.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=611></a>  <a href="../h_src/57676936.htm" class="type">Labellist</a> *<a href="../h_src/58029880.htm" class="localvar">ll</a> = &amp;<a href="../h_src/58030560.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676324.htm" class="variable">label</a>;
<a id=612></a>  int <a href="../h_src/58029744.htm" class="localvar">l</a> = <a href="../h_src/58033144.htm" class="function">newlabelentry</a>(<a href="../h_src/58030560.htm" class="localvar">ls</a>, <a href="../h_src/58029880.htm" class="localvar">ll</a>, <a href="../h_src/58030424.htm" class="localvar">name</a>, <a href="../h_src/58030288.htm" class="localvar">line</a>, <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a>(<a href="../h_src/58030016.htm" class="localvar">fs</a>));
<a id=613></a>  if (<a href="../h_src/58030152.htm" class="localvar">last</a>) {  <a  class="comments">/* label is last no-op statement in the block? */</a>
<a id=614></a>    <a  class="comments">/* assume that locals are already out of scope */</a>
<a id=615></a>    <a href="../h_src/58029880.htm" class="localvar">ll</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58029744.htm" class="localvar">l</a>].<a href="../h_src/57677548.htm" class="variable">nactvar</a> = <a href="../h_src/58030016.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>-&gt;<a href="../h_src/58056128.htm" class="variable">nactvar</a>;
  }
<a id=617></a>  if (<a href="../h_src/58031512.htm" class="function">solvegotos</a>(<a href="../h_src/58030560.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58029880.htm" class="localvar">ll</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58029744.htm" class="localvar">l</a>])) {  <a  class="comments">/* need close? */</a>
<a id=618></a>    <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58030016.htm" class="localvar">fs</a>, <a href="../h_src/57686864.htm" class="variable">OP_CLOSE</a>, <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/58030016.htm" class="localvar">fs</a>), 0, 0);
    return 1;
  }
  return 0;
}


<a id=625></a><a  class="comments">/*</a>
<a id=626></a><a  class="comments">** Adjust pending gotos to outer level of a block.</a>
<a id=627></a><a  class="comments">*/</a>
<a id=628></a>static void <a href="../h_src/58029608.htm" class="function">movegotosout</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58029472.htm" class="localvar">fs</a>, <a href="../h_src/58055856.htm" class="type">BlockCnt</a> *<a href="../h_src/58029336.htm" class="localvar">bl</a>) {
<a id=629></a>  int <a href="../h_src/58029200.htm" class="localvar">i</a>;
<a id=630></a>  <a href="../h_src/57676936.htm" class="type">Labellist</a> *<a href="../h_src/58029064.htm" class="localvar">gl</a> = &amp;<a href="../h_src/58029472.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>;
<a id=631></a>  <a  class="comments">/* correct pending gotos to current block */</a>
<a id=632></a>  for (<a href="../h_src/58029200.htm" class="localvar">i</a> = <a href="../h_src/58029336.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056196.htm" class="variable">firstgoto</a>; <a href="../h_src/58029200.htm" class="localvar">i</a> &lt; <a href="../h_src/58029064.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677072.htm" class="variable">n</a>; <a href="../h_src/58029200.htm" class="localvar">i</a>++) {  <a  class="comments">/* for each pending goto */</a>
<a id=633></a>    <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58028928.htm" class="localvar">gt</a> = &amp;<a href="../h_src/58029064.htm" class="localvar">gl</a>-&gt;<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58029200.htm" class="localvar">i</a>];
<a id=634></a>    <a  class="comments">/* leaving a variable scope? */</a>
<a id=635></a>    if (<a href="../h_src/58047220.htm" class="function">reglevel</a>(<a href="../h_src/58029472.htm" class="localvar">fs</a>, <a href="../h_src/58028928.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677548.htm" class="variable">nactvar</a>) &gt; <a href="../h_src/58047220.htm" class="function">reglevel</a>(<a href="../h_src/58029472.htm" class="localvar">fs</a>, <a href="../h_src/58029336.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056128.htm" class="variable">nactvar</a>))
<a id=636></a>      <a href="../h_src/58028928.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677480.htm" class="variable">close</a> |= <a href="../h_src/58029336.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056060.htm" class="variable">upval</a>;  <a  class="comments">/* jump may need a close */</a>
<a id=637></a>    <a href="../h_src/58028928.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677548.htm" class="variable">nactvar</a> = <a href="../h_src/58029336.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056128.htm" class="variable">nactvar</a>;  <a  class="comments">/* update goto level */</a>
  }
}


<a id=642></a>static void <a href="../h_src/58028792.htm" class="function">enterblock</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58028656.htm" class="localvar">fs</a>, <a href="../h_src/58055856.htm" class="type">BlockCnt</a> *<a href="../h_src/58028520.htm" class="localvar">bl</a>, <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/58028384.htm" class="localvar">isloop</a>) {
<a id=643></a>  <a href="../h_src/58028520.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58055992.htm" class="variable">isloop</a> = <a href="../h_src/58028384.htm" class="localvar">isloop</a>;
<a id=644></a>  <a href="../h_src/58028520.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056128.htm" class="variable">nactvar</a> = <a href="../h_src/58028656.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>;
<a id=645></a>  <a href="../h_src/58028520.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056264.htm" class="variable">firstlabel</a> = <a href="../h_src/58028656.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677072.htm" class="variable">n</a>;
<a id=646></a>  <a href="../h_src/58028520.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056196.htm" class="variable">firstgoto</a> = <a href="../h_src/58028656.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677072.htm" class="variable">n</a>;
<a id=647></a>  <a href="../h_src/58028520.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056060.htm" class="variable">upval</a> = 0;
<a id=648></a>  <a href="../h_src/58028520.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58055924.htm" class="variable">insidetbc</a> = (<a href="../h_src/58028656.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a> != NULL &amp;&amp; <a href="../h_src/58028656.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>-&gt;<a href="../h_src/58055924.htm" class="variable">insidetbc</a>);
<a id=649></a>  <a href="../h_src/58028520.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056332.htm" class="variable">previous</a> = <a href="../h_src/58028656.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>;
<a id=650></a>  <a href="../h_src/58028656.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a> = <a href="../h_src/58028520.htm" class="localvar">bl</a>;
<a id=651></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(fs-&gt;freereg == luaY_nvarstack(fs));
}


<a id=655></a><a  class="comments">/*</a>
<a id=656></a><a  class="comments">** generates an error for an undefined 'goto'.</a>
<a id=657></a><a  class="comments">*/</a>
<a id=658></a>static <a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/58028248.htm" class="function">undefgoto</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58028112.htm" class="localvar">ls</a>, <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58027976.htm" class="localvar">gt</a>) {
<a id=659></a>  const char *<a href="../h_src/58027840.htm" class="localvar">msg</a>;
<a id=660></a>  if (<a href="../h_src/58056468.htm" class="macro">eqstr</a>(<a href="../h_src/58027976.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677752.htm" class="variable">name</a>, <a href="../h_src/57619572.htm" class="macro">luaS_newliteral</a>(<a href="../h_src/58028112.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &quot;break&quot;))) {
<a id=661></a>    <a href="../h_src/58027840.htm" class="localvar">msg</a> = &quot;break outside loop at line %d&quot;;
<a id=662></a>    <a href="../h_src/58027840.htm" class="localvar">msg</a> = <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58028112.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58027840.htm" class="localvar">msg</a>, <a href="../h_src/58027976.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677616.htm" class="variable">line</a>);
  }
  else {
<a id=665></a>    <a href="../h_src/58027840.htm" class="localvar">msg</a> = &quot;no visible label '%s' for &lt;goto&gt; at line %d&quot;;
<a id=666></a>    <a href="../h_src/58027840.htm" class="localvar">msg</a> = <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58028112.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58027840.htm" class="localvar">msg</a>, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58027976.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677752.htm" class="variable">name</a>), <a href="../h_src/58027976.htm" class="localvar">gt</a>-&gt;<a href="../h_src/57677616.htm" class="variable">line</a>);
  }
<a id=668></a>  <a href="../h_src/57668776.htm" class="function">luaK_semerror</a>(<a href="../h_src/58028112.htm" class="localvar">ls</a>, <a href="../h_src/58027840.htm" class="localvar">msg</a>);
}


<a id=672></a>static void <a href="../h_src/58027704.htm" class="function">leaveblock</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58027568.htm" class="localvar">fs</a>) {
<a id=673></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> *<a href="../h_src/58027432.htm" class="localvar">bl</a> = <a href="../h_src/58027568.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>;
<a id=674></a>  <a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58027296.htm" class="localvar">ls</a> = <a href="../h_src/58027568.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>;
<a id=675></a>  int <a href="../h_src/58027160.htm" class="localvar">hasclose</a> = 0;
<a id=676></a>  int <a href="../h_src/58027024.htm" class="localvar">stklevel</a> = <a href="../h_src/58047220.htm" class="function">reglevel</a>(<a href="../h_src/58027568.htm" class="localvar">fs</a>, <a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056128.htm" class="variable">nactvar</a>);  <a  class="comments">/* level outside the block */</a>
<a id=677></a>  <a href="../h_src/58043140.htm" class="function">removevars</a>(<a href="../h_src/58027568.htm" class="localvar">fs</a>, <a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056128.htm" class="variable">nactvar</a>);  <a  class="comments">/* remove block locals */</a>
<a id=678></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(bl-&gt;nactvar == fs-&gt;nactvar);  <a  class="comments">/* back to level on entry */</a>
<a id=679></a>  if (<a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58055992.htm" class="variable">isloop</a>)  <a  class="comments">/* has to fix pending breaks? */</a>
<a id=680></a>    <a href="../h_src/58027160.htm" class="localvar">hasclose</a> = <a href="../h_src/58030696.htm" class="function">createlabel</a>(<a href="../h_src/58027296.htm" class="localvar">ls</a>, <a href="../h_src/57619572.htm" class="macro">luaS_newliteral</a>(<a href="../h_src/58027296.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &quot;break&quot;), 0, 0);
<a id=681></a>  if (!<a href="../h_src/58027160.htm" class="localvar">hasclose</a> &amp;&amp; <a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056332.htm" class="variable">previous</a> &amp;&amp; <a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056060.htm" class="variable">upval</a>)  <a  class="comments">/* still need a 'close'? */</a>
<a id=682></a>    <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58027568.htm" class="localvar">fs</a>, <a href="../h_src/57686864.htm" class="variable">OP_CLOSE</a>, <a href="../h_src/58027024.htm" class="localvar">stklevel</a>, 0, 0);
<a id=683></a>  <a href="../h_src/58027568.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> = <a href="../h_src/58027024.htm" class="localvar">stklevel</a>;  <a  class="comments">/* free registers */</a>
<a id=684></a>  <a href="../h_src/58027296.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677072.htm" class="variable">n</a> = <a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056264.htm" class="variable">firstlabel</a>;  <a  class="comments">/* remove local labels */</a>
<a id=685></a>  <a href="../h_src/58027568.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a> = <a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056332.htm" class="variable">previous</a>;  <a  class="comments">/* current block now is previous one */</a>
<a id=686></a>  if (<a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056332.htm" class="variable">previous</a>)  <a  class="comments">/* was it a nested block? */</a>
<a id=687></a>    <a href="../h_src/58029608.htm" class="function">movegotosout</a>(<a href="../h_src/58027568.htm" class="localvar">fs</a>, <a href="../h_src/58027432.htm" class="localvar">bl</a>);  <a  class="comments">/* update pending gotos to enclosing block */</a>
  else {
<a id=689></a>    if (<a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056196.htm" class="variable">firstgoto</a> &lt; <a href="../h_src/58027296.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677072.htm" class="variable">n</a>)  <a  class="comments">/* still pending gotos? */</a>
<a id=690></a>      <a href="../h_src/58028248.htm" class="function">undefgoto</a>(<a href="../h_src/58027296.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58027296.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677140.htm" class="variable">arr</a>[<a href="../h_src/58027432.htm" class="localvar">bl</a>-&gt;<a href="../h_src/58056196.htm" class="variable">firstgoto</a>]);  <a  class="comments">/* error */</a>
  }
}


<a id=695></a><a  class="comments">/*</a>
<a id=696></a><a  class="comments">** adds a new prototype into list of prototypes</a>
<a id=697></a><a  class="comments">*/</a>
<a id=698></a>static <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58026888.htm" class="function">addprototype</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58026752.htm" class="localvar">ls</a>) {
<a id=699></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58026616.htm" class="localvar">clp</a>;
<a id=700></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58026480.htm" class="localvar">L</a> = <a href="../h_src/58026752.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>;
<a id=701></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58026344.htm" class="localvar">fs</a> = <a href="../h_src/58026752.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=702></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58026208.htm" class="localvar">f</a> = <a href="../h_src/58026344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;  <a  class="comments">/* prototype of current function */</a>
<a id=703></a>  if (<a href="../h_src/58026344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675236.htm" class="variable">np</a> &gt;= <a href="../h_src/58026208.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515460.htm" class="variable">sizep</a>) {
<a id=704></a>    int <a href="../h_src/58026072.htm" class="localvar">oldsize</a> = <a href="../h_src/58026208.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515460.htm" class="variable">sizep</a>;
<a id=705></a>    <a href="../h_src/57494924.htm" class="macro">luaM_growvector</a>(<a href="../h_src/58026480.htm" class="localvar">L</a>, <a href="../h_src/58026208.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514576.htm" class="variable">p</a>, <a href="../h_src/58026344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675236.htm" class="variable">np</a>, <a href="../h_src/58026208.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515460.htm" class="variable">sizep</a>, <a href="../h_src/57513828.htm" class="type">Proto</a> *, <a href="../h_src/57696520.htm" class="macro">MAXARG_Bx</a>, &quot;functions&quot;);
<a id=706></a>    while (<a href="../h_src/58026072.htm" class="localvar">oldsize</a> &lt; <a href="../h_src/58026208.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515460.htm" class="variable">sizep</a>)
<a id=707></a>      <a href="../h_src/58026208.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514576.htm" class="variable">p</a>[<a href="../h_src/58026072.htm" class="localvar">oldsize</a>++] = NULL;
  }
<a id=709></a>  <a href="../h_src/58026208.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514576.htm" class="variable">p</a>[<a href="../h_src/58026344.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675236.htm" class="variable">np</a>++] = <a href="../h_src/58026616.htm" class="localvar">clp</a> = <a href="../h_src/57630996.htm" class="function">luaF_newproto</a>(<a href="../h_src/58026480.htm" class="localvar">L</a>);
<a id=710></a>  <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/58026480.htm" class="localvar">L</a>, <a href="../h_src/58026208.htm" class="localvar">f</a>, <a href="../h_src/58026616.htm" class="localvar">clp</a>);
<a id=711></a>  return <a href="../h_src/58026616.htm" class="localvar">clp</a>;
}


<a id=715></a><a  class="comments">/*</a>
<a id=716></a><a  class="comments">** codes instruction to create new closure in parent function.</a>
<a id=717></a><a  class="comments">** The OP_CLOSURE instruction uses the last available register,</a>
<a id=718></a><a  class="comments">** so that, if it invokes the GC, the GC knows which registers</a>
<a id=719></a><a  class="comments">** are in use at that time.</a>
<a id=720></a><a  class="comments"></a>
<a id=721></a><a  class="comments">*/</a>
<a id=722></a>static void <a href="../h_src/58025936.htm" class="function">codeclosure</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58025800.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58025664.htm" class="localvar">v</a>) {
<a id=723></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58025528.htm" class="localvar">fs</a> = <a href="../h_src/58025800.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>-&gt;<a href="../h_src/57675984.htm" class="variable">prev</a>;
<a id=724></a>  <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58025664.htm" class="localvar">v</a>, <a href="../h_src/57681560.htm" class="variable">VRELOC</a>, <a href="../h_src/57671224.htm" class="function">luaK_codeABx</a>(<a href="../h_src/58025528.htm" class="localvar">fs</a>, <a href="../h_src/57685164.htm" class="variable">OP_CLOSURE</a>, 0, <a href="../h_src/58025528.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675236.htm" class="variable">np</a> - 1));
<a id=725></a>  <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58025528.htm" class="localvar">fs</a>, <a href="../h_src/58025664.htm" class="localvar">v</a>);  <a  class="comments">/* fix it at the last register */</a>
}


<a id=729></a>static void <a href="../h_src/58025392.htm" class="function">open_func</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58025256.htm" class="localvar">ls</a>, <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58025120.htm" class="localvar">fs</a>, <a href="../h_src/58055856.htm" class="type">BlockCnt</a> *<a href="../h_src/58024984.htm" class="localvar">bl</a>) {
<a id=730></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58024848.htm" class="localvar">f</a> = <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=731></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675984.htm" class="variable">prev</a> = <a href="../h_src/58025256.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;  <a  class="comments">/* linked list of funcstates */</a>
<a id=732></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a> = <a href="../h_src/58025256.htm" class="localvar">ls</a>;
<a id=733></a>  <a href="../h_src/58025256.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a> = <a href="../h_src/58025120.htm" class="localvar">fs</a>;
<a id=734></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a> = 0;
<a id=735></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675372.htm" class="variable">previousline</a> = <a href="../h_src/58024848.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515256.htm" class="variable">linedefined</a>;
<a id=736></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674692.htm" class="variable">iwthabs</a> = 0;
<a id=737></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675440.htm" class="variable">lasttarget</a> = 0;
<a id=738></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> = 0;
<a id=739></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675304.htm" class="variable">nk</a> = 0;
<a id=740></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675168.htm" class="variable">nabslineinfo</a> = 0;
<a id=741></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675236.htm" class="variable">np</a> = 0;
<a id=742></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674828.htm" class="variable">nups</a> = 0;
<a id=743></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674964.htm" class="variable">ndebugvars</a> = 0;
<a id=744></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a> = 0;
<a id=745></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674624.htm" class="variable">needclose</a> = 0;
<a id=746></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675100.htm" class="variable">firstlocal</a> = <a href="../h_src/58025256.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676664.htm" class="variable">n</a>;
<a id=747></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675032.htm" class="variable">firstlabel</a> = <a href="../h_src/58025256.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700328.htm" class="variable">dyd</a>-&gt;<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677072.htm" class="variable">n</a>;
<a id=748></a>  <a href="../h_src/58025120.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a> = NULL;
<a id=749></a>  <a href="../h_src/58024848.htm" class="localvar">f</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a> = <a href="../h_src/58025256.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700260.htm" class="variable">source</a>;
<a id=750></a>  <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/58025256.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58024848.htm" class="localvar">f</a>, <a href="../h_src/58024848.htm" class="localvar">f</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>);
<a id=751></a>  <a href="../h_src/58024848.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515800.htm" class="variable">maxstacksize</a> = 2;  <a  class="comments">/* registers 0/1 are always valid */</a>
<a id=752></a>  <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/58025120.htm" class="localvar">fs</a>, <a href="../h_src/58024984.htm" class="localvar">bl</a>, 0);
}


<a id=756></a>static void <a href="../h_src/58024712.htm" class="function">close_func</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58024576.htm" class="localvar">ls</a>) {
<a id=757></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/58024440.htm" class="localvar">L</a> = <a href="../h_src/58024576.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>;
<a id=758></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58024304.htm" class="localvar">fs</a> = <a href="../h_src/58024576.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=759></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58024168.htm" class="localvar">f</a> = <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=760></a>  <a href="../h_src/57669524.htm" class="function">luaK_ret</a>(<a href="../h_src/58024304.htm" class="localvar">fs</a>, <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/58024304.htm" class="localvar">fs</a>), 0);  <a  class="comments">/* final return */</a>
<a id=761></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/58024304.htm" class="localvar">fs</a>);
<a id=762></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(fs-&gt;bl == NULL);
<a id=763></a>  <a href="../h_src/57668844.htm" class="function">luaK_finish</a>(<a href="../h_src/58024304.htm" class="localvar">fs</a>);
<a id=764></a>  <a href="../h_src/57657108.htm" class="macro">luaM_shrinkvector</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515596.htm" class="variable">sizecode</a>, <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>, <a href="../h_src/57545108.htm" class="type">Instruction</a>);
<a id=765></a>  <a href="../h_src/57657108.htm" class="macro">luaM_shrinkvector</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514304.htm" class="variable">lineinfo</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515528.htm" class="variable">sizelineinfo</a>, <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>, <a href="../h_src/57550412.htm" class="type">ls_byte</a>);
<a id=766></a>  <a href="../h_src/57657108.htm" class="macro">luaM_shrinkvector</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514168.htm" class="variable">abslineinfo</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515324.htm" class="variable">sizeabslineinfo</a>,
<a id=767></a>                       <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675168.htm" class="variable">nabslineinfo</a>, <a href="../h_src/57516344.htm" class="type">AbsLineInfo</a>);
<a id=768></a>  <a href="../h_src/57657108.htm" class="macro">luaM_shrinkvector</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515052.htm" class="variable">k</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515664.htm" class="variable">sizek</a>, <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675304.htm" class="variable">nk</a>, <a href="../h_src/57535384.htm" class="type">TValue</a>);
<a id=769></a>  <a href="../h_src/57657108.htm" class="macro">luaM_shrinkvector</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514576.htm" class="variable">p</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515460.htm" class="variable">sizep</a>, <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675236.htm" class="variable">np</a>, <a href="../h_src/57513828.htm" class="type">Proto</a> *);
<a id=770></a>  <a href="../h_src/57657108.htm" class="macro">luaM_shrinkvector</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514032.htm" class="variable">locvars</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515392.htm" class="variable">sizelocvars</a>, <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674964.htm" class="variable">ndebugvars</a>, <a href="../h_src/57516684.htm" class="type">LocVar</a>);
<a id=771></a>  <a href="../h_src/57657108.htm" class="macro">luaM_shrinkvector</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57514440.htm" class="variable">upvalues</a>, <a href="../h_src/58024168.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515732.htm" class="variable">sizeupvalues</a>, <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674828.htm" class="variable">nups</a>, <a href="../h_src/57517092.htm" class="type">Upvaldesc</a>);
<a id=772></a>  <a href="../h_src/58024576.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a> = <a href="../h_src/58024304.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675984.htm" class="variable">prev</a>;
<a id=773></a>  <a href="../h_src/57621612.htm" class="macro">luaC_checkGC</a>(<a href="../h_src/58024440.htm" class="localvar">L</a>);
}



<a id=778></a><a  class="comments">/*============================================================*/</a>
<a id=779></a><a  class="comments">/* GRAMMAR RULES */</a>
<a id=780></a><a  class="comments">/*============================================================*/</a>


<a id=783></a><a  class="comments">/*</a>
<a id=784></a><a  class="comments">** check whether current token is in the follow set of a block.</a>
<a id=785></a><a  class="comments">** 'until' closes syntactical blocks, but do not close scope,</a>
<a id=786></a><a  class="comments">** so it is handled in separate.</a>
<a id=787></a><a  class="comments">*/</a>
<a id=788></a>static int <a href="../h_src/58024032.htm" class="function">block_follow</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58023896.htm" class="localvar">ls</a>, int <a href="../h_src/58023760.htm" class="localvar">withuntil</a>) {
<a id=789></a>  switch (<a href="../h_src/58023896.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=790></a>    case <a href="../h_src/57705088.htm" class="variable">TK_ELSE</a>: case <a href="../h_src/57705020.htm" class="variable">TK_ELSEIF</a>:
<a id=791></a>    case <a href="../h_src/57704952.htm" class="variable">TK_END</a>: case <a href="../h_src/57703116.htm" class="variable">TK_EOS</a>:
      return 1;
<a id=793></a>    case <a href="../h_src/57703932.htm" class="variable">TK_UNTIL</a>: return <a href="../h_src/58023760.htm" class="localvar">withuntil</a>;
    default: return 0;
  }
}


<a id=799></a>static void <a href="../h_src/58023624.htm" class="function">statlist</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58023488.htm" class="localvar">ls</a>) {
<a id=800></a>  <a  class="comments">/* statlist -&gt; { stat [';'] } */</a>
<a id=801></a>  while (!<a href="../h_src/58024032.htm" class="function">block_follow</a>(<a href="../h_src/58023488.htm" class="localvar">ls</a>, 1)) {
<a id=802></a>    if (<a href="../h_src/58023488.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/57704136.htm" class="variable">TK_RETURN</a>) {
<a id=803></a>      <a href="../h_src/58055788.htm" class="function">statement</a>(<a href="../h_src/58023488.htm" class="localvar">ls</a>);
<a id=804></a>      return;  <a  class="comments">/* 'return' must be last statement */</a>
    }
<a id=806></a>    <a href="../h_src/58055788.htm" class="function">statement</a>(<a href="../h_src/58023488.htm" class="localvar">ls</a>);
  }
}


<a id=811></a>static void <a href="../h_src/58023352.htm" class="function">fieldsel</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58023216.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58023080.htm" class="localvar">v</a>) {
<a id=812></a>  <a  class="comments">/* fieldsel -&gt; ['.' | ':'] NAME */</a>
<a id=813></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58022944.htm" class="localvar">fs</a> = <a href="../h_src/58023216.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=814></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58022808.htm" class="localvar">key</a>;
<a id=815></a>  <a href="../h_src/57670340.htm" class="function">luaK_exp2anyregup</a>(<a href="../h_src/58022944.htm" class="localvar">fs</a>, <a href="../h_src/58023080.htm" class="localvar">v</a>);
<a id=816></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58023216.htm" class="localvar">ls</a>);  <a  class="comments">/* skip the dot or colon */</a>
<a id=817></a>  <a href="../h_src/58049940.htm" class="function">codename</a>(<a href="../h_src/58023216.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58022808.htm" class="localvar">key</a>);
<a id=818></a>  <a href="../h_src/57670000.htm" class="function">luaK_indexed</a>(<a href="../h_src/58022944.htm" class="localvar">fs</a>, <a href="../h_src/58023080.htm" class="localvar">v</a>, &amp;<a href="../h_src/58022808.htm" class="localvar">key</a>);
}


<a id=822></a>static void <a href="../h_src/58022672.htm" class="function">yindex</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58022536.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58022400.htm" class="localvar">v</a>) {
<a id=823></a>  <a  class="comments">/* index -&gt; '[' expr ']' */</a>
<a id=824></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58022536.htm" class="localvar">ls</a>);  <a  class="comments">/* skip the '[' */</a>
<a id=825></a>  <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58022536.htm" class="localvar">ls</a>, <a href="../h_src/58022400.htm" class="localvar">v</a>);
<a id=826></a>  <a href="../h_src/57670204.htm" class="function">luaK_exp2val</a>(<a href="../h_src/58022536.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58022400.htm" class="localvar">v</a>);
<a id=827></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58022536.htm" class="localvar">ls</a>, ']');
}


<a id=831></a><a  class="comments">/*</a>
<a id=832></a><a  class="comments">** {======================================================================</a>
<a id=833></a><a  class="comments">** Rules for Constructors</a>
<a id=834></a><a  class="comments">** =======================================================================</a>
<a id=835></a><a  class="comments">*/</a>


<a id=838></a>typedef struct <a href="../h_src/58022264.htm" class="class">ConsControl</a> {
<a id=839></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58022128.htm" class="variable">v</a>;  <a  class="comments">/* last list item read */</a>
<a id=840></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58022060.htm" class="variable">t</a>;  <a  class="comments">/* table descriptor */</a>
<a id=841></a>  int <a href="../h_src/58021992.htm" class="variable">nh</a>;  <a  class="comments">/* total number of 'record' elements */</a>
<a id=842></a>  int <a href="../h_src/58021924.htm" class="variable">na</a>;  <a  class="comments">/* number of array elements already stored */</a>
<a id=843></a>  int <a href="../h_src/58021856.htm" class="variable">tostore</a>;  <a  class="comments">/* number of array elements pending to be stored */</a>
<a id=844></a>} <a href="../h_src/58021788.htm" class="type">ConsControl</a>;


<a id=847></a>static void <a href="../h_src/58021720.htm" class="function">recfield</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58021584.htm" class="localvar">ls</a>, <a href="../h_src/58021788.htm" class="type">ConsControl</a> *<a href="../h_src/58021380.htm" class="localvar">cc</a>) {
<a id=848></a>  <a  class="comments">/* recfield -&gt; (NAME | '['exp']') = exp */</a>
<a id=849></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58021244.htm" class="localvar">fs</a> = <a href="../h_src/58021584.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=850></a>  int <a href="../h_src/58021108.htm" class="localvar">reg</a> = <a href="../h_src/58021584.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>;
<a id=851></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58020972.htm" class="localvar">tab</a>, <a href="../h_src/58020836.htm" class="localvar">key</a>, <a href="../h_src/58020700.htm" class="localvar">val</a>;
<a id=852></a>  if (<a href="../h_src/58021584.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/57702912.htm" class="variable">TK_NAME</a>) {
<a id=853></a>    <a href="../h_src/58054020.htm" class="function">checklimit</a>(<a href="../h_src/58021244.htm" class="localvar">fs</a>, <a href="../h_src/58021380.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021992.htm" class="variable">nh</a>, <a href="../h_src/57549800.htm" class="macro">MAX_INT</a>, &quot;items in a constructor&quot;);
<a id=854></a>    <a href="../h_src/58049940.htm" class="function">codename</a>(<a href="../h_src/58021584.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58020836.htm" class="localvar">key</a>);
  }
<a id=856></a>  else  <a  class="comments">/* ls-&gt;t.token == '[' */</a>
<a id=857></a>    <a href="../h_src/58022672.htm" class="function">yindex</a>(<a href="../h_src/58021584.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58020836.htm" class="localvar">key</a>);
<a id=858></a>  <a href="../h_src/58021380.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021992.htm" class="variable">nh</a>++;
<a id=859></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58021584.htm" class="localvar">ls</a>, '=');
<a id=860></a>  <a href="../h_src/58020972.htm" class="localvar">tab</a> = *<a href="../h_src/58021380.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022060.htm" class="variable">t</a>;
<a id=861></a>  <a href="../h_src/57670000.htm" class="function">luaK_indexed</a>(<a href="../h_src/58021244.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58020972.htm" class="localvar">tab</a>, &amp;<a href="../h_src/58020836.htm" class="localvar">key</a>);
<a id=862></a>  <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58021584.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58020700.htm" class="localvar">val</a>);
<a id=863></a>  <a href="../h_src/57669796.htm" class="function">luaK_storevar</a>(<a href="../h_src/58021244.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58020972.htm" class="localvar">tab</a>, &amp;<a href="../h_src/58020700.htm" class="localvar">val</a>);
<a id=864></a>  <a href="../h_src/58021244.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> = <a href="../h_src/58021108.htm" class="localvar">reg</a>;  <a  class="comments">/* free registers */</a>
}


<a id=868></a>static void <a href="../h_src/58020564.htm" class="function">closelistfield</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58020428.htm" class="localvar">fs</a>, <a href="../h_src/58021788.htm" class="type">ConsControl</a> *<a href="../h_src/58020292.htm" class="localvar">cc</a>) {
<a id=869></a>  if (<a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682716.htm" class="variable">VVOID</a>) return;  <a  class="comments">/* there is no list item */</a>
<a id=870></a>  <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58020428.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>);
<a id=871></a>  <a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682716.htm" class="variable">VVOID</a>;
<a id=872></a>  if (<a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a> == <a href="../h_src/57683192.htm" class="macro">LFIELDS_PER_FLUSH</a>) {
<a id=873></a>    <a href="../h_src/57668912.htm" class="function">luaK_setlist</a>(<a href="../h_src/58020428.htm" class="localvar">fs</a>, <a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022060.htm" class="variable">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, <a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021924.htm" class="variable">na</a>, <a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a>);  <a  class="comments">/* flush */</a>
<a id=874></a>    <a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021924.htm" class="variable">na</a> += <a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a>;
<a id=875></a>    <a href="../h_src/58020292.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a> = 0;  <a  class="comments">/* no more items pending */</a>
  }
}


<a id=880></a>static void <a href="../h_src/58020156.htm" class="function">lastlistfield</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58020020.htm" class="localvar">fs</a>, <a href="../h_src/58021788.htm" class="type">ConsControl</a> *<a href="../h_src/58019884.htm" class="localvar">cc</a>) {
<a id=881></a>  if (<a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a> == 0) return;
<a id=882></a>  if (<a href="../h_src/58056604.htm" class="macro">hasmultret</a>(<a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a>)) {
<a id=883></a>    <a href="../h_src/57671564.htm" class="macro">luaK_setmultret</a>(<a href="../h_src/58020020.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>);
<a id=884></a>    <a href="../h_src/57668912.htm" class="function">luaK_setlist</a>(<a href="../h_src/58020020.htm" class="localvar">fs</a>, <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022060.htm" class="variable">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021924.htm" class="variable">na</a>, <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>);
<a id=885></a>    <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021924.htm" class="variable">na</a>--;  <a  class="comments">/* do not count last expression (unknown number of elements) */</a>
  }
  else {
<a id=888></a>    if (<a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> != <a href="../h_src/57682716.htm" class="variable">VVOID</a>)
<a id=889></a>      <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58020020.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>);
<a id=890></a>    <a href="../h_src/57668912.htm" class="function">luaK_setlist</a>(<a href="../h_src/58020020.htm" class="localvar">fs</a>, <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022060.htm" class="variable">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021924.htm" class="variable">na</a>, <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a>);
  }
<a id=892></a>  <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021924.htm" class="variable">na</a> += <a href="../h_src/58019884.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a>;
}


<a id=896></a>static void <a href="../h_src/58019748.htm" class="function">listfield</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58019612.htm" class="localvar">ls</a>, <a href="../h_src/58021788.htm" class="type">ConsControl</a> *<a href="../h_src/58019476.htm" class="localvar">cc</a>) {
<a id=897></a>  <a  class="comments">/* listfield -&gt; exp */</a>
<a id=898></a>  <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58019612.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58019476.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58022128.htm" class="variable">v</a>);
<a id=899></a>  <a href="../h_src/58019476.htm" class="localvar">cc</a>-&gt;<a href="../h_src/58021856.htm" class="variable">tostore</a>++;
}


<a id=903></a>static void <a href="../h_src/58019340.htm" class="function">field</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58019204.htm" class="localvar">ls</a>, <a href="../h_src/58021788.htm" class="type">ConsControl</a> *<a href="../h_src/58019068.htm" class="localvar">cc</a>) {
<a id=904></a>  <a  class="comments">/* field -&gt; listfield | recfield */</a>
<a id=905></a>  switch(<a href="../h_src/58019204.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=906></a>    case <a href="../h_src/57702912.htm" class="variable">TK_NAME</a>: {  <a  class="comments">/* may be 'listfield' or 'recfield' */</a>
<a id=907></a>      if (<a href="../h_src/57699716.htm" class="function">luaX_lookahead</a>(<a href="../h_src/58019204.htm" class="localvar">ls</a>) != '=')  <a  class="comments">/* expression? */</a>
<a id=908></a>        <a href="../h_src/58019748.htm" class="function">listfield</a>(<a href="../h_src/58019204.htm" class="localvar">ls</a>, <a href="../h_src/58019068.htm" class="localvar">cc</a>);
      else
<a id=910></a>        <a href="../h_src/58021720.htm" class="function">recfield</a>(<a href="../h_src/58019204.htm" class="localvar">ls</a>, <a href="../h_src/58019068.htm" class="localvar">cc</a>);
      break;
    }
    case '[': {
<a id=914></a>      <a href="../h_src/58021720.htm" class="function">recfield</a>(<a href="../h_src/58019204.htm" class="localvar">ls</a>, <a href="../h_src/58019068.htm" class="localvar">cc</a>);
      break;
    }
    default: {
<a id=918></a>      <a href="../h_src/58019748.htm" class="function">listfield</a>(<a href="../h_src/58019204.htm" class="localvar">ls</a>, <a href="../h_src/58019068.htm" class="localvar">cc</a>);
      break;
    }
  }
}


<a id=925></a>static void <a href="../h_src/58018932.htm" class="function">constructor</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58018796.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58018660.htm" class="localvar">t</a>) {
<a id=926></a>  <a  class="comments">/* constructor -&gt; '{' [ field { sep field } [sep] ] '}'</a>
<a id=927></a><a  class="comments">     sep -&gt; ',' | ';' */</a>
<a id=928></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58018524.htm" class="localvar">fs</a> = <a href="../h_src/58018796.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=929></a>  int <a href="../h_src/58018388.htm" class="localvar">line</a> = <a href="../h_src/58018796.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=930></a>  int <a href="../h_src/58018252.htm" class="localvar">pc</a> = <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58018524.htm" class="localvar">fs</a>, <a href="../h_src/57689244.htm" class="variable">OP_NEWTABLE</a>, 0, 0, 0);
<a id=931></a>  <a href="../h_src/58021788.htm" class="type">ConsControl</a> <a href="../h_src/58018116.htm" class="localvar">cc</a>;
<a id=932></a>  <a href="../h_src/57671292.htm" class="function">luaK_code</a>(<a href="../h_src/58018524.htm" class="localvar">fs</a>, 0);  <a  class="comments">/* space for extra arg. */</a>
<a id=933></a>  <a href="../h_src/58018116.htm" class="localvar">cc</a>.<a href="../h_src/58021924.htm" class="variable">na</a> = <a href="../h_src/58018116.htm" class="localvar">cc</a>.<a href="../h_src/58021992.htm" class="variable">nh</a> = <a href="../h_src/58018116.htm" class="localvar">cc</a>.<a href="../h_src/58021856.htm" class="variable">tostore</a> = 0;
<a id=934></a>  <a href="../h_src/58018116.htm" class="localvar">cc</a>.<a href="../h_src/58022060.htm" class="variable">t</a> = <a href="../h_src/58018660.htm" class="localvar">t</a>;
<a id=935></a>  <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58018660.htm" class="localvar">t</a>, <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>, <a href="../h_src/58018524.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>);  <a  class="comments">/* table will be at stack top */</a>
<a id=936></a>  <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/58018524.htm" class="localvar">fs</a>, 1);
<a id=937></a>  <a href="../h_src/58050892.htm" class="function">init_exp</a>(&amp;<a href="../h_src/58018116.htm" class="localvar">cc</a>.<a href="../h_src/58022128.htm" class="variable">v</a>, <a href="../h_src/57682716.htm" class="variable">VVOID</a>, 0);  <a  class="comments">/* no value (yet) */</a>
<a id=938></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58018796.htm" class="localvar">ls</a>, '{');
  do {
<a id=940></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(cc.v.k == VVOID || cc.tostore &gt; 0);
<a id=941></a>    if (<a href="../h_src/58018796.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == '}') break;
<a id=942></a>    <a href="../h_src/58020564.htm" class="function">closelistfield</a>(<a href="../h_src/58018524.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58018116.htm" class="localvar">cc</a>);
<a id=943></a>    <a href="../h_src/58019340.htm" class="function">field</a>(<a href="../h_src/58018796.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58018116.htm" class="localvar">cc</a>);
<a id=944></a>  } while (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/58018796.htm" class="localvar">ls</a>, ',') || <a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/58018796.htm" class="localvar">ls</a>, ';'));
<a id=945></a>  <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/58018796.htm" class="localvar">ls</a>, '}', '{', <a href="../h_src/58018388.htm" class="localvar">line</a>);
<a id=946></a>  <a href="../h_src/58020156.htm" class="function">lastlistfield</a>(<a href="../h_src/58018524.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58018116.htm" class="localvar">cc</a>);
<a id=947></a>  <a href="../h_src/57668980.htm" class="function">luaK_settablesize</a>(<a href="../h_src/58018524.htm" class="localvar">fs</a>, <a href="../h_src/58018252.htm" class="localvar">pc</a>, <a href="../h_src/58018660.htm" class="localvar">t</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, <a href="../h_src/58018116.htm" class="localvar">cc</a>.<a href="../h_src/58021924.htm" class="variable">na</a>, <a href="../h_src/58018116.htm" class="localvar">cc</a>.<a href="../h_src/58021992.htm" class="variable">nh</a>);
}

<a id=950></a><a  class="comments">/* }====================================================================== */</a>


<a id=953></a>static void <a href="../h_src/58017980.htm" class="function">setvararg</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58017844.htm" class="localvar">fs</a>, int <a href="../h_src/58017708.htm" class="localvar">nparams</a>) {
<a id=954></a>  <a href="../h_src/58017844.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a> = 1;
<a id=955></a>  <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58017844.htm" class="localvar">fs</a>, <a href="../h_src/57685028.htm" class="variable">OP_VARARGPREP</a>, <a href="../h_src/58017708.htm" class="localvar">nparams</a>, 0, 0);
}


<a id=959></a>static void <a href="../h_src/58017572.htm" class="function">parlist</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58017436.htm" class="localvar">ls</a>) {
<a id=960></a>  <a  class="comments">/* parlist -&gt; [ {NAME ','} (NAME | '...') ] */</a>
<a id=961></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58017300.htm" class="localvar">fs</a> = <a href="../h_src/58017436.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=962></a>  <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/58017164.htm" class="localvar">f</a> = <a href="../h_src/58017300.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>;
<a id=963></a>  int <a href="../h_src/58017028.htm" class="localvar">nparams</a> = 0;
<a id=964></a>  int <a href="../h_src/58016892.htm" class="localvar">isvararg</a> = 0;
<a id=965></a>  if (<a href="../h_src/58017436.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> != ')') {  <a  class="comments">/* is 'parlist' not empty? */</a>
    do {
<a id=967></a>      switch (<a href="../h_src/58017436.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=968></a>        case <a href="../h_src/57702912.htm" class="variable">TK_NAME</a>: {
<a id=969></a>          <a href="../h_src/58048716.htm" class="function">new_localvar</a>(<a href="../h_src/58017436.htm" class="localvar">ls</a>, <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/58017436.htm" class="localvar">ls</a>));
<a id=970></a>          <a href="../h_src/58017028.htm" class="localvar">nparams</a>++;
          break;
        }
<a id=973></a>        case <a href="../h_src/57703660.htm" class="variable">TK_DOTS</a>: {
<a id=974></a>          <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58017436.htm" class="localvar">ls</a>);
<a id=975></a>          <a href="../h_src/58016892.htm" class="localvar">isvararg</a> = 1;
          break;
        }
<a id=978></a>        default: <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/58017436.htm" class="localvar">ls</a>, &quot;&lt;name&gt; or '...' expected&quot;);
      }
<a id=980></a>    } while (!<a href="../h_src/58016892.htm" class="localvar">isvararg</a> &amp;&amp; <a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/58017436.htm" class="localvar">ls</a>, ','));
  }
<a id=982></a>  <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/58017436.htm" class="localvar">ls</a>, <a href="../h_src/58017028.htm" class="localvar">nparams</a>);
<a id=983></a>  <a href="../h_src/58017164.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/58017300.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>);
<a id=984></a>  if (<a href="../h_src/58016892.htm" class="localvar">isvararg</a>)
<a id=985></a>    <a href="../h_src/58017980.htm" class="function">setvararg</a>(<a href="../h_src/58017300.htm" class="localvar">fs</a>, <a href="../h_src/58017164.htm" class="localvar">f</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a>);  <a  class="comments">/* declared vararg */</a>
<a id=986></a>  <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/58017300.htm" class="localvar">fs</a>, <a href="../h_src/58017300.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>);  <a  class="comments">/* reserve registers for parameters */</a>
}


<a id=990></a>static void <a href="../h_src/58016756.htm" class="function">body</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58016620.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58016484.htm" class="localvar">e</a>, int <a href="../h_src/58016348.htm" class="localvar">ismethod</a>, int <a href="../h_src/58016212.htm" class="localvar">line</a>) {
<a id=991></a>  <a  class="comments">/* body -&gt;  '(' parlist ')' block END */</a>
<a id=992></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> <a href="../h_src/58016076.htm" class="localvar">new_fs</a>;
<a id=993></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/58015940.htm" class="localvar">bl</a>;
<a id=994></a>  <a href="../h_src/58016076.htm" class="localvar">new_fs</a>.<a href="../h_src/57676052.htm" class="variable">f</a> = <a href="../h_src/58026888.htm" class="function">addprototype</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>);
<a id=995></a>  <a href="../h_src/58016076.htm" class="localvar">new_fs</a>.<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515256.htm" class="variable">linedefined</a> = <a href="../h_src/58016212.htm" class="localvar">line</a>;
<a id=996></a>  <a href="../h_src/58025392.htm" class="function">open_func</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58016076.htm" class="localvar">new_fs</a>, &amp;<a href="../h_src/58015940.htm" class="localvar">bl</a>);
<a id=997></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>, '(');
<a id=998></a>  if (<a href="../h_src/58016348.htm" class="localvar">ismethod</a>) {
<a id=999></a>    <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>, &quot;self&quot;);  <a  class="comments">/* create 'self' parameter */</a>
<a id=1000></a>    <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>, 1);
  }
<a id=1002></a>  <a href="../h_src/58017572.htm" class="function">parlist</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>);
<a id=1003></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>, ')');
<a id=1004></a>  <a href="../h_src/58023624.htm" class="function">statlist</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>);
<a id=1005></a>  <a href="../h_src/58016076.htm" class="localvar">new_fs</a>.<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515188.htm" class="variable">lastlinedefined</a> = <a href="../h_src/58016620.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1006></a>  <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>, <a href="../h_src/57704952.htm" class="variable">TK_END</a>, <a href="../h_src/57704748.htm" class="variable">TK_FUNCTION</a>, <a href="../h_src/58016212.htm" class="localvar">line</a>);
<a id=1007></a>  <a href="../h_src/58025936.htm" class="function">codeclosure</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>, <a href="../h_src/58016484.htm" class="localvar">e</a>);
<a id=1008></a>  <a href="../h_src/58024712.htm" class="function">close_func</a>(<a href="../h_src/58016620.htm" class="localvar">ls</a>);
}


<a id=1012></a>static int <a href="../h_src/58015804.htm" class="function">explist</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58015668.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58015532.htm" class="localvar">v</a>) {
<a id=1013></a>  <a  class="comments">/* explist -&gt; expr { ',' expr } */</a>
<a id=1014></a>  int <a href="../h_src/58015396.htm" class="localvar">n</a> = 1;  <a  class="comments">/* at least one expression */</a>
<a id=1015></a>  <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58015668.htm" class="localvar">ls</a>, <a href="../h_src/58015532.htm" class="localvar">v</a>);
<a id=1016></a>  while (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/58015668.htm" class="localvar">ls</a>, ',')) {
<a id=1017></a>    <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58015668.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58015532.htm" class="localvar">v</a>);
<a id=1018></a>    <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58015668.htm" class="localvar">ls</a>, <a href="../h_src/58015532.htm" class="localvar">v</a>);
<a id=1019></a>    <a href="../h_src/58015396.htm" class="localvar">n</a>++;
  }
<a id=1021></a>  return <a href="../h_src/58015396.htm" class="localvar">n</a>;
}


<a id=1025></a>static void <a href="../h_src/58015260.htm" class="function">funcargs</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58015124.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58014988.htm" class="localvar">f</a>, int <a href="../h_src/58014852.htm" class="localvar">line</a>) {
<a id=1026></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58014716.htm" class="localvar">fs</a> = <a href="../h_src/58015124.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1027></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58014580.htm" class="localvar">args</a>;
<a id=1028></a>  int <a href="../h_src/58014444.htm" class="localvar">base</a>, <a href="../h_src/58014308.htm" class="localvar">nparams</a>;
<a id=1029></a>  switch (<a href="../h_src/58015124.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=1030></a>    case '(': {  <a  class="comments">/* funcargs -&gt; '(' [ explist ] ')' */</a>
<a id=1031></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58015124.htm" class="localvar">ls</a>);
<a id=1032></a>      if (<a href="../h_src/58015124.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == ')')  <a  class="comments">/* arg list is empty? */</a>
<a id=1033></a>        <a href="../h_src/58014580.htm" class="localvar">args</a>.<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682716.htm" class="variable">VVOID</a>;
      else {
<a id=1035></a>        <a href="../h_src/58015804.htm" class="function">explist</a>(<a href="../h_src/58015124.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58014580.htm" class="localvar">args</a>);
<a id=1036></a>        if (<a href="../h_src/58056604.htm" class="macro">hasmultret</a>(<a href="../h_src/58014580.htm" class="localvar">args</a>.<a href="../h_src/57680744.htm" class="variable">k</a>))
<a id=1037></a>          <a href="../h_src/57671564.htm" class="macro">luaK_setmultret</a>(<a href="../h_src/58014716.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58014580.htm" class="localvar">args</a>);
      }
<a id=1039></a>      <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/58015124.htm" class="localvar">ls</a>, ')', '(', <a href="../h_src/58014852.htm" class="localvar">line</a>);
      break;
    }
<a id=1042></a>    case '{': {  <a  class="comments">/* funcargs -&gt; constructor */</a>
<a id=1043></a>      <a href="../h_src/58018932.htm" class="function">constructor</a>(<a href="../h_src/58015124.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58014580.htm" class="localvar">args</a>);
      break;
    }
<a id=1046></a>    case <a href="../h_src/57702844.htm" class="variable">TK_STRING</a>: {  <a  class="comments">/* funcargs -&gt; STRING */</a>
<a id=1047></a>      <a href="../h_src/58050348.htm" class="function">codestring</a>(&amp;<a href="../h_src/58014580.htm" class="localvar">args</a>, <a href="../h_src/58015124.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701892.htm" class="variable">seminfo</a>.<a href="../h_src/57702300.htm" class="variable">ts</a>);
<a id=1048></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58015124.htm" class="localvar">ls</a>);  <a  class="comments">/* must use 'seminfo' before 'next' */</a>
      break;
    }
    default: {
<a id=1052></a>      <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/58015124.htm" class="localvar">ls</a>, &quot;function arguments expected&quot;);
    }
  }
<a id=1055></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(f-&gt;k == VNONRELOC);
<a id=1056></a>  <a href="../h_src/58014444.htm" class="localvar">base</a> = <a href="../h_src/58014988.htm" class="localvar">f</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>;  <a  class="comments">/* base register for call */</a>
<a id=1057></a>  if (<a href="../h_src/58056604.htm" class="macro">hasmultret</a>(<a href="../h_src/58014580.htm" class="localvar">args</a>.<a href="../h_src/57680744.htm" class="variable">k</a>))
<a id=1058></a>    <a href="../h_src/58014308.htm" class="localvar">nparams</a> = <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>;  <a  class="comments">/* open call */</a>
  else {
<a id=1060></a>    if (<a href="../h_src/58014580.htm" class="localvar">args</a>.<a href="../h_src/57680744.htm" class="variable">k</a> != <a href="../h_src/57682716.htm" class="variable">VVOID</a>)
<a id=1061></a>      <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58014716.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58014580.htm" class="localvar">args</a>);  <a  class="comments">/* close last argument */</a>
<a id=1062></a>    <a href="../h_src/58014308.htm" class="localvar">nparams</a> = <a href="../h_src/58014716.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> - (<a href="../h_src/58014444.htm" class="localvar">base</a>+1);
  }
<a id=1064></a>  <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58014988.htm" class="localvar">f</a>, <a href="../h_src/57681492.htm" class="variable">VCALL</a>, <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58014716.htm" class="localvar">fs</a>, <a href="../h_src/57685912.htm" class="variable">OP_CALL</a>, <a href="../h_src/58014444.htm" class="localvar">base</a>, <a href="../h_src/58014308.htm" class="localvar">nparams</a>+1, 2));
<a id=1065></a>  <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/58014716.htm" class="localvar">fs</a>, <a href="../h_src/58014852.htm" class="localvar">line</a>);
<a id=1066></a>  <a href="../h_src/58014716.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> = <a href="../h_src/58014444.htm" class="localvar">base</a>+1;  <a  class="comments">/* call remove function and arguments and leaves</a>
<a id=1067></a><a  class="comments">                            (unless changed) one result */</a>
}




<a id=1073></a><a  class="comments">/*</a>
<a id=1074></a><a  class="comments">** {======================================================================</a>
<a id=1075></a><a  class="comments">** Expression parsing</a>
<a id=1076></a><a  class="comments">** =======================================================================</a>
<a id=1077></a><a  class="comments">*/</a>


<a id=1080></a>static void <a href="../h_src/58014172.htm" class="function">primaryexp</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58014036.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58013900.htm" class="localvar">v</a>) {
<a id=1081></a>  <a  class="comments">/* primaryexp -&gt; NAME | '(' expr ')' */</a>
<a id=1082></a>  switch (<a href="../h_src/58014036.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
    case '(': {
<a id=1084></a>      int <a href="../h_src/58013764.htm" class="localvar">line</a> = <a href="../h_src/58014036.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1085></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58014036.htm" class="localvar">ls</a>);
<a id=1086></a>      <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58014036.htm" class="localvar">ls</a>, <a href="../h_src/58013900.htm" class="localvar">v</a>);
<a id=1087></a>      <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/58014036.htm" class="localvar">ls</a>, ')', '(', <a href="../h_src/58013764.htm" class="localvar">line</a>);
<a id=1088></a>      <a href="../h_src/57670476.htm" class="function">luaK_dischargevars</a>(<a href="../h_src/58014036.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58013900.htm" class="localvar">v</a>);
      return;
    }
<a id=1091></a>    case <a href="../h_src/57702912.htm" class="variable">TK_NAME</a>: {
<a id=1092></a>      <a href="../h_src/58037836.htm" class="function">singlevar</a>(<a href="../h_src/58014036.htm" class="localvar">ls</a>, <a href="../h_src/58013900.htm" class="localvar">v</a>);
      return;
    }
    default: {
<a id=1096></a>      <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/58014036.htm" class="localvar">ls</a>, &quot;unexpected symbol&quot;);
    }
  }
}


<a id=1102></a>static void <a href="../h_src/58013628.htm" class="function">suffixedexp</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58013492.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58013356.htm" class="localvar">v</a>) {
<a id=1103></a>  <a  class="comments">/* suffixedexp -&gt;</a>
<a id=1104></a><a  class="comments">       primaryexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs } */</a>
<a id=1105></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58013220.htm" class="localvar">fs</a> = <a href="../h_src/58013492.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1106></a>  int <a href="../h_src/58013084.htm" class="localvar">line</a> = <a href="../h_src/58013492.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1107></a>  <a href="../h_src/58014172.htm" class="function">primaryexp</a>(<a href="../h_src/58013492.htm" class="localvar">ls</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>);
  for (;;) {
<a id=1109></a>    switch (<a href="../h_src/58013492.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=1110></a>      case '.': {  <a  class="comments">/* fieldsel */</a>
<a id=1111></a>        <a href="../h_src/58023352.htm" class="function">fieldsel</a>(<a href="../h_src/58013492.htm" class="localvar">ls</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>);
        break;
      }
<a id=1114></a>      case '[': {  <a  class="comments">/* '[' exp ']' */</a>
<a id=1115></a>        <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58012948.htm" class="localvar">key</a>;
<a id=1116></a>        <a href="../h_src/57670340.htm" class="function">luaK_exp2anyregup</a>(<a href="../h_src/58013220.htm" class="localvar">fs</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>);
<a id=1117></a>        <a href="../h_src/58022672.htm" class="function">yindex</a>(<a href="../h_src/58013492.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58012948.htm" class="localvar">key</a>);
<a id=1118></a>        <a href="../h_src/57670000.htm" class="function">luaK_indexed</a>(<a href="../h_src/58013220.htm" class="localvar">fs</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>, &amp;<a href="../h_src/58012948.htm" class="localvar">key</a>);
        break;
      }
<a id=1121></a>      case ':': {  <a  class="comments">/* ':' NAME funcargs */</a>
<a id=1122></a>        <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58012812.htm" class="localvar">key</a>;
<a id=1123></a>        <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58013492.htm" class="localvar">ls</a>);
<a id=1124></a>        <a href="../h_src/58049940.htm" class="function">codename</a>(<a href="../h_src/58013492.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58012812.htm" class="localvar">key</a>);
<a id=1125></a>        <a href="../h_src/57670068.htm" class="function">luaK_self</a>(<a href="../h_src/58013220.htm" class="localvar">fs</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>, &amp;<a href="../h_src/58012812.htm" class="localvar">key</a>);
<a id=1126></a>        <a href="../h_src/58015260.htm" class="function">funcargs</a>(<a href="../h_src/58013492.htm" class="localvar">ls</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>, <a href="../h_src/58013084.htm" class="localvar">line</a>);
        break;
      }
<a id=1129></a>      case '(': case <a href="../h_src/57702844.htm" class="variable">TK_STRING</a>: case '{': {  <a  class="comments">/* funcargs */</a>
<a id=1130></a>        <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58013220.htm" class="localvar">fs</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>);
<a id=1131></a>        <a href="../h_src/58015260.htm" class="function">funcargs</a>(<a href="../h_src/58013492.htm" class="localvar">ls</a>, <a href="../h_src/58013356.htm" class="localvar">v</a>, <a href="../h_src/58013084.htm" class="localvar">line</a>);
        break;
      }
      default: return;
    }
  }
}


<a id=1140></a>static void <a href="../h_src/58012676.htm" class="function">simpleexp</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58012540.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58012404.htm" class="localvar">v</a>) {
<a id=1141></a>  <a  class="comments">/* simpleexp -&gt; FLT | INT | STRING | NIL | TRUE | FALSE | ... |</a>
<a id=1142></a><a  class="comments">                  constructor | FUNCTION body | suffixedexp */</a>
<a id=1143></a>  switch (<a href="../h_src/58012540.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=1144></a>    case <a href="../h_src/57703048.htm" class="variable">TK_FLT</a>: {
<a id=1145></a>      <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58012404.htm" class="localvar">v</a>, <a href="../h_src/57682376.htm" class="variable">VKFLT</a>, 0);
<a id=1146></a>      <a href="../h_src/58012404.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680540.htm" class="variable">nval</a> = <a href="../h_src/58012540.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701892.htm" class="variable">seminfo</a>.<a href="../h_src/57702436.htm" class="variable">r</a>;
      break;
    }
<a id=1149></a>    case <a href="../h_src/57702980.htm" class="variable">TK_INT</a>: {
<a id=1150></a>      <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58012404.htm" class="localvar">v</a>, <a href="../h_src/57682308.htm" class="variable">VKINT</a>, 0);
<a id=1151></a>      <a href="../h_src/58012404.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680608.htm" class="variable">ival</a> = <a href="../h_src/58012540.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701892.htm" class="variable">seminfo</a>.<a href="../h_src/57702368.htm" class="variable">i</a>;
      break;
    }
<a id=1154></a>    case <a href="../h_src/57702844.htm" class="variable">TK_STRING</a>: {
<a id=1155></a>      <a href="../h_src/58050348.htm" class="function">codestring</a>(<a href="../h_src/58012404.htm" class="localvar">v</a>, <a href="../h_src/58012540.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701892.htm" class="variable">seminfo</a>.<a href="../h_src/57702300.htm" class="variable">ts</a>);
      break;
    }
<a id=1158></a>    case <a href="../h_src/57704408.htm" class="variable">TK_NIL</a>: {
<a id=1159></a>      <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58012404.htm" class="localvar">v</a>, <a href="../h_src/57682648.htm" class="variable">VNIL</a>, 0);
      break;
    }
<a id=1162></a>    case <a href="../h_src/57704000.htm" class="variable">TK_TRUE</a>: {
<a id=1163></a>      <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58012404.htm" class="localvar">v</a>, <a href="../h_src/57682580.htm" class="variable">VTRUE</a>, 0);
      break;
    }
<a id=1166></a>    case <a href="../h_src/57704884.htm" class="variable">TK_FALSE</a>: {
<a id=1167></a>      <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58012404.htm" class="localvar">v</a>, <a href="../h_src/57682512.htm" class="variable">VFALSE</a>, 0);
      break;
    }
<a id=1170></a>    case <a href="../h_src/57703660.htm" class="variable">TK_DOTS</a>: {  <a  class="comments">/* vararg */</a>
<a id=1171></a>      <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58012268.htm" class="localvar">fs</a> = <a href="../h_src/58012540.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1172></a>      <a href="../h_src/58052116.htm" class="macro">check_condition</a>(<a href="../h_src/58012540.htm" class="localvar">ls</a>, <a href="../h_src/58012268.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>,
                      &quot;cannot use '...' outside a vararg function&quot;);
<a id=1174></a>      <a href="../h_src/58050892.htm" class="function">init_exp</a>(<a href="../h_src/58012404.htm" class="localvar">v</a>, <a href="../h_src/57681424.htm" class="variable">VVARARG</a>, <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58012268.htm" class="localvar">fs</a>, <a href="../h_src/57685096.htm" class="variable">OP_VARARG</a>, 0, 0, 1));
      break;
    }
<a id=1177></a>    case '{': {  <a  class="comments">/* constructor */</a>
<a id=1178></a>      <a href="../h_src/58018932.htm" class="function">constructor</a>(<a href="../h_src/58012540.htm" class="localvar">ls</a>, <a href="../h_src/58012404.htm" class="localvar">v</a>);
      return;
    }
<a id=1181></a>    case <a href="../h_src/57704748.htm" class="variable">TK_FUNCTION</a>: {
<a id=1182></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58012540.htm" class="localvar">ls</a>);
<a id=1183></a>      <a href="../h_src/58016756.htm" class="function">body</a>(<a href="../h_src/58012540.htm" class="localvar">ls</a>, <a href="../h_src/58012404.htm" class="localvar">v</a>, 0, <a href="../h_src/58012540.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>);
      return;
    }
    default: {
<a id=1187></a>      <a href="../h_src/58013628.htm" class="function">suffixedexp</a>(<a href="../h_src/58012540.htm" class="localvar">ls</a>, <a href="../h_src/58012404.htm" class="localvar">v</a>);
      return;
    }
  }
<a id=1191></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58012540.htm" class="localvar">ls</a>);
}


<a id=1195></a>static <a href="../h_src/57671768.htm" class="type">UnOpr</a> <a href="../h_src/58012132.htm" class="function">getunopr</a> (int <a href="../h_src/58011996.htm" class="localvar">op</a>) {
<a id=1196></a>  switch (<a href="../h_src/58011996.htm" class="localvar">op</a>) {
<a id=1197></a>    case <a href="../h_src/57704340.htm" class="variable">TK_NOT</a>: return <a href="../h_src/57672108.htm" class="variable">OPR_NOT</a>;
<a id=1198></a>    case '-': return <a href="../h_src/57672244.htm" class="variable">OPR_MINUS</a>;
<a id=1199></a>    case '~': return <a href="../h_src/57672176.htm" class="variable">OPR_BNOT</a>;
<a id=1200></a>    case '#': return <a href="../h_src/57672040.htm" class="variable">OPR_LEN</a>;
<a id=1201></a>    default: return <a href="../h_src/57671972.htm" class="variable">OPR_NOUNOPR</a>;
  }
}


<a id=1206></a>static <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/58011860.htm" class="function">getbinopr</a> (int <a href="../h_src/58011724.htm" class="localvar">op</a>) {
<a id=1207></a>  switch (<a href="../h_src/58011724.htm" class="localvar">op</a>) {
<a id=1208></a>    case '+': return <a href="../h_src/57674216.htm" class="variable">OPR_ADD</a>;
<a id=1209></a>    case '-': return <a href="../h_src/57674148.htm" class="variable">OPR_SUB</a>;
<a id=1210></a>    case '*': return <a href="../h_src/57674080.htm" class="variable">OPR_MUL</a>;
<a id=1211></a>    case '%': return <a href="../h_src/57674012.htm" class="variable">OPR_MOD</a>;
<a id=1212></a>    case '^': return <a href="../h_src/57673944.htm" class="variable">OPR_POW</a>;
<a id=1213></a>    case '/': return <a href="../h_src/57673876.htm" class="variable">OPR_DIV</a>;
<a id=1214></a>    case <a href="../h_src/57703796.htm" class="variable">TK_IDIV</a>: return <a href="../h_src/57673808.htm" class="variable">OPR_IDIV</a>;
<a id=1215></a>    case '&amp;': return <a href="../h_src/57673740.htm" class="variable">OPR_BAND</a>;
<a id=1216></a>    case '|': return <a href="../h_src/57673672.htm" class="variable">OPR_BOR</a>;
<a id=1217></a>    case '~': return <a href="../h_src/57673604.htm" class="variable">OPR_BXOR</a>;
<a id=1218></a>    case <a href="../h_src/57703320.htm" class="variable">TK_SHL</a>: return <a href="../h_src/57673536.htm" class="variable">OPR_SHL</a>;
<a id=1219></a>    case <a href="../h_src/57703252.htm" class="variable">TK_SHR</a>: return <a href="../h_src/57673468.htm" class="variable">OPR_SHR</a>;
<a id=1220></a>    case <a href="../h_src/57703728.htm" class="variable">TK_CONCAT</a>: return <a href="../h_src/57673400.htm" class="variable">OPR_CONCAT</a>;
<a id=1221></a>    case <a href="../h_src/57703388.htm" class="variable">TK_NE</a>: return <a href="../h_src/57673128.htm" class="variable">OPR_NE</a>;
<a id=1222></a>    case <a href="../h_src/57703592.htm" class="variable">TK_EQ</a>: return <a href="../h_src/57673332.htm" class="variable">OPR_EQ</a>;
<a id=1223></a>    case '&lt;': return <a href="../h_src/57673264.htm" class="variable">OPR_LT</a>;
<a id=1224></a>    case <a href="../h_src/57703456.htm" class="variable">TK_LE</a>: return <a href="../h_src/57673196.htm" class="variable">OPR_LE</a>;
<a id=1225></a>    case '&gt;': return <a href="../h_src/57673060.htm" class="variable">OPR_GT</a>;
<a id=1226></a>    case <a href="../h_src/57703524.htm" class="variable">TK_GE</a>: return <a href="../h_src/57672992.htm" class="variable">OPR_GE</a>;
<a id=1227></a>    case <a href="../h_src/57705292.htm" class="variable">TK_AND</a>: return <a href="../h_src/57672924.htm" class="variable">OPR_AND</a>;
<a id=1228></a>    case <a href="../h_src/57704272.htm" class="variable">TK_OR</a>: return <a href="../h_src/57672856.htm" class="variable">OPR_OR</a>;
<a id=1229></a>    default: return <a href="../h_src/57672788.htm" class="variable">OPR_NOBINOPR</a>;
  }
}


<a id=1234></a><a  class="comments">/*</a>
<a id=1235></a><a  class="comments">** Priority table for binary operators.</a>
<a id=1236></a><a  class="comments">*/</a>
static const struct {
<a id=1238></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/58011520.htm" class="variable">left</a>;  <a  class="comments">/* left priority for each binary operator */</a>
<a id=1239></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/58011452.htm" class="variable">right</a>; <a  class="comments">/* right priority */</a>
<a id=1240></a>} <a href="../h_src/58011180.htm" class="variable">priority</a>[] = {  <a  class="comments">/* ORDER OPR */</a>
<a id=1241></a>   {10, 10}, {10, 10},           <a  class="comments">/* '+' '-' */</a>
<a id=1242></a>   {11, 11}, {11, 11},           <a  class="comments">/* '*' '%' */</a>
<a id=1243></a>   {14, 13},                  <a  class="comments">/* '^' (right associative) */</a>
<a id=1244></a>   {11, 11}, {11, 11},           <a  class="comments">/* '/' '//' */</a>
<a id=1245></a>   {6, 6}, {4, 4}, {5, 5},   <a  class="comments">/* '&amp;' '|' '~' */</a>
<a id=1246></a>   {7, 7}, {7, 7},           <a  class="comments">/* '&lt;&lt;' '&gt;&gt;' */</a>
<a id=1247></a>   {9, 8},                   <a  class="comments">/* '..' (right associative) */</a>
<a id=1248></a>   {3, 3}, {3, 3}, {3, 3},   <a  class="comments">/* ==, &lt;, &lt;= */</a>
<a id=1249></a>   {3, 3}, {3, 3}, {3, 3},   <a  class="comments">/* ~=, &gt;, &gt;= */</a>
<a id=1250></a>   {2, 2}, {1, 1}            <a  class="comments">/* and, or */</a>
};

<a id=1253></a>#define <a href="../h_src/58011112.htm" class="macro">UNARY_PRIORITY</a>	12  <a  class="comments">/* priority for unary operators */</a>


<a id=1256></a><a  class="comments">/*</a>
<a id=1257></a><a  class="comments">** subexpr -&gt; (simpleexp | unop subexpr) { binop subexpr }</a>
<a id=1258></a><a  class="comments">** where 'binop' is any binary operator with a priority higher than 'limit'</a>
<a id=1259></a><a  class="comments">*/</a>
<a id=1260></a>static <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/58010976.htm" class="function">subexpr</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58010840.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58010704.htm" class="localvar">v</a>, int <a href="../h_src/58010568.htm" class="localvar">limit</a>) {
<a id=1261></a>  <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/58010432.htm" class="localvar">op</a>;
<a id=1262></a>  <a href="../h_src/57671768.htm" class="type">UnOpr</a> <a href="../h_src/58010296.htm" class="localvar">uop</a>;
<a id=1263></a>  <a href="../h_src/58035932.htm" class="macro">enterlevel</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>);
<a id=1264></a>  <a href="../h_src/58010296.htm" class="localvar">uop</a> = <a href="../h_src/58012132.htm" class="function">getunopr</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>);
<a id=1265></a>  if (<a href="../h_src/58010296.htm" class="localvar">uop</a> != <a href="../h_src/57671972.htm" class="variable">OPR_NOUNOPR</a>) {  <a  class="comments">/* prefix (unary) operator? */</a>
<a id=1266></a>    int <a href="../h_src/58010160.htm" class="localvar">line</a> = <a href="../h_src/58010840.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1267></a>    <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>);  <a  class="comments">/* skip operator */</a>
<a id=1268></a>    <a href="../h_src/58010976.htm" class="function">subexpr</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>, <a href="../h_src/58010704.htm" class="localvar">v</a>, <a href="../h_src/58011112.htm" class="macro">UNARY_PRIORITY</a>);
<a id=1269></a>    <a href="../h_src/57669184.htm" class="function">luaK_prefix</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58010296.htm" class="localvar">uop</a>, <a href="../h_src/58010704.htm" class="localvar">v</a>, <a href="../h_src/58010160.htm" class="localvar">line</a>);
  }
<a id=1271></a>  else <a href="../h_src/58012676.htm" class="function">simpleexp</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>, <a href="../h_src/58010704.htm" class="localvar">v</a>);
<a id=1272></a>  <a  class="comments">/* expand while operators have priorities higher than 'limit' */</a>
<a id=1273></a>  <a href="../h_src/58010432.htm" class="localvar">op</a> = <a href="../h_src/58011860.htm" class="function">getbinopr</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>);
<a id=1274></a>  while (<a href="../h_src/58010432.htm" class="localvar">op</a> != <a href="../h_src/57672788.htm" class="variable">OPR_NOBINOPR</a> &amp;&amp; <a href="../h_src/58011180.htm" class="variable">priority</a>[<a href="../h_src/58010432.htm" class="localvar">op</a>].<a href="../h_src/58011520.htm" class="variable">left</a> &gt; <a href="../h_src/58010568.htm" class="localvar">limit</a>) {
<a id=1275></a>    <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58010024.htm" class="localvar">v2</a>;
<a id=1276></a>    <a href="../h_src/57672584.htm" class="type">BinOpr</a> <a href="../h_src/58009888.htm" class="localvar">nextop</a>;
<a id=1277></a>    int <a href="../h_src/58009752.htm" class="localvar">line</a> = <a href="../h_src/58010840.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1278></a>    <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>);  <a  class="comments">/* skip operator */</a>
<a id=1279></a>    <a href="../h_src/57669116.htm" class="function">luaK_infix</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58010432.htm" class="localvar">op</a>, <a href="../h_src/58010704.htm" class="localvar">v</a>);
<a id=1280></a>    <a  class="comments">/* read sub-expression with higher priority */</a>
<a id=1281></a>    <a href="../h_src/58009888.htm" class="localvar">nextop</a> = <a href="../h_src/58010976.htm" class="function">subexpr</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58010024.htm" class="localvar">v2</a>, <a href="../h_src/58011180.htm" class="variable">priority</a>[<a href="../h_src/58010432.htm" class="localvar">op</a>].<a href="../h_src/58011452.htm" class="variable">right</a>);
<a id=1282></a>    <a href="../h_src/57669048.htm" class="function">luaK_posfix</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/58010432.htm" class="localvar">op</a>, <a href="../h_src/58010704.htm" class="localvar">v</a>, &amp;<a href="../h_src/58010024.htm" class="localvar">v2</a>, <a href="../h_src/58009752.htm" class="localvar">line</a>);
<a id=1283></a>    <a href="../h_src/58010432.htm" class="localvar">op</a> = <a href="../h_src/58009888.htm" class="localvar">nextop</a>;
  }
<a id=1285></a>  <a href="../h_src/58035796.htm" class="macro">leavelevel</a>(<a href="../h_src/58010840.htm" class="localvar">ls</a>);
<a id=1286></a>  return <a href="../h_src/58010432.htm" class="localvar">op</a>;  <a  class="comments">/* return first untreated operator */</a>
}


<a id=1290></a>static void <a href="../h_src/58055652.htm" class="function">expr</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58009616.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58009480.htm" class="localvar">v</a>) {
<a id=1291></a>  <a href="../h_src/58010976.htm" class="function">subexpr</a>(<a href="../h_src/58009616.htm" class="localvar">ls</a>, <a href="../h_src/58009480.htm" class="localvar">v</a>, 0);
}

<a id=1294></a><a  class="comments">/* }==================================================================== */</a>



<a id=1298></a><a  class="comments">/*</a>
<a id=1299></a><a  class="comments">** {======================================================================</a>
<a id=1300></a><a  class="comments">** Rules for Statements</a>
<a id=1301></a><a  class="comments">** =======================================================================</a>
<a id=1302></a><a  class="comments">*/</a>


<a id=1305></a>static void <a href="../h_src/58009344.htm" class="function">block</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58009208.htm" class="localvar">ls</a>) {
<a id=1306></a>  <a  class="comments">/* block -&gt; statlist */</a>
<a id=1307></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58009072.htm" class="localvar">fs</a> = <a href="../h_src/58009208.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1308></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/58008936.htm" class="localvar">bl</a>;
<a id=1309></a>  <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/58009072.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58008936.htm" class="localvar">bl</a>, 0);
<a id=1310></a>  <a href="../h_src/58023624.htm" class="function">statlist</a>(<a href="../h_src/58009208.htm" class="localvar">ls</a>);
<a id=1311></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/58009072.htm" class="localvar">fs</a>);
}


<a id=1315></a><a  class="comments">/*</a>
<a id=1316></a><a  class="comments">** structure to chain all variables in the left-hand side of an</a>
<a id=1317></a><a  class="comments">** assignment</a>
<a id=1318></a><a  class="comments">*/</a>
<a id=1319></a>struct <a href="../h_src/58008800.htm" class="class">LHS_assign</a> {
<a id=1320></a>  struct <a href="../h_src/58008800.htm" class="class">LHS_assign</a> *<a href="../h_src/58008528.htm" class="variable">prev</a>;
<a id=1321></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58008460.htm" class="variable">v</a>;  <a  class="comments">/* variable (global, local, upvalue, or indexed) */</a>
};


<a id=1325></a><a  class="comments">/*</a>
<a id=1326></a><a  class="comments">** check whether, in an assignment to an upvalue/local variable, the</a>
<a id=1327></a><a  class="comments">** upvalue/local variable is begin used in a previous assignment to a</a>
<a id=1328></a><a  class="comments">** table. If so, save original upvalue/local value in a safe place and</a>
<a id=1329></a><a  class="comments">** use this safe copy in the previous assignment.</a>
<a id=1330></a><a  class="comments">*/</a>
<a id=1331></a>static void <a href="../h_src/58008392.htm" class="function">check_conflict</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58008256.htm" class="localvar">ls</a>, struct <a href="../h_src/58008800.htm" class="class">LHS_assign</a> *<a href="../h_src/58008120.htm" class="localvar">lh</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/58007984.htm" class="localvar">v</a>) {
<a id=1332></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58007848.htm" class="localvar">fs</a> = <a href="../h_src/58008256.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1333></a>  int <a href="../h_src/58007712.htm" class="localvar">extra</a> = <a href="../h_src/58007848.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>;  <a  class="comments">/* eventual position to save local variable */</a>
<a id=1334></a>  int <a href="../h_src/58007576.htm" class="localvar">conflict</a> = 0;
<a id=1335></a>  for (; <a href="../h_src/58008120.htm" class="localvar">lh</a>; <a href="../h_src/58008120.htm" class="localvar">lh</a> = <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008528.htm" class="variable">prev</a>) {  <a  class="comments">/* check all previous assignments */</a>
<a id=1336></a>    if (<a href="../h_src/57681016.htm" class="macro">vkisindexed</a>(<a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a>)) {  <a  class="comments">/* assignment to table field? */</a>
<a id=1337></a>      if (<a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681832.htm" class="variable">VINDEXUP</a>) {  <a  class="comments">/* is table an upvalue? */</a>
<a id=1338></a>        if (<a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682036.htm" class="variable">VUPVAL</a> &amp;&amp; <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a> == <a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>) {
<a id=1339></a>          <a href="../h_src/58007576.htm" class="localvar">conflict</a> = 1;  <a  class="comments">/* table is the upvalue being assigned now */</a>
<a id=1340></a>          <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57681696.htm" class="variable">VINDEXSTR</a>;
<a id=1341></a>          <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a> = <a href="../h_src/58007712.htm" class="localvar">extra</a>;  <a  class="comments">/* assignment will use safe copy */</a>
        }
      }
<a id=1344></a>      else {  <a  class="comments">/* table is a register */</a>
<a id=1345></a>        if (<a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682104.htm" class="variable">VLOCAL</a> &amp;&amp; <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a> == <a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a>) {
<a id=1346></a>          <a href="../h_src/58007576.htm" class="localvar">conflict</a> = 1;  <a  class="comments">/* table is the local being assigned now */</a>
<a id=1347></a>          <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680200.htm" class="variable">t</a> = <a href="../h_src/58007712.htm" class="localvar">extra</a>;  <a  class="comments">/* assignment will use safe copy */</a>
        }
<a id=1349></a>        <a  class="comments">/* is index the local being assigned? */</a>
<a id=1350></a>        if (<a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681900.htm" class="variable">VINDEXED</a> &amp;&amp; <a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682104.htm" class="variable">VLOCAL</a> &amp;&amp;
<a id=1351></a>            <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a> == <a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a>) {
<a id=1352></a>          <a href="../h_src/58007576.htm" class="localvar">conflict</a> = 1;
<a id=1353></a>          <a href="../h_src/58008120.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680064.htm" class="variable">ind</a>.<a href="../h_src/57680268.htm" class="variable">idx</a> = <a href="../h_src/58007712.htm" class="localvar">extra</a>;  <a  class="comments">/* previous assignment will use safe copy */</a>
        }
      }
    }
  }
<a id=1358></a>  if (<a href="../h_src/58007576.htm" class="localvar">conflict</a>) {
<a id=1359></a>    <a  class="comments">/* copy upvalue/local value to a temporary (in position 'extra') */</a>
<a id=1360></a>    if (<a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682104.htm" class="variable">VLOCAL</a>)
<a id=1361></a>      <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58007848.htm" class="localvar">fs</a>, <a href="../h_src/57690536.htm" class="variable">OP_MOVE</a>, <a href="../h_src/58007712.htm" class="localvar">extra</a>, <a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57679724.htm" class="variable">var</a>.<a href="../h_src/57679928.htm" class="variable">ridx</a>, 0);
    else
<a id=1363></a>      <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58007848.htm" class="localvar">fs</a>, <a href="../h_src/57689924.htm" class="variable">OP_GETUPVAL</a>, <a href="../h_src/58007712.htm" class="localvar">extra</a>, <a href="../h_src/58007984.htm" class="localvar">v</a>-&gt;<a href="../h_src/57679588.htm" class="variable">u</a>.<a href="../h_src/57680404.htm" class="variable">info</a>, 0);
<a id=1364></a>    <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/58007848.htm" class="localvar">fs</a>, 1);
  }
}

<a id=1368></a><a  class="comments">/*</a>
<a id=1369></a><a  class="comments">** Parse and compile a multiple assignment. The first &quot;variable&quot;</a>
<a id=1370></a><a  class="comments">** (a 'suffixedexp') was already read by the caller.</a>
<a id=1371></a><a  class="comments">**</a>
<a id=1372></a><a  class="comments">** assignment -&gt; suffixedexp restassign</a>
<a id=1373></a><a  class="comments">** restassign -&gt; ',' suffixedexp restassign | '=' explist</a>
<a id=1374></a><a  class="comments">*/</a>
<a id=1375></a>static void <a href="../h_src/58007440.htm" class="function">restassign</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58007304.htm" class="localvar">ls</a>, struct <a href="../h_src/58008800.htm" class="class">LHS_assign</a> *<a href="../h_src/58007168.htm" class="localvar">lh</a>, int <a href="../h_src/58007032.htm" class="localvar">nvars</a>) {
<a id=1376></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58006896.htm" class="localvar">e</a>;
<a id=1377></a>  <a href="../h_src/58052116.htm" class="macro">check_condition</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, <a href="../h_src/57681152.htm" class="macro">vkisvar</a>(<a href="../h_src/58007168.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a>), &quot;syntax error&quot;);
<a id=1378></a>  <a href="../h_src/58045316.htm" class="function">check_readonly</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58007168.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>);
<a id=1379></a>  if (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, ',')) {  <a  class="comments">/* restassign -&gt; ',' suffixedexp restassign */</a>
<a id=1380></a>    struct <a href="../h_src/58008800.htm" class="class">LHS_assign</a> <a href="../h_src/58006760.htm" class="localvar">nv</a>;
<a id=1381></a>    <a href="../h_src/58006760.htm" class="localvar">nv</a>.<a href="../h_src/58008528.htm" class="variable">prev</a> = <a href="../h_src/58007168.htm" class="localvar">lh</a>;
<a id=1382></a>    <a href="../h_src/58013628.htm" class="function">suffixedexp</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58006760.htm" class="localvar">nv</a>.<a href="../h_src/58008460.htm" class="variable">v</a>);
<a id=1383></a>    if (!<a href="../h_src/57681016.htm" class="macro">vkisindexed</a>(<a href="../h_src/58006760.htm" class="localvar">nv</a>.<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a>))
<a id=1384></a>      <a href="../h_src/58008392.htm" class="function">check_conflict</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, <a href="../h_src/58007168.htm" class="localvar">lh</a>, &amp;<a href="../h_src/58006760.htm" class="localvar">nv</a>.<a href="../h_src/58008460.htm" class="variable">v</a>);
<a id=1385></a>    <a href="../h_src/58035932.htm" class="macro">enterlevel</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>);  <a  class="comments">/* control recursion depth */</a>
<a id=1386></a>    <a href="../h_src/58007440.htm" class="function">restassign</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58006760.htm" class="localvar">nv</a>, <a href="../h_src/58007032.htm" class="localvar">nvars</a>+1);
<a id=1387></a>    <a href="../h_src/58035796.htm" class="macro">leavelevel</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>);
  }
<a id=1389></a>  else {  <a  class="comments">/* restassign -&gt; '=' explist */</a>
<a id=1390></a>    int <a href="../h_src/58006624.htm" class="localvar">nexps</a>;
<a id=1391></a>    <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, '=');
<a id=1392></a>    <a href="../h_src/58006624.htm" class="localvar">nexps</a> = <a href="../h_src/58015804.htm" class="function">explist</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58006896.htm" class="localvar">e</a>);
<a id=1393></a>    if (<a href="../h_src/58006624.htm" class="localvar">nexps</a> != <a href="../h_src/58007032.htm" class="localvar">nvars</a>)
<a id=1394></a>      <a href="../h_src/58037020.htm" class="function">adjust_assign</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>, <a href="../h_src/58007032.htm" class="localvar">nvars</a>, <a href="../h_src/58006624.htm" class="localvar">nexps</a>, &amp;<a href="../h_src/58006896.htm" class="localvar">e</a>);
    else {
<a id=1396></a>      <a href="../h_src/57669660.htm" class="function">luaK_setoneret</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/58006896.htm" class="localvar">e</a>);  <a  class="comments">/* close last expression */</a>
<a id=1397></a>      <a href="../h_src/57669796.htm" class="function">luaK_storevar</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/58007168.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>, &amp;<a href="../h_src/58006896.htm" class="localvar">e</a>);
<a id=1398></a>      return;  <a  class="comments">/* avoid default */</a>
    }
  }
<a id=1401></a>  <a href="../h_src/58050892.htm" class="function">init_exp</a>(&amp;<a href="../h_src/58006896.htm" class="localvar">e</a>, <a href="../h_src/57682172.htm" class="variable">VNONRELOC</a>, <a href="../h_src/58007304.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>-1);  <a  class="comments">/* default assignment */</a>
<a id=1402></a>  <a href="../h_src/57669796.htm" class="function">luaK_storevar</a>(<a href="../h_src/58007304.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/58007168.htm" class="localvar">lh</a>-&gt;<a href="../h_src/58008460.htm" class="variable">v</a>, &amp;<a href="../h_src/58006896.htm" class="localvar">e</a>);
}


<a id=1406></a>static int <a href="../h_src/58006488.htm" class="function">cond</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58006352.htm" class="localvar">ls</a>) {
<a id=1407></a>  <a  class="comments">/* cond -&gt; exp */</a>
<a id=1408></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58006216.htm" class="localvar">v</a>;
<a id=1409></a>  <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58006352.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58006216.htm" class="localvar">v</a>);  <a  class="comments">/* read condition */</a>
<a id=1410></a>  if (<a href="../h_src/58006216.htm" class="localvar">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57682648.htm" class="variable">VNIL</a>) <a href="../h_src/58006216.htm" class="localvar">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682512.htm" class="variable">VFALSE</a>;  <a  class="comments">/* 'falses' are all equal here */</a>
<a id=1411></a>  <a href="../h_src/57669932.htm" class="function">luaK_goiftrue</a>(<a href="../h_src/58006352.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/58006216.htm" class="localvar">v</a>);
<a id=1412></a>  return <a href="../h_src/58006216.htm" class="localvar">v</a>.<a href="../h_src/57679452.htm" class="variable">f</a>;
}


<a id=1416></a>static void <a href="../h_src/58006080.htm" class="function">gotostat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58005944.htm" class="localvar">ls</a>) {
<a id=1417></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58005808.htm" class="localvar">fs</a> = <a href="../h_src/58005944.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1418></a>  int <a href="../h_src/58005672.htm" class="localvar">line</a> = <a href="../h_src/58005944.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1419></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58005536.htm" class="localvar">name</a> = <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/58005944.htm" class="localvar">ls</a>);  <a  class="comments">/* label's name */</a>
<a id=1420></a>  <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58005400.htm" class="localvar">lb</a> = <a href="../h_src/58033960.htm" class="function">findlabel</a>(<a href="../h_src/58005944.htm" class="localvar">ls</a>, <a href="../h_src/58005536.htm" class="localvar">name</a>);
<a id=1421></a>  if (<a href="../h_src/58005400.htm" class="localvar">lb</a> == NULL)  <a  class="comments">/* no label? */</a>
<a id=1422></a>    <a  class="comments">/* forward jump; will be resolved when the label is declared */</a>
<a id=1423></a>    <a href="../h_src/58032192.htm" class="function">newgotoentry</a>(<a href="../h_src/58005944.htm" class="localvar">ls</a>, <a href="../h_src/58005536.htm" class="localvar">name</a>, <a href="../h_src/58005672.htm" class="localvar">line</a>, <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/58005808.htm" class="localvar">fs</a>));
<a id=1424></a>  else {  <a  class="comments">/* found a label */</a>
<a id=1425></a>    <a  class="comments">/* backward jump; will be resolved here */</a>
<a id=1426></a>    int <a href="../h_src/58005264.htm" class="localvar">lblevel</a> = <a href="../h_src/58047220.htm" class="function">reglevel</a>(<a href="../h_src/58005808.htm" class="localvar">fs</a>, <a href="../h_src/58005400.htm" class="localvar">lb</a>-&gt;<a href="../h_src/57677548.htm" class="variable">nactvar</a>);  <a  class="comments">/* label level */</a>
<a id=1427></a>    if (<a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/58005808.htm" class="localvar">fs</a>) &gt; <a href="../h_src/58005264.htm" class="localvar">lblevel</a>)  <a  class="comments">/* leaving the scope of a variable? */</a>
<a id=1428></a>      <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58005808.htm" class="localvar">fs</a>, <a href="../h_src/57686864.htm" class="variable">OP_CLOSE</a>, <a href="../h_src/58005264.htm" class="localvar">lblevel</a>, 0, 0);
<a id=1429></a>    <a  class="comments">/* create jump and link it to the label */</a>
<a id=1430></a>    <a href="../h_src/57669456.htm" class="function">luaK_patchlist</a>(<a href="../h_src/58005808.htm" class="localvar">fs</a>, <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/58005808.htm" class="localvar">fs</a>), <a href="../h_src/58005400.htm" class="localvar">lb</a>-&gt;<a href="../h_src/57677684.htm" class="variable">pc</a>);
  }
}


<a id=1435></a><a  class="comments">/*</a>
<a id=1436></a><a  class="comments">** Break statement. Semantically equivalent to &quot;goto break&quot;.</a>
<a id=1437></a><a  class="comments">*/</a>
<a id=1438></a>static void <a href="../h_src/58005128.htm" class="function">breakstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58004992.htm" class="localvar">ls</a>) {
<a id=1439></a>  int <a href="../h_src/58004856.htm" class="localvar">line</a> = <a href="../h_src/58004992.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1440></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58004992.htm" class="localvar">ls</a>);  <a  class="comments">/* skip break */</a>
<a id=1441></a>  <a href="../h_src/58032192.htm" class="function">newgotoentry</a>(<a href="../h_src/58004992.htm" class="localvar">ls</a>, <a href="../h_src/57619572.htm" class="macro">luaS_newliteral</a>(<a href="../h_src/58004992.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &quot;break&quot;), <a href="../h_src/58004856.htm" class="localvar">line</a>, <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/58004992.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>));
}


<a id=1445></a><a  class="comments">/*</a>
<a id=1446></a><a  class="comments">** Check whether there is already a label with the given 'name'.</a>
<a id=1447></a><a  class="comments">*/</a>
<a id=1448></a>static void <a href="../h_src/58004720.htm" class="function">checkrepeated</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58004584.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58004448.htm" class="localvar">name</a>) {
<a id=1449></a>  <a href="../h_src/57677412.htm" class="type">Labeldesc</a> *<a href="../h_src/58004312.htm" class="localvar">lb</a> = <a href="../h_src/58033960.htm" class="function">findlabel</a>(<a href="../h_src/58004584.htm" class="localvar">ls</a>, <a href="../h_src/58004448.htm" class="localvar">name</a>);
<a id=1450></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58004312.htm" class="localvar">lb</a> != NULL)) {  <a  class="comments">/* already defined? */</a>
<a id=1451></a>    const char *<a href="../h_src/58004176.htm" class="localvar">msg</a> = &quot;label '%s' already defined on line %d&quot;;
<a id=1452></a>    <a href="../h_src/58004176.htm" class="localvar">msg</a> = <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/58004584.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/58004176.htm" class="localvar">msg</a>, <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58004448.htm" class="localvar">name</a>), <a href="../h_src/58004312.htm" class="localvar">lb</a>-&gt;<a href="../h_src/57677616.htm" class="variable">line</a>);
<a id=1453></a>    <a href="../h_src/57668776.htm" class="function">luaK_semerror</a>(<a href="../h_src/58004584.htm" class="localvar">ls</a>, <a href="../h_src/58004176.htm" class="localvar">msg</a>);  <a  class="comments">/* error */</a>
  }
}


<a id=1458></a>static void <a href="../h_src/58004040.htm" class="function">labelstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58003904.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/58003768.htm" class="localvar">name</a>, int <a href="../h_src/58003632.htm" class="localvar">line</a>) {
<a id=1459></a>  <a  class="comments">/* label -&gt; '::' NAME '::' */</a>
<a id=1460></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58003904.htm" class="localvar">ls</a>, <a href="../h_src/57703184.htm" class="variable">TK_DBCOLON</a>);  <a  class="comments">/* skip double colon */</a>
<a id=1461></a>  while (<a href="../h_src/58003904.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == ';' || <a href="../h_src/58003904.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/57703184.htm" class="variable">TK_DBCOLON</a>)
<a id=1462></a>    <a href="../h_src/58055788.htm" class="function">statement</a>(<a href="../h_src/58003904.htm" class="localvar">ls</a>);  <a  class="comments">/* skip other no-op statements */</a>
<a id=1463></a>  <a href="../h_src/58004720.htm" class="function">checkrepeated</a>(<a href="../h_src/58003904.htm" class="localvar">ls</a>, <a href="../h_src/58003768.htm" class="localvar">name</a>);  <a  class="comments">/* check for repeated labels */</a>
<a id=1464></a>  <a href="../h_src/58030696.htm" class="function">createlabel</a>(<a href="../h_src/58003904.htm" class="localvar">ls</a>, <a href="../h_src/58003768.htm" class="localvar">name</a>, <a href="../h_src/58003632.htm" class="localvar">line</a>, <a href="../h_src/58024032.htm" class="function">block_follow</a>(<a href="../h_src/58003904.htm" class="localvar">ls</a>, 0));
}


<a id=1468></a>static void <a href="../h_src/58003496.htm" class="function">whilestat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58003360.htm" class="localvar">ls</a>, int <a href="../h_src/58003224.htm" class="localvar">line</a>) {
<a id=1469></a>  <a  class="comments">/* whilestat -&gt; WHILE cond DO block END */</a>
<a id=1470></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58003088.htm" class="localvar">fs</a> = <a href="../h_src/58003360.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1471></a>  int <a href="../h_src/58002952.htm" class="localvar">whileinit</a>;
<a id=1472></a>  int <a href="../h_src/58002816.htm" class="localvar">condexit</a>;
<a id=1473></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/58002680.htm" class="localvar">bl</a>;
<a id=1474></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58003360.htm" class="localvar">ls</a>);  <a  class="comments">/* skip WHILE */</a>
<a id=1475></a>  <a href="../h_src/58002952.htm" class="localvar">whileinit</a> = <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a>(<a href="../h_src/58003088.htm" class="localvar">fs</a>);
<a id=1476></a>  <a href="../h_src/58002816.htm" class="localvar">condexit</a> = <a href="../h_src/58006488.htm" class="function">cond</a>(<a href="../h_src/58003360.htm" class="localvar">ls</a>);
<a id=1477></a>  <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/58003088.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58002680.htm" class="localvar">bl</a>, 1);
<a id=1478></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/58003360.htm" class="localvar">ls</a>, <a href="../h_src/57705156.htm" class="variable">TK_DO</a>);
<a id=1479></a>  <a href="../h_src/58009344.htm" class="function">block</a>(<a href="../h_src/58003360.htm" class="localvar">ls</a>);
<a id=1480></a>  <a href="../h_src/57671428.htm" class="macro">luaK_jumpto</a>(<a href="../h_src/58003088.htm" class="localvar">fs</a>, <a href="../h_src/58002952.htm" class="localvar">whileinit</a>);
<a id=1481></a>  <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/58003360.htm" class="localvar">ls</a>, <a href="../h_src/57704952.htm" class="variable">TK_END</a>, <a href="../h_src/57703864.htm" class="variable">TK_WHILE</a>, <a href="../h_src/58003224.htm" class="localvar">line</a>);
<a id=1482></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/58003088.htm" class="localvar">fs</a>);
<a id=1483></a>  <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/58003088.htm" class="localvar">fs</a>, <a href="../h_src/58002816.htm" class="localvar">condexit</a>);  <a  class="comments">/* false conditions finish the loop */</a>
}


<a id=1487></a>static void <a href="../h_src/58002544.htm" class="function">repeatstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58002408.htm" class="localvar">ls</a>, int <a href="../h_src/58002272.htm" class="localvar">line</a>) {
<a id=1488></a>  <a  class="comments">/* repeatstat -&gt; REPEAT block UNTIL cond */</a>
<a id=1489></a>  int <a href="../h_src/58002136.htm" class="localvar">condexit</a>;
<a id=1490></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58002000.htm" class="localvar">fs</a> = <a href="../h_src/58002408.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1491></a>  int <a href="../h_src/58001864.htm" class="localvar">repeat_init</a> = <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>);
<a id=1492></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/58001728.htm" class="localvar">bl1</a>, <a href="../h_src/58001592.htm" class="localvar">bl2</a>;
<a id=1493></a>  <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58001728.htm" class="localvar">bl1</a>, 1);  <a  class="comments">/* loop block */</a>
<a id=1494></a>  <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>, &amp;<a href="../h_src/58001592.htm" class="localvar">bl2</a>, 0);  <a  class="comments">/* scope block */</a>
<a id=1495></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/58002408.htm" class="localvar">ls</a>);  <a  class="comments">/* skip REPEAT */</a>
<a id=1496></a>  <a href="../h_src/58023624.htm" class="function">statlist</a>(<a href="../h_src/58002408.htm" class="localvar">ls</a>);
<a id=1497></a>  <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/58002408.htm" class="localvar">ls</a>, <a href="../h_src/57703932.htm" class="variable">TK_UNTIL</a>, <a href="../h_src/57704204.htm" class="variable">TK_REPEAT</a>, <a href="../h_src/58002272.htm" class="localvar">line</a>);
<a id=1498></a>  <a href="../h_src/58002136.htm" class="localvar">condexit</a> = <a href="../h_src/58006488.htm" class="function">cond</a>(<a href="../h_src/58002408.htm" class="localvar">ls</a>);  <a  class="comments">/* read condition (inside scope block) */</a>
<a id=1499></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>);  <a  class="comments">/* finish scope */</a>
<a id=1500></a>  if (<a href="../h_src/58001592.htm" class="localvar">bl2</a>.<a href="../h_src/58056060.htm" class="variable">upval</a>) {  <a  class="comments">/* upvalues? */</a>
<a id=1501></a>    int <a href="../h_src/58001456.htm" class="localvar">exit</a> = <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>);  <a  class="comments">/* normal exit must jump over fix */</a>
<a id=1502></a>    <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>, <a href="../h_src/58002136.htm" class="localvar">condexit</a>);  <a  class="comments">/* repetition must close upvalues */</a>
<a id=1503></a>    <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>, <a href="../h_src/57686864.htm" class="variable">OP_CLOSE</a>, <a href="../h_src/58047220.htm" class="function">reglevel</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>, <a href="../h_src/58001592.htm" class="localvar">bl2</a>.<a href="../h_src/58056128.htm" class="variable">nactvar</a>), 0, 0);
<a id=1504></a>    <a href="../h_src/58002136.htm" class="localvar">condexit</a> = <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>);  <a  class="comments">/* repeat after closing upvalues */</a>
<a id=1505></a>    <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>, <a href="../h_src/58001456.htm" class="localvar">exit</a>);  <a  class="comments">/* normal exit comes to here */</a>
  }
<a id=1507></a>  <a href="../h_src/57669456.htm" class="function">luaK_patchlist</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>, <a href="../h_src/58002136.htm" class="localvar">condexit</a>, <a href="../h_src/58001864.htm" class="localvar">repeat_init</a>);  <a  class="comments">/* close the loop */</a>
<a id=1508></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/58002000.htm" class="localvar">fs</a>);  <a  class="comments">/* finish loop */</a>
}


<a id=1512></a><a  class="comments">/*</a>
<a id=1513></a><a  class="comments">** Read an expression and generate code to put its results in next</a>
<a id=1514></a><a  class="comments">** stack slot.</a>
<a id=1515></a><a  class="comments">**</a>
<a id=1516></a><a  class="comments">*/</a>
<a id=1517></a>static void <a href="../h_src/58001320.htm" class="function">exp1</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/58001184.htm" class="localvar">ls</a>) {
<a id=1518></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/58001048.htm" class="localvar">e</a>;
<a id=1519></a>  <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/58001184.htm" class="localvar">ls</a>, &amp;<a href="../h_src/58001048.htm" class="localvar">e</a>);
<a id=1520></a>  <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/58001184.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/58001048.htm" class="localvar">e</a>);
<a id=1521></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(e.k == VNONRELOC);
}


<a id=1525></a><a  class="comments">/*</a>
<a id=1526></a><a  class="comments">** Fix for instruction at position 'pc' to jump to 'dest'.</a>
<a id=1527></a><a  class="comments">** (Jump addresses are relative in Lua). 'back' true means</a>
<a id=1528></a><a  class="comments">** a back jump.</a>
<a id=1529></a><a  class="comments">*/</a>
<a id=1530></a>static void <a href="../h_src/58000912.htm" class="function">fixforjump</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/58000776.htm" class="localvar">fs</a>, int <a href="../h_src/58000640.htm" class="localvar">pc</a>, int <a href="../h_src/58000504.htm" class="localvar">dest</a>, int <a href="../h_src/58000368.htm" class="localvar">back</a>) {
<a id=1531></a>  <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/58000232.htm" class="localvar">jmp</a> = &amp;<a href="../h_src/58000776.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>[<a href="../h_src/58000640.htm" class="localvar">pc</a>];
<a id=1532></a>  int <a href="../h_src/58000096.htm" class="localvar">offset</a> = <a href="../h_src/58000504.htm" class="localvar">dest</a> - (<a href="../h_src/58000640.htm" class="localvar">pc</a> + 1);
<a id=1533></a>  if (<a href="../h_src/58000368.htm" class="localvar">back</a>)
<a id=1534></a>    <a href="../h_src/58000096.htm" class="localvar">offset</a> = -<a href="../h_src/58000096.htm" class="localvar">offset</a>;
<a id=1535></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/58000096.htm" class="localvar">offset</a> &gt; <a href="../h_src/57696520.htm" class="macro">MAXARG_Bx</a>))
<a id=1536></a>    <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/58000776.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675780.htm" class="variable">ls</a>, &quot;control structure too long&quot;);
<a id=1537></a>  <a href="../h_src/57692440.htm" class="macro">SETARG_Bx</a>(*<a href="../h_src/58000232.htm" class="localvar">jmp</a>, <a href="../h_src/58000096.htm" class="localvar">offset</a>);
}


<a id=1541></a><a  class="comments">/*</a>
<a id=1542></a><a  class="comments">** Generate code for a 'for' loop.</a>
<a id=1543></a><a  class="comments">*/</a>
<a id=1544></a>static void <a href="../h_src/57999960.htm" class="function">forbody</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57999824.htm" class="localvar">ls</a>, int <a href="../h_src/57999688.htm" class="localvar">base</a>, int <a href="../h_src/57999552.htm" class="localvar">line</a>, int <a href="../h_src/57999416.htm" class="localvar">nvars</a>, int <a href="../h_src/57999280.htm" class="localvar">isgen</a>) {
<a id=1545></a>  <a  class="comments">/* forbody -&gt; DO block */</a>
<a id=1546></a>  static const <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57999076.htm" class="localvar">forprep</a>[2] = {<a href="../h_src/57685504.htm" class="variable">OP_FORPREP</a>, <a href="../h_src/57685436.htm" class="variable">OP_TFORPREP</a>};
<a id=1547></a>  static const <a href="../h_src/57684756.htm" class="type">OpCode</a> <a href="../h_src/57998940.htm" class="localvar">forloop</a>[2] = {<a href="../h_src/57685572.htm" class="variable">OP_FORLOOP</a>, <a href="../h_src/57685300.htm" class="variable">OP_TFORLOOP</a>};
<a id=1548></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/57998804.htm" class="localvar">bl</a>;
<a id=1549></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57998668.htm" class="localvar">fs</a> = <a href="../h_src/57999824.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1550></a>  int <a href="../h_src/57998532.htm" class="localvar">prep</a>, <a href="../h_src/57998396.htm" class="localvar">endfor</a>;
<a id=1551></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/57999824.htm" class="localvar">ls</a>, <a href="../h_src/57705156.htm" class="variable">TK_DO</a>);
<a id=1552></a>  <a href="../h_src/57998532.htm" class="localvar">prep</a> = <a href="../h_src/57671224.htm" class="function">luaK_codeABx</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57999076.htm" class="localvar">forprep</a>[<a href="../h_src/57999280.htm" class="localvar">isgen</a>], <a href="../h_src/57999688.htm" class="localvar">base</a>, 0);
<a id=1553></a>  <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57998804.htm" class="localvar">bl</a>, 0);  <a  class="comments">/* scope for declared variables */</a>
<a id=1554></a>  <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/57999824.htm" class="localvar">ls</a>, <a href="../h_src/57999416.htm" class="localvar">nvars</a>);
<a id=1555></a>  <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57999416.htm" class="localvar">nvars</a>);
<a id=1556></a>  <a href="../h_src/58009344.htm" class="function">block</a>(<a href="../h_src/57999824.htm" class="localvar">ls</a>);
<a id=1557></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>);  <a  class="comments">/* end of scope for declared variables */</a>
<a id=1558></a>  <a href="../h_src/58000912.htm" class="function">fixforjump</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57998532.htm" class="localvar">prep</a>, <a href="../h_src/57669252.htm" class="function">luaK_getlabel</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>), 0);
<a id=1559></a>  if (<a href="../h_src/57999280.htm" class="localvar">isgen</a>) {  <a  class="comments">/* generic for? */</a>
<a id=1560></a>    <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57685368.htm" class="variable">OP_TFORCALL</a>, <a href="../h_src/57999688.htm" class="localvar">base</a>, 0, <a href="../h_src/57999416.htm" class="localvar">nvars</a>);
<a id=1561></a>    <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57999552.htm" class="localvar">line</a>);
  }
<a id=1563></a>  <a href="../h_src/57998396.htm" class="localvar">endfor</a> = <a href="../h_src/57671224.htm" class="function">luaK_codeABx</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57998940.htm" class="localvar">forloop</a>[<a href="../h_src/57999280.htm" class="localvar">isgen</a>], <a href="../h_src/57999688.htm" class="localvar">base</a>, 0);
<a id=1564></a>  <a href="../h_src/58000912.htm" class="function">fixforjump</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57998396.htm" class="localvar">endfor</a>, <a href="../h_src/57998532.htm" class="localvar">prep</a> + 1, 1);
<a id=1565></a>  <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/57998668.htm" class="localvar">fs</a>, <a href="../h_src/57999552.htm" class="localvar">line</a>);
}


<a id=1569></a>static void <a href="../h_src/57998260.htm" class="function">fornum</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57998124.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57997988.htm" class="localvar">varname</a>, int <a href="../h_src/57997852.htm" class="localvar">line</a>) {
<a id=1570></a>  <a  class="comments">/* fornum -&gt; NAME = exp,exp[,exp] forbody */</a>
<a id=1571></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57997716.htm" class="localvar">fs</a> = <a href="../h_src/57998124.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1572></a>  int <a href="../h_src/57997580.htm" class="localvar">base</a> = <a href="../h_src/57997716.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>;
<a id=1573></a>  <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, &quot;(for state)&quot;);
<a id=1574></a>  <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, &quot;(for state)&quot;);
<a id=1575></a>  <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, &quot;(for state)&quot;);
<a id=1576></a>  <a href="../h_src/58048716.htm" class="function">new_localvar</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, <a href="../h_src/57997988.htm" class="localvar">varname</a>);
<a id=1577></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, '=');
<a id=1578></a>  <a href="../h_src/58001320.htm" class="function">exp1</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>);  <a  class="comments">/* initial value */</a>
<a id=1579></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, ',');
<a id=1580></a>  <a href="../h_src/58001320.htm" class="function">exp1</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>);  <a  class="comments">/* limit */</a>
<a id=1581></a>  if (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, ','))
<a id=1582></a>    <a href="../h_src/58001320.htm" class="function">exp1</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>);  <a  class="comments">/* optional step */</a>
<a id=1583></a>  else {  <a  class="comments">/* default step = 1 */</a>
<a id=1584></a>    <a href="../h_src/57670544.htm" class="function">luaK_int</a>(<a href="../h_src/57997716.htm" class="localvar">fs</a>, <a href="../h_src/57997716.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>, 1);
<a id=1585></a>    <a href="../h_src/57670680.htm" class="function">luaK_reserveregs</a>(<a href="../h_src/57997716.htm" class="localvar">fs</a>, 1);
  }
<a id=1587></a>  <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, 3);  <a  class="comments">/* control variables */</a>
<a id=1588></a>  <a href="../h_src/57999960.htm" class="function">forbody</a>(<a href="../h_src/57998124.htm" class="localvar">ls</a>, <a href="../h_src/57997580.htm" class="localvar">base</a>, <a href="../h_src/57997852.htm" class="localvar">line</a>, 1, 0);
}


<a id=1592></a>static void <a href="../h_src/57997444.htm" class="function">forlist</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57997308.htm" class="localvar">ls</a>, <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57997172.htm" class="localvar">indexname</a>) {
<a id=1593></a>  <a  class="comments">/* forlist -&gt; NAME {,NAME} IN explist forbody */</a>
<a id=1594></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57997036.htm" class="localvar">fs</a> = <a href="../h_src/57997308.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1595></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57996900.htm" class="localvar">e</a>;
<a id=1596></a>  int <a href="../h_src/57996764.htm" class="localvar">nvars</a> = 5;  <a  class="comments">/* gen, state, control, toclose, 'indexname' */</a>
<a id=1597></a>  int <a href="../h_src/57996628.htm" class="localvar">line</a>;
<a id=1598></a>  int <a href="../h_src/57996492.htm" class="localvar">base</a> = <a href="../h_src/57997036.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a>;
<a id=1599></a>  <a  class="comments">/* create control variables */</a>
<a id=1600></a>  <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, &quot;(for state)&quot;);
<a id=1601></a>  <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, &quot;(for state)&quot;);
<a id=1602></a>  <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, &quot;(for state)&quot;);
<a id=1603></a>  <a href="../h_src/58047764.htm" class="macro">new_localvarliteral</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, &quot;(for state)&quot;);
<a id=1604></a>  <a  class="comments">/* create declared variables */</a>
<a id=1605></a>  <a href="../h_src/58048716.htm" class="function">new_localvar</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, <a href="../h_src/57997172.htm" class="localvar">indexname</a>);
<a id=1606></a>  while (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, ',')) {
<a id=1607></a>    <a href="../h_src/58048716.htm" class="function">new_localvar</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>));
<a id=1608></a>    <a href="../h_src/57996764.htm" class="localvar">nvars</a>++;
  }
<a id=1610></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, <a href="../h_src/57704544.htm" class="variable">TK_IN</a>);
<a id=1611></a>  <a href="../h_src/57996628.htm" class="localvar">line</a> = <a href="../h_src/57997308.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1612></a>  <a href="../h_src/58037020.htm" class="function">adjust_assign</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, 4, <a href="../h_src/58015804.htm" class="function">explist</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57996900.htm" class="localvar">e</a>), &amp;<a href="../h_src/57996900.htm" class="localvar">e</a>);
<a id=1613></a>  <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, 4);  <a  class="comments">/* control variables */</a>
<a id=1614></a>  <a href="../h_src/58039196.htm" class="function">marktobeclosed</a>(<a href="../h_src/57997036.htm" class="localvar">fs</a>);  <a  class="comments">/* last control var. must be closed */</a>
<a id=1615></a>  <a href="../h_src/57670612.htm" class="function">luaK_checkstack</a>(<a href="../h_src/57997036.htm" class="localvar">fs</a>, 3);  <a  class="comments">/* extra space to call generator */</a>
<a id=1616></a>  <a href="../h_src/57999960.htm" class="function">forbody</a>(<a href="../h_src/57997308.htm" class="localvar">ls</a>, <a href="../h_src/57996492.htm" class="localvar">base</a>, <a href="../h_src/57996628.htm" class="localvar">line</a>, <a href="../h_src/57996764.htm" class="localvar">nvars</a> - 4, 1);
}


<a id=1620></a>static void <a href="../h_src/57996356.htm" class="function">forstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57996220.htm" class="localvar">ls</a>, int <a href="../h_src/57996084.htm" class="localvar">line</a>) {
<a id=1621></a>  <a  class="comments">/* forstat -&gt; FOR (fornum | forlist) END */</a>
<a id=1622></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57995948.htm" class="localvar">fs</a> = <a href="../h_src/57996220.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1623></a>  <a href="../h_src/57522736.htm" class="type">TString</a> *<a href="../h_src/57995812.htm" class="localvar">varname</a>;
<a id=1624></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/57995676.htm" class="localvar">bl</a>;
<a id=1625></a>  <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/57995948.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57995676.htm" class="localvar">bl</a>, 1);  <a  class="comments">/* scope for loop and control variables */</a>
<a id=1626></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57996220.htm" class="localvar">ls</a>);  <a  class="comments">/* skip 'for' */</a>
<a id=1627></a>  <a href="../h_src/57995812.htm" class="localvar">varname</a> = <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/57996220.htm" class="localvar">ls</a>);  <a  class="comments">/* first variable name */</a>
<a id=1628></a>  switch (<a href="../h_src/57996220.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=1629></a>    case '=': <a href="../h_src/57998260.htm" class="function">fornum</a>(<a href="../h_src/57996220.htm" class="localvar">ls</a>, <a href="../h_src/57995812.htm" class="localvar">varname</a>, <a href="../h_src/57996084.htm" class="localvar">line</a>); break;
<a id=1630></a>    case ',': case <a href="../h_src/57704544.htm" class="variable">TK_IN</a>: <a href="../h_src/57997444.htm" class="function">forlist</a>(<a href="../h_src/57996220.htm" class="localvar">ls</a>, <a href="../h_src/57995812.htm" class="localvar">varname</a>); break;
<a id=1631></a>    default: <a href="../h_src/57699648.htm" class="function">luaX_syntaxerror</a>(<a href="../h_src/57996220.htm" class="localvar">ls</a>, &quot;'=' or 'in' expected&quot;);
  }
<a id=1633></a>  <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/57996220.htm" class="localvar">ls</a>, <a href="../h_src/57704952.htm" class="variable">TK_END</a>, <a href="../h_src/57704816.htm" class="variable">TK_FOR</a>, <a href="../h_src/57996084.htm" class="localvar">line</a>);
<a id=1634></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/57995948.htm" class="localvar">fs</a>);  <a  class="comments">/* loop scope ('break' jumps to this point) */</a>
}


<a id=1638></a>static void <a href="../h_src/57995540.htm" class="function">test_then_block</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57995404.htm" class="localvar">ls</a>, int *<a href="../h_src/57995268.htm" class="localvar">escapelist</a>) {
<a id=1639></a>  <a  class="comments">/* test_then_block -&gt; [IF | ELSEIF] cond THEN block */</a>
<a id=1640></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/57995132.htm" class="localvar">bl</a>;
<a id=1641></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57994996.htm" class="localvar">fs</a> = <a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1642></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57994860.htm" class="localvar">v</a>;
<a id=1643></a>  int <a href="../h_src/57994724.htm" class="localvar">jf</a>;  <a  class="comments">/* instruction to skip 'then' code (if condition is false) */</a>
<a id=1644></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>);  <a  class="comments">/* skip IF or ELSEIF */</a>
<a id=1645></a>  <a href="../h_src/58055652.htm" class="function">expr</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57994860.htm" class="localvar">v</a>);  <a  class="comments">/* read condition */</a>
<a id=1646></a>  <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>, <a href="../h_src/57704068.htm" class="variable">TK_THEN</a>);
<a id=1647></a>  if (<a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/57705224.htm" class="variable">TK_BREAK</a>) {  <a  class="comments">/* 'if x then break' ? */</a>
<a id=1648></a>    int <a href="../h_src/57994588.htm" class="localvar">line</a> = <a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;
<a id=1649></a>    <a href="../h_src/57669864.htm" class="function">luaK_goiffalse</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/57994860.htm" class="localvar">v</a>);  <a  class="comments">/* will jump if condition is true */</a>
<a id=1650></a>    <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>);  <a  class="comments">/* skip 'break' */</a>
<a id=1651></a>    <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57995132.htm" class="localvar">bl</a>, 0);  <a  class="comments">/* must enter block before 'goto' */</a>
<a id=1652></a>    <a href="../h_src/58032192.htm" class="function">newgotoentry</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>, <a href="../h_src/57619572.htm" class="macro">luaS_newliteral</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &quot;break&quot;), <a href="../h_src/57994588.htm" class="localvar">line</a>, <a href="../h_src/57994860.htm" class="localvar">v</a>.<a href="../h_src/57679520.htm" class="variable">t</a>);
<a id=1653></a>    while (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>, ';')) {}  <a  class="comments">/* skip semicolons */</a>
<a id=1654></a>    if (<a href="../h_src/58024032.htm" class="function">block_follow</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>, 0)) {  <a  class="comments">/* jump is the entire block? */</a>
<a id=1655></a>      <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>);
<a id=1656></a>      return;  <a  class="comments">/* and that is it */</a>
    }
<a id=1658></a>    else  <a  class="comments">/* must skip over 'then' part if condition is false */</a>
<a id=1659></a>      <a href="../h_src/57994724.htm" class="localvar">jf</a> = <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>);
  }
<a id=1661></a>  else {  <a  class="comments">/* regular case (not a break) */</a>
<a id=1662></a>    <a href="../h_src/57669932.htm" class="function">luaK_goiftrue</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/57994860.htm" class="localvar">v</a>);  <a  class="comments">/* skip over block if condition is false */</a>
<a id=1663></a>    <a href="../h_src/58028792.htm" class="function">enterblock</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57995132.htm" class="localvar">bl</a>, 0);
<a id=1664></a>    <a href="../h_src/57994724.htm" class="localvar">jf</a> = <a href="../h_src/57994860.htm" class="localvar">v</a>.<a href="../h_src/57679452.htm" class="variable">f</a>;
  }
<a id=1666></a>  <a href="../h_src/58023624.htm" class="function">statlist</a>(<a href="../h_src/57995404.htm" class="localvar">ls</a>);  <a  class="comments">/* 'then' part */</a>
<a id=1667></a>  <a href="../h_src/58027704.htm" class="function">leaveblock</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>);
<a id=1668></a>  if (<a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/57705088.htm" class="variable">TK_ELSE</a> ||
<a id=1669></a>      <a href="../h_src/57995404.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/57705020.htm" class="variable">TK_ELSEIF</a>)  <a  class="comments">/* followed by 'else'/'elseif'? */</a>
<a id=1670></a>    <a href="../h_src/57669320.htm" class="function">luaK_concat</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>, <a href="../h_src/57995268.htm" class="localvar">escapelist</a>, <a href="../h_src/57669592.htm" class="function">luaK_jump</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>));  <a  class="comments">/* must jump over it */</a>
<a id=1671></a>  <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/57994996.htm" class="localvar">fs</a>, <a href="../h_src/57994724.htm" class="localvar">jf</a>);
}


<a id=1675></a>static void <a href="../h_src/57994452.htm" class="function">ifstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57994316.htm" class="localvar">ls</a>, int <a href="../h_src/57994180.htm" class="localvar">line</a>) {
<a id=1676></a>  <a  class="comments">/* ifstat -&gt; IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END */</a>
<a id=1677></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57994044.htm" class="localvar">fs</a> = <a href="../h_src/57994316.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1678></a>  int <a href="../h_src/57993908.htm" class="localvar">escapelist</a> = <a href="../h_src/57674352.htm" class="macro">NO_JUMP</a>;  <a  class="comments">/* exit list for finished parts */</a>
<a id=1679></a>  <a href="../h_src/57995540.htm" class="function">test_then_block</a>(<a href="../h_src/57994316.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57993908.htm" class="localvar">escapelist</a>);  <a  class="comments">/* IF cond THEN block */</a>
<a id=1680></a>  while (<a href="../h_src/57994316.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == <a href="../h_src/57705020.htm" class="variable">TK_ELSEIF</a>)
<a id=1681></a>    <a href="../h_src/57995540.htm" class="function">test_then_block</a>(<a href="../h_src/57994316.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57993908.htm" class="localvar">escapelist</a>);  <a  class="comments">/* ELSEIF cond THEN block */</a>
<a id=1682></a>  if (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57994316.htm" class="localvar">ls</a>, <a href="../h_src/57705088.htm" class="variable">TK_ELSE</a>))
<a id=1683></a>    <a href="../h_src/58009344.htm" class="function">block</a>(<a href="../h_src/57994316.htm" class="localvar">ls</a>);  <a  class="comments">/* 'else' part */</a>
<a id=1684></a>  <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/57994316.htm" class="localvar">ls</a>, <a href="../h_src/57704952.htm" class="variable">TK_END</a>, <a href="../h_src/57704612.htm" class="variable">TK_IF</a>, <a href="../h_src/57994180.htm" class="localvar">line</a>);
<a id=1685></a>  <a href="../h_src/57669388.htm" class="function">luaK_patchtohere</a>(<a href="../h_src/57994044.htm" class="localvar">fs</a>, <a href="../h_src/57993908.htm" class="localvar">escapelist</a>);  <a  class="comments">/* patch escape list to 'if' end */</a>
}


<a id=1689></a>static void <a href="../h_src/57993772.htm" class="function">localfunc</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57993636.htm" class="localvar">ls</a>) {
<a id=1690></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57993500.htm" class="localvar">b</a>;
<a id=1691></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57993364.htm" class="localvar">fs</a> = <a href="../h_src/57993636.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1692></a>  int <a href="../h_src/57993228.htm" class="localvar">fvar</a> = <a href="../h_src/57993364.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>;  <a  class="comments">/* function's variable index */</a>
<a id=1693></a>  <a href="../h_src/58048716.htm" class="function">new_localvar</a>(<a href="../h_src/57993636.htm" class="localvar">ls</a>, <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/57993636.htm" class="localvar">ls</a>));  <a  class="comments">/* new local variable */</a>
<a id=1694></a>  <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/57993636.htm" class="localvar">ls</a>, 1);  <a  class="comments">/* enter its scope */</a>
<a id=1695></a>  <a href="../h_src/58016756.htm" class="function">body</a>(<a href="../h_src/57993636.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57993500.htm" class="localvar">b</a>, 0, <a href="../h_src/57993636.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>);  <a  class="comments">/* function created in next register */</a>
<a id=1696></a>  <a  class="comments">/* debug information will only see the variable after this point! */</a>
<a id=1697></a>  <a href="../h_src/58046540.htm" class="function">localdebuginfo</a>(<a href="../h_src/57993364.htm" class="localvar">fs</a>, <a href="../h_src/57993228.htm" class="localvar">fvar</a>)-&gt;<a href="../h_src/57516820.htm" class="variable">startpc</a> = <a href="../h_src/57993364.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675508.htm" class="variable">pc</a>;
}


<a id=1701></a>static int <a href="../h_src/57993092.htm" class="function">getlocalattribute</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57992956.htm" class="localvar">ls</a>) {
<a id=1702></a>  <a  class="comments">/* ATTRIB -&gt; ['&lt;' Name '&gt;'] */</a>
<a id=1703></a>  if (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57992956.htm" class="localvar">ls</a>, '&lt;')) {
<a id=1704></a>    const char *<a href="../h_src/57992820.htm" class="localvar">attr</a> = <a href="../h_src/57522668.htm" class="macro">getstr</a>(<a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/57992956.htm" class="localvar">ls</a>));
<a id=1705></a>    <a href="../h_src/58052524.htm" class="function">checknext</a>(<a href="../h_src/57992956.htm" class="localvar">ls</a>, '&gt;');
<a id=1706></a>    if (<a href="../h_aa/57564488.htm" class="libfunc">strcmp</a>(<a href="../h_src/57992820.htm" class="localvar">attr</a>, &quot;const&quot;) == 0)
<a id=1707></a>      return <a href="../h_src/57679180.htm" class="macro">RDKCONST</a>;  <a  class="comments">/* read-only variable */</a>
<a id=1708></a>    else if (<a href="../h_aa/57564488.htm" class="libfunc">strcmp</a>(<a href="../h_src/57992820.htm" class="localvar">attr</a>, &quot;close&quot;) == 0)
<a id=1709></a>      return <a href="../h_src/57679044.htm" class="macro">RDKTOCLOSE</a>;  <a  class="comments">/* to-be-closed variable */</a>
    else
<a id=1711></a>      <a href="../h_src/57668776.htm" class="function">luaK_semerror</a>(<a href="../h_src/57992956.htm" class="localvar">ls</a>,
<a id=1712></a>        <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/57992956.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, &quot;unknown attribute '%s'&quot;, <a href="../h_src/57992820.htm" class="localvar">attr</a>));
  }
<a id=1714></a>  return <a href="../h_src/57679316.htm" class="macro">VDKREG</a>;  <a  class="comments">/* regular variable */</a>
}


<a id=1718></a>static void <a href="../h_src/57992684.htm" class="function">checktoclose</a> (<a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57992548.htm" class="localvar">fs</a>, int <a href="../h_src/57992412.htm" class="localvar">level</a>) {
<a id=1719></a>  if (<a href="../h_src/57992412.htm" class="localvar">level</a> != -1) {  <a  class="comments">/* is there a to-be-closed variable? */</a>
<a id=1720></a>    <a href="../h_src/58039196.htm" class="function">marktobeclosed</a>(<a href="../h_src/57992548.htm" class="localvar">fs</a>);
<a id=1721></a>    <a href="../h_src/57672380.htm" class="macro">luaK_codeABC</a>(<a href="../h_src/57992548.htm" class="localvar">fs</a>, <a href="../h_src/57686796.htm" class="variable">OP_TBC</a>, <a href="../h_src/58047220.htm" class="function">reglevel</a>(<a href="../h_src/57992548.htm" class="localvar">fs</a>, <a href="../h_src/57992412.htm" class="localvar">level</a>), 0, 0);
  }
}


<a id=1726></a>static void <a href="../h_src/57992276.htm" class="function">localstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57992140.htm" class="localvar">ls</a>) {
<a id=1727></a>  <a  class="comments">/* stat -&gt; LOCAL NAME ATTRIB { ',' NAME ATTRIB } ['=' explist] */</a>
<a id=1728></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57992004.htm" class="localvar">fs</a> = <a href="../h_src/57992140.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1729></a>  int <a href="../h_src/57991868.htm" class="localvar">toclose</a> = -1;  <a  class="comments">/* index of to-be-closed variable (if any) */</a>
<a id=1730></a>  <a href="../h_src/57677956.htm" class="type">Vardesc</a> *<a href="../h_src/57991732.htm" class="localvar">var</a>;  <a  class="comments">/* last variable */</a>
<a id=1731></a>  int <a href="../h_src/57991596.htm" class="localvar">vidx</a>, <a href="../h_src/57991460.htm" class="localvar">kind</a>;  <a  class="comments">/* index and kind of last variable */</a>
<a id=1732></a>  int <a href="../h_src/57991324.htm" class="localvar">nvars</a> = 0;
<a id=1733></a>  int <a href="../h_src/57991188.htm" class="localvar">nexps</a>;
<a id=1734></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57991052.htm" class="localvar">e</a>;
  do {
<a id=1736></a>    <a href="../h_src/57991596.htm" class="localvar">vidx</a> = <a href="../h_src/58048716.htm" class="function">new_localvar</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>));
<a id=1737></a>    <a href="../h_src/57991460.htm" class="localvar">kind</a> = <a href="../h_src/57993092.htm" class="function">getlocalattribute</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>);
<a id=1738></a>    <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/57992004.htm" class="localvar">fs</a>, <a href="../h_src/57991596.htm" class="localvar">vidx</a>)-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> = <a href="../h_src/57991460.htm" class="localvar">kind</a>;
<a id=1739></a>    if (<a href="../h_src/57991460.htm" class="localvar">kind</a> == <a href="../h_src/57679044.htm" class="macro">RDKTOCLOSE</a>) {  <a  class="comments">/* to-be-closed? */</a>
<a id=1740></a>      if (<a href="../h_src/57991868.htm" class="localvar">toclose</a> != -1)  <a  class="comments">/* one already present? */</a>
<a id=1741></a>        <a href="../h_src/57668776.htm" class="function">luaK_semerror</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, &quot;multiple to-be-closed variables in local list&quot;);
<a id=1742></a>      <a href="../h_src/57991868.htm" class="localvar">toclose</a> = <a href="../h_src/57992004.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a> + <a href="../h_src/57991324.htm" class="localvar">nvars</a>;
    }
<a id=1744></a>    <a href="../h_src/57991324.htm" class="localvar">nvars</a>++;
<a id=1745></a>  } while (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, ','));
<a id=1746></a>  if (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, '='))
<a id=1747></a>    <a href="../h_src/57991188.htm" class="localvar">nexps</a> = <a href="../h_src/58015804.htm" class="function">explist</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57991052.htm" class="localvar">e</a>);
  else {
<a id=1749></a>    <a href="../h_src/57991052.htm" class="localvar">e</a>.<a href="../h_src/57680744.htm" class="variable">k</a> = <a href="../h_src/57682716.htm" class="variable">VVOID</a>;
<a id=1750></a>    <a href="../h_src/57991188.htm" class="localvar">nexps</a> = 0;
  }
<a id=1752></a>  <a href="../h_src/57991732.htm" class="localvar">var</a> = <a href="../h_src/58047628.htm" class="function">getlocalvardesc</a>(<a href="../h_src/57992004.htm" class="localvar">fs</a>, <a href="../h_src/57991596.htm" class="localvar">vidx</a>);  <a  class="comments">/* get last variable */</a>
<a id=1753></a>  if (<a href="../h_src/57991324.htm" class="localvar">nvars</a> == <a href="../h_src/57991188.htm" class="localvar">nexps</a> &amp;&amp;  <a  class="comments">/* no adjustments? */</a>
<a id=1754></a>      <a href="../h_src/57991732.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> == <a href="../h_src/57679180.htm" class="macro">RDKCONST</a> &amp;&amp;  <a  class="comments">/* last variable is const? */</a>
<a id=1755></a>      <a href="../h_src/57670884.htm" class="function">luaK_exp2const</a>(<a href="../h_src/57992004.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57991052.htm" class="localvar">e</a>, &amp;<a href="../h_src/57991732.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678024.htm" class="variable">k</a>)) {  <a  class="comments">/* compile-time constant? */</a>
<a id=1756></a>    <a href="../h_src/57991732.htm" class="localvar">var</a>-&gt;<a href="../h_src/57678092.htm" class="variable">vd</a>.<a href="../h_src/57678432.htm" class="variable">kind</a> = <a href="../h_src/57678908.htm" class="macro">RDKCTC</a>;  <a  class="comments">/* variable is a compile-time constant */</a>
<a id=1757></a>    <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, <a href="../h_src/57991324.htm" class="localvar">nvars</a> - 1);  <a  class="comments">/* exclude last variable */</a>
<a id=1758></a>    <a href="../h_src/57992004.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57674896.htm" class="variable">nactvar</a>++;  <a  class="comments">/* but count it */</a>
  }
  else {
<a id=1761></a>    <a href="../h_src/58037020.htm" class="function">adjust_assign</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, <a href="../h_src/57991324.htm" class="localvar">nvars</a>, <a href="../h_src/57991188.htm" class="localvar">nexps</a>, &amp;<a href="../h_src/57991052.htm" class="localvar">e</a>);
<a id=1762></a>    <a href="../h_src/58044228.htm" class="function">adjustlocalvars</a>(<a href="../h_src/57992140.htm" class="localvar">ls</a>, <a href="../h_src/57991324.htm" class="localvar">nvars</a>);
  }
<a id=1764></a>  <a href="../h_src/57992684.htm" class="function">checktoclose</a>(<a href="../h_src/57992004.htm" class="localvar">fs</a>, <a href="../h_src/57991868.htm" class="localvar">toclose</a>);
}


<a id=1768></a>static int <a href="../h_src/57990916.htm" class="function">funcname</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57990780.htm" class="localvar">ls</a>, <a href="../h_src/57679384.htm" class="type">expdesc</a> *<a href="../h_src/57990644.htm" class="localvar">v</a>) {
<a id=1769></a>  <a  class="comments">/* funcname -&gt; NAME {fieldsel} [':' NAME] */</a>
<a id=1770></a>  int <a href="../h_src/57990508.htm" class="localvar">ismethod</a> = 0;
<a id=1771></a>  <a href="../h_src/58037836.htm" class="function">singlevar</a>(<a href="../h_src/57990780.htm" class="localvar">ls</a>, <a href="../h_src/57990644.htm" class="localvar">v</a>);
<a id=1772></a>  while (<a href="../h_src/57990780.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == '.')
<a id=1773></a>    <a href="../h_src/58023352.htm" class="function">fieldsel</a>(<a href="../h_src/57990780.htm" class="localvar">ls</a>, <a href="../h_src/57990644.htm" class="localvar">v</a>);
<a id=1774></a>  if (<a href="../h_src/57990780.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == ':') {
<a id=1775></a>    <a href="../h_src/57990508.htm" class="localvar">ismethod</a> = 1;
<a id=1776></a>    <a href="../h_src/58023352.htm" class="function">fieldsel</a>(<a href="../h_src/57990780.htm" class="localvar">ls</a>, <a href="../h_src/57990644.htm" class="localvar">v</a>);
  }
<a id=1778></a>  return <a href="../h_src/57990508.htm" class="localvar">ismethod</a>;
}


<a id=1782></a>static void <a href="../h_src/57990372.htm" class="function">funcstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57990236.htm" class="localvar">ls</a>, int <a href="../h_src/57990100.htm" class="localvar">line</a>) {
<a id=1783></a>  <a  class="comments">/* funcstat -&gt; FUNCTION funcname body */</a>
<a id=1784></a>  int <a href="../h_src/57989964.htm" class="localvar">ismethod</a>;
<a id=1785></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57989828.htm" class="localvar">v</a>, <a href="../h_src/57989692.htm" class="localvar">b</a>;
<a id=1786></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57990236.htm" class="localvar">ls</a>);  <a  class="comments">/* skip FUNCTION */</a>
<a id=1787></a>  <a href="../h_src/57989964.htm" class="localvar">ismethod</a> = <a href="../h_src/57990916.htm" class="function">funcname</a>(<a href="../h_src/57990236.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57989828.htm" class="localvar">v</a>);
<a id=1788></a>  <a href="../h_src/58016756.htm" class="function">body</a>(<a href="../h_src/57990236.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57989692.htm" class="localvar">b</a>, <a href="../h_src/57989964.htm" class="localvar">ismethod</a>, <a href="../h_src/57990100.htm" class="localvar">line</a>);
<a id=1789></a>  <a href="../h_src/58045316.htm" class="function">check_readonly</a>(<a href="../h_src/57990236.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57989828.htm" class="localvar">v</a>);
<a id=1790></a>  <a href="../h_src/57669796.htm" class="function">luaK_storevar</a>(<a href="../h_src/57990236.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, &amp;<a href="../h_src/57989828.htm" class="localvar">v</a>, &amp;<a href="../h_src/57989692.htm" class="localvar">b</a>);
<a id=1791></a>  <a href="../h_src/57670816.htm" class="function">luaK_fixline</a>(<a href="../h_src/57990236.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>, <a href="../h_src/57990100.htm" class="localvar">line</a>);  <a  class="comments">/* definition &quot;happens&quot; in the first line */</a>
}


<a id=1795></a>static void <a href="../h_src/57989556.htm" class="function">exprstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57989420.htm" class="localvar">ls</a>) {
<a id=1796></a>  <a  class="comments">/* stat -&gt; func | assignment */</a>
<a id=1797></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57989284.htm" class="localvar">fs</a> = <a href="../h_src/57989420.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1798></a>  struct <a href="../h_src/58008800.htm" class="class">LHS_assign</a> <a href="../h_src/57989148.htm" class="localvar">v</a>;
<a id=1799></a>  <a href="../h_src/58013628.htm" class="function">suffixedexp</a>(<a href="../h_src/57989420.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57989148.htm" class="localvar">v</a>.<a href="../h_src/58008460.htm" class="variable">v</a>);
<a id=1800></a>  if (<a href="../h_src/57989420.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == '=' || <a href="../h_src/57989420.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == ',') { <a  class="comments">/* stat -&gt; assignment ? */</a>
<a id=1801></a>    <a href="../h_src/57989148.htm" class="localvar">v</a>.<a href="../h_src/58008528.htm" class="variable">prev</a> = NULL;
<a id=1802></a>    <a href="../h_src/58007440.htm" class="function">restassign</a>(<a href="../h_src/57989420.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57989148.htm" class="localvar">v</a>, 1);
  }
<a id=1804></a>  else {  <a  class="comments">/* stat -&gt; func */</a>
<a id=1805></a>    <a href="../h_src/57545108.htm" class="type">Instruction</a> *<a href="../h_src/57989012.htm" class="localvar">inst</a>;
<a id=1806></a>    <a href="../h_src/58052116.htm" class="macro">check_condition</a>(<a href="../h_src/57989420.htm" class="localvar">ls</a>, <a href="../h_src/57989148.htm" class="localvar">v</a>.<a href="../h_src/58008460.htm" class="variable">v</a>.<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681492.htm" class="variable">VCALL</a>, &quot;syntax error&quot;);
<a id=1807></a>    <a href="../h_src/57989012.htm" class="localvar">inst</a> = &amp;<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(<a href="../h_src/57989284.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57989148.htm" class="localvar">v</a>.<a href="../h_src/58008460.htm" class="variable">v</a>);
<a id=1808></a>    <a href="../h_src/57693120.htm" class="macro">SETARG_C</a>(*<a href="../h_src/57989012.htm" class="localvar">inst</a>, 1);  <a  class="comments">/* call statement uses no results */</a>
  }
}


<a id=1813></a>static void <a href="../h_src/57988876.htm" class="function">retstat</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57988740.htm" class="localvar">ls</a>) {
<a id=1814></a>  <a  class="comments">/* stat -&gt; RETURN [explist] [';'] */</a>
<a id=1815></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57988604.htm" class="localvar">fs</a> = <a href="../h_src/57988740.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>;
<a id=1816></a>  <a href="../h_src/57679384.htm" class="type">expdesc</a> <a href="../h_src/57988468.htm" class="localvar">e</a>;
<a id=1817></a>  int <a href="../h_src/57988332.htm" class="localvar">nret</a>;  <a  class="comments">/* number of values being returned */</a>
<a id=1818></a>  int <a href="../h_src/57988196.htm" class="localvar">first</a> = <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/57988604.htm" class="localvar">fs</a>);  <a  class="comments">/* first slot to be returned */</a>
<a id=1819></a>  if (<a href="../h_src/58024032.htm" class="function">block_follow</a>(<a href="../h_src/57988740.htm" class="localvar">ls</a>, 1) || <a href="../h_src/57988740.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a> == ';')
<a id=1820></a>    <a href="../h_src/57988332.htm" class="localvar">nret</a> = 0;  <a  class="comments">/* return no values */</a>
  else {
<a id=1822></a>    <a href="../h_src/57988332.htm" class="localvar">nret</a> = <a href="../h_src/58015804.htm" class="function">explist</a>(<a href="../h_src/57988740.htm" class="localvar">ls</a>, &amp;<a href="../h_src/57988468.htm" class="localvar">e</a>);  <a  class="comments">/* optional return values */</a>
<a id=1823></a>    if (<a href="../h_src/58056604.htm" class="macro">hasmultret</a>(<a href="../h_src/57988468.htm" class="localvar">e</a>.<a href="../h_src/57680744.htm" class="variable">k</a>)) {
<a id=1824></a>      <a href="../h_src/57671564.htm" class="macro">luaK_setmultret</a>(<a href="../h_src/57988604.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57988468.htm" class="localvar">e</a>);
<a id=1825></a>      if (<a href="../h_src/57988468.htm" class="localvar">e</a>.<a href="../h_src/57680744.htm" class="variable">k</a> == <a href="../h_src/57681492.htm" class="variable">VCALL</a> &amp;&amp; <a href="../h_src/57988332.htm" class="localvar">nret</a> == 1 &amp;&amp; !<a href="../h_src/57988604.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57675576.htm" class="variable">bl</a>-&gt;<a href="../h_src/58055924.htm" class="variable">insidetbc</a>) {  <a  class="comments">/* tail call? */</a>
<a id=1826></a>        <a href="../h_src/57694616.htm" class="macro">SET_OPCODE</a>(<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(<a href="../h_src/57988604.htm" class="localvar">fs</a>,&amp;<a href="../h_src/57988468.htm" class="localvar">e</a>), <a href="../h_src/57685844.htm" class="variable">OP_TAILCALL</a>);
<a id=1827></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57694072.htm" class="macro">GETARG_A</a>(<a href="../h_src/57671700.htm" class="macro">getinstruction</a>(fs,&amp;e)) == luaY_nvarstack(fs));
      }
<a id=1829></a>      <a href="../h_src/57988332.htm" class="localvar">nret</a> = <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>;  <a  class="comments">/* return all values */</a>
    }
    else {
<a id=1832></a>      if (<a href="../h_src/57988332.htm" class="localvar">nret</a> == 1)  <a  class="comments">/* only one single value? */</a>
<a id=1833></a>        <a href="../h_src/57988196.htm" class="localvar">first</a> = <a href="../h_src/57670408.htm" class="function">luaK_exp2anyreg</a>(<a href="../h_src/57988604.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57988468.htm" class="localvar">e</a>);  <a  class="comments">/* can use original slot */</a>
<a id=1834></a>      else {  <a  class="comments">/* values must go to the top of the stack */</a>
<a id=1835></a>        <a href="../h_src/57670272.htm" class="function">luaK_exp2nextreg</a>(<a href="../h_src/57988604.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57988468.htm" class="localvar">e</a>);
<a id=1836></a>        <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(nret == fs-&gt;freereg - first);
      }
    }
  }
<a id=1840></a>  <a href="../h_src/57669524.htm" class="function">luaK_ret</a>(<a href="../h_src/57988604.htm" class="localvar">fs</a>, <a href="../h_src/57988196.htm" class="localvar">first</a>, <a href="../h_src/57988332.htm" class="localvar">nret</a>);
<a id=1841></a>  <a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57988740.htm" class="localvar">ls</a>, ';');  <a  class="comments">/* skip optional semicolon */</a>
}


<a id=1845></a>static void <a href="../h_src/58055788.htm" class="function">statement</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57988060.htm" class="localvar">ls</a>) {
<a id=1846></a>  int <a href="../h_src/57987924.htm" class="localvar">line</a> = <a href="../h_src/57988060.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701552.htm" class="variable">linenumber</a>;  <a  class="comments">/* may be needed for error messages */</a>
<a id=1847></a>  <a href="../h_src/58035932.htm" class="macro">enterlevel</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
<a id=1848></a>  switch (<a href="../h_src/57988060.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701416.htm" class="variable">t</a>.<a href="../h_src/57701960.htm" class="variable">token</a>) {
<a id=1849></a>    case ';': {  <a  class="comments">/* stat -&gt; ';' (empty statement) */</a>
<a id=1850></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);  <a  class="comments">/* skip ';' */</a>
      break;
    }
<a id=1853></a>    case <a href="../h_src/57704612.htm" class="variable">TK_IF</a>: {  <a  class="comments">/* stat -&gt; ifstat */</a>
<a id=1854></a>      <a href="../h_src/57994452.htm" class="function">ifstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/57987924.htm" class="localvar">line</a>);
      break;
    }
<a id=1857></a>    case <a href="../h_src/57703864.htm" class="variable">TK_WHILE</a>: {  <a  class="comments">/* stat -&gt; whilestat */</a>
<a id=1858></a>      <a href="../h_src/58003496.htm" class="function">whilestat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/57987924.htm" class="localvar">line</a>);
      break;
    }
<a id=1861></a>    case <a href="../h_src/57705156.htm" class="variable">TK_DO</a>: {  <a  class="comments">/* stat -&gt; DO block END */</a>
<a id=1862></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);  <a  class="comments">/* skip DO */</a>
<a id=1863></a>      <a href="../h_src/58009344.htm" class="function">block</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
<a id=1864></a>      <a href="../h_src/58051980.htm" class="function">check_match</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/57704952.htm" class="variable">TK_END</a>, <a href="../h_src/57705156.htm" class="variable">TK_DO</a>, <a href="../h_src/57987924.htm" class="localvar">line</a>);
      break;
    }
<a id=1867></a>    case <a href="../h_src/57704816.htm" class="variable">TK_FOR</a>: {  <a  class="comments">/* stat -&gt; forstat */</a>
<a id=1868></a>      <a href="../h_src/57996356.htm" class="function">forstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/57987924.htm" class="localvar">line</a>);
      break;
    }
<a id=1871></a>    case <a href="../h_src/57704204.htm" class="variable">TK_REPEAT</a>: {  <a  class="comments">/* stat -&gt; repeatstat */</a>
<a id=1872></a>      <a href="../h_src/58002544.htm" class="function">repeatstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/57987924.htm" class="localvar">line</a>);
      break;
    }
<a id=1875></a>    case <a href="../h_src/57704748.htm" class="variable">TK_FUNCTION</a>: {  <a  class="comments">/* stat -&gt; funcstat */</a>
<a id=1876></a>      <a href="../h_src/57990372.htm" class="function">funcstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/57987924.htm" class="localvar">line</a>);
      break;
    }
<a id=1879></a>    case <a href="../h_src/57704476.htm" class="variable">TK_LOCAL</a>: {  <a  class="comments">/* stat -&gt; localstat */</a>
<a id=1880></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);  <a  class="comments">/* skip LOCAL */</a>
<a id=1881></a>      if (<a href="../h_src/58053340.htm" class="function">testnext</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/57704748.htm" class="variable">TK_FUNCTION</a>))  <a  class="comments">/* local function? */</a>
<a id=1882></a>        <a href="../h_src/57993772.htm" class="function">localfunc</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
      else
<a id=1884></a>        <a href="../h_src/57992276.htm" class="function">localstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
      break;
    }
<a id=1887></a>    case <a href="../h_src/57703184.htm" class="variable">TK_DBCOLON</a>: {  <a  class="comments">/* stat -&gt; label */</a>
<a id=1888></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);  <a  class="comments">/* skip double colon */</a>
<a id=1889></a>      <a href="../h_src/58004040.htm" class="function">labelstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>, <a href="../h_src/58051300.htm" class="function">str_checkname</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>), <a href="../h_src/57987924.htm" class="localvar">line</a>);
      break;
    }
<a id=1892></a>    case <a href="../h_src/57704136.htm" class="variable">TK_RETURN</a>: {  <a  class="comments">/* stat -&gt; retstat */</a>
<a id=1893></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);  <a  class="comments">/* skip RETURN */</a>
<a id=1894></a>      <a href="../h_src/57988876.htm" class="function">retstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
      break;
    }
<a id=1897></a>    case <a href="../h_src/57705224.htm" class="variable">TK_BREAK</a>: {  <a  class="comments">/* stat -&gt; breakstat */</a>
<a id=1898></a>      <a href="../h_src/58005128.htm" class="function">breakstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
      break;
    }
<a id=1901></a>    case <a href="../h_src/57704680.htm" class="variable">TK_GOTO</a>: {  <a  class="comments">/* stat -&gt; 'goto' NAME */</a>
<a id=1902></a>      <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);  <a  class="comments">/* skip 'goto' */</a>
<a id=1903></a>      <a href="../h_src/58006080.htm" class="function">gotostat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
      break;
    }
<a id=1906></a>    default: {  <a  class="comments">/* stat -&gt; func | assignment */</a>
<a id=1907></a>      <a href="../h_src/57989556.htm" class="function">exprstat</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
      break;
    }
  }
<a id=1911></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(ls-&gt;fs-&gt;f-&gt;maxstacksize &gt;= ls-&gt;fs-&gt;freereg &amp;&amp;
             ls-&gt;fs-&gt;freereg &gt;= luaY_nvarstack(ls-&gt;fs));
<a id=1913></a>  <a href="../h_src/57988060.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>-&gt;<a href="../h_src/57674760.htm" class="variable">freereg</a> = <a href="../h_src/57674488.htm" class="function">luaY_nvarstack</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57701008.htm" class="variable">fs</a>);  <a  class="comments">/* free registers */</a>
<a id=1914></a>  <a href="../h_src/58035796.htm" class="macro">leavelevel</a>(<a href="../h_src/57988060.htm" class="localvar">ls</a>);
}

<a id=1917></a><a  class="comments">/* }====================================================================== */</a>


<a id=1920></a><a  class="comments">/*</a>
<a id=1921></a><a  class="comments">** compiles the main function, which is a regular vararg function with an</a>
<a id=1922></a><a  class="comments">** upvalue named LUA_ENV</a>
<a id=1923></a><a  class="comments">*/</a>
<a id=1924></a>static void <a href="../h_src/57987788.htm" class="function">mainfunc</a> (<a href="../h_src/57700124.htm" class="type">LexState</a> *<a href="../h_src/57987652.htm" class="localvar">ls</a>, <a href="../h_src/57674556.htm" class="type">FuncState</a> *<a href="../h_src/57987516.htm" class="localvar">fs</a>) {
<a id=1925></a>  <a href="../h_src/58055856.htm" class="type">BlockCnt</a> <a href="../h_src/57987380.htm" class="localvar">bl</a>;
<a id=1926></a>  <a href="../h_src/57517092.htm" class="type">Upvaldesc</a> *<a href="../h_src/57987244.htm" class="localvar">env</a>;
<a id=1927></a>  <a href="../h_src/58025392.htm" class="function">open_func</a>(<a href="../h_src/57987652.htm" class="localvar">ls</a>, <a href="../h_src/57987516.htm" class="localvar">fs</a>, &amp;<a href="../h_src/57987380.htm" class="localvar">bl</a>);
<a id=1928></a>  <a href="../h_src/58017980.htm" class="function">setvararg</a>(<a href="../h_src/57987516.htm" class="localvar">fs</a>, 0);  <a  class="comments">/* main function is always declared vararg */</a>
<a id=1929></a>  <a href="../h_src/57987244.htm" class="localvar">env</a> = <a href="../h_src/58041916.htm" class="function">allocupvalue</a>(<a href="../h_src/57987516.htm" class="localvar">fs</a>);  <a  class="comments">/* ...set environment upvalue */</a>
<a id=1930></a>  <a href="../h_src/57987244.htm" class="localvar">env</a>-&gt;<a href="../h_src/57517296.htm" class="variable">instack</a> = 1;
<a id=1931></a>  <a href="../h_src/57987244.htm" class="localvar">env</a>-&gt;<a href="../h_src/57517228.htm" class="variable">idx</a> = 0;
<a id=1932></a>  <a href="../h_src/57987244.htm" class="localvar">env</a>-&gt;<a href="../h_src/57517160.htm" class="variable">kind</a> = <a href="../h_src/57679316.htm" class="macro">VDKREG</a>;
<a id=1933></a>  <a href="../h_src/57987244.htm" class="localvar">env</a>-&gt;<a href="../h_src/57517364.htm" class="variable">name</a> = <a href="../h_src/57987652.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700192.htm" class="variable">envn</a>;
<a id=1934></a>  <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/57987652.htm" class="localvar">ls</a>-&gt;<a href="../h_src/57700940.htm" class="variable">L</a>, <a href="../h_src/57987516.htm" class="localvar">fs</a>-&gt;<a href="../h_src/57676052.htm" class="variable">f</a>, <a href="../h_src/57987244.htm" class="localvar">env</a>-&gt;<a href="../h_src/57517364.htm" class="variable">name</a>);
<a id=1935></a>  <a href="../h_src/57699784.htm" class="function">luaX_next</a>(<a href="../h_src/57987652.htm" class="localvar">ls</a>);  <a  class="comments">/* read first token */</a>
<a id=1936></a>  <a href="../h_src/58023624.htm" class="function">statlist</a>(<a href="../h_src/57987652.htm" class="localvar">ls</a>);  <a  class="comments">/* parse main body */</a>
<a id=1937></a>  <a href="../h_src/58052932.htm" class="function">check</a>(<a href="../h_src/57987652.htm" class="localvar">ls</a>, <a href="../h_src/57703116.htm" class="variable">TK_EOS</a>);
<a id=1938></a>  <a href="../h_src/58024712.htm" class="function">close_func</a>(<a href="../h_src/57987652.htm" class="localvar">ls</a>);
}


<a id=1942></a><a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/57674420.htm" class="function">luaY_parser</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57987108.htm" class="localvar">L</a>, <a href="../h_src/57656088.htm" class="type">ZIO</a> *<a href="../h_src/57986972.htm" class="localvar">z</a>, <a href="../h_src/57655544.htm" class="type">Mbuffer</a> *<a href="../h_src/57986836.htm" class="localvar">buff</a>,
<a id=1943></a>                       <a href="../h_src/57676256.htm" class="type">Dyndata</a> *<a href="../h_src/57986700.htm" class="localvar">dyd</a>, const char *<a href="../h_src/57986564.htm" class="localvar">name</a>, int <a href="../h_src/57986428.htm" class="localvar">firstchar</a>) {
<a id=1944></a>  <a href="../h_src/57700124.htm" class="type">LexState</a> <a href="../h_src/57986292.htm" class="localvar">lexstate</a>;
<a id=1945></a>  <a href="../h_src/57674556.htm" class="type">FuncState</a> <a href="../h_src/57986156.htm" class="localvar">funcstate</a>;
<a id=1946></a>  <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/57986020.htm" class="localvar">cl</a> = <a href="../h_src/57630724.htm" class="function">luaF_newLclosure</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>, 1);  <a  class="comments">/* create main closure */</a>
<a id=1947></a>  <a href="../h_src/57511584.htm" class="macro">setclLvalue2s</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>, <a href="../h_src/57987108.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57986020.htm" class="localvar">cl</a>);  <a  class="comments">/* anchor it (to avoid being collected) */</a>
<a id=1948></a>  <a href="../h_src/57632628.htm" class="function">luaD_inctop</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>);
<a id=1949></a>  <a href="../h_src/57986292.htm" class="localvar">lexstate</a>.<a href="../h_src/57700668.htm" class="variable">h</a> = <a href="../h_src/57616512.htm" class="function">luaH_new</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>);  <a  class="comments">/* create table for scanner */</a>
<a id=1950></a>  <a href="../h_src/57506892.htm" class="macro">sethvalue2s</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>, <a href="../h_src/57987108.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57986292.htm" class="localvar">lexstate</a>.<a href="../h_src/57700668.htm" class="variable">h</a>);  <a  class="comments">/* anchor it */</a>
<a id=1951></a>  <a href="../h_src/57632628.htm" class="function">luaD_inctop</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>);
<a id=1952></a>  <a href="../h_src/57986156.htm" class="localvar">funcstate</a>.<a href="../h_src/57676052.htm" class="variable">f</a> = <a href="../h_src/57986020.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a> = <a href="../h_src/57630996.htm" class="function">luaF_newproto</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>);
<a id=1953></a>  <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>, <a href="../h_src/57986020.htm" class="localvar">cl</a>, <a href="../h_src/57986020.htm" class="localvar">cl</a>-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>);
<a id=1954></a>  <a href="../h_src/57986156.htm" class="localvar">funcstate</a>.<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a> = <a href="../h_src/57618484.htm" class="function">luaS_new</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>, <a href="../h_src/57986564.htm" class="localvar">name</a>);  <a  class="comments">/* create and anchor TString */</a>
<a id=1955></a>  <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>, <a href="../h_src/57986156.htm" class="localvar">funcstate</a>.<a href="../h_src/57676052.htm" class="variable">f</a>, <a href="../h_src/57986156.htm" class="localvar">funcstate</a>.<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>);
<a id=1956></a>  <a href="../h_src/57986292.htm" class="localvar">lexstate</a>.<a href="../h_src/57700736.htm" class="variable">buff</a> = <a href="../h_src/57986836.htm" class="localvar">buff</a>;
<a id=1957></a>  <a href="../h_src/57986292.htm" class="localvar">lexstate</a>.<a href="../h_src/57700328.htm" class="variable">dyd</a> = <a href="../h_src/57986700.htm" class="localvar">dyd</a>;
<a id=1958></a>  <a href="../h_src/57986700.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676664.htm" class="variable">n</a> = <a href="../h_src/57986700.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677072.htm" class="variable">n</a> = <a href="../h_src/57986700.htm" class="localvar">dyd</a>-&gt;<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677072.htm" class="variable">n</a> = 0;
<a id=1959></a>  <a href="../h_src/57699988.htm" class="function">luaX_setinput</a>(<a href="../h_src/57987108.htm" class="localvar">L</a>, &amp;<a href="../h_src/57986292.htm" class="localvar">lexstate</a>, <a href="../h_src/57986972.htm" class="localvar">z</a>, <a href="../h_src/57986156.htm" class="localvar">funcstate</a>.<a href="../h_src/57676052.htm" class="variable">f</a>-&gt;<a href="../h_src/57513964.htm" class="variable">source</a>, <a href="../h_src/57986428.htm" class="localvar">firstchar</a>);
<a id=1960></a>  <a href="../h_src/57987788.htm" class="function">mainfunc</a>(&amp;<a href="../h_src/57986292.htm" class="localvar">lexstate</a>, &amp;<a href="../h_src/57986156.htm" class="localvar">funcstate</a>);
<a id=1961></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!funcstate.prev &amp;&amp; funcstate.nups == 1 &amp;&amp; !lexstate.fs);
<a id=1962></a>  <a  class="comments">/* all scopes should be correctly finished */</a>
<a id=1963></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(dyd-&gt;actvar.n == 0 &amp;&amp; dyd-&gt;gt.n == 0 &amp;&amp; dyd-&gt;label.n == 0);
<a id=1964></a>  <a href="../h_src/57987108.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>--;  <a  class="comments">/* remove scanner's table */</a>
<a id=1965></a>  return <a href="../h_src/57986020.htm" class="localvar">cl</a>;  <a  class="comments">/* closure is on the stack, too */</a>
}

</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

