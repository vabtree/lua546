<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lobject.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57919748.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/57919748.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/57919748.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/57919748.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/57919748.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/57919748.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/57919748.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57919748.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/57919748.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lobject.c $</a>
<a id=3></a><a  class="comments">** Some generic functions over Lua objects</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/57919680.htm" class="macro">lobject_c</a>
<a id=8></a>#define <a href="../h_src/57919544.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;locale.h&gt;
#include &lt;math.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

<a id=20></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=22></a>#include &quot;<a href="../h_src/57762112.htm" class="file">lctype.h</a>&quot;
<a id=23></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=24></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=25></a>#include &quot;<a href="../h_src/57496896.htm" class="file">lmem.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=27></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;
<a id=28></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;
<a id=29></a>#include &quot;<a href="../h_src/57614676.htm" class="file">lvm.h</a>&quot;


<a id=32></a><a  class="comments">/*</a>
<a id=33></a><a  class="comments">** Computes ceil(log2(x))</a>
<a id=34></a><a  class="comments">*/</a>
<a id=35></a>int <a href="../h_src/57501860.htm" class="function">luaO_ceillog2</a> (unsigned int <a href="../h_src/57919408.htm" class="localvar">x</a>) {
<a id=36></a>  static const <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/57919272.htm" class="localvar">log_2</a>[256] = {  <a  class="comments">/* log_2[i] = ceil(log2(i - 1)) */</a>
    0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
    8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
  };
<a id=46></a>  int <a href="../h_src/57919136.htm" class="localvar">l</a> = 0;
<a id=47></a>  <a href="../h_src/57919408.htm" class="localvar">x</a>--;
<a id=48></a>  while (<a href="../h_src/57919408.htm" class="localvar">x</a> &gt;= 256) { <a href="../h_src/57919136.htm" class="localvar">l</a> += 8; <a href="../h_src/57919408.htm" class="localvar">x</a> &gt;&gt;= 8; }
<a id=49></a>  return <a href="../h_src/57919136.htm" class="localvar">l</a> + <a href="../h_src/57919272.htm" class="localvar">log_2</a>[<a href="../h_src/57919408.htm" class="localvar">x</a>];
}


<a id=53></a>static <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57919000.htm" class="function">intarith</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57918864.htm" class="localvar">L</a>, int <a href="../h_src/57918728.htm" class="localvar">op</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57918592.htm" class="localvar">v1</a>,
<a id=54></a>                                                   <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57918456.htm" class="localvar">v2</a>) {
<a id=55></a>  switch (<a href="../h_src/57918728.htm" class="localvar">op</a>) {
<a id=56></a>    case <a href="../h_src/57437792.htm" class="macro">LUA_OPADD</a>: return <a href="../h_src/57612568.htm" class="macro">intop</a>(+, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=57></a>    case <a href="../h_src/57437656.htm" class="macro">LUA_OPSUB</a>:return <a href="../h_src/57612568.htm" class="macro">intop</a>(-, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=58></a>    case <a href="../h_src/57437520.htm" class="macro">LUA_OPMUL</a>:return <a href="../h_src/57612568.htm" class="macro">intop</a>(*, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=59></a>    case <a href="../h_src/57437384.htm" class="macro">LUA_OPMOD</a>: return <a href="../h_src/57610732.htm" class="function">luaV_mod</a>(<a href="../h_src/57918864.htm" class="localvar">L</a>, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=60></a>    case <a href="../h_src/57436976.htm" class="macro">LUA_OPIDIV</a>: return <a href="../h_src/57610800.htm" class="function">luaV_idiv</a>(<a href="../h_src/57918864.htm" class="localvar">L</a>, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=61></a>    case <a href="../h_src/57436840.htm" class="macro">LUA_OPBAND</a>: return <a href="../h_src/57612568.htm" class="macro">intop</a>(&amp;, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=62></a>    case <a href="../h_src/57436704.htm" class="macro">LUA_OPBOR</a>: return <a href="../h_src/57612568.htm" class="macro">intop</a>(|, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=63></a>    case <a href="../h_src/57436568.htm" class="macro">LUA_OPBXOR</a>: return <a href="../h_src/57612568.htm" class="macro">intop</a>(^, <a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=64></a>    case <a href="../h_src/57436432.htm" class="macro">LUA_OPSHL</a>: return <a href="../h_src/57610596.htm" class="function">luaV_shiftl</a>(<a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=65></a>    case <a href="../h_src/57436296.htm" class="macro">LUA_OPSHR</a>: return <a href="../h_src/57611888.htm" class="macro">luaV_shiftr</a>(<a href="../h_src/57918592.htm" class="localvar">v1</a>, <a href="../h_src/57918456.htm" class="localvar">v2</a>);
<a id=66></a>    case <a href="../h_src/57436160.htm" class="macro">LUA_OPUNM</a>: return <a href="../h_src/57612568.htm" class="macro">intop</a>(-, 0, <a href="../h_src/57918592.htm" class="localvar">v1</a>);
<a id=67></a>    case <a href="../h_src/57436024.htm" class="macro">LUA_OPBNOT</a>: return <a href="../h_src/57612568.htm" class="macro">intop</a>(^, ~<a href="../h_src/57546128.htm" class="macro">l_castS2U</a>(0), <a href="../h_src/57918592.htm" class="localvar">v1</a>);
<a id=68></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0); return 0;
  }
}


<a id=73></a>static <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57918320.htm" class="function">numarith</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57918184.htm" class="localvar">L</a>, int <a href="../h_src/57918048.htm" class="localvar">op</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57917912.htm" class="localvar">v1</a>,
<a id=74></a>                                                  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57917776.htm" class="localvar">v2</a>) {
<a id=75></a>  switch (<a href="../h_src/57918048.htm" class="localvar">op</a>) {
<a id=76></a>    case <a href="../h_src/57437792.htm" class="macro">LUA_OPADD</a>: return <a href="../h_src/57540008.htm" class="macro">luai_numadd</a>(L, <a href="../h_src/57917912.htm" class="localvar">v1</a>, <a href="../h_src/57917776.htm" class="localvar">v2</a>);
<a id=77></a>    case <a href="../h_src/57437656.htm" class="macro">LUA_OPSUB</a>: return <a href="../h_src/57539872.htm" class="macro">luai_numsub</a>(L, <a href="../h_src/57917912.htm" class="localvar">v1</a>, <a href="../h_src/57917776.htm" class="localvar">v2</a>);
<a id=78></a>    case <a href="../h_src/57437520.htm" class="macro">LUA_OPMUL</a>: return <a href="../h_src/57539736.htm" class="macro">luai_nummul</a>(L, <a href="../h_src/57917912.htm" class="localvar">v1</a>, <a href="../h_src/57917776.htm" class="localvar">v2</a>);
<a id=79></a>    case <a href="../h_src/57437112.htm" class="macro">LUA_OPDIV</a>: return <a href="../h_src/57540824.htm" class="macro">luai_numdiv</a>(L, <a href="../h_src/57917912.htm" class="localvar">v1</a>, <a href="../h_src/57917776.htm" class="localvar">v2</a>);
<a id=80></a>    case <a href="../h_src/57437248.htm" class="macro">LUA_OPPOW</a>: return <a href="../h_src/57540280.htm" class="macro">luai_numpow</a>(<a href="../h_src/57918184.htm" class="localvar">L</a>, <a href="../h_src/57917912.htm" class="localvar">v1</a>, <a href="../h_src/57917776.htm" class="localvar">v2</a>);
<a id=81></a>    case <a href="../h_src/57436976.htm" class="macro">LUA_OPIDIV</a>: return <a href="../h_src/57541096.htm" class="macro">luai_numidiv</a>(<a href="../h_src/57918184.htm" class="localvar">L</a>, <a href="../h_src/57917912.htm" class="localvar">v1</a>, <a href="../h_src/57917776.htm" class="localvar">v2</a>);
<a id=82></a>    case <a href="../h_src/57436160.htm" class="macro">LUA_OPUNM</a>: return <a href="../h_src/57539600.htm" class="macro">luai_numunm</a>(L, <a href="../h_src/57917912.htm" class="localvar">v1</a>);
<a id=83></a>    case <a href="../h_src/57437384.htm" class="macro">LUA_OPMOD</a>: return <a href="../h_src/57610664.htm" class="function">luaV_modf</a>(<a href="../h_src/57918184.htm" class="localvar">L</a>, <a href="../h_src/57917912.htm" class="localvar">v1</a>, <a href="../h_src/57917776.htm" class="localvar">v2</a>);
<a id=84></a>    default: <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(0); return 0;
  }
}


<a id=89></a>int <a href="../h_src/57501792.htm" class="function">luaO_rawarith</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57917504.htm" class="localvar">L</a>, int <a href="../h_src/57917368.htm" class="localvar">op</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57917232.htm" class="localvar">p1</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57917096.htm" class="localvar">p2</a>,
<a id=90></a>                   <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57916960.htm" class="localvar">res</a>) {
<a id=91></a>  switch (<a href="../h_src/57917368.htm" class="localvar">op</a>) {
<a id=92></a>    case <a href="../h_src/57436840.htm" class="macro">LUA_OPBAND</a>: case <a href="../h_src/57436704.htm" class="macro">LUA_OPBOR</a>: case <a href="../h_src/57436568.htm" class="macro">LUA_OPBXOR</a>:
<a id=93></a>    case <a href="../h_src/57436432.htm" class="macro">LUA_OPSHL</a>: case <a href="../h_src/57436296.htm" class="macro">LUA_OPSHR</a>:
<a id=94></a>    case <a href="../h_src/57436024.htm" class="macro">LUA_OPBNOT</a>: {  <a  class="comments">/* operate only on integers */</a>
<a id=95></a>      <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57916824.htm" class="localvar">i1</a>; <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57916688.htm" class="localvar">i2</a>;
<a id=96></a>      if (<a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/57917232.htm" class="localvar">p1</a>, &amp;<a href="../h_src/57916824.htm" class="localvar">i1</a>) &amp;&amp; <a href="../h_src/57612704.htm" class="macro">tointegerns</a>(<a href="../h_src/57917096.htm" class="localvar">p2</a>, &amp;<a href="../h_src/57916688.htm" class="localvar">i2</a>)) {
<a id=97></a>        <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57916960.htm" class="localvar">res</a>, <a href="../h_src/57919000.htm" class="function">intarith</a>(<a href="../h_src/57917504.htm" class="localvar">L</a>, <a href="../h_src/57917368.htm" class="localvar">op</a>, <a href="../h_src/57916824.htm" class="localvar">i1</a>, <a href="../h_src/57916688.htm" class="localvar">i2</a>));
        return 1;
      }
<a id=100></a>      else return 0;  <a  class="comments">/* fail */</a>
    }
<a id=102></a>    case <a href="../h_src/57437112.htm" class="macro">LUA_OPDIV</a>: case <a href="../h_src/57437248.htm" class="macro">LUA_OPPOW</a>: {  <a  class="comments">/* operate only on floats */</a>
<a id=103></a>      <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57916416.htm" class="localvar">n1</a>; <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57916280.htm" class="localvar">n2</a>;
<a id=104></a>      if (<a href="../h_src/57612976.htm" class="macro">tonumberns</a>(<a href="../h_src/57917232.htm" class="localvar">p1</a>, <a href="../h_src/57916416.htm" class="localvar">n1</a>) &amp;&amp; <a href="../h_src/57612976.htm" class="macro">tonumberns</a><a href="../h_src/57535996.htm" class="variable">n</a>umberns(<a href="../h_src/57917096.htm" class="localvar">p2</a>, <a href="../h_src/57916280.htm" class="localvar">n2</a>)) {
<a id=105></a>        <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57916960.htm" class="localvar">res</a>, <a href="../h_src/57918320.htm" class="function">numarith</a>(<a href="../h_src/57917504.htm" class="localvar">L</a>, <a href="../h_src/57917368.htm" class="localvar">op</a>, <a href="../h_src/57916416.htm" class="localvar">n1</a>, <a href="../h_src/57916280.htm" class="localvar">n2</a>));
        return 1;
      }
<a id=108></a>      else return 0;  <a  class="comments">/* fail */</a>
    }
<a id=110></a>    default: {  <a  class="comments">/* other operations */</a>
<a id=111></a>      <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57916008.htm" class="localvar">n1</a>; <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57915872.htm" class="localvar">n2</a>;
<a id=112></a>      if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57917232.htm" class="localvar">p1</a>) &amp;&amp; <a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57917096.htm" class="localvar">p2</a>)) {
<a id=113></a>        <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57916960.htm" class="localvar">res</a>, <a href="../h_src/57919000.htm" class="function">intarith</a>(<a href="../h_src/57917504.htm" class="localvar">L</a>, <a href="../h_src/57917368.htm" class="localvar">op</a>, <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57917232.htm" class="localvar">p1</a>), <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57917096.htm" class="localvar">p2</a>)));
        return 1;
      }
<a id=116></a>      else if (<a href="../h_src/57612976.htm" class="macro">tonumberns</a>(<a href="../h_src/57917232.htm" class="localvar">p1</a>, <a href="../h_src/57916008.htm" class="localvar">n1</a>) &amp;&amp; <a href="../h_src/57612976.htm" class="macro">tonumberns</a><a href="../h_src/57535996.htm" class="variable">n</a>umberns(<a href="../h_src/57917096.htm" class="localvar">p2</a>, <a href="../h_src/57915872.htm" class="localvar">n2</a>)) {
<a id=117></a>        <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57916960.htm" class="localvar">res</a>, <a href="../h_src/57918320.htm" class="function">numarith</a>(<a href="../h_src/57917504.htm" class="localvar">L</a>, <a href="../h_src/57917368.htm" class="localvar">op</a>, <a href="../h_src/57916008.htm" class="localvar">n1</a>, <a href="../h_src/57915872.htm" class="localvar">n2</a>));
        return 1;
      }
<a id=120></a>      else return 0;  <a  class="comments">/* fail */</a>
    }
  }
}


<a id=126></a>void <a href="../h_src/57501724.htm" class="function">luaO_arith</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57915464.htm" class="localvar">L</a>, int <a href="../h_src/57915328.htm" class="localvar">op</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57915192.htm" class="localvar">p1</a>, const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57915056.htm" class="localvar">p2</a>,
<a id=127></a>                 <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57914920.htm" class="localvar">res</a>) {
<a id=128></a>  if (!<a href="../h_src/57501792.htm" class="function">luaO_rawarith</a>(<a href="../h_src/57915464.htm" class="localvar">L</a>, <a href="../h_src/57915328.htm" class="localvar">op</a>, <a href="../h_src/57915192.htm" class="localvar">p1</a>, <a href="../h_src/57915056.htm" class="localvar">p2</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57914920.htm" class="localvar">res</a>))) {
<a id=129></a>    <a  class="comments">/* could not perform raw operation; try metamethod */</a>
<a id=130></a>    <a href="../h_src/57497780.htm" class="function">luaT_trybinTM</a>(<a href="../h_src/57915464.htm" class="localvar">L</a>, <a href="../h_src/57915192.htm" class="localvar">p1</a>, <a href="../h_src/57915056.htm" class="localvar">p2</a>, <a href="../h_src/57914920.htm" class="localvar">res</a>, <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57499004.htm" class="type">TMS</a>, (<a href="../h_src/57915328.htm" class="localvar">op</a> - <a href="../h_src/57437792.htm" class="macro">LUA_OPADD</a>) + <a href="../h_src/57500500.htm" class="variable">TM_ADD</a>));
  }
}


<a id=135></a>int <a href="../h_src/57501588.htm" class="function">luaO_hexavalue</a> (int <a href="../h_src/57914784.htm" class="localvar">c</a>) {
<a id=136></a>  if (<a href="../h_src/57760276.htm" class="macro">lisdigit</a>(<a href="../h_src/57914784.htm" class="localvar">c</a>)) return <a href="../h_src/57914784.htm" class="localvar">c</a> - '0';
<a id=137></a>  else return (<a href="../h_src/57759732.htm" class="macro">ltolower</a>(<a href="../h_src/57914784.htm" class="localvar">c</a>) - 'a') + 10;
}


<a id=141></a>static int <a href="../h_src/57914648.htm" class="function">isneg</a> (const char **<a href="../h_src/57914512.htm" class="localvar">s</a>) {
<a id=142></a>  if (**<a href="../h_src/57914512.htm" class="localvar">s</a> == '-') { (*<a href="../h_src/57914512.htm" class="localvar">s</a>)++; return 1; }
<a id=143></a>  else if (**<a href="../h_src/57914512.htm" class="localvar">s</a> == '+') (*<a href="../h_src/57914512.htm" class="localvar">s</a>)++;
  return 0;
}



<a id=149></a><a  class="comments">/*</a>
<a id=150></a><a  class="comments">** {==================================================================</a>
<a id=151></a><a  class="comments">** Lua's implementation for 'lua_strx2number'</a>
<a id=152></a><a  class="comments">** ===================================================================</a>
<a id=153></a><a  class="comments">*/</a>

<a id=155></a>#if !defined(<a href="../h_src/57914376.htm" class="macro">lua_strx2number</a>)

<a id=157></a><a  class="comments">/* maximum number of significant digits to read (to avoid overflows</a>
<a id=158></a><a  class="comments">   even with single floats) */</a>
<a id=159></a>#define <a href="../h_src/57914240.htm" class="macro">MAXSIGDIG</a>	30

<a id=161></a><a  class="comments">/*</a>
<a id=162></a><a  class="comments">** convert a hexadecimal numeric string to a number, following</a>
<a id=163></a><a  class="comments">** C99 specification for 'strtod'</a>
<a id=164></a><a  class="comments">*/</a>
<a id=165></a>static <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57914104.htm" class="function">lua_strx2number</a> (const char *<a href="../h_src/57913968.htm" class="localvar">s</a>, char **<a href="../h_src/57913832.htm" class="localvar">endptr</a>) {
<a id=166></a>  int <a href="../h_src/57913628.htm" class="localvar">dot</a> = <a href="../h_src/57448468.htm" class="macro">lua_getlocaledecpoint</a>();
<a id=167></a>  <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57913492.htm" class="localvar">r</a> = <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(0.0);  <a  class="comments">/* result (accumulator) */</a>
<a id=168></a>  int <a href="../h_src/57913356.htm" class="localvar">sigdig</a> = 0;  <a  class="comments">/* number of significant digits */</a>
<a id=169></a>  int <a href="../h_src/57913220.htm" class="localvar">nosigdig</a> = 0;  <a  class="comments">/* number of non-significant digits */</a>
<a id=170></a>  int <a href="../h_src/57913084.htm" class="localvar">e</a> = 0;  <a  class="comments">/* exponent correction */</a>
<a id=171></a>  int <a href="../h_src/57912948.htm" class="localvar">neg</a>;  <a  class="comments">/* 1 if number is negative */</a>
<a id=172></a>  int <a href="../h_src/57912812.htm" class="localvar">hasdot</a> = 0;  <a  class="comments">/* true after seen a dot */</a>
<a id=173></a>  *<a href="../h_src/57913832.htm" class="localvar">endptr</a> = <a href="../h_src/57546536.htm" class="macro">cast_charp</a>(<a href="../h_src/57913968.htm" class="localvar">s</a>);  <a  class="comments">/* nothing is valid yet */</a>
<a id=174></a>  while (<a href="../h_src/57760140.htm" class="macro">lisspace</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57913968.htm" class="localvar">s</a>))) <a href="../h_src/57913968.htm" class="localvar">s</a>++;  <a  class="comments">/* skip initial spaces */</a>
<a id=175></a>  <a href="../h_src/57912948.htm" class="localvar">neg</a> = <a href="../h_src/57914648.htm" class="function">isneg</a>(&amp;<a href="../h_src/57913968.htm" class="localvar">s</a>);  <a  class="comments">/* check sign */</a>
<a id=176></a>  if (!(*<a href="../h_src/57913968.htm" class="localvar">s</a> == '0' &amp;&amp; (*(<a href="../h_src/57913968.htm" class="localvar">s</a> + 1) == 'x' || *(<a href="../h_src/57913968.htm" class="localvar">s</a> + 1) == 'X')))  <a  class="comments">/* check '0x' */</a>
<a id=177></a>    return <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(0.0);  <a  class="comments">/* invalid format (no '0x') */</a>
<a id=178></a>  for (<a href="../h_src/57913968.htm" class="localvar">s</a> += 2; ; <a href="../h_src/57913968.htm" class="localvar">s</a>++) {  <a  class="comments">/* skip '0x' and read numeral */</a>
<a id=179></a>    if (*<a href="../h_src/57913968.htm" class="localvar">s</a> == <a href="../h_src/57913628.htm" class="localvar">dot</a>) {
<a id=180></a>      if (<a href="../h_src/57912812.htm" class="localvar">hasdot</a>) break;  <a  class="comments">/* second dot? stop loop */</a>
<a id=181></a>      else <a href="../h_src/57912812.htm" class="localvar">hasdot</a> = 1;
    }
<a id=183></a>    else if (<a href="../h_src/57759868.htm" class="macro">lisxdigit</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57913968.htm" class="localvar">s</a>))) {
<a id=184></a>      if (<a href="../h_src/57913356.htm" class="localvar">sigdig</a> == 0 &amp;&amp; *<a href="../h_src/57913968.htm" class="localvar">s</a> == '0')  <a  class="comments">/* non-significant digit (zero)? */</a>
<a id=185></a>        <a href="../h_src/57913220.htm" class="localvar">nosigdig</a>++;
<a id=186></a>      else if (++<a href="../h_src/57913356.htm" class="localvar">sigdig</a> &lt;= <a href="../h_src/57914240.htm" class="macro">MAXSIGDIG</a>)  <a  class="comments">/* can read it without overflow? */</a>
<a id=187></a>          <a href="../h_src/57913492.htm" class="localvar">r</a> = (<a href="../h_src/57913492.htm" class="localvar">r</a> * <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(16.0)) + <a href="../h_src/57501588.htm" class="function">luaO_hexavalue</a>(*<a href="../h_src/57913968.htm" class="localvar">s</a>);
<a id=188></a>      else <a href="../h_src/57913084.htm" class="localvar">e</a>++; <a  class="comments">/* too many digits; ignore, but still count for exponent */</a>
<a id=189></a>      if (<a href="../h_src/57912812.htm" class="localvar">hasdot</a>) <a href="../h_src/57913084.htm" class="localvar">e</a>--;  <a  class="comments">/* decimal digit? correct exponent */</a>
    }
<a id=191></a>    else break;  <a  class="comments">/* neither a dot nor a digit */</a>
  }
<a id=193></a>  if (<a href="../h_src/57913220.htm" class="localvar">nosigdig</a> + <a href="../h_src/57913356.htm" class="localvar">sigdig</a> == 0)  <a  class="comments">/* no digits? */</a>
<a id=194></a>    return <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(0.0);  <a  class="comments">/* invalid format */</a>
<a id=195></a>  *<a href="../h_src/57913832.htm" class="localvar">endptr</a> = <a href="../h_src/57546536.htm" class="macro">cast_charp</a>(<a href="../h_src/57913968.htm" class="localvar">s</a>);  <a  class="comments">/* valid up to here */</a>
<a id=196></a>  <a href="../h_src/57913084.htm" class="localvar">e</a> *= 4;  <a  class="comments">/* each digit multiplies/divides value by 2^4 */</a>
<a id=197></a>  if (*<a href="../h_src/57913968.htm" class="localvar">s</a> == 'p' || *<a href="../h_src/57913968.htm" class="localvar">s</a> == 'P') {  <a  class="comments">/* exponent part? */</a>
<a id=198></a>    int <a href="../h_src/57912676.htm" class="localvar">exp1</a> = 0;  <a  class="comments">/* exponent value */</a>
<a id=199></a>    int <a href="../h_src/57912540.htm" class="localvar">neg1</a>;  <a  class="comments">/* exponent sign */</a>
<a id=200></a>    <a href="../h_src/57913968.htm" class="localvar">s</a>++;  <a  class="comments">/* skip 'p' */</a>
<a id=201></a>    <a href="../h_src/57912540.htm" class="localvar">neg1</a> = <a href="../h_src/57914648.htm" class="function">isneg</a>(&amp;<a href="../h_src/57913968.htm" class="localvar">s</a>);  <a  class="comments">/* sign */</a>
<a id=202></a>    if (!<a href="../h_src/57760276.htm" class="macro">lisdigit</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57913968.htm" class="localvar">s</a>)))
<a id=203></a>      return <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(0.0);  <a  class="comments">/* invalid; must have at least one digit */</a>
<a id=204></a>    while (<a href="../h_src/57760276.htm" class="macro">lisdigit</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57913968.htm" class="localvar">s</a>)))  <a  class="comments">/* read exponent */</a>
<a id=205></a>      <a href="../h_src/57912676.htm" class="localvar">exp1</a> = <a href="../h_src/57912676.htm" class="localvar">exp1</a> * 10 + *(<a href="../h_src/57913968.htm" class="localvar">s</a>++) - '0';
<a id=206></a>    if (<a href="../h_src/57912540.htm" class="localvar">neg1</a>) <a href="../h_src/57912676.htm" class="localvar">exp1</a> = -<a href="../h_src/57912676.htm" class="localvar">exp1</a>;
<a id=207></a>    <a href="../h_src/57913084.htm" class="localvar">e</a> += <a href="../h_src/57912676.htm" class="localvar">exp1</a>;
<a id=208></a>    *<a href="../h_src/57913832.htm" class="localvar">endptr</a> = <a href="../h_src/57546536.htm" class="macro">cast_charp</a>(<a href="../h_src/57913968.htm" class="localvar">s</a>);  <a  class="comments">/* valid up to here */</a>
  }
<a id=210></a>  if (<a href="../h_src/57912948.htm" class="localvar">neg</a>) <a href="../h_src/57913492.htm" class="localvar">r</a> = -<a href="../h_src/57913492.htm" class="localvar">r</a>;
<a id=211></a>  return <a href="../h_src/57449148.htm" class="macro">l_mathop</a>(<a href="../h_aa/57804272.htm" class="libfunc">ldexp</a>)(<a href="../h_src/57913492.htm" class="localvar">r</a>, <a href="../h_src/57913084.htm" class="localvar">e</a>);
}

#endif
<a id=215></a><a  class="comments">/* }====================================================== */</a>


<a id=218></a><a  class="comments">/* maximum length of a numeral to be converted to a number */</a>
<a id=219></a>#if !defined (<a href="../h_src/57912404.htm" class="macro">L_MAXLENNUM</a>)
<a id=220></a>#define <a href="../h_src/57912268.htm" class="macro">L_MAXLENNUM</a>	200
#endif

<a id=223></a><a  class="comments">/*</a>
<a id=224></a><a  class="comments">** Convert string 's' to a Lua number (put in 'result'). Return NULL on</a>
<a id=225></a><a  class="comments">** fail or the address of the ending '\0' on success. ('mode' == 'x')</a>
<a id=226></a><a  class="comments">** means a hexadecimal numeral.</a>
<a id=227></a><a  class="comments">*/</a>
<a id=228></a>static const char *<a href="../h_src/57912132.htm" class="function">l_str2dloc</a> (const char *<a href="../h_src/57911996.htm" class="localvar">s</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> *<a href="../h_src/57911860.htm" class="localvar">result</a>, int <a href="../h_src/57911724.htm" class="localvar">mode</a>) {
<a id=229></a>  char *<a href="../h_src/57911588.htm" class="localvar">endptr</a>;
<a id=230></a>  *<a href="../h_src/57911860.htm" class="localvar">result</a> = (<a href="../h_src/57911724.htm" class="localvar">mode</a> == 'x') ? <a href="../h_src/57914104.htm" class="function">lua_strx2number</a>(<a href="../h_src/57911996.htm" class="localvar">s</a>, &amp;<a href="../h_src/57911588.htm" class="localvar">endptr</a>)  <a  class="comments">/* try to convert */</a>
<a id=231></a>                          : <a href="../h_src/57449012.htm" class="macro">lua_str2number</a>(<a href="../h_src/57911996.htm" class="localvar">s</a>, &amp;<a href="../h_src/57911588.htm" class="localvar">endptr</a>);
<a id=232></a>  if (<a href="../h_src/57911588.htm" class="localvar">endptr</a> == <a href="../h_src/57911996.htm" class="localvar">s</a>) return NULL;  <a  class="comments">/* nothing recognized? */</a>
<a id=233></a>  while (<a href="../h_src/57760140.htm" class="macro">lisspace</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57911588.htm" class="localvar">endptr</a>))) <a href="../h_src/57911588.htm" class="localvar">endptr</a>++;  <a  class="comments">/* skip trailing spaces */</a>
<a id=234></a>  return (*<a href="../h_src/57911588.htm" class="localvar">endptr</a> == '\0') ? <a href="../h_src/57911588.htm" class="localvar">endptr</a> : NULL;  <a  class="comments">/* OK iff no trailing chars */</a>
}


<a id=238></a><a  class="comments">/*</a>
<a id=239></a><a  class="comments">** Convert string 's' to a Lua number (put in 'result') handling the</a>
<a id=240></a><a  class="comments">** current locale.</a>
<a id=241></a><a  class="comments">** This function accepts both the current locale or a dot as the radix</a>
<a id=242></a><a  class="comments">** mark. If the conversion fails, it may mean number has a dot but</a>
<a id=243></a><a  class="comments">** locale accepts something else. In that case, the code copies 's'</a>
<a id=244></a><a  class="comments">** to a buffer (because 's' is read-only), changes the dot to the</a>
<a id=245></a><a  class="comments">** current locale radix mark, and tries to convert again.</a>
<a id=246></a><a  class="comments">** The variable 'mode' checks for special characters in the string:</a>
<a id=247></a><a  class="comments">** - 'n' means 'inf' or 'nan' (which should be rejected)</a>
<a id=248></a><a  class="comments">** - 'x' means a hexadecimal numeral</a>
<a id=249></a><a  class="comments">** - '.' just optimizes the search for the common case (no special chars)</a>
<a id=250></a><a  class="comments">*/</a>
<a id=251></a>static const char *<a href="../h_src/57911384.htm" class="function">l_str2d</a> (const char *<a href="../h_src/57911248.htm" class="localvar">s</a>, <a href="../h_src/57442144.htm" class="type">lua_Number</a> *<a href="../h_src/57911112.htm" class="localvar">result</a>) {
<a id=252></a>  const char *<a href="../h_src/57910976.htm" class="localvar">endptr</a>;
<a id=253></a>  const char *<a href="../h_src/57910772.htm" class="localvar">pmode</a> = <a href="../h_aa/57910840.htm" class="libfunc">strpbrk</a>(<a href="../h_src/57911248.htm" class="localvar">s</a>, &quot;.xXnN&quot;);  <a  class="comments">/* look for special chars */</a>
<a id=254></a>  int <a href="../h_src/57910636.htm" class="localvar">mode</a> = <a href="../h_src/57910772.htm" class="localvar">pmode</a> ? <a href="../h_src/57759732.htm" class="macro">ltolower</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57910772.htm" class="localvar">pmode</a>)) : 0;
<a id=255></a>  if (<a href="../h_src/57910636.htm" class="localvar">mode</a> == 'n')  <a  class="comments">/* reject 'inf' and 'nan' */</a>
    return NULL;
<a id=257></a>  <a href="../h_src/57910976.htm" class="localvar">endptr</a> = <a href="../h_src/57912132.htm" class="function">l_str2dloc</a>(<a href="../h_src/57911248.htm" class="localvar">s</a>, <a href="../h_src/57911112.htm" class="localvar">result</a>, <a href="../h_src/57910636.htm" class="localvar">mode</a>);  <a  class="comments">/* try to convert */</a>
<a id=258></a>  if (<a href="../h_src/57910976.htm" class="localvar">endptr</a> == NULL) {  <a  class="comments">/* failed? may be a different locale */</a>
<a id=259></a>    char <a href="../h_src/57910500.htm" class="localvar">buff</a>[<a href="../h_src/57912268.htm" class="macro">L_MAXLENNUM</a> + 1];
<a id=260></a>    const char *<a href="../h_src/57910364.htm" class="localvar">pdot</a> = <a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57911248.htm" class="localvar">s</a>, '.');
<a id=261></a>    if (<a href="../h_src/57910364.htm" class="localvar">pdot</a> == NULL || <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/57911248.htm" class="localvar">s</a>) &gt; <a href="../h_src/57912268.htm" class="macro">L_MAXLENNUM</a>)
<a id=262></a>      return NULL;  <a  class="comments">/* string too long or no dot; fail */</a>
<a id=263></a>    <a href="../h_aa/57910228.htm" class="libfunc">strcpy</a>(<a href="../h_src/57910500.htm" class="localvar">buff</a>, <a href="../h_src/57911248.htm" class="localvar">s</a>);  <a  class="comments">/* copy string to buffer */</a>
<a id=264></a>    <a href="../h_src/57910500.htm" class="localvar">buff</a>[<a href="../h_src/57910364.htm" class="localvar">pdot</a> - <a href="../h_src/57911248.htm" class="localvar">s</a>] = <a href="../h_src/57448468.htm" class="macro">lua_getlocaledecpoint</a>();  <a  class="comments">/* correct decimal point */</a>
<a id=265></a>    <a href="../h_src/57910976.htm" class="localvar">endptr</a> = <a href="../h_src/57912132.htm" class="function">l_str2dloc</a>(<a href="../h_src/57910500.htm" class="localvar">buff</a>, <a href="../h_src/57911112.htm" class="localvar">result</a>, <a href="../h_src/57910636.htm" class="localvar">mode</a>);  <a  class="comments">/* try again */</a>
<a id=266></a>    if (<a href="../h_src/57910976.htm" class="localvar">endptr</a> != NULL)
<a id=267></a>      <a href="../h_src/57910976.htm" class="localvar">endptr</a> = <a href="../h_src/57911248.htm" class="localvar">s</a> + (<a href="../h_src/57910976.htm" class="localvar">endptr</a> - <a href="../h_src/57910500.htm" class="localvar">buff</a>);  <a  class="comments">/* make relative to 's' */</a>
  }
<a id=269></a>  return <a href="../h_src/57910976.htm" class="localvar">endptr</a>;
}


<a id=273></a>#define <a href="../h_src/57910160.htm" class="macro">MAXBY10</a>		cast(lua_Unsigned, LUA_MAXINTEGER / 10)
<a id=274></a>#define <a href="../h_src/57910024.htm" class="macro">MAXLASTD</a>	cast_int(LUA_MAXINTEGER % 10)

<a id=276></a>static const char *<a href="../h_src/57909888.htm" class="function">l_str2int</a> (const char *<a href="../h_src/57909752.htm" class="localvar">s</a>, <a href="../h_src/57442076.htm" class="type">lua_Integer</a> *<a href="../h_src/57909616.htm" class="localvar">result</a>) {
<a id=277></a>  <a href="../h_src/57438132.htm" class="function">lua_Unsigned</a> <a href="../h_src/57909480.htm" class="localvar">a</a> = 0;
<a id=278></a>  int <a href="../h_src/57909344.htm" class="localvar">empty</a> = 1;
<a id=279></a>  int <a href="../h_src/57909208.htm" class="localvar">neg</a>;
<a id=280></a>  while (<a href="../h_src/57760140.htm" class="macro">lisspace</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57909752.htm" class="localvar">s</a>))) <a href="../h_src/57909752.htm" class="localvar">s</a>++;  <a  class="comments">/* skip initial spaces */</a>
<a id=281></a>  <a href="../h_src/57909208.htm" class="localvar">neg</a> = <a href="../h_src/57914648.htm" class="function">isneg</a>(&amp;<a href="../h_src/57909752.htm" class="localvar">s</a>);
<a id=282></a>  if (<a href="../h_src/57909752.htm" class="localvar">s</a>[0] == '0' &amp;&amp;
<a id=283></a>      (<a href="../h_src/57909752.htm" class="localvar">s</a>[1] == 'x' || <a href="../h_src/57909752.htm" class="localvar">s</a>[1] == 'X')) {  <a  class="comments">/* hex? */</a>
<a id=284></a>    <a href="../h_src/57909752.htm" class="localvar">s</a> += 2;  <a  class="comments">/* skip '0x' */</a>
<a id=285></a>    for (; <a href="../h_src/57759868.htm" class="macro">lisxdigit</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57909752.htm" class="localvar">s</a>)); <a href="../h_src/57909752.htm" class="localvar">s</a>++) {
<a id=286></a>      <a href="../h_src/57909480.htm" class="localvar">a</a> = <a href="../h_src/57909480.htm" class="localvar">a</a> * 16 + <a href="../h_src/57501588.htm" class="function">luaO_hexavalue</a>(*<a href="../h_src/57909752.htm" class="localvar">s</a>);
<a id=287></a>      <a href="../h_src/57909344.htm" class="localvar">empty</a> = 0;
    }
  }
<a id=290></a>  else {  <a  class="comments">/* decimal */</a>
<a id=291></a>    for (; <a href="../h_src/57760276.htm" class="macro">lisdigit</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57909752.htm" class="localvar">s</a>)); <a href="../h_src/57909752.htm" class="localvar">s</a>++) {
<a id=292></a>      int <a href="../h_src/57909072.htm" class="localvar">d</a> = *<a href="../h_src/57909752.htm" class="localvar">s</a> - '0';
<a id=293></a>      if (<a href="../h_src/57909480.htm" class="localvar">a</a> &gt;= <a href="../h_src/57910160.htm" class="macro">MAXBY10</a> &amp;&amp; (<a href="../h_src/57909480.htm" class="localvar">a</a> &gt; <a href="../h_src/57910160.htm" class="macro">MAXBY10</a> || <a href="../h_src/57909072.htm" class="localvar">d</a> &gt; <a href="../h_src/57910024.htm" class="macro">MAXLASTD</a> + <a href="../h_src/57909208.htm" class="localvar">neg</a>))  <a  class="comments">/* overflow? */</a>
<a id=294></a>        return NULL;  <a  class="comments">/* do not accept it (as integer) */</a>
<a id=295></a>      <a href="../h_src/57909480.htm" class="localvar">a</a> = <a href="../h_src/57909480.htm" class="localvar">a</a> * 10 + <a href="../h_src/57909072.htm" class="localvar">d</a>;
<a id=296></a>      <a href="../h_src/57909344.htm" class="localvar">empty</a> = 0;
    }
  }
<a id=299></a>  while (<a href="../h_src/57760140.htm" class="macro">lisspace</a>(<a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(*<a href="../h_src/57909752.htm" class="localvar">s</a>))) <a href="../h_src/57909752.htm" class="localvar">s</a>++;  <a  class="comments">/* skip trailing spaces */</a>
<a id=300></a>  if (<a href="../h_src/57909344.htm" class="localvar">empty</a> || *<a href="../h_src/57909752.htm" class="localvar">s</a> != '\0') return NULL;  <a  class="comments">/* something wrong in the numeral */</a>
  else {
<a id=302></a>    *<a href="../h_src/57909616.htm" class="localvar">result</a> = <a href="../h_src/57545856.htm" class="macro">l_castU2S</a>((<a href="../h_src/57909208.htm" class="localvar">neg</a>) ? 0u - <a href="../h_src/57909480.htm" class="localvar">a</a> : <a href="../h_src/57909480.htm" class="localvar">a</a>);
<a id=303></a>    return <a href="../h_src/57909752.htm" class="localvar">s</a>;
  }
}


<a id=308></a><a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57501656.htm" class="function">luaO_str2num</a> (const char *<a href="../h_src/57908936.htm" class="localvar">s</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57908800.htm" class="localvar">o</a>) {
<a id=309></a>  <a href="../h_src/57442076.htm" class="type">lua_Integer</a> <a href="../h_src/57908664.htm" class="localvar">i</a>; <a href="../h_src/57442144.htm" class="type">lua_Number</a> <a href="../h_src/57908528.htm" class="localvar">n</a>;
<a id=310></a>  const char *<a href="../h_src/57908392.htm" class="localvar">e</a>;
<a id=311></a>  if ((<a href="../h_src/57908392.htm" class="localvar">e</a> = <a href="../h_src/57909888.htm" class="function">l_str2int</a>(<a href="../h_src/57908936.htm" class="localvar">s</a>, &amp;<a href="../h_src/57908664.htm" class="localvar">i</a>)) != NULL) {  <a  class="comments">/* try as an integer */</a>
<a id=312></a>    <a href="../h_src/57525456.htm" class="macro">setivalue</a>(<a href="../h_src/57908800.htm" class="localvar">o</a>, <a href="../h_src/57536064.htm" class="variable">i</a>);
  }
<a id=314></a>  else if ((<a href="../h_src/57908392.htm" class="localvar">e</a> = <a href="../h_src/57911384.htm" class="function">l_str2d</a>(<a href="../h_src/57908936.htm" class="localvar">s</a>, &amp;<a href="../h_src/57908528.htm" class="localvar">n</a>)) != NULL) {  <a  class="comments">/* else try as a float */</a>
<a id=315></a>    <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(<a href="../h_src/57908800.htm" class="localvar">o</a>, <a href="../h_src/57535996.htm" class="variable">n</a>);
  }
  else
<a id=318></a>    return 0;  <a  class="comments">/* conversion failed */</a>
<a id=319></a>  return (<a href="../h_src/57908392.htm" class="localvar">e</a> - <a href="../h_src/57908936.htm" class="localvar">s</a>) + 1;  <a  class="comments">/* success; return string size */</a>
}


<a id=323></a>int <a href="../h_src/57501928.htm" class="function">luaO_utf8esc</a> (char *<a href="../h_src/57907984.htm" class="localvar">buff</a>, unsigned long <a href="../h_src/57907848.htm" class="localvar">x</a>) {
<a id=324></a>  int <a href="../h_src/57907712.htm" class="localvar">n</a> = 1;  <a  class="comments">/* number of bytes put in buffer (backwards) */</a>
<a id=325></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(x &lt;= 0x7FFFFFFFu);
<a id=326></a>  if (<a href="../h_src/57907848.htm" class="localvar">x</a> &lt; 0x80)  <a  class="comments">/* ascii? */</a>
<a id=327></a>    <a href="../h_src/57907984.htm" class="localvar">buff</a>[<a href="../h_src/57502064.htm" class="macro">UTF8BUFFSZ</a> - 1] = <a href="../h_src/57546672.htm" class="macro">cast_char</a>(<a href="../h_src/57907848.htm" class="localvar">x</a>);
<a id=328></a>  else {  <a  class="comments">/* need continuation bytes */</a>
<a id=329></a>    unsigned int <a href="../h_src/57907576.htm" class="localvar">mfb</a> = 0x3f;  <a  class="comments">/* maximum that fits in first byte */</a>
<a id=330></a>    do {  <a  class="comments">/* add continuation bytes */</a>
<a id=331></a>      <a href="../h_src/57907984.htm" class="localvar">buff</a>[<a href="../h_src/57502064.htm" class="macro">UTF8BUFFSZ</a> - (<a href="../h_src/57907712.htm" class="localvar">n</a>++)] = <a href="../h_src/57546672.htm" class="macro">cast_char</a>(0x80 | (<a href="../h_src/57907848.htm" class="localvar">x</a> &amp; 0x3f));
<a id=332></a>      <a href="../h_src/57907848.htm" class="localvar">x</a> &gt;&gt;= 6;  <a  class="comments">/* remove added bits */</a>
<a id=333></a>      <a href="../h_src/57907576.htm" class="localvar">mfb</a> &gt;&gt;= 1;  <a  class="comments">/* now there is one less bit available in first byte */</a>
<a id=334></a>    } while (<a href="../h_src/57907848.htm" class="localvar">x</a> &gt; <a href="../h_src/57907576.htm" class="localvar">mfb</a>);  <a  class="comments">/* still needs continuation byte? */</a>
<a id=335></a>    <a href="../h_src/57907984.htm" class="localvar">buff</a>[<a href="../h_src/57502064.htm" class="macro">UTF8BUFFSZ</a> - <a href="../h_src/57907712.htm" class="localvar">n</a>] = <a href="../h_src/57546672.htm" class="macro">cast_char</a>((~<a href="../h_src/57907576.htm" class="localvar">mfb</a> &lt;&lt; 1) | <a href="../h_src/57907848.htm" class="localvar">x</a>);  <a  class="comments">/* add first byte */</a>
  }
<a id=337></a>  return <a href="../h_src/57907712.htm" class="localvar">n</a>;
}


<a id=341></a><a  class="comments">/*</a>
<a id=342></a><a  class="comments">** Maximum length of the conversion of a number to a string. Must be</a>
<a id=343></a><a  class="comments">** enough to accommodate both LUA_INTEGER_FMT and LUA_NUMBER_FMT.</a>
<a id=344></a><a  class="comments">** (For a long long int, this is 19 digits plus a sign and a final '\0',</a>
<a id=345></a><a  class="comments">** adding to 21. For a long double, it can go to a sign, 33 digits,</a>
<a id=346></a><a  class="comments">** the dot, an exponent letter, an exponent sign, 5 exponent digits,</a>
<a id=347></a><a  class="comments">** and a final '\0', adding to 43.)</a>
<a id=348></a><a  class="comments">*/</a>
<a id=349></a>#define <a href="../h_src/57907440.htm" class="macro">MAXNUMBER2STR</a>	44


<a id=352></a><a  class="comments">/*</a>
<a id=353></a><a  class="comments">** Convert a number object to a string, adding it to a buffer</a>
<a id=354></a><a  class="comments">*/</a>
<a id=355></a>static int <a href="../h_src/57907304.htm" class="function">tostringbuff</a> (<a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57907168.htm" class="localvar">obj</a>, char *<a href="../h_src/57907032.htm" class="localvar">buff</a>) {
<a id=356></a>  int <a href="../h_src/57906896.htm" class="localvar">len</a>;
<a id=357></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57526816.htm" class="macro">ttisnumber</a>(obj));
<a id=358></a>  if (<a href="../h_src/57526544.htm" class="macro">ttisinteger</a>(<a href="../h_src/57907168.htm" class="localvar">obj</a>))
<a id=359></a>    <a href="../h_src/57906896.htm" class="localvar">len</a> = <a href="../h_src/57450780.htm" class="macro">lua_integer2str</a>(<a href="../h_src/57907032.htm" class="localvar">buff</a>, <a href="../h_src/57907440.htm" class="macro">MAXNUMBER2STR</a>, <a href="../h_src/57526136.htm" class="macro">ivalue</a>(<a href="../h_src/57907168.htm" class="localvar">obj</a>));
  else {
<a id=361></a>    <a href="../h_src/57906896.htm" class="localvar">len</a> = <a href="../h_src/57452276.htm" class="macro">lua_number2str</a>(<a href="../h_src/57907032.htm" class="localvar">buff</a>, <a href="../h_src/57907440.htm" class="macro">MAXNUMBER2STR</a>, <a href="../h_src/57526272.htm" class="macro">fltvalue</a>(<a href="../h_src/57907168.htm" class="localvar">obj</a>));
<a id=362></a>    if (<a href="../h_src/57907032.htm" class="localvar">buff</a>[<a href="../h_aa/57906692.htm" class="libfunc">strspn</a>(<a href="../h_src/57907032.htm" class="localvar">buff</a>, &quot;-0123456789&quot;)] == '\0') {  <a  class="comments">/* looks like an int? */</a>
<a id=363></a>      <a href="../h_src/57907032.htm" class="localvar">buff</a>[<a href="../h_src/57906896.htm" class="localvar">len</a>++] = <a href="../h_src/57448468.htm" class="macro">lua_getlocaledecpoint</a>();
<a id=364></a>      <a href="../h_src/57907032.htm" class="localvar">buff</a>[<a href="../h_src/57906896.htm" class="localvar">len</a>++] = '0';  <a  class="comments">/* adds '.0' to result */</a>
    }
  }
<a id=367></a>  return <a href="../h_src/57906896.htm" class="localvar">len</a>;
}


<a id=371></a><a  class="comments">/*</a>
<a id=372></a><a  class="comments">** Convert a number object to a Lua string, replacing the value at 'obj'</a>
<a id=373></a><a  class="comments">*/</a>
<a id=374></a>void <a href="../h_src/57501520.htm" class="function">luaO_tostring</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57906624.htm" class="localvar">L</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57906488.htm" class="localvar">obj</a>) {
<a id=375></a>  char <a href="../h_src/57906352.htm" class="localvar">buff</a>[<a href="../h_src/57907440.htm" class="macro">MAXNUMBER2STR</a>];
<a id=376></a>  int <a href="../h_src/57906216.htm" class="localvar">len</a> = <a href="../h_src/57907304.htm" class="function">tostringbuff</a>(<a href="../h_src/57906488.htm" class="localvar">obj</a>, <a href="../h_src/57906352.htm" class="localvar">buff</a>);
<a id=377></a>  <a href="../h_src/57524232.htm" class="macro">setsvalue</a>(<a href="../h_src/57906624.htm" class="localvar">L</a>, <a href="../h_src/57906488.htm" class="localvar">obj</a>, <a href="../h_src/57618552.htm" class="function">luaS_newlstr</a>(<a href="../h_src/57906624.htm" class="localvar">L</a>, <a href="../h_src/57906352.htm" class="localvar">buff</a>, <a href="../h_src/57906216.htm" class="localvar">len</a>));
}




<a id=383></a><a  class="comments">/*</a>
<a id=384></a><a  class="comments">** {==================================================================</a>
<a id=385></a><a  class="comments">** 'luaO_pushvfstring'</a>
<a id=386></a><a  class="comments">** ===================================================================</a>
<a id=387></a><a  class="comments">*/</a>

<a id=389></a><a  class="comments">/*</a>
<a id=390></a><a  class="comments">** Size for buffer space used by 'luaO_pushvfstring'. It should be</a>
<a id=391></a><a  class="comments">** (LUA_IDSIZE + MAXNUMBER2STR) + a minimal space for basic messages,</a>
<a id=392></a><a  class="comments">** so that 'luaG_addinfo' can work directly on the buffer.</a>
<a id=393></a><a  class="comments">*/</a>
<a id=394></a>#define <a href="../h_src/57905808.htm" class="macro">BUFVFS</a>		(LUA_IDSIZE + MAXNUMBER2STR + 95)

<a id=396></a><a  class="comments">/* buffer used by 'luaO_pushvfstring' */</a>
<a id=397></a>typedef struct <a href="../h_src/57905672.htm" class="class">BuffFS</a> {
<a id=398></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57905536.htm" class="variable">L</a>;
<a id=399></a>  int <a href="../h_src/57905468.htm" class="variable">pushed</a>;  <a  class="comments">/* true if there is a part of the result on the stack */</a>
<a id=400></a>  int <a href="../h_src/57905400.htm" class="variable">blen</a>;  <a  class="comments">/* length of partial string in 'space' */</a>
<a id=401></a>  char <a href="../h_src/57905332.htm" class="variable">space</a>[<a href="../h_src/57905808.htm" class="macro">BUFVFS</a>];  <a  class="comments">/* holds last part of the result */</a>
<a id=402></a>} <a href="../h_src/57905264.htm" class="type">BuffFS</a>;


<a id=405></a><a  class="comments">/*</a>
<a id=406></a><a  class="comments">** Push given string to the stack, as part of the result, and</a>
<a id=407></a><a  class="comments">** join it to previous partial result if there is one.</a>
<a id=408></a><a  class="comments">** It may call 'luaV_concat' while using one slot from EXTRA_STACK.</a>
<a id=409></a><a  class="comments">** This call cannot invoke metamethods, as both operands must be</a>
<a id=410></a><a  class="comments">** strings. It can, however, raise an error if the result is too</a>
<a id=411></a><a  class="comments">** long. In that case, 'luaV_concat' frees the extra slot before</a>
<a id=412></a><a  class="comments">** raising the error.</a>
<a id=413></a><a  class="comments">*/</a>
<a id=414></a>static void <a href="../h_src/57905196.htm" class="function">pushstr</a> (<a href="../h_src/57905264.htm" class="type">BuffFS</a> *<a href="../h_src/57904992.htm" class="localvar">buff</a>, const char *<a href="../h_src/57904856.htm" class="localvar">str</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57904720.htm" class="localvar">lstr</a>) {
<a id=415></a>  <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57904584.htm" class="localvar">L</a> = <a href="../h_src/57904992.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905536.htm" class="variable">L</a>;
<a id=416></a>  <a href="../h_src/57524096.htm" class="macro">setsvalue2s</a>(<a href="../h_src/57904584.htm" class="localvar">L</a>, <a href="../h_src/57904584.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57618552.htm" class="function">luaS_newlstr</a>(<a href="../h_src/57904584.htm" class="localvar">L</a>, <a href="../h_src/57904856.htm" class="localvar">str</a>, <a href="../h_src/57904720.htm" class="localvar">lstr</a>));
<a id=417></a>  <a href="../h_src/57904584.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++;  <a  class="comments">/* may use one slot from EXTRA_STACK */</a>
<a id=418></a>  if (!<a href="../h_src/57904992.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905468.htm" class="variable">pushed</a>)  <a  class="comments">/* no previous string on the stack? */</a>
<a id=419></a>    <a href="../h_src/57904992.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905468.htm" class="variable">pushed</a> = 1;  <a  class="comments">/* now there is one */</a>
<a id=420></a>  else  <a  class="comments">/* join previous string with new one */</a>
<a id=421></a>    <a href="../h_src/57610868.htm" class="function">luaV_concat</a>(<a href="../h_src/57904584.htm" class="localvar">L</a>, 2);
}


<a id=425></a><a  class="comments">/*</a>
<a id=426></a><a  class="comments">** empty the buffer space into the stack</a>
<a id=427></a><a  class="comments">*/</a>
<a id=428></a>static void <a href="../h_src/57904176.htm" class="function">clearbuff</a> (<a href="../h_src/57905264.htm" class="type">BuffFS</a> *<a href="../h_src/57904040.htm" class="localvar">buff</a>) {
<a id=429></a>  <a href="../h_src/57905196.htm" class="function">pushstr</a>(<a href="../h_src/57904040.htm" class="localvar">buff</a>, <a href="../h_src/57904040.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905332.htm" class="variable">space</a>, <a href="../h_src/57904040.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905400.htm" class="variable">blen</a>);  <a  class="comments">/* push buffer contents */</a>
<a id=430></a>  <a href="../h_src/57904040.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905400.htm" class="variable">blen</a> = 0;  <a  class="comments">/* space now is empty */</a>
}


<a id=434></a><a  class="comments">/*</a>
<a id=435></a><a  class="comments">** Get a space of size 'sz' in the buffer. If buffer has not enough</a>
<a id=436></a><a  class="comments">** space, empty it. 'sz' must fit in an empty buffer.</a>
<a id=437></a><a  class="comments">*/</a>
<a id=438></a>static char *<a href="../h_src/57903904.htm" class="function">getbuff</a> (<a href="../h_src/57905264.htm" class="type">BuffFS</a> *<a href="../h_src/57903768.htm" class="localvar">buff</a>, int <a href="../h_src/57903632.htm" class="localvar">sz</a>) {
<a id=439></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(buff-&gt;blen &lt;= <a href="../h_src/57905808.htm" class="macro">BUFVFS</a>); <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(sz &lt;= <a href="../h_src/57905808.htm" class="macro">BUFVFS</a>);
<a id=440></a>  if (<a href="../h_src/57903632.htm" class="localvar">sz</a> &gt; <a href="../h_src/57905808.htm" class="macro">BUFVFS</a> - <a href="../h_src/57903768.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905400.htm" class="variable">blen</a>)  <a  class="comments">/* not enough space? */</a>
<a id=441></a>    <a href="../h_src/57904176.htm" class="function">clearbuff</a>(<a href="../h_src/57903768.htm" class="localvar">buff</a>);
<a id=442></a>  return <a href="../h_src/57903768.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905332.htm" class="variable">space</a> + <a href="../h_src/57903768.htm" class="localvar">buff</a>-&gt;<a href="../h_src/57905400.htm" class="variable">blen</a>;
}


<a id=446></a>#define <a href="../h_src/57903496.htm" class="macro">addsize</a>(b,sz)	((b)-&gt;blen += (sz))


<a id=449></a><a  class="comments">/*</a>
<a id=450></a><a  class="comments">** Add 'str' to the buffer. If string is larger than the buffer space,</a>
<a id=451></a><a  class="comments">** push the string directly to the stack.</a>
<a id=452></a><a  class="comments">*/</a>
<a id=453></a>static void <a href="../h_src/57903360.htm" class="function">addstr2buff</a> (<a href="../h_src/57905264.htm" class="type">BuffFS</a> *<a href="../h_src/57903224.htm" class="localvar">buff</a>, const char *<a href="../h_src/57903088.htm" class="localvar">str</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57902952.htm" class="localvar">slen</a>) {
<a id=454></a>  if (<a href="../h_src/57902952.htm" class="localvar">slen</a> &lt;= <a href="../h_src/57905808.htm" class="macro">BUFVFS</a>) {  <a  class="comments">/* does string fit into buffer? */</a>
<a id=455></a>    char *<a href="../h_src/57902816.htm" class="localvar">bf</a> = <a href="../h_src/57903904.htm" class="function">getbuff</a>(<a href="../h_src/57903224.htm" class="localvar">buff</a>, <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57902952.htm" class="localvar">slen</a>));
<a id=456></a>    <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/57902816.htm" class="localvar">bf</a>, <a href="../h_src/57903088.htm" class="localvar">str</a>, <a href="../h_src/57902952.htm" class="localvar">slen</a>);  <a  class="comments">/* add string to buffer */</a>
<a id=457></a>    <a href="../h_src/57903496.htm" class="macro">addsize</a>(<a href="../h_src/57903224.htm" class="localvar">buff</a>, <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57902952.htm" class="localvar">slen</a>));
  }
<a id=459></a>  else {  <a  class="comments">/* string larger than buffer */</a>
<a id=460></a>    <a href="../h_src/57904176.htm" class="function">clearbuff</a>(<a href="../h_src/57903224.htm" class="localvar">buff</a>);  <a  class="comments">/* string comes after buffer's content */</a>
<a id=461></a>    <a href="../h_src/57905196.htm" class="function">pushstr</a>(<a href="../h_src/57903224.htm" class="localvar">buff</a>, <a href="../h_src/57903088.htm" class="localvar">str</a>, <a href="../h_src/57902952.htm" class="localvar">slen</a>);  <a  class="comments">/* push string */</a>
  }
}


<a id=466></a><a  class="comments">/*</a>
<a id=467></a><a  class="comments">** Add a numeral to the buffer.</a>
<a id=468></a><a  class="comments">*/</a>
<a id=469></a>static void <a href="../h_src/57902612.htm" class="function">addnum2buff</a> (<a href="../h_src/57905264.htm" class="type">BuffFS</a> *<a href="../h_src/57902476.htm" class="localvar">buff</a>, <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57902340.htm" class="localvar">num</a>) {
<a id=470></a>  char *<a href="../h_src/57902204.htm" class="localvar">numbuff</a> = <a href="../h_src/57903904.htm" class="function">getbuff</a>(<a href="../h_src/57902476.htm" class="localvar">buff</a>, <a href="../h_src/57907440.htm" class="macro">MAXNUMBER2STR</a>);
<a id=471></a>  int <a href="../h_src/57902068.htm" class="localvar">len</a> = <a href="../h_src/57907304.htm" class="function">tostringbuff</a>(<a href="../h_src/57902340.htm" class="localvar">num</a>, <a href="../h_src/57902204.htm" class="localvar">numbuff</a>);  <a  class="comments">/* format number into 'numbuff' */</a>
<a id=472></a>  <a href="../h_src/57903496.htm" class="macro">addsize</a>(<a href="../h_src/57902476.htm" class="localvar">buff</a>, <a href="../h_src/57902068.htm" class="localvar">len</a>);
}


<a id=476></a><a  class="comments">/*</a>
<a id=477></a><a  class="comments">** this function handles only '%d', '%c', '%f', '%p', '%s', and '%%'</a>
<a id=478></a><a  class="comments">   conventional formats, plus Lua-specific '%I' and '%U'</a>
<a id=479></a><a  class="comments">*/</a>
<a id=480></a>const char *<a href="../h_src/57501452.htm" class="function">luaO_pushvfstring</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57901932.htm" class="localvar">L</a>, const char *<a href="../h_src/57901796.htm" class="localvar">fmt</a>, <a href="../h_aa/57434868.htm" class="type">va_list</a> <a href="../h_src/57901660.htm" class="localvar">argp</a>) {
<a id=481></a>  <a href="../h_src/57905264.htm" class="type">BuffFS</a> <a href="../h_src/57901524.htm" class="localvar">buff</a>;  <a  class="comments">/* holds last part of the result */</a>
<a id=482></a>  const char *<a href="../h_src/57901388.htm" class="localvar">e</a>;  <a  class="comments">/* points to next '%' */</a>
<a id=483></a>  <a href="../h_src/57901524.htm" class="localvar">buff</a>.<a href="../h_src/57905468.htm" class="variable">pushed</a> = <a href="../h_src/57901524.htm" class="localvar">buff</a>.<a href="../h_src/57905400.htm" class="variable">blen</a> = 0;
<a id=484></a>  <a href="../h_src/57901524.htm" class="localvar">buff</a>.<a href="../h_src/57905536.htm" class="variable">L</a> = <a href="../h_src/57901932.htm" class="localvar">L</a>;
<a id=485></a>  while ((<a href="../h_src/57901388.htm" class="localvar">e</a> = <a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57901796.htm" class="localvar">fmt</a>, '%')) != NULL) {
<a id=486></a>    <a href="../h_src/57903360.htm" class="function">addstr2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, <a href="../h_src/57901796.htm" class="localvar">fmt</a>, <a href="../h_src/57901388.htm" class="localvar">e</a> - <a href="../h_src/57901796.htm" class="localvar">fmt</a>);  <a  class="comments">/* add 'fmt' up to '%' */</a>
<a id=487></a>    switch (*(<a href="../h_src/57901388.htm" class="localvar">e</a> + 1)) {  <a  class="comments">/* conversion specifier */</a>
<a id=488></a>      case 's': {  <a  class="comments">/* zero-terminated string */</a>
<a id=489></a>        const char *<a href="../h_src/57901252.htm" class="localvar">s</a> = va_arg(<a href="../h_src/57901660.htm" class="localvar">argp</a>, char *);
<a id=490></a>        if (<a href="../h_src/57901252.htm" class="localvar">s</a> == NULL) <a href="../h_src/57901252.htm" class="localvar">s</a> = &quot;(null)&quot;;
<a id=491></a>        <a href="../h_src/57903360.htm" class="function">addstr2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, <a href="../h_src/57901252.htm" class="localvar">s</a>, <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/57901252.htm" class="localvar">s</a>));
        break;
      }
<a id=494></a>      case 'c': {  <a  class="comments">/* an 'int' as a character */</a>
<a id=495></a>        char <a href="../h_src/57901116.htm" class="localvar">c</a> = <a href="../h_src/57546808.htm" class="macro">cast_uchar</a>(va_arg(<a href="../h_src/57901660.htm" class="localvar">argp</a>, int));
<a id=496></a>        <a href="../h_src/57903360.htm" class="function">addstr2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, &amp;<a href="../h_src/57901116.htm" class="localvar">c</a>, sizeof(char));
        break;
      }
<a id=499></a>      case 'd': {  <a  class="comments">/* an 'int' */</a>
<a id=500></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57900980.htm" class="localvar">num</a>;
<a id=501></a>        <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/57900980.htm" class="localvar">num</a>, va_arg(<a href="../h_src/57901660.htm" class="localvar">argp</a>, int));
<a id=502></a>        <a href="../h_src/57902612.htm" class="function">addnum2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, &amp;<a href="../h_src/57900980.htm" class="localvar">num</a>);
        break;
      }
<a id=505></a>      case 'I': {  <a  class="comments">/* a 'lua_Integer' */</a>
<a id=506></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57900708.htm" class="localvar">num</a>;
<a id=507></a>        <a href="../h_src/57525456.htm" class="macro">setivalue</a>(&amp;<a href="../h_src/57900708.htm" class="localvar">num</a>, <a href="../h_src/57547760.htm" class="macro">cast</a>(<a href="../h_src/57442076.htm" class="type">lua_Integer</a>, va_arg(<a href="../h_src/57901660.htm" class="localvar">argp</a>, <a href="../h_src/57548916.htm" class="type">l_uacInt</a>)));
<a id=508></a>        <a href="../h_src/57902612.htm" class="function">addnum2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, &amp;<a href="../h_src/57900708.htm" class="localvar">num</a>);
        break;
      }
<a id=511></a>      case 'f': {  <a  class="comments">/* a 'lua_Number' */</a>
<a id=512></a>        <a href="../h_src/57535384.htm" class="type">TValue</a> <a href="../h_src/57900436.htm" class="localvar">num</a>;
<a id=513></a>        <a href="../h_src/57525728.htm" class="macro">setfltvalue</a>(&amp;<a href="../h_src/57900436.htm" class="localvar">num</a>, <a href="../h_src/57547352.htm" class="macro">cast_num</a>(va_arg(<a href="../h_src/57901660.htm" class="localvar">argp</a>, <a href="../h_src/57548984.htm" class="type">l_uacNumber</a>)));
<a id=514></a>        <a href="../h_src/57902612.htm" class="function">addnum2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, &amp;<a href="../h_src/57900436.htm" class="localvar">num</a>);
        break;
      }
<a id=517></a>      case 'p': {  <a  class="comments">/* a pointer */</a>
<a id=518></a>        const int <a href="../h_src/57900164.htm" class="localvar">sz</a> = 3 * sizeof(void*) + 8; <a  class="comments">/* enough space for '%p' */</a>
<a id=519></a>        char *<a href="../h_src/57900028.htm" class="localvar">bf</a> = <a href="../h_src/57903904.htm" class="function">getbuff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, <a href="../h_src/57900164.htm" class="localvar">sz</a>);
<a id=520></a>        void *<a href="../h_src/57899892.htm" class="localvar">p</a> = va_arg(<a href="../h_src/57901660.htm" class="localvar">argp</a>, void *);
<a id=521></a>        int <a href="../h_src/57899756.htm" class="localvar">len</a> = <a href="../h_src/57449556.htm" class="macro">lua_pointer2str</a>(<a href="../h_src/57900028.htm" class="localvar">bf</a>, <a href="../h_src/57900164.htm" class="localvar">sz</a>, <a href="../h_src/57899892.htm" class="localvar">p</a>);
<a id=522></a>        <a href="../h_src/57903496.htm" class="macro">addsize</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, <a href="../h_src/57899756.htm" class="localvar">len</a>);
        break;
      }
<a id=525></a>      case 'U': {  <a  class="comments">/* a 'long' as a UTF-8 sequence */</a>
<a id=526></a>        char <a href="../h_src/57899620.htm" class="localvar">bf</a>[<a href="../h_src/57502064.htm" class="macro">UTF8BUFFSZ</a>];
<a id=527></a>        int <a href="../h_src/57899484.htm" class="localvar">len</a> = <a href="../h_src/57501928.htm" class="function">luaO_utf8esc</a>(<a href="../h_src/57899620.htm" class="localvar">bf</a>, va_arg(<a href="../h_src/57901660.htm" class="localvar">argp</a>, long));
<a id=528></a>        <a href="../h_src/57903360.htm" class="function">addstr2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, <a href="../h_src/57899620.htm" class="localvar">bf</a> + <a href="../h_src/57502064.htm" class="macro">UTF8BUFFSZ</a> - <a href="../h_src/57899484.htm" class="localvar">len</a>, <a href="../h_src/57899484.htm" class="localvar">len</a>);
        break;
      }
      case '%': {
<a id=532></a>        <a href="../h_src/57903360.htm" class="function">addstr2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, &quot;%&quot;, 1);
        break;
      }
      default: {
<a id=536></a>        <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57901932.htm" class="localvar">L</a>, &quot;invalid option '%%%c' to 'lua_pushfstring'&quot;,
<a id=537></a>                         *(<a href="../h_src/57901388.htm" class="localvar">e</a> + 1));
      }
    }
<a id=540></a>    <a href="../h_src/57901796.htm" class="localvar">fmt</a> = <a href="../h_src/57901388.htm" class="localvar">e</a> + 2;  <a  class="comments">/* skip '%' and the specifier */</a>
  }
<a id=542></a>  <a href="../h_src/57903360.htm" class="function">addstr2buff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>, <a href="../h_src/57901796.htm" class="localvar">fmt</a>, <a href="../h_aa/57568976.htm" class="libfunc">strlen</a>(<a href="../h_src/57901796.htm" class="localvar">fmt</a>));  <a  class="comments">/* rest of 'fmt' */</a>
<a id=543></a>  <a href="../h_src/57904176.htm" class="function">clearbuff</a>(&amp;<a href="../h_src/57901524.htm" class="localvar">buff</a>);  <a  class="comments">/* empty buffer into the stack */</a>
<a id=544></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(buff.pushed == 1);
<a id=545></a>  return <a href="../h_src/57522532.htm" class="macro">svalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57901932.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1));
}


<a id=549></a>const char *<a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57899348.htm" class="localvar">L</a>, const char *<a href="../h_src/57899212.htm" class="localvar">fmt</a>, <a href="../h_src/57899076.htm" class="localvar">...</a>) {
<a id=550></a>  const char *<a href="../h_src/57898940.htm" class="localvar">msg</a>;
<a id=551></a>  <a href="../h_aa/57434868.htm" class="type">va_list</a> <a href="../h_src/57898804.htm" class="localvar">argp</a>;
<a id=552></a>  va_start(<a href="../h_src/57898804.htm" class="localvar">argp</a>, <a href="../h_src/57899212.htm" class="localvar">fmt</a>);
<a id=553></a>  <a href="../h_src/57898940.htm" class="localvar">msg</a> = <a href="../h_src/57501452.htm" class="function">luaO_pushvfstring</a>(<a href="../h_src/57899348.htm" class="localvar">L</a>, <a href="../h_src/57899212.htm" class="localvar">fmt</a>, <a href="../h_src/57898804.htm" class="localvar">argp</a>);
<a id=554></a>  va_end(<a href="../h_src/57898804.htm" class="localvar">argp</a>);
<a id=555></a>  return <a href="../h_src/57898940.htm" class="localvar">msg</a>;
}

<a id=558></a><a  class="comments">/* }================================================================== */</a>


<a id=561></a>#define <a href="../h_src/57898668.htm" class="macro">RETS</a>	&quot;...&quot;
<a id=562></a>#define <a href="../h_src/57898532.htm" class="macro">PRE</a>	&quot;[string \&quot;&quot;
<a id=563></a>#define <a href="../h_src/57898396.htm" class="macro">POS</a>	&quot;\&quot;]&quot;

<a id=565></a>#define <a href="../h_src/57898260.htm" class="macro">addstr</a>(a,b,l)	( memcpy(a,b,(l) * sizeof(char)), a += (l) )

<a id=567></a>void <a href="../h_src/57501316.htm" class="function">luaO_chunkid</a> (char *<a href="../h_src/57898124.htm" class="localvar">out</a>, const char *<a href="../h_src/57897988.htm" class="localvar">source</a>, <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57897852.htm" class="localvar">srclen</a>) {
<a id=568></a>  <a href="../h_aa/57441192.htm" class="type">size_t</a> <a href="../h_src/57897716.htm" class="localvar">bufflen</a> = <a href="../h_src/57447380.htm" class="macro">LUA_IDSIZE</a>;  <a  class="comments">/* free space in buffer */</a>
<a id=569></a>  if (*<a href="../h_src/57897988.htm" class="localvar">source</a> == '=') {  <a  class="comments">/* 'literal' source */</a>
<a id=570></a>    if (<a href="../h_src/57897852.htm" class="localvar">srclen</a> &lt;= <a href="../h_src/57897716.htm" class="localvar">bufflen</a>)  <a  class="comments">/* small enough? */</a>
<a id=571></a>      <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57897988.htm" class="localvar">source</a> + 1, <a href="../h_src/57897852.htm" class="localvar">srclen</a> * sizeof(char));
<a id=572></a>    else {  <a  class="comments">/* truncate it */</a>
<a id=573></a>      <a href="../h_src/57898260.htm" class="macro">addstr</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57897988.htm" class="localvar">source</a> + 1, <a href="../h_src/57897716.htm" class="localvar">bufflen</a> - 1);
<a id=574></a>      *<a href="../h_src/57898124.htm" class="localvar">out</a> = '\0';
    }
  }
<a id=577></a>  else if (*<a href="../h_src/57897988.htm" class="localvar">source</a> == '@') {  <a  class="comments">/* file name */</a>
<a id=578></a>    if (<a href="../h_src/57897852.htm" class="localvar">srclen</a> &lt;= <a href="../h_src/57897716.htm" class="localvar">bufflen</a>)  <a  class="comments">/* small enough? */</a>
<a id=579></a>      <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57897988.htm" class="localvar">source</a> + 1, <a href="../h_src/57897852.htm" class="localvar">srclen</a> * sizeof(char));
<a id=580></a>    else {  <a  class="comments">/* add '...' before rest of name */</a>
<a id=581></a>      <a href="../h_src/57898260.htm" class="macro">addstr</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57898668.htm" class="macro">RETS</a>, <a href="../h_src/57549392.htm" class="macro">LL</a>(<a href="../h_src/57898668.htm" class="macro">RETS</a>));
<a id=582></a>      <a href="../h_src/57897716.htm" class="localvar">bufflen</a> -= <a href="../h_src/57549392.htm" class="macro">LL</a>(<a href="../h_src/57898668.htm" class="macro">RETS</a>);
<a id=583></a>      <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57897988.htm" class="localvar">source</a> + 1 + <a href="../h_src/57897852.htm" class="localvar">srclen</a> - <a href="../h_src/57897716.htm" class="localvar">bufflen</a>, <a href="../h_src/57897716.htm" class="localvar">bufflen</a> * sizeof(char));
    }
  }
<a id=586></a>  else {  <a  class="comments">/* string; format as [string &quot;source&quot;] */</a>
<a id=587></a>    const char *<a href="../h_src/57897580.htm" class="localvar">nl</a> = <a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57897988.htm" class="localvar">source</a>, '\n');  <a  class="comments">/* find first new line (if any) */</a>
<a id=588></a>    <a href="../h_src/57898260.htm" class="macro">addstr</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57898532.htm" class="macro">PRE</a>, <a href="../h_src/57549392.htm" class="macro">LL</a>(<a href="../h_src/57898532.htm" class="macro">PRE</a>));  <a  class="comments">/* add prefix */</a>
<a id=589></a>    <a href="../h_src/57897716.htm" class="localvar">bufflen</a> -= <a href="../h_src/57549392.htm" class="macro">LL</a>(<a href="../h_src/57898532.htm" class="macro">PRE</a> <a href="../h_src/57898668.htm" class="macro">RETS</a> <a href="../h_src/57898396.htm" class="macro">POS</a>) + 1;  <a  class="comments">/* save space for prefix+suffix+'\0' */</a>
<a id=590></a>    if (<a href="../h_src/57897852.htm" class="localvar">srclen</a> &lt; <a href="../h_src/57897716.htm" class="localvar">bufflen</a> &amp;&amp; <a href="../h_src/57897580.htm" class="localvar">nl</a> == NULL) {  <a  class="comments">/* small one-line source? */</a>
<a id=591></a>      <a href="../h_src/57898260.htm" class="macro">addstr</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57897988.htm" class="localvar">source</a>, <a href="../h_src/57897852.htm" class="localvar">srclen</a>);  <a  class="comments">/* keep it */</a>
    }
    else {
<a id=594></a>      if (<a href="../h_src/57897580.htm" class="localvar">nl</a> != NULL) <a href="../h_src/57897852.htm" class="localvar">srclen</a> = <a href="../h_src/57897580.htm" class="localvar">nl</a> - <a href="../h_src/57897988.htm" class="localvar">source</a>;  <a  class="comments">/* stop at first newline */</a>
<a id=595></a>      if (<a href="../h_src/57897852.htm" class="localvar">srclen</a> &gt; <a href="../h_src/57897716.htm" class="localvar">bufflen</a>) <a href="../h_src/57897852.htm" class="localvar">srclen</a> = <a href="../h_src/57897716.htm" class="localvar">bufflen</a>;
<a id=596></a>      <a href="../h_src/57898260.htm" class="macro">addstr</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57897988.htm" class="localvar">source</a>, <a href="../h_src/57897852.htm" class="localvar">srclen</a>);
<a id=597></a>      <a href="../h_src/57898260.htm" class="macro">addstr</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57898668.htm" class="macro">RETS</a>, <a href="../h_src/57549392.htm" class="macro">LL</a>(<a href="../h_src/57898668.htm" class="macro">RETS</a>));
    }
<a id=599></a>    <a href="../h_aa/57902680.htm" class="libfunc">memcpy</a>(<a href="../h_src/57898124.htm" class="localvar">out</a>, <a href="../h_src/57898396.htm" class="macro">POS</a>, (<a href="../h_src/57549392.htm" class="macro">LL</a>(<a href="../h_src/57898396.htm" class="macro">POS</a>) + 1) * sizeof(char));
  }
}

</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

