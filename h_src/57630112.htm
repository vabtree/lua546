<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>lgc.h</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57630112.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/57630112.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/57630112.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/57630112.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_ua/57630112.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_da/57630112.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/57630112.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57630112.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/57630112.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: lgc.h $</a>
<a id=3></a><a  class="comments">** Garbage Collector</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#ifndef <a href="../h_src/57630044.htm" class="macro">lgc_h</a>
<a id=8></a>#define <a href="../h_src/57629908.htm" class="macro">lgc_h</a>


<a id=11></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=12></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;

<a id=14></a><a  class="comments">/*</a>
<a id=15></a><a  class="comments">** Collectable objects may have one of three colors: white, which means</a>
<a id=16></a><a  class="comments">** the object is not marked; gray, which means the object is marked, but</a>
<a id=17></a><a  class="comments">** its references may be not marked; and black, which means that the</a>
<a id=18></a><a  class="comments">** object and all its references are marked.  The main invariant of the</a>
<a id=19></a><a  class="comments">** garbage collector, while marking objects, is that a black object can</a>
<a id=20></a><a  class="comments">** never point to a white one. Moreover, any gray object must be in a</a>
<a id=21></a><a  class="comments">** &quot;gray list&quot; (gray, grayagain, weak, allweak, ephemeron) so that it</a>
<a id=22></a><a  class="comments">** can be visited again before finishing the collection cycle. (Open</a>
<a id=23></a><a  class="comments">** upvalues are an exception to this rule.)  These lists have no meaning</a>
<a id=24></a><a  class="comments">** when the invariant is not being enforced (e.g., sweep phase).</a>
<a id=25></a><a  class="comments">*/</a>


<a id=28></a><a  class="comments">/*</a>
<a id=29></a><a  class="comments">** Possible states of the Garbage Collector</a>
<a id=30></a><a  class="comments">*/</a>
<a id=31></a>#define <a href="../h_src/57629772.htm" class="macro">GCSpropagate</a>	0
<a id=32></a>#define <a href="../h_src/57629636.htm" class="macro">GCSenteratomic</a>	1
<a id=33></a>#define <a href="../h_src/57629500.htm" class="macro">GCSatomic</a>	2
<a id=34></a>#define <a href="../h_src/57629364.htm" class="macro">GCSswpallgc</a>	3
<a id=35></a>#define <a href="../h_src/57629228.htm" class="macro">GCSswpfinobj</a>	4
<a id=36></a>#define <a href="../h_src/57629092.htm" class="macro">GCSswptobefnz</a>	5
<a id=37></a>#define <a href="../h_src/57628956.htm" class="macro">GCSswpend</a>	6
<a id=38></a>#define <a href="../h_src/57628820.htm" class="macro">GCScallfin</a>	7
<a id=39></a>#define <a href="../h_src/57628684.htm" class="macro">GCSpause</a>	8


<a id=42></a>#define <a href="../h_src/57628548.htm" class="macro">issweepphase</a>(g)  \
	(GCSswpallgc &lt;= (g)-&gt;gcstate &amp;&amp; (g)-&gt;gcstate &lt;= GCSswpend)


<a id=46></a><a  class="comments">/*</a>
<a id=47></a><a  class="comments">** macro to tell when main invariant (white objects cannot point to black</a>
<a id=48></a><a  class="comments">** ones) must be kept. During a collection, the sweep</a>
<a id=49></a><a  class="comments">** phase may break the invariant, as objects turned white may point to</a>
<a id=50></a><a  class="comments">** still-black objects. The invariant is restored when sweep ends and</a>
<a id=51></a><a  class="comments">** all objects are white again.</a>
<a id=52></a><a  class="comments">*/</a>

<a id=54></a>#define <a href="../h_src/57628412.htm" class="macro">keepinvariant</a>(g)	((g)-&gt;gcstate &lt;= GCSatomic)


<a id=57></a><a  class="comments">/*</a>
<a id=58></a><a  class="comments">** some useful bit tricks</a>
<a id=59></a><a  class="comments">*/</a>
<a id=60></a>#define <a href="../h_src/57628276.htm" class="macro">resetbits</a>(x,m)		((x) &amp;= cast_byte(~(m)))
<a id=61></a>#define <a href="../h_src/57628140.htm" class="macro">setbits</a>(x,m)		((x) |= (m))
<a id=62></a>#define <a href="../h_src/57628004.htm" class="macro">testbits</a>(x,m)		((x) &amp; (m))
<a id=63></a>#define <a href="../h_src/57627868.htm" class="macro">bitmask</a>(b)		(1&lt;&lt;(b))
<a id=64></a>#define <a href="../h_src/57627732.htm" class="macro">bit2mask</a>(b1,b2)		(bitmask(b1) | bitmask(b2))
<a id=65></a>#define <a href="../h_src/57627596.htm" class="macro">l_setbit</a>(x,b)		setbits(x, bitmask(b))
<a id=66></a>#define <a href="../h_src/57627460.htm" class="macro">resetbit</a>(x,b)		resetbits(x, bitmask(b))
<a id=67></a>#define <a href="../h_src/57627324.htm" class="macro">testbit</a>(x,b)		testbits(x, bitmask(b))


<a id=70></a><a  class="comments">/*</a>
<a id=71></a><a  class="comments">** Layout for bit use in 'marked' field. First three bits are</a>
<a id=72></a><a  class="comments">** used for object &quot;age&quot; in generational mode. Last bit is used</a>
<a id=73></a><a  class="comments">** by tests.</a>
<a id=74></a><a  class="comments">*/</a>
<a id=75></a>#define <a href="../h_src/57627188.htm" class="macro">WHITE0BIT</a>	3  <a  class="comments">/* object is white (type 0) */</a>
<a id=76></a>#define <a href="../h_src/57627052.htm" class="macro">WHITE1BIT</a>	4  <a  class="comments">/* object is white (type 1) */</a>
<a id=77></a>#define <a href="../h_src/57626916.htm" class="macro">BLACKBIT</a>	5  <a  class="comments">/* object is black */</a>
<a id=78></a>#define <a href="../h_src/57626780.htm" class="macro">FINALIZEDBIT</a>	6  <a  class="comments">/* object has been marked for finalization */</a>

<a id=80></a>#define <a href="../h_src/57626644.htm" class="macro">TESTBIT</a>		7



<a id=84></a>#define <a href="../h_src/57626508.htm" class="macro">WHITEBITS</a>	bit2mask(WHITE0BIT, WHITE1BIT)


<a id=87></a>#define <a href="../h_src/57626372.htm" class="macro">iswhite</a>(x)      testbits((x)-&gt;marked, WHITEBITS)
<a id=88></a>#define <a href="../h_src/57626236.htm" class="macro">isblack</a>(x)      testbit((x)-&gt;marked, BLACKBIT)
<a id=89></a>#define <a href="../h_src/57626100.htm" class="macro">isgray</a>(x)  <a  class="comments">/* neither white nor black */</a>  \
	(!testbits((x)-&gt;marked, WHITEBITS | bitmask(BLACKBIT)))

<a id=92></a>#define <a href="../h_src/57625964.htm" class="macro">tofinalize</a>(x)	testbit((x)-&gt;marked, FINALIZEDBIT)

<a id=94></a>#define <a href="../h_src/57625828.htm" class="macro">otherwhite</a>(g)	((g)-&gt;currentwhite ^ WHITEBITS)
<a id=95></a>#define <a href="../h_src/57625692.htm" class="macro">isdeadm</a>(ow,m)	((m) &amp; (ow))
<a id=96></a>#define <a href="../h_src/57625556.htm" class="macro">isdead</a>(g,v)	isdeadm(otherwhite(g), (v)-&gt;marked)

<a id=98></a>#define <a href="../h_src/57625420.htm" class="macro">changewhite</a>(x)	((x)-&gt;marked ^= WHITEBITS)
<a id=99></a>#define <a href="../h_src/57625284.htm" class="macro">nw2black</a>(x)  \
	check_exp(!iswhite(x), l_setbit((x)-&gt;marked, BLACKBIT))

<a id=102></a>#define <a href="../h_src/57625148.htm" class="macro">luaC_white</a>(g)	cast_byte((g)-&gt;currentwhite &amp; WHITEBITS)


<a id=105></a><a  class="comments">/* object age in generational mode */</a>
<a id=106></a>#define <a href="../h_src/57625012.htm" class="macro">G_NEW</a>		0	<a  class="comments">/* created in current cycle */</a>
<a id=107></a>#define <a href="../h_src/57624876.htm" class="macro">G_SURVIVAL</a>	1	<a  class="comments">/* created in previous cycle */</a>
<a id=108></a>#define <a href="../h_src/57624740.htm" class="macro">G_OLD0</a>		2	<a  class="comments">/* marked old by frw. barrier in this cycle */</a>
<a id=109></a>#define <a href="../h_src/57624604.htm" class="macro">G_OLD1</a>		3	<a  class="comments">/* first full cycle as old */</a>
<a id=110></a>#define <a href="../h_src/57624468.htm" class="macro">G_OLD</a>		4	<a  class="comments">/* really old object (not to be visited) */</a>
<a id=111></a>#define <a href="../h_src/57624332.htm" class="macro">G_TOUCHED1</a>	5	<a  class="comments">/* old object touched this cycle */</a>
<a id=112></a>#define <a href="../h_src/57624196.htm" class="macro">G_TOUCHED2</a>	6	<a  class="comments">/* old object touched in previous cycle */</a>

<a id=114></a>#define <a href="../h_src/57624060.htm" class="macro">AGEBITS</a>		7  <a  class="comments">/* all age bits (111) */</a>

<a id=116></a>#define <a href="../h_src/57623924.htm" class="macro">getage</a>(o)	((o)-&gt;marked &amp; AGEBITS)
<a id=117></a>#define <a href="../h_src/57623788.htm" class="macro">setage</a>(o,a)  ((o)-&gt;marked = cast_byte(((o)-&gt;marked &amp; (~AGEBITS)) | a))
<a id=118></a>#define <a href="../h_src/57623652.htm" class="macro">isold</a>(o)	(getage(o) &gt; G_SURVIVAL)

<a id=120></a>#define <a href="../h_src/57623516.htm" class="macro">changeage</a>(o,f,t)  \
	check_exp(getage(o) == (f), (o)-&gt;marked ^= ((f)^(t)))


<a id=124></a><a  class="comments">/* Default Values for GC parameters */</a>
<a id=125></a>#define <a href="../h_src/57623380.htm" class="macro">LUAI_GENMAJORMUL</a>         100
<a id=126></a>#define <a href="../h_src/57623244.htm" class="macro">LUAI_GENMINORMUL</a>         20

<a id=128></a><a  class="comments">/* wait memory to double before starting new cycle */</a>
<a id=129></a>#define <a href="../h_src/57623108.htm" class="macro">LUAI_GCPAUSE</a>    200

<a id=131></a><a  class="comments">/*</a>
<a id=132></a><a  class="comments">** some gc parameters are stored divided by 4 to allow a maximum value</a>
<a id=133></a><a  class="comments">** up to 1023 in a 'lu_byte'.</a>
<a id=134></a><a  class="comments">*/</a>
<a id=135></a>#define <a href="../h_src/57622972.htm" class="macro">getgcparam</a>(p)	((p) * 4)
<a id=136></a>#define <a href="../h_src/57622836.htm" class="macro">setgcparam</a>(p,v)	((p) = (v) / 4)

<a id=138></a>#define <a href="../h_src/57622700.htm" class="macro">LUAI_GCMUL</a>      100

<a id=140></a><a  class="comments">/* how much to allocate before next GC step (log2) */</a>
<a id=141></a>#define <a href="../h_src/57622564.htm" class="macro">LUAI_GCSTEPSIZE</a> 13      <a  class="comments">/* 8 KB */</a>


<a id=144></a><a  class="comments">/*</a>
<a id=145></a><a  class="comments">** Check whether the declared GC mode is generational. While in</a>
<a id=146></a><a  class="comments">** generational mode, the collector can go temporarily to incremental</a>
<a id=147></a><a  class="comments">** mode to improve performance. This is signaled by 'g-&gt;lastatomic != 0'.</a>
<a id=148></a><a  class="comments">*/</a>
<a id=149></a>#define <a href="../h_src/57622428.htm" class="macro">isdecGCmodegen</a>(g)	(g-&gt;gckind == KGC_GEN || g-&gt;lastatomic != 0)


<a id=152></a><a  class="comments">/*</a>
<a id=153></a><a  class="comments">** Control when GC is running:</a>
<a id=154></a><a  class="comments">*/</a>
<a id=155></a>#define <a href="../h_src/57622292.htm" class="macro">GCSTPUSR</a>	1  <a  class="comments">/* bit true when GC stopped by user */</a>
<a id=156></a>#define <a href="../h_src/57622156.htm" class="macro">GCSTPGC</a>		2  <a  class="comments">/* bit true when GC stopped by itself */</a>
<a id=157></a>#define <a href="../h_src/57622020.htm" class="macro">GCSTPCLS</a>	4  <a  class="comments">/* bit true when closing Lua state */</a>
<a id=158></a>#define <a href="../h_src/57621884.htm" class="macro">gcrunning</a>(g)	((g)-&gt;gcstp == 0)


<a id=161></a><a  class="comments">/*</a>
<a id=162></a><a  class="comments">** Does one step of collection when debt becomes positive. 'pre'/'pos'</a>
<a id=163></a><a  class="comments">** allows some adjustments to be done only when needed. macro</a>
<a id=164></a><a  class="comments">** 'condchangemem' is used only for heavy tests (forcing a full</a>
<a id=165></a><a  class="comments">** GC cycle on every opportunity)</a>
<a id=166></a><a  class="comments">*/</a>
<a id=167></a>#define <a href="../h_src/57621748.htm" class="macro">luaC_condGC</a>(L,pre,pos) \
	{ if (G(L)-&gt;GCdebt &gt; 0) { pre; luaC_step(L); pos;}; \
	  condchangemem(L,pre,pos); }

<a id=171></a><a  class="comments">/* more often than not, 'pre'/'pos' are empty */</a>
<a id=172></a>#define <a href="../h_src/57621612.htm" class="macro">luaC_checkGC</a>(L)		luaC_condGC(L,(void)0,(void)0)


<a id=175></a>#define <a href="../h_src/57621476.htm" class="macro">luaC_objbarrier</a>(L,p,o) (  \
	(isblack(p) &amp;&amp; iswhite(o)) ? \
	luaC_barrier_(L,obj2gco(p),obj2gco(o)) : cast_void(0))

<a id=179></a>#define <a href="../h_src/57621340.htm" class="macro">luaC_barrier</a>(L,p,v) (  \
	iscollectable(v) ? luaC_objbarrier(L,p,gcvalue(v)) : cast_void(0))

<a id=182></a>#define <a href="../h_src/57621204.htm" class="macro">luaC_objbarrierback</a>(L,p,o) (  \
	(isblack(p) &amp;&amp; iswhite(o)) ? luaC_barrierback_(L,p) : cast_void(0))

<a id=185></a>#define <a href="../h_src/57621068.htm" class="macro">luaC_barrierback</a>(L,p,v) (  \
	iscollectable(v) ? luaC_objbarrierback(L, p, gcvalue(v)) : cast_void(0))

<a id=188></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620932.htm" class="function">luaC_fix</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, <a href="../h_src/57527972.htm" class="type">GCObject</a> *o);
<a id=189></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620864.htm" class="function">luaC_freeallobjects</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L);
<a id=190></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620796.htm" class="function">luaC_step</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L);
<a id=191></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620728.htm" class="function">luaC_runtilstate</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, int statesmask);
<a id=192></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620660.htm" class="function">luaC_fullgc</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, int isemergency);
<a id=193></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57620592.htm" class="function">luaC_newobj</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, int tt, <a href="../h_aa/57441192.htm" class="type">size_t</a> sz);
<a id=194></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> <a href="../h_src/57527972.htm" class="type">GCObject</a> *<a href="../h_src/57620524.htm" class="function">luaC_newobjdt</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, int tt, <a href="../h_aa/57441192.htm" class="type">size_t</a> sz,
<a id=195></a>                                                 <a href="../h_aa/57441192.htm" class="type">size_t</a> offset);
<a id=196></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620456.htm" class="function">luaC_barrier_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, <a href="../h_src/57527972.htm" class="type">GCObject</a> *o, <a href="../h_src/57527972.htm" class="type">GCObject</a> *v);
<a id=197></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620388.htm" class="function">luaC_barrierback_</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, <a href="../h_src/57527972.htm" class="type">GCObject</a> *o);
<a id=198></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620320.htm" class="function">luaC_checkfinalizer</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, <a href="../h_src/57527972.htm" class="type">GCObject</a> *o, <a href="../h_src/57504308.htm" class="type">Table</a> *mt);
<a id=199></a><a href="../h_src/57453908.htm" class="macro">LUAI_FUNC</a> void <a href="../h_src/57620252.htm" class="function">luaC_changemode</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *L, int newmode);


#endif
</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

