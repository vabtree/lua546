<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>ldo.c</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/57884484.htm" class="file" target="_self">Info</a></li>
<li><a href="../h_im/57884484.htm" class="file" target="_self">Global Interface</a></li>
<li><a href="../h_rx/57884484.htm" class="file" target="_self">File Inclusion</a></li>
<li><a href="../h_nm/57884484.htm" class="file" target="_self">Internals</a></li>
<li><a href="../h_uf/57884484.htm" class="file" target="_self">Use of Elements</a></li>
<li><a href="../h_df/57884484.htm" class="file" target="_self">Dependencies</a></li>
<li id="current"><a href="../h_src/57884484.htm" class="file" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/57884484.htm" class="file" target="_self">Source Code</a></li>
<li><a href="../h_sc/57884484.htm" class="file" target="_self">Source Checks</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<pre class=src>
<a id=1></a><a  class="comments">/*</a>
<a id=2></a><a  class="comments">** $Id: ldo.c $</a>
<a id=3></a><a  class="comments">** Stack and Call structure of Lua</a>
<a id=4></a><a  class="comments">** See Copyright Notice in lua.h</a>
<a id=5></a><a  class="comments">*/</a>

<a id=7></a>#define <a href="../h_src/57884416.htm" class="macro">ldo_c</a>
<a id=8></a>#define <a href="../h_src/57884280.htm" class="macro">LUA_CORE</a>

<a id=10></a>#include &quot;<a href="../h_src/57461592.htm" class="file">lprefix.h</a>&quot;


#include &lt;setjmp.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

<a id=17></a>#include &quot;<a href="../h_src/57460028.htm" class="file">lua.h</a>&quot;

<a id=19></a>#include &quot;<a href="../h_src/57551432.htm" class="file">lapi.h</a>&quot;
<a id=20></a>#include &quot;<a href="../h_src/57637116.htm" class="file">ldebug.h</a>&quot;
<a id=21></a>#include &quot;<a href="../h_src/57635008.htm" class="file">ldo.h</a>&quot;
<a id=22></a>#include &quot;<a href="../h_src/57632424.htm" class="file">lfunc.h</a>&quot;
<a id=23></a>#include &quot;<a href="../h_src/57630112.htm" class="file">lgc.h</a>&quot;
<a id=24></a>#include &quot;<a href="../h_src/57496896.htm" class="file">lmem.h</a>&quot;
<a id=25></a>#include &quot;<a href="../h_src/57537696.htm" class="file">lobject.h</a>&quot;
<a id=26></a>#include &quot;<a href="../h_src/57699512.htm" class="file">lopcodes.h</a>&quot;
<a id=27></a>#include &quot;<a href="../h_src/57683056.htm" class="file">lparser.h</a>&quot;
<a id=28></a>#include &quot;<a href="../h_src/57538104.htm" class="file">lstate.h</a>&quot;
<a id=29></a>#include &quot;<a href="../h_src/57620184.htm" class="file">lstring.h</a>&quot;
<a id=30></a>#include &quot;<a href="../h_src/57618348.htm" class="file">ltable.h</a>&quot;
<a id=31></a>#include &quot;<a href="../h_src/57501248.htm" class="file">ltm.h</a>&quot;
<a id=32></a>#include &quot;<a href="../h_src/57615968.htm" class="file">lundump.h</a>&quot;
<a id=33></a>#include &quot;<a href="../h_src/57614676.htm" class="file">lvm.h</a>&quot;
<a id=34></a>#include &quot;<a href="../h_src/57497236.htm" class="file">lzio.h</a>&quot;



<a id=38></a>#define <a href="../h_src/57884144.htm" class="macro">errorstatus</a>(s)	((s) &gt; LUA_YIELD)


<a id=41></a><a  class="comments">/*</a>
<a id=42></a><a  class="comments">** {======================================================</a>
<a id=43></a><a  class="comments">** Error-recovery functions</a>
<a id=44></a><a  class="comments">** =======================================================</a>
<a id=45></a><a  class="comments">*/</a>

<a id=47></a><a  class="comments">/*</a>
<a id=48></a><a  class="comments">** LUAI_THROW/LUAI_TRY define how Lua does exception handling. By</a>
<a id=49></a><a  class="comments">** default, Lua handles errors with exceptions when compiling as</a>
<a id=50></a><a  class="comments">** C++ code, with _longjmp/_setjmp when asked to use them, and with</a>
<a id=51></a><a  class="comments">** longjmp/setjmp otherwise.</a>
<a id=52></a><a  class="comments">*/</a>
<a id=53></a>#if !defined(<a href="../h_src/57884008.htm" class="macro">LUAI_THROW</a>)				<a  class="comments">/* { */</a>

<a id=55></a>#if defined(<a href="../h_src/57466556.htm" class="macro">__cplusplus</a>) &amp;&amp; !defined(<a href="../h_src/57883804.htm" class="macro">LUA_USE_LONGJMP</a>)	<a  class="comments">/* { */</a>

<a id=57></a><a  class="comments">/* C++ exceptions */</a>
#define LUAI_THROW(L,c)		throw(c)
#define LUAI_TRY(L,c,a) \
	try { a } catch(...) { if ((c)-&gt;status == 0) (c)-&gt;status = -1; }
<a id=61></a>#define luai_jmpbuf		int  <a  class="comments">/* dummy variable */</a>

<a id=63></a>#elif defined(<a href="../h_src/57572852.htm" class="macro">LUA_USE_POSIX</a>)				<a  class="comments">/* }{ */</a>

<a id=65></a><a  class="comments">/* in POSIX, try _longjmp/_setjmp (more efficient) */</a>
#define LUAI_THROW(L,c)		_longjmp((c)-&gt;b, 1)
#define LUAI_TRY(L,c,a)		if (_setjmp((c)-&gt;b) == 0) { a }
#define luai_jmpbuf		jmp_buf

<a id=70></a>#else							<a  class="comments">/* }{ */</a>

<a id=72></a><a  class="comments">/* ISO C handling with long jumps */</a>
<a id=73></a>#define <a href="../h_src/57883668.htm" class="macro">LUAI_THROW</a>(L,c)		longjmp((c)-&gt;b, 1)
<a id=74></a>#define <a href="../h_src/57883532.htm" class="macro">LUAI_TRY</a>(L,c,a)		if (setjmp((c)-&gt;b) == 0) { a }
<a id=75></a>#define <a href="../h_src/57883396.htm" class="macro">luai_jmpbuf</a>		jmp_buf

<a id=77></a>#endif							<a  class="comments">/* } */</a>

<a id=79></a>#endif							<a  class="comments">/* } */</a>



<a id=83></a><a  class="comments">/* chain list of long jump buffers */</a>
<a id=84></a>struct <a href="../h_src/57653096.htm" class="class">lua_longjmp</a> {
<a id=85></a>  struct <a href="../h_src/57653096.htm" class="class">lua_longjmp</a> *<a href="../h_src/57883260.htm" class="variable">previous</a>;
<a id=86></a>  <a href="../h_src/57883396.htm" class="macro">luai_jmpbuf</a> <a href="../h_src/57883192.htm" class="variable">b</a>;
<a id=87></a>  volatile int <a href="../h_src/57883124.htm" class="variable">status</a>;  <a  class="comments">/* error code */</a>
};


<a id=91></a>void <a href="../h_src/57633648.htm" class="function">luaD_seterrorobj</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57883056.htm" class="localvar">L</a>, int <a href="../h_src/57882920.htm" class="localvar">errcode</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57882784.htm" class="localvar">oldtop</a>) {
<a id=92></a>  switch (<a href="../h_src/57882920.htm" class="localvar">errcode</a>) {
<a id=93></a>    case <a href="../h_src/57444660.htm" class="macro">LUA_ERRMEM</a>: {  <a  class="comments">/* memory error? */</a>
<a id=94></a>      <a href="../h_src/57524096.htm" class="macro">setsvalue2s</a>(<a href="../h_src/57883056.htm" class="localvar">L</a>, <a href="../h_src/57882784.htm" class="localvar">oldtop</a>, <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57883056.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57643780.htm" class="variable">memerrmsg</a>); <a  class="comments">/* reuse preregistered msg. */</a>
      break;
    }
<a id=97></a>    case <a href="../h_src/57444524.htm" class="macro">LUA_ERRERR</a>: {
<a id=98></a>      <a href="../h_src/57524096.htm" class="macro">setsvalue2s</a>(<a href="../h_src/57883056.htm" class="localvar">L</a>, <a href="../h_src/57882784.htm" class="localvar">oldtop</a>, <a href="../h_src/57619572.htm" class="macro">luaS_newliteral</a>(<a href="../h_src/57883056.htm" class="localvar">L</a>, &quot;error in error handling&quot;));
      break;
    }
<a id=101></a>    case <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>: {  <a  class="comments">/* special case only for closing upvalues */</a>
<a id=102></a>      <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57882784.htm" class="localvar">oldtop</a>));  <a  class="comments">/* no error message */</a>
      break;
    }
    default: {
<a id=106></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57884144.htm" class="macro">errorstatus</a>(errcode));  <a  class="comments">/* real error */</a>
<a id=107></a>      <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57883056.htm" class="localvar">L</a>, <a href="../h_src/57882784.htm" class="localvar">oldtop</a>, <a href="../h_src/57883056.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1);  <a  class="comments">/* error message on current top */</a>
      break;
    }
  }
<a id=111></a>  <a href="../h_src/57883056.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57882784.htm" class="localvar">oldtop</a> + 1;
}


<a id=115></a><a href="../h_src/57545584.htm" class="macro">l_noret</a> <a href="../h_src/57632560.htm" class="function">luaD_throw</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57881832.htm" class="localvar">L</a>, int <a href="../h_src/57881696.htm" class="localvar">errcode</a>) {
<a id=116></a>  if (<a href="../h_src/57881832.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641808.htm" class="variable">errorJmp</a>) {  <a  class="comments">/* thread has an error handler? */</a>
<a id=117></a>    <a href="../h_src/57881832.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641808.htm" class="variable">errorJmp</a>-&gt;<a href="../h_src/57883124.htm" class="variable">status</a> = <a href="../h_src/57881696.htm" class="localvar">errcode</a>;  <a  class="comments">/* set status */</a>
<a id=118></a>    <a href="../h_src/57883668.htm" class="macro">LUAI_THROW</a>(L, <a href="../h_src/57881832.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641808.htm" class="variable">errorJmp</a>);  <a  class="comments">/* jump to it */</a>
  }
<a id=120></a>  else {  <a  class="comments">/* thread has no error handler */</a>
<a id=121></a>    <a href="../h_src/57643100.htm" class="type">global_State</a> *<a href="../h_src/57881492.htm" class="localvar">g</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57881832.htm" class="localvar">L</a>);
<a id=122></a>    <a href="../h_src/57881696.htm" class="localvar">errcode</a> = <a href="../h_src/57638000.htm" class="function">luaE_resetthread</a>(<a href="../h_src/57881832.htm" class="localvar">L</a>, <a href="../h_src/57881696.htm" class="localvar">errcode</a>);  <a  class="comments">/* close all upvalues */</a>
<a id=123></a>    if (<a href="../h_src/57881492.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643848.htm" class="variable">mainthread</a>-&gt;<a href="../h_src/57641808.htm" class="variable">errorJmp</a>) {  <a  class="comments">/* main thread has a handler? */</a>
<a id=124></a>      <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57881832.htm" class="localvar">L</a>, <a href="../h_src/57881492.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643848.htm" class="variable">mainthread</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++, <a href="../h_src/57881832.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - 1);  <a  class="comments">/* copy error obj. */</a>
<a id=125></a>      <a href="../h_src/57632560.htm" class="function">luaD_throw</a>(<a href="../h_src/57881492.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643848.htm" class="variable">mainthread</a>, <a href="../h_src/57881696.htm" class="localvar">errcode</a>);  <a  class="comments">/* re-throw in main thread */</a>
    }
<a id=127></a>    else {  <a  class="comments">/* no handler at all; abort */</a>
<a id=128></a>      if (<a href="../h_src/57881492.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643916.htm" class="variable">panic</a>) {  <a  class="comments">/* panic function? */</a>
<a id=129></a>        <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=130></a>        <a href="../h_src/57881492.htm" class="localvar">g</a>-&gt;<a href="../h_src/57643916.htm" class="variable">panic</a>(<a href="../h_src/57881832.htm" class="localvar">L</a>);  <a  class="comments">/* call panic function (last chance to jump out) */</a>
      }
<a id=132></a>      <a href="../h_aa/57881084.htm" class="libfunc">abort</a>();
    }
  }
}


<a id=138></a>int <a href="../h_src/57632492.htm" class="function">luaD_rawrunprotected</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57881016.htm" class="localvar">L</a>, <a href="../h_src/57633716.htm" class="type">Pfunc</a> <a href="../h_src/57880880.htm" class="localvar">f</a>, void *<a href="../h_src/57880744.htm" class="localvar">ud</a>) {
<a id=139></a>  <a href="../h_src/57545176.htm" class="type">l_uint32</a> <a href="../h_src/57880608.htm" class="localvar">oldnCcalls</a> = <a href="../h_src/57881016.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641536.htm" class="variable">nCcalls</a>;
<a id=140></a>  struct <a href="../h_src/57653096.htm" class="class">lua_longjmp</a> <a href="../h_src/57880472.htm" class="localvar">lj</a>;
<a id=141></a>  <a href="../h_src/57880472.htm" class="localvar">lj</a>.<a href="../h_src/57883124.htm" class="variable">status</a> = <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>;
<a id=142></a>  <a href="../h_src/57880472.htm" class="localvar">lj</a>.<a href="../h_src/57883260.htm" class="variable">previous</a> = <a href="../h_src/57881016.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641808.htm" class="variable">errorJmp</a>;  <a  class="comments">/* chain new error handler */</a>
<a id=143></a>  <a href="../h_src/57881016.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641808.htm" class="variable">errorJmp</a> = &amp;<a href="../h_src/57880472.htm" class="localvar">lj</a>;
<a id=144></a>  <a href="../h_src/57883532.htm" class="macro">LUAI_TRY</a>(L, &amp;<a href="../h_src/57880472.htm" class="localvar">lj</a>,
<a id=145></a>    (*<a href="../h_src/57880880.htm" class="localvar">f</a>)(<a href="../h_src/57881016.htm" class="localvar">L</a>, <a href="../h_src/57880744.htm" class="localvar">ud</a>);
  );
<a id=147></a>  <a href="../h_src/57881016.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641808.htm" class="variable">errorJmp</a> = <a href="../h_src/57880472.htm" class="localvar">lj</a>.<a href="../h_src/57883260.htm" class="variable">previous</a>;  <a  class="comments">/* restore old error handler */</a>
<a id=148></a>  <a href="../h_src/57881016.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641536.htm" class="variable">nCcalls</a> = <a href="../h_src/57880608.htm" class="localvar">oldnCcalls</a>;
<a id=149></a>  return <a href="../h_src/57880472.htm" class="localvar">lj</a>.<a href="../h_src/57883124.htm" class="variable">status</a>;
}

<a id=152></a><a  class="comments">/* }====================================================== */</a>


<a id=155></a><a  class="comments">/*</a>
<a id=156></a><a  class="comments">** {==================================================================</a>
<a id=157></a><a  class="comments">** Stack reallocation</a>
<a id=158></a><a  class="comments">** ===================================================================</a>
<a id=159></a><a  class="comments">*/</a>


<a id=162></a><a  class="comments">/*</a>
<a id=163></a><a  class="comments">** Change all pointers to the stack into offsets.</a>
<a id=164></a><a  class="comments">*/</a>
<a id=165></a>static void <a href="../h_src/57880268.htm" class="function">relstack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57880132.htm" class="localvar">L</a>) {
<a id=166></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57879996.htm" class="localvar">ci</a>;
<a id=167></a>  <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/57879860.htm" class="localvar">up</a>;
<a id=168></a>  <a href="../h_src/57880132.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531916.htm" class="variable">offset</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57880132.htm" class="localvar">L</a>, <a href="../h_src/57880132.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
<a id=169></a>  <a href="../h_src/57880132.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642148.htm" class="variable">tbclist</a>.<a href="../h_src/57531916.htm" class="variable">offset</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57880132.htm" class="localvar">L</a>, <a href="../h_src/57880132.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642148.htm" class="variable">tbclist</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
<a id=170></a>  for (<a href="../h_src/57879860.htm" class="localvar">up</a> = <a href="../h_src/57880132.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642216.htm" class="variable">openupval</a>; <a href="../h_src/57879860.htm" class="localvar">up</a> != NULL; <a href="../h_src/57879860.htm" class="localvar">up</a> = <a href="../h_src/57879860.htm" class="localvar">up</a>-&gt;<a href="../h_src/57509680.htm" class="variable">u</a>.<a href="../h_src/57509884.htm" class="variable">open</a>.<a href="../h_src/57510224.htm" class="variable">next</a>)
<a id=171></a>    <a href="../h_src/57879860.htm" class="localvar">up</a>-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510700.htm" class="variable">offset</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57880132.htm" class="localvar">L</a>, <a href="../h_src/57631404.htm" class="macro">uplevel</a>(<a href="../h_src/57879860.htm" class="localvar">up</a>));
<a id=172></a>  for (<a href="../h_src/57879996.htm" class="localvar">ci</a> = <a href="../h_src/57880132.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>; <a href="../h_src/57879996.htm" class="localvar">ci</a> != NULL; <a href="../h_src/57879996.htm" class="localvar">ci</a> = <a href="../h_src/57879996.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>) {
<a id=173></a>    <a href="../h_src/57879996.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531916.htm" class="variable">offset</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57880132.htm" class="localvar">L</a>, <a href="../h_src/57879996.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a><a href="../h_src/57531984.htm" class="variable">p</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
<a id=174></a>    <a href="../h_src/57879996.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531916.htm" class="variable">offset</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57880132.htm" class="localvar">L</a>, <a href="../h_src/57879996.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
  }
}


<a id=179></a><a  class="comments">/*</a>
<a id=180></a><a  class="comments">** Change back all offsets into pointers.</a>
<a id=181></a><a  class="comments">*/</a>
<a id=182></a>static void <a href="../h_src/57879724.htm" class="function">correctstack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57879588.htm" class="localvar">L</a>) {
<a id=183></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57879452.htm" class="localvar">ci</a>;
<a id=184></a>  <a href="../h_src/57509612.htm" class="type">UpVal</a> *<a href="../h_src/57879316.htm" class="localvar">up</a>;
<a id=185></a>  <a href="../h_src/57879588.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57879588.htm" class="localvar">L</a>, <a href="../h_src/57879588.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531916.htm" class="variable">offset</a>);
<a id=186></a>  <a href="../h_src/57879588.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642148.htm" class="variable">tbclist</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57879588.htm" class="localvar">L</a>, <a href="../h_src/57879588.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642148.htm" class="variable">tbclist</a>.<a href="../h_src/57531916.htm" class="variable">offset</a>);
<a id=187></a>  for (<a href="../h_src/57879316.htm" class="localvar">up</a> = <a href="../h_src/57879588.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642216.htm" class="variable">openupval</a>; <a href="../h_src/57879316.htm" class="localvar">up</a> != NULL; <a href="../h_src/57879316.htm" class="localvar">up</a> = <a href="../h_src/57879316.htm" class="localvar">up</a>-&gt;<a href="../h_src/57509680.htm" class="variable">u</a>.<a href="../h_src/57509884.htm" class="variable">open</a>.<a href="../h_src/57510224.htm" class="variable">next</a>)
<a id=188></a>    <a href="../h_src/57879316.htm" class="localvar">up</a>-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510768.htm" class="variable">p</a> = <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57879588.htm" class="localvar">L</a>, <a href="../h_src/57879316.htm" class="localvar">up</a>-&gt;<a href="../h_src/57510564.htm" class="variable">v</a>.<a href="../h_src/57510700.htm" class="variable">offset</a>));
<a id=189></a>  for (<a href="../h_src/57879452.htm" class="localvar">ci</a> = <a href="../h_src/57879588.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>; <a href="../h_src/57879452.htm" class="localvar">ci</a> != NULL; <a href="../h_src/57879452.htm" class="localvar">ci</a> = <a href="../h_src/57879452.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>) {
<a id=190></a>    <a href="../h_src/57879452.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57879588.htm" class="localvar">L</a>, <a href="../h_src/57879452.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a><a href="../h_src/57531984.htm" class="variable">p</a>.<a href="../h_src/57531916.htm" class="variable">offset</a>);
<a id=191></a>    <a href="../h_src/57879452.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57879588.htm" class="localvar">L</a>, <a href="../h_src/57879452.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531916.htm" class="variable">offset</a>);
<a id=192></a>    if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57879452.htm" class="localvar">ci</a>))
<a id=193></a>      <a href="../h_src/57879452.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651056.htm" class="variable">trap</a> = 1;  <a  class="comments">/* signal to update 'trap' in 'luaV_execute' */</a>
  }
}


<a id=198></a><a  class="comments">/* some space for error handling */</a>
<a id=199></a>#define <a href="../h_src/57879180.htm" class="macro">ERRORSTACKSIZE</a>	(LUAI_MAXSTACK + 200)

<a id=201></a><a  class="comments">/*</a>
<a id=202></a><a  class="comments">** Reallocate the stack to a new size, correcting all pointers into it.</a>
<a id=203></a><a  class="comments">** In ISO C, any pointer use after the pointer has been deallocated is</a>
<a id=204></a><a  class="comments">** undefined behavior. So, before the reallocation, all pointers are</a>
<a id=205></a><a  class="comments">** changed to offsets, and after the reallocation they are changed back</a>
<a id=206></a><a  class="comments">** to pointers. As during the reallocation the pointers are invalid, the</a>
<a id=207></a><a  class="comments">** reallocation cannot run emergency collections.</a>
<a id=208></a><a  class="comments">**</a>
<a id=209></a><a  class="comments">** In case of allocation error, raise an error or return false according</a>
<a id=210></a><a  class="comments">** to 'raiseerror'.</a>
<a id=211></a><a  class="comments">*/</a>
<a id=212></a>int <a href="../h_src/57632832.htm" class="function">luaD_reallocstack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57879044.htm" class="localvar">L</a>, int <a href="../h_src/57878908.htm" class="localvar">newsize</a>, int <a href="../h_src/57878772.htm" class="localvar">raiseerror</a>) {
<a id=213></a>  int <a href="../h_src/57878636.htm" class="localvar">oldsize</a> = <a href="../h_src/57652416.htm" class="macro">stacksize</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>);
<a id=214></a>  int <a href="../h_src/57878500.htm" class="localvar">i</a>;
<a id=215></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57878364.htm" class="localvar">newstack</a>;
<a id=216></a>  int <a href="../h_src/57878228.htm" class="localvar">oldgcstop</a> = <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57645888.htm" class="variable">gcstopem</a>;
<a id=217></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(newsize &lt;= <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a> || newsize == <a href="../h_src/57879180.htm" class="macro">ERRORSTACKSIZE</a>);
<a id=218></a>  <a href="../h_src/57880268.htm" class="function">relstack</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>);  <a  class="comments">/* change pointers to offsets */</a>
<a id=219></a>  <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57645888.htm" class="variable">gcstopem</a> = 1;  <a  class="comments">/* stop emergency collection */</a>
<a id=220></a>  <a href="../h_src/57878364.htm" class="localvar">newstack</a> = <a href="../h_src/57657244.htm" class="macro">luaM_reallocvector</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>, <a href="../h_src/57879044.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642284.htm" class="variable">stack</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57878636.htm" class="localvar">oldsize</a> + <a href="../h_src/57652688.htm" class="macro">EXTRA_STACK</a>,
<a id=221></a>                                   <a href="../h_src/57878908.htm" class="localvar">newsize</a> + <a href="../h_src/57652688.htm" class="macro">EXTRA_STACK</a>, <a href="../h_src/57532256.htm" class="type">StackValue</a>);
<a id=222></a>  <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57645888.htm" class="variable">gcstopem</a> = <a href="../h_src/57878228.htm" class="localvar">oldgcstop</a>;  <a  class="comments">/* restore emergency collection */</a>
<a id=223></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57878364.htm" class="localvar">newstack</a> == NULL)) {  <a  class="comments">/* reallocation failed? */</a>
<a id=224></a>    <a href="../h_src/57879724.htm" class="function">correctstack</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>);  <a  class="comments">/* change offsets back to pointers */</a>
<a id=225></a>    if (<a href="../h_src/57878772.htm" class="localvar">raiseerror</a>)
<a id=226></a>      <a href="../h_src/57496556.htm" class="macro">luaM_error</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>);
<a id=227></a>    else return 0;  <a  class="comments">/* do not raise an error */</a>
  }
<a id=229></a>  <a href="../h_src/57879044.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642284.htm" class="variable">stack</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57878364.htm" class="localvar">newstack</a>;
<a id=230></a>  <a href="../h_src/57879724.htm" class="function">correctstack</a>(<a href="../h_src/57879044.htm" class="localvar">L</a>);  <a  class="comments">/* change offsets back to pointers */</a>
<a id=231></a>  <a href="../h_src/57879044.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642352.htm" class="variable">stack_last</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57879044.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642284.htm" class="variable">stack</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + <a href="../h_src/57878908.htm" class="localvar">newsize</a>;
<a id=232></a>  for (<a href="../h_src/57878500.htm" class="localvar">i</a> = <a href="../h_src/57878636.htm" class="localvar">oldsize</a> + <a href="../h_src/57652688.htm" class="macro">EXTRA_STACK</a>; <a href="../h_src/57878500.htm" class="localvar">i</a> &lt; <a href="../h_src/57878908.htm" class="localvar">newsize</a> + <a href="../h_src/57652688.htm" class="macro">EXTRA_STACK</a>; <a href="../h_src/57878500.htm" class="localvar">i</a>++)
<a id=233></a>    <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57878364.htm" class="localvar">newstack</a> + <a href="../h_src/57878500.htm" class="localvar">i</a>)); <a  class="comments">/* erase new segment */</a>
  return 1;
}


<a id=238></a><a  class="comments">/*</a>
<a id=239></a><a  class="comments">** Try to grow the stack by at least 'n' elements. When 'raiseerror'</a>
<a id=240></a><a  class="comments">** is true, raises any error; otherwise, return 0 in case of errors.</a>
<a id=241></a><a  class="comments">*/</a>
<a id=242></a>int <a href="../h_src/57632764.htm" class="function">luaD_growstack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57878092.htm" class="localvar">L</a>, int <a href="../h_src/57877956.htm" class="localvar">n</a>, int <a href="../h_src/57877820.htm" class="localvar">raiseerror</a>) {
<a id=243></a>  int <a href="../h_src/57877684.htm" class="localvar">size</a> = <a href="../h_src/57652416.htm" class="macro">stacksize</a>(<a href="../h_src/57878092.htm" class="localvar">L</a>);
<a id=244></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57877684.htm" class="localvar">size</a> &gt; <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a>)) {
<a id=245></a>    <a  class="comments">/* if stack is larger than maximum, thread is already using the</a>
<a id=246></a><a  class="comments">       extra space reserved for errors, that is, thread is handling</a>
<a id=247></a><a  class="comments">       a stack error; cannot grow further than that. */</a>
<a id=248></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57652416.htm" class="macro">stacksize</a>(L) == <a href="../h_src/57879180.htm" class="macro">ERRORSTACKSIZE</a>);
<a id=249></a>    if (<a href="../h_src/57877820.htm" class="localvar">raiseerror</a>)
<a id=250></a>      <a href="../h_src/57632560.htm" class="function">luaD_throw</a>(<a href="../h_src/57878092.htm" class="localvar">L</a>, <a href="../h_src/57444524.htm" class="macro">LUA_ERRERR</a>);  <a  class="comments">/* error inside message handler */</a>
<a id=251></a>    return 0;  <a  class="comments">/* if not 'raiseerror', just signal it */</a>
  }
<a id=253></a>  else if (<a href="../h_src/57877956.htm" class="localvar">n</a> &lt; <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a>) {  <a  class="comments">/* avoids arithmetic overflows */</a>
<a id=254></a>    int <a href="../h_src/57877548.htm" class="localvar">newsize</a> = 2 * <a href="../h_src/57877684.htm" class="localvar">size</a>;  <a  class="comments">/* tentative new size */</a>
<a id=255></a>    int <a href="../h_src/57877412.htm" class="localvar">needed</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57878092.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57878092.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642284.htm" class="variable">stack</a>.<a href="../h_src/57531984.htm" class="variable">p</a>) + <a href="../h_src/57877956.htm" class="localvar">n</a>;
<a id=256></a>    if (<a href="../h_src/57877548.htm" class="localvar">newsize</a> &gt; <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a>)  <a  class="comments">/* cannot cross the limit */</a>
<a id=257></a>      <a href="../h_src/57877548.htm" class="localvar">newsize</a> = <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a>;
<a id=258></a>    if (<a href="../h_src/57877548.htm" class="localvar">newsize</a> &lt; <a href="../h_src/57877412.htm" class="localvar">needed</a>)  <a  class="comments">/* but must respect what was asked for */</a>
<a id=259></a>      <a href="../h_src/57877548.htm" class="localvar">newsize</a> = <a href="../h_src/57877412.htm" class="localvar">needed</a>;
<a id=260></a>    if (<a href="../h_src/57551704.htm" class="macro">l_likely</a>(<a href="../h_src/57877548.htm" class="localvar">newsize</a> &lt;= <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a>))
<a id=261></a>      return <a href="../h_src/57632832.htm" class="function">luaD_reallocstack</a>(<a href="../h_src/57878092.htm" class="localvar">L</a>, <a href="../h_src/57877548.htm" class="localvar">newsize</a>, <a href="../h_src/57877820.htm" class="localvar">raiseerror</a>);
  }
<a id=263></a>  <a  class="comments">/* else stack overflow */</a>
<a id=264></a>  <a  class="comments">/* add extra size to be able to handle the error message */</a>
<a id=265></a>  <a href="../h_src/57632832.htm" class="function">luaD_reallocstack</a>(<a href="../h_src/57878092.htm" class="localvar">L</a>, <a href="../h_src/57879180.htm" class="macro">ERRORSTACKSIZE</a>, <a href="../h_src/57877820.htm" class="localvar">raiseerror</a>);
<a id=266></a>  if (<a href="../h_src/57877820.htm" class="localvar">raiseerror</a>)
<a id=267></a>    <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57878092.htm" class="localvar">L</a>, &quot;stack overflow&quot;);
  return 0;
}


<a id=272></a><a  class="comments">/*</a>
<a id=273></a><a  class="comments">** Compute how much of the stack is being used, by computing the</a>
<a id=274></a><a  class="comments">** maximum top of all call frames in the stack and the current top.</a>
<a id=275></a><a  class="comments">*/</a>
<a id=276></a>static int <a href="../h_src/57877276.htm" class="function">stackinuse</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57877140.htm" class="localvar">L</a>) {
<a id=277></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57877004.htm" class="localvar">ci</a>;
<a id=278></a>  int <a href="../h_src/57876868.htm" class="localvar">res</a>;
<a id=279></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57876732.htm" class="localvar">lim</a> = <a href="../h_src/57877140.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
<a id=280></a>  for (<a href="../h_src/57877004.htm" class="localvar">ci</a> = <a href="../h_src/57877140.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>; <a href="../h_src/57877004.htm" class="localvar">ci</a> != NULL; <a href="../h_src/57877004.htm" class="localvar">ci</a> = <a href="../h_src/57877004.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>) {
<a id=281></a>    if (<a href="../h_src/57876732.htm" class="localvar">lim</a> &lt; <a href="../h_src/57877004.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>) <a href="../h_src/57876732.htm" class="localvar">lim</a> = <a href="../h_src/57877004.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
  }
<a id=283></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(lim &lt;= L-&gt;stack_last.p + <a href="../h_src/57652688.htm" class="macro">EXTRA_STACK</a>);
<a id=284></a>  <a href="../h_src/57876868.htm" class="localvar">res</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57876732.htm" class="localvar">lim</a> - <a href="../h_src/57877140.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642284.htm" class="variable">stack</a>.<a href="../h_src/57531984.htm" class="variable">p</a>) + 1;  <a  class="comments">/* part of stack in use */</a>
<a id=285></a>  if (<a href="../h_src/57876868.htm" class="localvar">res</a> &lt; <a href="../h_src/57442688.htm" class="macro">LUA_MINSTACK</a>)
<a id=286></a>    <a href="../h_src/57876868.htm" class="localvar">res</a> = <a href="../h_src/57442688.htm" class="macro">LUA_MINSTACK</a>;  <a  class="comments">/* ensure a minimum size */</a>
<a id=287></a>  return <a href="../h_src/57876868.htm" class="localvar">res</a>;
}


<a id=291></a><a  class="comments">/*</a>
<a id=292></a><a  class="comments">** If stack size is more than 3 times the current use, reduce that size</a>
<a id=293></a><a  class="comments">** to twice the current use. (So, the final stack size is at most 2/3 the</a>
<a id=294></a><a  class="comments">** previous size, and half of its entries are empty.)</a>
<a id=295></a><a  class="comments">** As a particular case, if stack was handling a stack overflow and now</a>
<a id=296></a><a  class="comments">** it is not, 'max' (limited by LUAI_MAXSTACK) will be smaller than</a>
<a id=297></a><a  class="comments">** stacksize (equal to ERRORSTACKSIZE in this case), and so the stack</a>
<a id=298></a><a  class="comments">** will be reduced to a &quot;regular&quot; size.</a>
<a id=299></a><a  class="comments">*/</a>
<a id=300></a>void <a href="../h_src/57632696.htm" class="function">luaD_shrinkstack</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57876596.htm" class="localvar">L</a>) {
<a id=301></a>  int <a href="../h_src/57876460.htm" class="localvar">inuse</a> = <a href="../h_src/57877276.htm" class="function">stackinuse</a>(<a href="../h_src/57876596.htm" class="localvar">L</a>);
<a id=302></a>  int <a href="../h_src/57876324.htm" class="localvar">max</a> = (<a href="../h_src/57876460.htm" class="localvar">inuse</a> &gt; <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a> / 3) ? <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a> : <a href="../h_src/57876460.htm" class="localvar">inuse</a> * 3;
<a id=303></a>  <a  class="comments">/* if thread is currently not handling a stack overflow and its</a>
<a id=304></a><a  class="comments">     size is larger than maximum &quot;reasonable&quot; size, shrink it */</a>
<a id=305></a>  if (<a href="../h_src/57876460.htm" class="localvar">inuse</a> &lt;= <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a> &amp;&amp; <a href="../h_src/57652416.htm" class="macro">stacksize</a>(<a href="../h_src/57876596.htm" class="localvar">L</a>) &gt; <a href="../h_src/57876324.htm" class="localvar">max</a>) {
<a id=306></a>    int <a href="../h_src/57876188.htm" class="localvar">nsize</a> = (<a href="../h_src/57876460.htm" class="localvar">inuse</a> &gt; <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a> / 2) ? <a href="../h_src/57447652.htm" class="macro">LUAI_MAXSTACK</a> : <a href="../h_src/57876460.htm" class="localvar">inuse</a> * 2;
<a id=307></a>    <a href="../h_src/57632832.htm" class="function">luaD_reallocstack</a>(<a href="../h_src/57876596.htm" class="localvar">L</a>, <a href="../h_src/57876188.htm" class="localvar">nsize</a>, 0);  <a  class="comments">/* ok if that fails */</a>
  }
<a id=309></a>  else  <a  class="comments">/* don't change stack */</a>
<a id=310></a>    <a href="../h_src/57538512.htm" class="macro">condmovestack</a>(L,{},{});  <a  class="comments">/* (change only for debugging) */</a>
<a id=311></a>  <a href="../h_src/57638340.htm" class="function">luaE_shrinkCI</a>(<a href="../h_src/57876596.htm" class="localvar">L</a>);  <a  class="comments">/* shrink CI list */</a>
}


<a id=315></a>void <a href="../h_src/57632628.htm" class="function">luaD_inctop</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57876052.htm" class="localvar">L</a>) {
<a id=316></a>  <a href="../h_src/57634532.htm" class="macro">luaD_checkstack</a>(<a href="../h_src/57876052.htm" class="localvar">L</a>, 1);
<a id=317></a>  <a href="../h_src/57876052.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++;
}

<a id=320></a><a  class="comments">/* }================================================================== */</a>


<a id=323></a><a  class="comments">/*</a>
<a id=324></a><a  class="comments">** Call a hook for the given event. Make sure there is a hook to be</a>
<a id=325></a><a  class="comments">** called. (Both 'L-&gt;hook' and 'L-&gt;hookmask', which trigger this</a>
<a id=326></a><a  class="comments">** function, can be changed asynchronously by signals.)</a>
<a id=327></a><a  class="comments">*/</a>
<a id=328></a>void <a href="../h_src/57633512.htm" class="function">luaD_hook</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57875916.htm" class="localvar">L</a>, int <a href="../h_src/57875780.htm" class="localvar">event</a>, int <a href="../h_src/57875644.htm" class="localvar">line</a>,
<a id=329></a>                              int <a href="../h_src/57875508.htm" class="localvar">ftransfer</a>, int <a href="../h_src/57875372.htm" class="localvar">ntransfer</a>) {
<a id=330></a>  <a href="../h_src/57440240.htm" class="type">lua_Hook</a> <a href="../h_src/57875236.htm" class="localvar">hook</a> = <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641672.htm" class="variable">hook</a>;
<a id=331></a>  if (<a href="../h_src/57875236.htm" class="localvar">hook</a> &amp;&amp; <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a>) {  <a  class="comments">/* make sure there is a hook */</a>
<a id=332></a>    int <a href="../h_src/57875100.htm" class="localvar">mask</a> = <a href="../h_src/57648948.htm" class="macro">CIST_HOOKED</a>;
<a id=333></a>    <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57874964.htm" class="localvar">ci</a> = <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=334></a>    <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/57874828.htm" class="localvar">top</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57875916.htm" class="localvar">L</a>, <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);  <a  class="comments">/* preserve original 'top' */</a>
<a id=335></a>    <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/57874692.htm" class="localvar">ci_top</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57875916.htm" class="localvar">L</a>, <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a><a href="../h_src/57531984.htm" class="variable">p</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);  <a  class="comments">/* idem for 'ci-&gt;top' */</a>
<a id=336></a>    <a href="../h_src/57440308.htm" class="type">lua_Debug</a> <a href="../h_src/57874556.htm" class="localvar">ar</a>;
<a id=337></a>    <a href="../h_src/57874556.htm" class="localvar">ar</a>.<a href="../h_src/57423784.htm" class="variable">event</a> = <a href="../h_src/57875780.htm" class="localvar">event</a>;
<a id=338></a>    <a href="../h_src/57874556.htm" class="localvar">ar</a>.<a href="../h_src/57423376.htm" class="variable">currentline</a> = <a href="../h_src/57875644.htm" class="localvar">line</a>;
<a id=339></a>    <a href="../h_src/57874556.htm" class="localvar">ar</a>.<a href="../h_src/57422424.htm" class="variable">i_ci</a> = <a href="../h_src/57874964.htm" class="localvar">ci</a>;
<a id=340></a>    if (<a href="../h_src/57875372.htm" class="localvar">ntransfer</a> != 0) {
<a id=341></a>      <a href="../h_src/57875100.htm" class="localvar">mask</a> |= <a href="../h_src/57648268.htm" class="macro">CIST_TRAN</a>;  <a  class="comments">/* 'ci' has transfer information */</a>
<a id=342></a>      <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57649696.htm" class="variable">transferinfo</a>.<a href="../h_src/57649900.htm" class="variable">ftransfer</a> = <a href="../h_src/57875508.htm" class="localvar">ftransfer</a>;
<a id=343></a>      <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57649696.htm" class="variable">transferinfo</a>.<a href="../h_src/57649832.htm" class="variable">ntransfer</a> = <a href="../h_src/57875372.htm" class="localvar">ntransfer</a>;
    }
<a id=345></a>    if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57874964.htm" class="localvar">ci</a>) &amp;&amp; <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> &lt; <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>)
<a id=346></a>      <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;  <a  class="comments">/* protect entire activation register */</a>
<a id=347></a>    <a href="../h_src/57634532.htm" class="macro">luaD_checkstack</a>(<a href="../h_src/57875916.htm" class="localvar">L</a>, <a href="../h_src/57442688.htm" class="macro">LUA_MINSTACK</a>);  <a  class="comments">/* ensure minimum stack size */</a>
<a id=348></a>    if (<a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> &lt; <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + <a href="../h_src/57442688.htm" class="macro">LUA_MINSTACK</a>)
<a id=349></a>      <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + <a href="../h_src/57442688.htm" class="macro">LUA_MINSTACK</a>;
<a id=350></a>    <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a> = 0;  <a  class="comments">/* cannot call hooks inside a hook */</a>
<a id=351></a>    <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> |= <a href="../h_src/57875100.htm" class="localvar">mask</a>;
<a id=352></a>    <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=353></a>    (*<a href="../h_src/57875236.htm" class="localvar">hook</a>)(<a href="../h_src/57875916.htm" class="localvar">L</a>, &amp;<a href="../h_src/57874556.htm" class="localvar">ar</a>);
<a id=354></a>    <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=355></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!L-&gt;allowhook);
<a id=356></a>    <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a> = 1;
<a id=357></a>    <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57875916.htm" class="localvar">L</a>, <a href="../h_src/57874692.htm" class="localvar">ci_top</a>);
<a id=358></a>    <a href="../h_src/57875916.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57875916.htm" class="localvar">L</a>, <a href="../h_src/57874828.htm" class="localvar">top</a>);
<a id=359></a>    <a href="../h_src/57874964.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp;= ~<a href="../h_src/57875100.htm" class="localvar">mask</a>;
  }
}


<a id=364></a><a  class="comments">/*</a>
<a id=365></a><a  class="comments">** Executes a call hook for Lua functions. This function is called</a>
<a id=366></a><a  class="comments">** whenever 'hookmask' is not zero, so it checks whether call hooks are</a>
<a id=367></a><a  class="comments">** active.</a>
<a id=368></a><a  class="comments">*/</a>
<a id=369></a>void <a href="../h_src/57633444.htm" class="function">luaD_hookcall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57874420.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57874284.htm" class="localvar">ci</a>) {
<a id=370></a>  <a href="../h_src/57874420.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641468.htm" class="variable">oldpc</a> = 0;  <a  class="comments">/* set 'oldpc' for new function */</a>
<a id=371></a>  if (<a href="../h_src/57874420.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a> &amp; <a href="../h_src/57425212.htm" class="macro">LUA_MASKCALL</a>) {  <a  class="comments">/* is call hook on? */</a>
<a id=372></a>    int <a href="../h_src/57874148.htm" class="localvar">event</a> = (<a href="../h_src/57874284.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648676.htm" class="macro">CIST_TAIL</a>) ? <a href="../h_src/57425348.htm" class="macro">LUA_HOOKTAILCALL</a>
<a id=373></a>                                             : <a href="../h_src/57425892.htm" class="macro">LUA_HOOKCALL</a>;
<a id=374></a>    <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57874012.htm" class="localvar">p</a> = <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57874284.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>;
<a id=375></a>    <a href="../h_src/57874284.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>++;  <a  class="comments">/* hooks assume 'pc' is already incremented */</a>
<a id=376></a>    <a href="../h_src/57633512.htm" class="function">luaD_hook</a>(<a href="../h_src/57874420.htm" class="localvar">L</a>, <a href="../h_src/57874148.htm" class="localvar">event</a>, -1, 1, <a href="../h_src/57874012.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a>);
<a id=377></a>    <a href="../h_src/57874284.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>--;  <a  class="comments">/* correct 'pc' */</a>
  }
}


<a id=382></a><a  class="comments">/*</a>
<a id=383></a><a  class="comments">** Executes a return hook for Lua and C functions and sets/corrects</a>
<a id=384></a><a  class="comments">** 'oldpc'. (Note that this correction is needed by the line hook, so it</a>
<a id=385></a><a  class="comments">** is done even when return hooks are off.)</a>
<a id=386></a><a  class="comments">*/</a>
<a id=387></a>static void <a href="../h_src/57873876.htm" class="function">rethook</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57873740.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57873604.htm" class="localvar">ci</a>, int <a href="../h_src/57873468.htm" class="localvar">nres</a>) {
<a id=388></a>  if (<a href="../h_src/57873740.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a> &amp; <a href="../h_src/57425076.htm" class="macro">LUA_MASKRET</a>) {  <a  class="comments">/* is return hook on? */</a>
<a id=389></a>    <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57873332.htm" class="localvar">firstres</a> = <a href="../h_src/57873740.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57873468.htm" class="localvar">nres</a>;  <a  class="comments">/* index of first result */</a>
<a id=390></a>    int <a href="../h_src/57873196.htm" class="localvar">delta</a> = 0;  <a  class="comments">/* correction for vararg functions */</a>
<a id=391></a>    int <a href="../h_src/57873060.htm" class="localvar">ftransfer</a>;
<a id=392></a>    if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57873604.htm" class="localvar">ci</a>)) {
<a id=393></a>      <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57872924.htm" class="localvar">p</a> = <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57873604.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>;
<a id=394></a>      if (<a href="../h_src/57872924.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515868.htm" class="variable">is_vararg</a>)
<a id=395></a>        <a href="../h_src/57873196.htm" class="localvar">delta</a> = <a href="../h_src/57873604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57650988.htm" class="variable">nextraargs</a> + <a href="../h_src/57872924.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a> + 1;
    }
<a id=397></a>    <a href="../h_src/57873604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> += <a href="../h_src/57873196.htm" class="localvar">delta</a>;  <a  class="comments">/* if vararg, back to virtual 'func' */</a>
<a id=398></a>    <a href="../h_src/57873060.htm" class="localvar">ftransfer</a> = <a href="../h_src/57547760.htm" class="macro">cast</a>(unsigned short, <a href="../h_src/57873332.htm" class="localvar">firstres</a> - <a href="../h_src/57873604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);
<a id=399></a>    <a href="../h_src/57633512.htm" class="function">luaD_hook</a>(<a href="../h_src/57873740.htm" class="localvar">L</a>, <a href="../h_src/57425756.htm" class="macro">LUA_HOOKRET</a>, -1, <a href="../h_src/57873060.htm" class="localvar">ftransfer</a>, <a href="../h_src/57873468.htm" class="localvar">nres</a>);  <a  class="comments">/* call it */</a>
<a id=400></a>    <a href="../h_src/57873604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/57873196.htm" class="localvar">delta</a>;
  }
<a id=402></a>  if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57873604.htm" class="localvar">ci</a> = <a href="../h_src/57873604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>))
<a id=403></a>    <a href="../h_src/57873740.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641468.htm" class="variable">oldpc</a> = <a href="../h_src/57636776.htm" class="macro">pcRel</a>(<a href="../h_src/57873604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a>, <a href="../h_src/57636640.htm" class="macro">ci_func</a>(<a href="../h_src/57873604.htm" class="localvar">ci</a>)-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>);  <a  class="comments">/* set 'oldpc' */</a>
}


<a id=407></a><a  class="comments">/*</a>
<a id=408></a><a  class="comments">** Check whether 'func' has a '__call' metafield. If so, put it in the</a>
<a id=409></a><a  class="comments">** stack, below original 'func', so that 'luaD_precall' can call it. Raise</a>
<a id=410></a><a  class="comments">** an error if there is no '__call' metafield.</a>
<a id=411></a><a  class="comments">*/</a>
<a id=412></a><a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57633104.htm" class="function">luaD_tryfuncTM</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57872788.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57872652.htm" class="localvar">func</a>) {
<a id=413></a>  const <a href="../h_src/57535384.htm" class="type">TValue</a> *<a href="../h_src/57872516.htm" class="localvar">tm</a>;
<a id=414></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57872380.htm" class="localvar">p</a>;
<a id=415></a>  <a href="../h_src/57633988.htm" class="macro">checkstackGCp</a>(<a href="../h_src/57872788.htm" class="localvar">L</a>, 1, <a href="../h_src/57872652.htm" class="localvar">func</a>);  <a  class="comments">/* space for metamethod */</a>
<a id=416></a>  <a href="../h_src/57872516.htm" class="localvar">tm</a> = <a href="../h_src/57498052.htm" class="function">luaT_gettmbyobj</a>(<a href="../h_src/57872788.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57872652.htm" class="localvar">func</a>), <a href="../h_src/57499344.htm" class="variable">TM_CALL</a>);  <a  class="comments">/* (after previous GC) */</a>
<a id=417></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57531168.htm" class="macro">ttisnil</a>(<a href="../h_src/57872516.htm" class="localvar">tm</a>)))
<a id=418></a>    <a href="../h_src/57635688.htm" class="function">luaG_callerror</a>(<a href="../h_src/57872788.htm" class="localvar">L</a>, <a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57872652.htm" class="localvar">func</a>));  <a  class="comments">/* nothing to call */</a>
<a id=419></a>  for (<a href="../h_src/57872380.htm" class="localvar">p</a> = <a href="../h_src/57872788.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>; <a href="../h_src/57872380.htm" class="localvar">p</a> &gt; <a href="../h_src/57872652.htm" class="localvar">func</a>; <a href="../h_src/57872380.htm" class="localvar">p</a>--)  <a  class="comments">/* open space for metamethod */</a>
<a id=420></a>    <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57872788.htm" class="localvar">L</a>, <a href="../h_src/57872380.htm" class="localvar">p</a>, <a href="../h_src/57872380.htm" class="localvar">p</a>-1);
<a id=421></a>  <a href="../h_src/57872788.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++;  <a  class="comments">/* stack space pre-allocated by the caller */</a>
<a id=422></a>  <a href="../h_src/57533412.htm" class="macro">setobj2s</a>(<a href="../h_src/57872788.htm" class="localvar">L</a>, <a href="../h_src/57872652.htm" class="localvar">func</a>, <a href="../h_src/57872516.htm" class="localvar">tm</a>);  <a  class="comments">/* metamethod is the new function to be called */</a>
<a id=423></a>  return <a href="../h_src/57872652.htm" class="localvar">func</a>;
}


<a id=427></a><a  class="comments">/*</a>
<a id=428></a><a  class="comments">** Given 'nres' results at 'firstResult', move 'wanted' of them to 'res'.</a>
<a id=429></a><a  class="comments">** Handle most typical cases (zero results for commands, one result for</a>
<a id=430></a><a  class="comments">** expressions, multiple results for tail calls/single parameters)</a>
<a id=431></a><a  class="comments">** separated.</a>
<a id=432></a><a  class="comments">*/</a>
<a id=433></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> void <a href="../h_src/57871564.htm" class="function">moveresults</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57871428.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57871292.htm" class="localvar">res</a>, int <a href="../h_src/57871156.htm" class="localvar">nres</a>, int <a href="../h_src/57871020.htm" class="localvar">wanted</a>) {
<a id=434></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57870884.htm" class="localvar">firstresult</a>;
<a id=435></a>  int <a href="../h_src/57870748.htm" class="localvar">i</a>;
<a id=436></a>  switch (<a href="../h_src/57871020.htm" class="localvar">wanted</a>) {  <a  class="comments">/* handle typical cases separately */</a>
<a id=437></a>    case 0:  <a  class="comments">/* no values needed */</a>
<a id=438></a>      <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57871292.htm" class="localvar">res</a>;
      return;
<a id=440></a>    case 1:  <a  class="comments">/* one value needed */</a>
<a id=441></a>      if (<a href="../h_src/57871156.htm" class="localvar">nres</a> == 0)   <a  class="comments">/* no results? */</a>
<a id=442></a>        <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57871292.htm" class="localvar">res</a>));  <a  class="comments">/* adjust with nil */</a>
<a id=443></a>      else  <a  class="comments">/* at least one result */</a>
<a id=444></a>        <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57871428.htm" class="localvar">L</a>, <a href="../h_src/57871292.htm" class="localvar">res</a>, <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57871156.htm" class="localvar">nres</a>);  <a  class="comments">/* move it to proper place */</a>
<a id=445></a>      <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57871292.htm" class="localvar">res</a> + 1;
      return;
<a id=447></a>    case <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>:
<a id=448></a>      <a href="../h_src/57871020.htm" class="localvar">wanted</a> = <a href="../h_src/57871156.htm" class="localvar">nres</a>;  <a  class="comments">/* we want all results */</a>
      break;
<a id=450></a>    default:  <a  class="comments">/* two/more results and/or to-be-closed variables */</a>
<a id=451></a>      if (<a href="../h_src/57637524.htm" class="macro">hastocloseCfunc</a>(<a href="../h_src/57871020.htm" class="localvar">wanted</a>)) {  <a  class="comments">/* to-be-closed variables? */</a>
<a id=452></a>        <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> |= <a href="../h_src/57648132.htm" class="macro">CIST_CLSRET</a>;  <a  class="comments">/* in case of yields */</a>
<a id=453></a>        <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650036.htm" class="variable">nres</a> = <a href="../h_src/57871156.htm" class="localvar">nres</a>;
<a id=454></a>        <a href="../h_src/57871292.htm" class="localvar">res</a> = <a href="../h_src/57630384.htm" class="function">luaF_close</a>(<a href="../h_src/57871428.htm" class="localvar">L</a>, <a href="../h_src/57871292.htm" class="localvar">res</a>, <a href="../h_src/57631132.htm" class="macro">CLOSEKTOP</a>, 1);
<a id=455></a>        <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp;= ~<a href="../h_src/57648132.htm" class="macro">CIST_CLSRET</a>;
<a id=456></a>        if (<a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a>) {  <a  class="comments">/* if needed, call hook after '__close's */</a>
<a id=457></a>          <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/57870340.htm" class="localvar">savedres</a> = <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57871428.htm" class="localvar">L</a>, <a href="../h_src/57871292.htm" class="localvar">res</a>);
<a id=458></a>          <a href="../h_src/57873876.htm" class="function">rethook</a>(<a href="../h_src/57871428.htm" class="localvar">L</a>, <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>, <a href="../h_src/57871156.htm" class="localvar">nres</a>);
<a id=459></a>          <a href="../h_src/57871292.htm" class="localvar">res</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57871428.htm" class="localvar">L</a>, <a href="../h_src/57870340.htm" class="localvar">savedres</a>);  <a  class="comments">/* hook can move stack */</a><a href="../h_src/57642284.htm" class="variable">stack</a> */
        }
<a id=461></a>        <a href="../h_src/57871020.htm" class="localvar">wanted</a> = <a href="../h_src/57637252.htm" class="macro">decodeNresults</a>(<a href="../h_src/57871020.htm" class="localvar">wanted</a>);
<a id=462></a>        if (<a href="../h_src/57871020.htm" class="localvar">wanted</a> == <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>)
<a id=463></a>          <a href="../h_src/57871020.htm" class="localvar">wanted</a> = <a href="../h_src/57871156.htm" class="localvar">nres</a>;  <a  class="comments">/* we want all results */</a>
      }
      break;
  }
<a id=467></a>  <a  class="comments">/* generic case */</a>
<a id=468></a>  <a href="../h_src/57870884.htm" class="localvar">firstresult</a> = <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57871156.htm" class="localvar">nres</a>;  <a  class="comments">/* index of first result */</a>
<a id=469></a>  if (<a href="../h_src/57871156.htm" class="localvar">nres</a> &gt; <a href="../h_src/57871020.htm" class="localvar">wanted</a>)  <a  class="comments">/* extra results? */</a>
<a id=470></a>    <a href="../h_src/57871156.htm" class="localvar">nres</a> = <a href="../h_src/57871020.htm" class="localvar">wanted</a>;  <a  class="comments">/* don't need them */</a>
<a id=471></a>  for (<a href="../h_src/57870748.htm" class="localvar">i</a> = 0; <a href="../h_src/57870748.htm" class="localvar">i</a> &lt; <a href="../h_src/57871156.htm" class="localvar">nres</a>; <a href="../h_src/57870748.htm" class="localvar">i</a>++)  <a  class="comments">/* move all results to correct place */</a>
<a id=472></a>    <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57871428.htm" class="localvar">L</a>, <a href="../h_src/57871292.htm" class="localvar">res</a> + <a href="../h_src/57870748.htm" class="localvar">i</a>, <a href="../h_src/57870884.htm" class="localvar">firstresult</a> + <a href="../h_src/57870748.htm" class="localvar">i</a>);
<a id=473></a>  for (; <a href="../h_src/57870748.htm" class="localvar">i</a> &lt; <a href="../h_src/57871020.htm" class="localvar">wanted</a>; <a href="../h_src/57870748.htm" class="localvar">i</a>++)  <a  class="comments">/* complete wanted number of results */</a>
<a id=474></a>    <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57871292.htm" class="localvar">res</a> + <a href="../h_src/57870748.htm" class="localvar">i</a>));
<a id=475></a>  <a href="../h_src/57871428.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57871292.htm" class="localvar">res</a> + <a href="../h_src/57871020.htm" class="localvar">wanted</a>;  <a  class="comments">/* top points after the last result */</a>
}


<a id=479></a><a  class="comments">/*</a>
<a id=480></a><a  class="comments">** Finishes a function call: calls hook if necessary, moves current</a>
<a id=481></a><a  class="comments">** number of results to proper place, and returns to previous call</a>
<a id=482></a><a  class="comments">** info. If function has to close variables, hook must be called after</a>
<a id=483></a><a  class="comments">** that.</a>
<a id=484></a><a  class="comments">*/</a>
<a id=485></a>void <a href="../h_src/57632900.htm" class="function">luaD_poscall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57869932.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57869796.htm" class="localvar">ci</a>, int <a href="../h_src/57869660.htm" class="localvar">nres</a>) {
<a id=486></a>  int <a href="../h_src/57869524.htm" class="localvar">wanted</a> = <a href="../h_src/57869796.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649492.htm" class="variable">nresults</a>;
<a id=487></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57869932.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a> &amp;&amp; !<a href="../h_src/57637524.htm" class="macro">hastocloseCfunc</a>(<a href="../h_src/57869524.htm" class="localvar">wanted</a>)))
<a id=488></a>    <a href="../h_src/57873876.htm" class="function">rethook</a>(<a href="../h_src/57869932.htm" class="localvar">L</a>, <a href="../h_src/57869796.htm" class="localvar">ci</a>, <a href="../h_src/57869660.htm" class="localvar">nres</a>);
<a id=489></a>  <a  class="comments">/* move results to proper place */</a>
<a id=490></a>  <a href="../h_src/57871564.htm" class="function">moveresults</a>(<a href="../h_src/57869932.htm" class="localvar">L</a>, <a href="../h_src/57869796.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57869660.htm" class="localvar">nres</a>, <a href="../h_src/57869524.htm" class="localvar">wanted</a>);
<a id=491></a>  <a  class="comments">/* function cannot be in any of these cases when returning */</a>
<a id=492></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!(ci-&gt;callstatus &amp;
<a id=493></a>        (<a href="../h_src/57648948.htm" class="macro">CIST_HOOKED</a> | <a href="../h_src/57648812.htm" class="macro">CIST_YPCALL</a> | <a href="../h_src/57648404.htm" class="macro">CIST_FIN</a> | <a href="../h_src/57648268.htm" class="macro">CIST_TRAN</a> | <a href="../h_src/57648132.htm" class="macro">CIST_CLSRET</a>)));
<a id=494></a>  <a href="../h_src/57869932.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/57869796.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>;  <a  class="comments">/* back to caller (after closing variables) */</a>
}



<a id=499></a>#define <a href="../h_src/57869388.htm" class="macro">next_ci</a>(L)  (L-&gt;ci-&gt;next ? L-&gt;ci-&gt;next : luaE_extendCI(L))


<a id=502></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57869252.htm" class="function">prepCallInfo</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57869116.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57868980.htm" class="localvar">func</a>, int <a href="../h_src/57868844.htm" class="localvar">nret</a>,
<a id=503></a>                                                int <a href="../h_src/57868708.htm" class="localvar">mask</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57868572.htm" class="localvar">top</a>) {
<a id=504></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57868436.htm" class="localvar">ci</a> = <a href="../h_src/57869116.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/57869388.htm" class="macro">next_ci</a>(<a href="../h_src/57869116.htm" class="localvar">L</a>);  <a  class="comments">/* new frame */</a>
<a id=505></a>  <a href="../h_src/57868436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57868980.htm" class="localvar">func</a>;
<a id=506></a>  <a href="../h_src/57868436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649492.htm" class="variable">nresults</a> = <a href="../h_src/57868844.htm" class="localvar">nret</a>;
<a id=507></a>  <a href="../h_src/57868436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> = <a href="../h_src/57868708.htm" class="localvar">mask</a>;
<a id=508></a>  <a href="../h_src/57868436.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57868572.htm" class="localvar">top</a>;
<a id=509></a>  return <a href="../h_src/57868436.htm" class="localvar">ci</a>;
}


<a id=513></a><a  class="comments">/*</a>
<a id=514></a><a  class="comments">** precall for C functions</a>
<a id=515></a><a  class="comments">*/</a>
<a id=516></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> int <a href="../h_src/57868300.htm" class="function">precallC</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57868164.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57868028.htm" class="localvar">func</a>, int <a href="../h_src/57867892.htm" class="localvar">nresults</a>,
<a id=517></a>                                            <a href="../h_src/57441736.htm" class="type">lua_CFunction</a> <a href="../h_src/57867756.htm" class="localvar">f</a>) {
<a id=518></a>  int <a href="../h_src/57867620.htm" class="localvar">n</a>;  <a  class="comments">/* number of returns */</a>
<a id=519></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57867484.htm" class="localvar">ci</a>;
<a id=520></a>  <a href="../h_src/57633988.htm" class="macro">checkstackGCp</a>(<a href="../h_src/57868164.htm" class="localvar">L</a>, <a href="../h_src/57442688.htm" class="macro">LUA_MINSTACK</a>, <a href="../h_src/57868028.htm" class="localvar">func</a>);  <a  class="comments">/* ensure minimum stack size */</a><a href="../h_src/57642284.htm" class="variable">stack</a> size */
<a id=521></a>  <a href="../h_src/57868164.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/57867484.htm" class="localvar">ci</a> = <a href="../h_src/57869252.htm" class="function">prepCallInfo</a>(<a href="../h_src/57868164.htm" class="localvar">L</a>, <a href="../h_src/57868028.htm" class="localvar">func</a>, <a href="../h_src/57867892.htm" class="localvar">nresults</a>, <a href="../h_src/57649220.htm" class="macro">CIST_C</a>,
<a id=522></a>                               <a href="../h_src/57868164.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + <a href="../h_src/57442688.htm" class="macro">LUA_MINSTACK</a>);
<a id=523></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(ci-&gt;top.p &lt;= L-&gt;stack_last.p);
<a id=524></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57868164.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641264.htm" class="variable">hookmask</a> &amp; <a href="../h_src/57425212.htm" class="macro">LUA_MASKCALL</a>)) {
<a id=525></a>    int <a href="../h_src/57867212.htm" class="localvar">narg</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57868164.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57868028.htm" class="localvar">func</a>) - 1;
<a id=526></a>    <a href="../h_src/57633512.htm" class="function">luaD_hook</a>(<a href="../h_src/57868164.htm" class="localvar">L</a>, <a href="../h_src/57425892.htm" class="macro">LUA_HOOKCALL</a>, -1, 1, <a href="../h_src/57867212.htm" class="localvar">narg</a>);
  }
<a id=528></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=529></a>  <a href="../h_src/57867620.htm" class="localvar">n</a> = (*<a href="../h_src/57867756.htm" class="localvar">f</a>)(<a href="../h_src/57868164.htm" class="localvar">L</a>);  <a  class="comments">/* do the actual call */</a>
<a id=530></a>  <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=531></a>  <a href="../h_src/57637660.htm" class="macro">api_checknelems</a>(<a href="../h_src/57868164.htm" class="localvar">L</a>, n);
<a id=532></a>  <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/57868164.htm" class="localvar">L</a>, <a href="../h_src/57867484.htm" class="localvar">ci</a>, <a href="../h_src/57867620.htm" class="localvar">n</a>);
<a id=533></a>  return <a href="../h_src/57867620.htm" class="localvar">n</a>;
}


<a id=537></a><a  class="comments">/*</a>
<a id=538></a><a  class="comments">** Prepare a function for a tail call, building its call info on top</a>
<a id=539></a><a  class="comments">** of the current call info. 'narg1' is the number of arguments plus 1</a>
<a id=540></a><a  class="comments">** (so that it includes the function itself). Return the number of</a>
<a id=541></a><a  class="comments">** results, if it was a C function, or -1 for a Lua function.</a>
<a id=542></a><a  class="comments">*/</a>
<a id=543></a>int <a href="../h_src/57633376.htm" class="function">luaD_pretailcall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57867076.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57866940.htm" class="localvar">ci</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57866804.htm" class="localvar">func</a>,
<a id=544></a>                                    int <a href="../h_src/57866668.htm" class="localvar">narg1</a>, int <a href="../h_src/57866532.htm" class="localvar">delta</a>) {
 retry:
<a id=546></a>  switch (<a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57866804.htm" class="localvar">func</a>))) {
<a id=547></a>    case <a href="../h_src/57513352.htm" class="macro">LUA_VCCL</a>:  <a  class="comments">/* C closure */</a>
<a id=548></a>      return <a href="../h_src/57868300.htm" class="function">precallC</a>(<a href="../h_src/57867076.htm" class="localvar">L</a>, <a href="../h_src/57866804.htm" class="localvar">func</a>, <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>, <a href="../h_src/57511992.htm" class="macro">clCvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57866804.htm" class="localvar">func</a>))-&gt;<a href="../h_src/57508932.htm" class="variable">f</a>);
<a id=549></a>    case <a href="../h_src/57513488.htm" class="macro">LUA_VLCF</a>:  <a  class="comments">/* light C function */</a>
<a id=550></a>      return <a href="../h_src/57868300.htm" class="function">precallC</a>(<a href="../h_src/57867076.htm" class="localvar">L</a>, <a href="../h_src/57866804.htm" class="localvar">func</a>, <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>, <a href="../h_src/57512128.htm" class="macro">fvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57866804.htm" class="localvar">func</a>)));
<a id=551></a>    case <a href="../h_src/57513624.htm" class="macro">LUA_VLCL</a>: {  <a  class="comments">/* Lua function */</a>
<a id=552></a>      <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57866396.htm" class="localvar">p</a> = <a href="../h_src/57512264.htm" class="macro">clLvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57866804.htm" class="localvar">func</a>))-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>;
<a id=553></a>      int <a href="../h_src/57866260.htm" class="localvar">fsize</a> = <a href="../h_src/57866396.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515800.htm" class="variable">maxstacksize</a>;  <a  class="comments">/* frame size */</a>
<a id=554></a>      int <a href="../h_src/57866124.htm" class="localvar">nfixparams</a> = <a href="../h_src/57866396.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a>;
<a id=555></a>      int <a href="../h_src/57865988.htm" class="localvar">i</a>;
<a id=556></a>      <a href="../h_src/57633988.htm" class="macro">checkstackGCp</a>(<a href="../h_src/57867076.htm" class="localvar">L</a>, <a href="../h_src/57866260.htm" class="localvar">fsize</a> - <a href="../h_src/57866532.htm" class="localvar">delta</a>, <a href="../h_src/57866804.htm" class="localvar">func</a>);
<a id=557></a>      <a href="../h_src/57866940.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/57866532.htm" class="localvar">delta</a>;  <a  class="comments">/* restore 'func' (if vararg) */</a>
<a id=558></a>      for (<a href="../h_src/57865988.htm" class="localvar">i</a> = 0; <a href="../h_src/57865988.htm" class="localvar">i</a> &lt; <a href="../h_src/57866668.htm" class="localvar">narg1</a>; <a href="../h_src/57865988.htm" class="localvar">i</a>++)  <a  class="comments">/* move down function and arguments */</a>
<a id=559></a>        <a href="../h_src/57533548.htm" class="macro">setobjs2s</a>(<a href="../h_src/57867076.htm" class="localvar">L</a>, <a href="../h_src/57866940.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + <a href="../h_src/57865988.htm" class="localvar">i</a>, <a href="../h_src/57866804.htm" class="localvar">func</a> + <a href="../h_src/57865988.htm" class="localvar">i</a>);
<a id=560></a>      <a href="../h_src/57866804.htm" class="localvar">func</a> = <a href="../h_src/57866940.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;  <a  class="comments">/* moved-down function */</a>
<a id=561></a>      for (; <a href="../h_src/57866668.htm" class="localvar">narg1</a> &lt;= <a href="../h_src/57866124.htm" class="localvar">nfixparams</a>; <a href="../h_src/57866668.htm" class="localvar">narg1</a>++)
<a id=562></a>        <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57866804.htm" class="localvar">func</a> + <a href="../h_src/57866668.htm" class="localvar">narg1</a>));  <a  class="comments">/* complete missing arguments */</a>
<a id=563></a>      <a href="../h_src/57866940.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57866804.htm" class="localvar">func</a> + 1 + <a href="../h_src/57866260.htm" class="localvar">fsize</a>;  <a  class="comments">/* top for new function */</a>
<a id=564></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(ci-&gt;top.p &lt;= L-&gt;stack_last.p);
<a id=565></a>      <a href="../h_src/57866940.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a> = <a href="../h_src/57866396.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>;  <a  class="comments">/* starting point */</a>
<a id=566></a>      <a href="../h_src/57866940.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> |= <a href="../h_src/57648676.htm" class="macro">CIST_TAIL</a>;
<a id=567></a>      <a href="../h_src/57867076.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57866804.htm" class="localvar">func</a> + <a href="../h_src/57866668.htm" class="localvar">narg1</a>;  <a  class="comments">/* set top */</a>
      return -1;
    }
<a id=570></a>    default: {  <a  class="comments">/* not a function */</a>
<a id=571></a>      <a href="../h_src/57866804.htm" class="localvar">func</a> = <a href="../h_src/57633104.htm" class="function">luaD_tryfuncTM</a>(<a href="../h_src/57867076.htm" class="localvar">L</a>, <a href="../h_src/57866804.htm" class="localvar">func</a>);  <a  class="comments">/* try to get '__call' metamethod */</a>
<a id=572></a>      <a  class="comments">/* return luaD_pretailcall(L, ci, func, narg1 + 1, delta); */</a>
<a id=573></a>      <a href="../h_src/57866668.htm" class="localvar">narg1</a>++;
<a id=574></a>      goto retry;  <a  class="comments">/* try again */</a>
    }
  }
}


<a id=580></a><a  class="comments">/*</a>
<a id=581></a><a  class="comments">** Prepares the call to a function (C or Lua). For C functions, also do</a>
<a id=582></a><a  class="comments">** the call. The function to be called is at '*func'.  The arguments</a>
<a id=583></a><a  class="comments">** are on the stack, right after the function.  Returns the CallInfo</a>
<a id=584></a><a  class="comments">** to be executed, if it was a Lua function. Otherwise (a C function)</a>
<a id=585></a><a  class="comments">** returns NULL, with all the results on the stack, starting at the</a>
<a id=586></a><a  class="comments">** original function position.</a>
<a id=587></a><a  class="comments">*/</a>
<a id=588></a><a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57633308.htm" class="function">luaD_precall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57865444.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57865308.htm" class="localvar">func</a>, int <a href="../h_src/57865172.htm" class="localvar">nresults</a>) {
 retry:
<a id=590></a>  switch (<a href="../h_src/57534636.htm" class="macro">ttypetag</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57865308.htm" class="localvar">func</a>))) {
<a id=591></a>    case <a href="../h_src/57513352.htm" class="macro">LUA_VCCL</a>:  <a  class="comments">/* C closure */</a>
<a id=592></a>      <a href="../h_src/57868300.htm" class="function">precallC</a>(<a href="../h_src/57865444.htm" class="localvar">L</a>, <a href="../h_src/57865308.htm" class="localvar">func</a>, <a href="../h_src/57865172.htm" class="localvar">nresults</a>, <a href="../h_src/57511992.htm" class="macro">clCvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57865308.htm" class="localvar">func</a>))-&gt;<a href="../h_src/57508932.htm" class="variable">f</a>);
      return NULL;
<a id=594></a>    case <a href="../h_src/57513488.htm" class="macro">LUA_VLCF</a>:  <a  class="comments">/* light C function */</a>
<a id=595></a>      <a href="../h_src/57868300.htm" class="function">precallC</a>(<a href="../h_src/57865444.htm" class="localvar">L</a>, <a href="../h_src/57865308.htm" class="localvar">func</a>, <a href="../h_src/57865172.htm" class="localvar">nresults</a>, <a href="../h_src/57512128.htm" class="macro">fvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57865308.htm" class="localvar">func</a>)));
      return NULL;
<a id=597></a>    case <a href="../h_src/57513624.htm" class="macro">LUA_VLCL</a>: {  <a  class="comments">/* Lua function */</a>
<a id=598></a>      <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57865036.htm" class="localvar">ci</a>;
<a id=599></a>      <a href="../h_src/57513828.htm" class="type">Proto</a> *<a href="../h_src/57864900.htm" class="localvar">p</a> = <a href="../h_src/57512264.htm" class="macro">clLvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57865308.htm" class="localvar">func</a>))-&gt;<a href="../h_src/57508184.htm" class="variable">p</a>;
<a id=600></a>      int <a href="../h_src/57864764.htm" class="localvar">narg</a> = <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57865444.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57865308.htm" class="localvar">func</a>) - 1;  <a  class="comments">/* number of real arguments */</a>
<a id=601></a>      int <a href="../h_src/57864628.htm" class="localvar">nfixparams</a> = <a href="../h_src/57864900.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515936.htm" class="variable">numparams</a>;
<a id=602></a>      int <a href="../h_src/57864492.htm" class="localvar">fsize</a> = <a href="../h_src/57864900.htm" class="localvar">p</a>-&gt;<a href="../h_src/57515800.htm" class="variable">maxstacksize</a>;  <a  class="comments">/* frame size */</a>
<a id=603></a>      <a href="../h_src/57633988.htm" class="macro">checkstackGCp</a>(<a href="../h_src/57865444.htm" class="localvar">L</a>, <a href="../h_src/57864492.htm" class="localvar">fsize</a>, <a href="../h_src/57865308.htm" class="localvar">func</a>);
<a id=604></a>      <a href="../h_src/57865444.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/57865036.htm" class="localvar">ci</a> = <a href="../h_src/57869252.htm" class="function">prepCallInfo</a>(<a href="../h_src/57865444.htm" class="localvar">L</a>, <a href="../h_src/57865308.htm" class="localvar">func</a>, <a href="../h_src/57865172.htm" class="localvar">nresults</a>, 0, <a href="../h_src/57865308.htm" class="localvar">func</a> + 1 + <a href="../h_src/57864492.htm" class="localvar">fsize</a>);
<a id=605></a>      <a href="../h_src/57865036.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650852.htm" class="variable">l</a>.<a href="../h_src/57651124.htm" class="variable">savedpc</a> = <a href="../h_src/57864900.htm" class="localvar">p</a>-&gt;<a href="../h_src/57514916.htm" class="variable">code</a>;  <a  class="comments">/* starting point */</a>
<a id=606></a>      for (; <a href="../h_src/57864764.htm" class="localvar">narg</a> &lt; <a href="../h_src/57864628.htm" class="localvar">nfixparams</a>; <a href="../h_src/57864764.htm" class="localvar">narg</a>++)
<a id=607></a>        <a href="../h_src/57530896.htm" class="macro">setnilvalue</a>(<a href="../h_src/57531712.htm" class="macro">s2v</a>(<a href="../h_src/57865444.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>++));  <a  class="comments">/* complete missing arguments */</a>
<a id=608></a>      <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(ci-&gt;top.p &lt;= L-&gt;stack_last.p);
<a id=609></a>      return <a href="../h_src/57865036.htm" class="localvar">ci</a>;
    }
<a id=611></a>    default: {  <a  class="comments">/* not a function */</a>
<a id=612></a>      <a href="../h_src/57865308.htm" class="localvar">func</a> = <a href="../h_src/57633104.htm" class="function">luaD_tryfuncTM</a>(<a href="../h_src/57865444.htm" class="localvar">L</a>, <a href="../h_src/57865308.htm" class="localvar">func</a>);  <a  class="comments">/* try to get '__call' metamethod */</a>
<a id=613></a>      <a  class="comments">/* return luaD_precall(L, func, nresults); */</a>
<a id=614></a>      goto retry;  <a  class="comments">/* try again with metamethod */</a>
    }
  }
}


<a id=620></a><a  class="comments">/*</a>
<a id=621></a><a  class="comments">** Call a function (C or Lua) through C. 'inc' can be 1 (increment</a>
<a id=622></a><a  class="comments">** number of recursive invocations in the C stack) or nyci (the same</a>
<a id=623></a><a  class="comments">** plus increment number of non-yieldable calls).</a>
<a id=624></a><a  class="comments">** This function can be called with some use of EXTRA_STACK, so it should</a>
<a id=625></a><a  class="comments">** check the stack before doing anything else. 'luaD_precall' already</a>
<a id=626></a><a  class="comments">** does that.</a>
<a id=627></a><a  class="comments">*/</a>
<a id=628></a><a href="../h_src/57545312.htm" class="macro">l_sinline</a> void <a href="../h_src/57864220.htm" class="function">ccall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57864084.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57863948.htm" class="localvar">func</a>, int <a href="../h_src/57863812.htm" class="localvar">nResults</a>, <a href="../h_src/57545176.htm" class="type">l_uint32</a> <a href="../h_src/57863676.htm" class="localvar">inc</a>) {
<a id=629></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57863540.htm" class="localvar">ci</a>;
<a id=630></a>  <a href="../h_src/57864084.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641536.htm" class="variable">nCcalls</a> += <a href="../h_src/57863676.htm" class="localvar">inc</a>;
<a id=631></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57653640.htm" class="macro">getCcalls</a>(<a href="../h_src/57864084.htm" class="localvar">L</a>) &gt;= <a href="../h_src/57543680.htm" class="macro">LUAI_MAXCCALLS</a>)) {
<a id=632></a>    <a href="../h_src/57634124.htm" class="macro">checkstackp</a>(<a href="../h_src/57864084.htm" class="localvar">L</a>, 0, <a href="../h_src/57863948.htm" class="localvar">func</a>);  <a  class="comments">/* free any use of EXTRA_STACK */</a>
<a id=633></a>    <a href="../h_src/57638272.htm" class="function">luaE_checkcstack</a>(<a href="../h_src/57864084.htm" class="localvar">L</a>);
  }
<a id=635></a>  if ((<a href="../h_src/57863540.htm" class="localvar">ci</a> = <a href="../h_src/57633308.htm" class="function">luaD_precall</a>(<a href="../h_src/57864084.htm" class="localvar">L</a>, <a href="../h_src/57863948.htm" class="localvar">func</a>, <a href="../h_src/57863812.htm" class="localvar">nResults</a>)) != NULL) {  <a  class="comments">/* Lua function? */</a>
<a id=636></a>    <a href="../h_src/57863540.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> = <a href="../h_src/57649084.htm" class="macro">CIST_FRESH</a>;  <a  class="comments">/* mark that it is a &quot;fresh&quot; execute */</a>
<a id=637></a>    <a href="../h_src/57610936.htm" class="function">luaV_execute</a>(<a href="../h_src/57864084.htm" class="localvar">L</a>, <a href="../h_src/57863540.htm" class="localvar">ci</a>);  <a  class="comments">/* call it */</a>
  }
<a id=639></a>  <a href="../h_src/57864084.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641536.htm" class="variable">nCcalls</a> -= <a href="../h_src/57863676.htm" class="localvar">inc</a>;
}


<a id=643></a><a  class="comments">/*</a>
<a id=644></a><a  class="comments">** External interface for 'ccall'</a>
<a id=645></a><a  class="comments">*/</a>
<a id=646></a>void <a href="../h_src/57633240.htm" class="function">luaD_call</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57863268.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57863132.htm" class="localvar">func</a>, int <a href="../h_src/57862996.htm" class="localvar">nResults</a>) {
<a id=647></a>  <a href="../h_src/57864220.htm" class="function">ccall</a>(<a href="../h_src/57863268.htm" class="localvar">L</a>, <a href="../h_src/57863132.htm" class="localvar">func</a>, <a href="../h_src/57862996.htm" class="localvar">nResults</a>, 1);
}


<a id=651></a><a  class="comments">/*</a>
<a id=652></a><a  class="comments">** Similar to 'luaD_call', but does not allow yields during the call.</a>
<a id=653></a><a  class="comments">*/</a>
<a id=654></a>void <a href="../h_src/57633172.htm" class="function">luaD_callnoyield</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57862860.htm" class="localvar">L</a>, <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57862724.htm" class="localvar">func</a>, int <a href="../h_src/57862588.htm" class="localvar">nResults</a>) {
<a id=655></a>  <a href="../h_src/57864220.htm" class="function">ccall</a>(<a href="../h_src/57862860.htm" class="localvar">L</a>, <a href="../h_src/57862724.htm" class="localvar">func</a>, <a href="../h_src/57862588.htm" class="localvar">nResults</a>, <a href="../h_src/57653232.htm" class="macro">nyci</a>);
}


<a id=659></a><a  class="comments">/*</a>
<a id=660></a><a  class="comments">** Finish the job of 'lua_pcallk' after it was interrupted by an yield.</a>
<a id=661></a><a  class="comments">** (The caller, 'finishCcall', does the final call to 'adjustresults'.)</a>
<a id=662></a><a  class="comments">** The main job is to complete the 'luaD_pcall' called by 'lua_pcallk'.</a>
<a id=663></a><a  class="comments">** If a '__close' method yields here, eventually control will be back</a>
<a id=664></a><a  class="comments">** to 'finishCcall' (when that '__close' method finally returns) and</a>
<a id=665></a><a  class="comments">** 'finishpcallk' will run again and close any still pending '__close'</a>
<a id=666></a><a  class="comments">** methods. Similarly, if a '__close' method errs, 'precover' calls</a>
<a id=667></a><a  class="comments">** 'unroll' which calls ''finishCcall' and we are back here again, to</a>
<a id=668></a><a  class="comments">** close any pending '__close' methods.</a>
<a id=669></a><a  class="comments">** Note that, up to the call to 'luaF_close', the corresponding</a>
<a id=670></a><a  class="comments">** 'CallInfo' is not modified, so that this repeated run works like the</a>
<a id=671></a><a  class="comments">** first one (except that it has at least one less '__close' to do). In</a>
<a id=672></a><a  class="comments">** particular, field CIST_RECST preserves the error status across these</a>
<a id=673></a><a  class="comments">** multiple runs, changing only if there is a new error.</a>
<a id=674></a><a  class="comments">*/</a>
<a id=675></a>static int <a href="../h_src/57862452.htm" class="function">finishpcallk</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57862316.htm" class="localvar">L</a>,  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57862180.htm" class="localvar">ci</a>) {
<a id=676></a>  int <a href="../h_src/57862044.htm" class="localvar">status</a> = <a href="../h_src/57647724.htm" class="macro">getcistrecst</a>(<a href="../h_src/57862180.htm" class="localvar">ci</a>);  <a  class="comments">/* get original status */</a>
<a id=677></a>  if (<a href="../h_src/57551704.htm" class="macro">l_likely</a>(<a href="../h_src/57862044.htm" class="localvar">status</a> == <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>))  <a  class="comments">/* no error? */</a>
<a id=678></a>    <a href="../h_src/57862044.htm" class="localvar">status</a> = <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>;  <a  class="comments">/* was interrupted by an yield */</a>
<a id=679></a>  else {  <a  class="comments">/* error */</a>
<a id=680></a>    <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57861908.htm" class="localvar">func</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57862316.htm" class="localvar">L</a>, <a href="../h_src/57862180.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650172.htm" class="variable">funcidx</a>);
<a id=681></a>    <a href="../h_src/57862316.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a> = <a href="../h_src/57647044.htm" class="macro">getoah</a>(<a href="../h_src/57862180.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a>);  <a  class="comments">/* restore 'allowhook' */</a>
<a id=682></a>    <a href="../h_src/57861908.htm" class="localvar">func</a> = <a href="../h_src/57630384.htm" class="function">luaF_close</a>(<a href="../h_src/57862316.htm" class="localvar">L</a>, <a href="../h_src/57861908.htm" class="localvar">func</a>, <a href="../h_src/57862044.htm" class="localvar">status</a>, 1);  <a  class="comments">/* can yield or raise an error */</a>
<a id=683></a>    <a href="../h_src/57633648.htm" class="function">luaD_seterrorobj</a>(<a href="../h_src/57862316.htm" class="localvar">L</a>, <a href="../h_src/57862044.htm" class="localvar">status</a>, <a href="../h_src/57861908.htm" class="localvar">func</a>);
<a id=684></a>    <a href="../h_src/57632696.htm" class="function">luaD_shrinkstack</a>(<a href="../h_src/57862316.htm" class="localvar">L</a>);   <a  class="comments">/* restore stack size in case of overflow */</a>
<a id=685></a>    <a href="../h_src/57647588.htm" class="macro">setcistrecst</a>(<a href="../h_src/57862180.htm" class="localvar">ci</a>, <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>);  <a  class="comments">/* clear original status */</a>
  }
<a id=687></a>  <a href="../h_src/57862180.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp;= ~<a href="../h_src/57648812.htm" class="macro">CIST_YPCALL</a>;
<a id=688></a>  <a href="../h_src/57862316.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641604.htm" class="variable">errfunc</a> = <a href="../h_src/57862180.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650648.htm" class="variable">old_errfunc</a>;
<a id=689></a>  <a  class="comments">/* if it is here, there were errors or yields; unlike 'lua_pcallk',</a>
<a id=690></a><a  class="comments">     do not change status */</a>
<a id=691></a>  return <a href="../h_src/57862044.htm" class="localvar">status</a>;
}


<a id=695></a><a  class="comments">/*</a>
<a id=696></a><a  class="comments">** Completes the execution of a C function interrupted by an yield.</a>
<a id=697></a><a  class="comments">** The interruption must have happened while the function was either</a>
<a id=698></a><a  class="comments">** closing its tbc variables in 'moveresults' or executing</a>
<a id=699></a><a  class="comments">** 'lua_callk'/'lua_pcallk'. In the first case, it just redoes</a>
<a id=700></a><a  class="comments">** 'luaD_poscall'. In the second case, the call to 'finishpcallk'</a>
<a id=701></a><a  class="comments">** finishes the interrupted execution of 'lua_pcallk'.  After that, it</a>
<a id=702></a><a  class="comments">** calls the continuation of the interrupted function and finally it</a>
<a id=703></a><a  class="comments">** completes the job of the 'luaD_call' that called the function.  In</a>
<a id=704></a><a  class="comments">** the call to 'adjustresults', we do not know the number of results</a>
<a id=705></a><a  class="comments">** of the function called by 'lua_callk'/'lua_pcallk', so we are</a>
<a id=706></a><a  class="comments">** conservative and use LUA_MULTRET (always adjust).</a>
<a id=707></a><a  class="comments">*/</a>
<a id=708></a>static void <a href="../h_src/57861772.htm" class="function">finishCcall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57861636.htm" class="localvar">L</a>, <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57861500.htm" class="localvar">ci</a>) {
<a id=709></a>  int <a href="../h_src/57861364.htm" class="localvar">n</a>;  <a  class="comments">/* actual number of results from C function */</a>
<a id=710></a>  if (<a href="../h_src/57861500.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648132.htm" class="macro">CIST_CLSRET</a>) {  <a  class="comments">/* was returning? */</a>
<a id=711></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(<a href="../h_src/57637524.htm" class="macro">hastocloseCfunc</a>(ci-&gt;nresults));
<a id=712></a>    <a href="../h_src/57861364.htm" class="localvar">n</a> = <a href="../h_src/57861500.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650036.htm" class="variable">nres</a>;  <a  class="comments">/* just redo 'luaD_poscall' */</a>
<a id=713></a>    <a  class="comments">/* don't need to reset CIST_CLSRET, as it will be set again anyway */</a>
  }
  else {
<a id=716></a>    int <a href="../h_src/57861228.htm" class="localvar">status</a> = <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>;  <a  class="comments">/* default if there were no errors */</a>
<a id=717></a>    <a  class="comments">/* must have a continuation and must be able to call it */</a>
<a id=718></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(ci-&gt;u.c.k != NULL &amp;&amp; <a href="../h_src/57653776.htm" class="macro">yieldable</a>(L));
<a id=719></a>    if (<a href="../h_src/57861500.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648812.htm" class="macro">CIST_YPCALL</a>)   <a  class="comments">/* was inside a 'lua_pcallk'? */</a>
<a id=720></a>      <a href="../h_src/57861228.htm" class="localvar">status</a> = <a href="../h_src/57862452.htm" class="function">finishpcallk</a>(<a href="../h_src/57861636.htm" class="localvar">L</a>, <a href="../h_src/57861500.htm" class="localvar">ci</a>);  <a  class="comments">/* finish it */</a>
<a id=721></a>    <a href="../h_src/57637796.htm" class="macro">adjustresults</a>(<a href="../h_src/57861636.htm" class="localvar">L</a>, <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>);  <a  class="comments">/* finish 'lua_callk' */</a>
<a id=722></a>    <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=723></a>    <a href="../h_src/57861364.htm" class="localvar">n</a> = (*<a href="../h_src/57861500.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650716.htm" class="variable">k</a>)(<a href="../h_src/57861636.htm" class="localvar">L</a>, <a href="../h_src/57861228.htm" class="localvar">status</a>, <a href="../h_src/57861500.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650580.htm" class="variable">ctx</a>);  <a  class="comments">/* call continuation */</a>
<a id=724></a>    <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=725></a>    <a href="../h_src/57637660.htm" class="macro">api_checknelems</a>(<a href="../h_src/57861636.htm" class="localvar">L</a>, n);
  }
<a id=727></a>  <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/57861636.htm" class="localvar">L</a>, <a href="../h_src/57861500.htm" class="localvar">ci</a>, <a href="../h_src/57861364.htm" class="localvar">n</a>);  <a  class="comments">/* finish 'luaD_call' */</a>
}


<a id=731></a><a  class="comments">/*</a>
<a id=732></a><a  class="comments">** Executes &quot;full continuation&quot; (everything in the stack) of a</a>
<a id=733></a><a  class="comments">** previously interrupted coroutine until the stack is empty (or another</a>
<a id=734></a><a  class="comments">** interruption long-jumps out of the loop).</a>
<a id=735></a><a  class="comments">*/</a>
<a id=736></a>static void <a href="../h_src/57861092.htm" class="function">unroll</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57860956.htm" class="localvar">L</a>, void *<a href="../h_src/57860820.htm" class="localvar">ud</a>) {
<a id=737></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57860684.htm" class="localvar">ci</a>;
<a id=738></a>  <a href="../h_src/57547896.htm" class="macro">UNUSED</a>(<a href="../h_src/57860820.htm" class="localvar">ud</a>);
<a id=739></a>  while ((<a href="../h_src/57860684.htm" class="localvar">ci</a> = <a href="../h_src/57860956.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>) != &amp;<a href="../h_src/57860956.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641740.htm" class="variable">base_ci</a>) {  <a  class="comments">/* something in the stack */</a>
<a id=740></a>    if (!<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57860684.htm" class="localvar">ci</a>))  <a  class="comments">/* C function? */</a>
<a id=741></a>      <a href="../h_src/57861772.htm" class="function">finishCcall</a>(<a href="../h_src/57860956.htm" class="localvar">L</a>, <a href="../h_src/57860684.htm" class="localvar">ci</a>);  <a  class="comments">/* complete its execution */</a>
<a id=742></a>    else {  <a  class="comments">/* Lua function */</a>
<a id=743></a>      <a href="../h_src/57611004.htm" class="function">luaV_finishOp</a>(<a href="../h_src/57860956.htm" class="localvar">L</a>);  <a  class="comments">/* finish interrupted instruction */</a>
<a id=744></a>      <a href="../h_src/57610936.htm" class="function">luaV_execute</a>(<a href="../h_src/57860956.htm" class="localvar">L</a>, <a href="../h_src/57860684.htm" class="localvar">ci</a>);  <a  class="comments">/* execute down to higher C 'boundary' */</a>
    }
  }
}


<a id=750></a><a  class="comments">/*</a>
<a id=751></a><a  class="comments">** Try to find a suspended protected call (a &quot;recover point&quot;) for the</a>
<a id=752></a><a  class="comments">** given thread.</a>
<a id=753></a><a  class="comments">*/</a>
<a id=754></a>static <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57860548.htm" class="function">findpcall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57860412.htm" class="localvar">L</a>) {
<a id=755></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57860276.htm" class="localvar">ci</a>;
<a id=756></a>  for (<a href="../h_src/57860276.htm" class="localvar">ci</a> = <a href="../h_src/57860412.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>; <a href="../h_src/57860276.htm" class="localvar">ci</a> != NULL; <a href="../h_src/57860276.htm" class="localvar">ci</a> = <a href="../h_src/57860276.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57651396.htm" class="variable">previous</a>) {  <a  class="comments">/* search for a pcall */</a>
<a id=757></a>    if (<a href="../h_src/57860276.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649424.htm" class="variable">callstatus</a> &amp; <a href="../h_src/57648812.htm" class="macro">CIST_YPCALL</a>)
<a id=758></a>      return <a href="../h_src/57860276.htm" class="localvar">ci</a>;
  }
<a id=760></a>  return NULL;  <a  class="comments">/* no pending pcall */</a>
}


<a id=764></a><a  class="comments">/*</a>
<a id=765></a><a  class="comments">** Signal an error in the call to 'lua_resume', not in the execution</a>
<a id=766></a><a  class="comments">** of the coroutine itself. (Such errors should not be handled by any</a>
<a id=767></a><a  class="comments">** coroutine error handler and should not kill the coroutine.)</a>
<a id=768></a><a  class="comments">*/</a>
<a id=769></a>static int <a href="../h_src/57860140.htm" class="function">resume_error</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57860004.htm" class="localvar">L</a>, const char *<a href="../h_src/57859868.htm" class="localvar">msg</a>, int <a href="../h_src/57859732.htm" class="localvar">narg</a>) {
<a id=770></a>  <a href="../h_src/57860004.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> -= <a href="../h_src/57859732.htm" class="localvar">narg</a>;  <a  class="comments">/* remove args from the stack */</a>
<a id=771></a>  <a href="../h_src/57524096.htm" class="macro">setsvalue2s</a>(<a href="../h_src/57860004.htm" class="localvar">L</a>, <a href="../h_src/57860004.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>, <a href="../h_src/57618484.htm" class="function">luaS_new</a>(<a href="../h_src/57860004.htm" class="localvar">L</a>, <a href="../h_src/57859868.htm" class="localvar">msg</a>));  <a  class="comments">/* push error message */</a>
<a id=772></a>  <a href="../h_src/57637932.htm" class="macro">api_incr_top</a>(<a href="../h_src/57860004.htm" class="localvar">L</a>);
<a id=773></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=774></a>  return <a href="../h_src/57444932.htm" class="macro">LUA_ERRRUN</a>;
}


<a id=778></a><a  class="comments">/*</a>
<a id=779></a><a  class="comments">** Do the work for 'lua_resume' in protected mode. Most of the work</a>
<a id=780></a><a  class="comments">** depends on the status of the coroutine: initial state, suspended</a>
<a id=781></a><a  class="comments">** inside a hook, or regularly suspended (optionally with a continuation</a>
<a id=782></a><a  class="comments">** function), plus erroneous cases: non-suspended coroutine or dead</a>
<a id=783></a><a  class="comments">** coroutine.</a>
<a id=784></a><a  class="comments">*/</a>
<a id=785></a>static void <a href="../h_src/57859324.htm" class="function">resume</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57859188.htm" class="localvar">L</a>, void *<a href="../h_src/57859052.htm" class="localvar">ud</a>) {
<a id=786></a>  int <a href="../h_src/57858916.htm" class="localvar">n</a> = *(<a href="../h_src/57547760.htm" class="macro">cast</a>(int*, <a href="../h_src/57859052.htm" class="localvar">ud</a>));  <a  class="comments">/* number of arguments */</a>
<a id=787></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57858780.htm" class="localvar">firstArg</a> = <a href="../h_src/57859188.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - <a href="../h_src/57858916.htm" class="localvar">n</a>;  <a  class="comments">/* first argument */</a>
<a id=788></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57858644.htm" class="localvar">ci</a> = <a href="../h_src/57859188.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=789></a>  if (<a href="../h_src/57859188.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642828.htm" class="variable">status</a> == <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>)  <a  class="comments">/* starting a coroutine? */</a>
<a id=790></a>    <a href="../h_src/57864220.htm" class="function">ccall</a>(<a href="../h_src/57859188.htm" class="localvar">L</a>, <a href="../h_src/57858780.htm" class="localvar">firstArg</a> - 1, <a href="../h_src/57445612.htm" class="macro">LUA_MULTRET</a>, 0);  <a  class="comments">/* just call its body */</a>
<a id=791></a>  else {  <a  class="comments">/* resuming from previous yield */</a>
<a id=792></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(L-&gt;status == <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>);
<a id=793></a>    <a href="../h_src/57859188.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642828.htm" class="variable">status</a> = <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>;  <a  class="comments">/* mark that it is running (again) */</a>
<a id=794></a>    if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57858644.htm" class="localvar">ci</a>)) {  <a  class="comments">/* yielded inside a hook? */</a>
<a id=795></a>      <a href="../h_src/57859188.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57858780.htm" class="localvar">firstArg</a>;  <a  class="comments">/* discard arguments */</a>
<a id=796></a>      <a href="../h_src/57610936.htm" class="function">luaV_execute</a>(<a href="../h_src/57859188.htm" class="localvar">L</a>, <a href="../h_src/57858644.htm" class="localvar">ci</a>);  <a  class="comments">/* just continue running Lua code */</a>
    }
<a id=798></a>    else {  <a  class="comments">/* 'common' yield */</a>
<a id=799></a>      if (<a href="../h_src/57858644.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650716.htm" class="variable">k</a> != NULL) {  <a  class="comments">/* does it have a continuation function? */</a>
<a id=800></a>        <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=801></a>        <a href="../h_src/57858916.htm" class="localvar">n</a> = (*<a href="../h_src/57858644.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650716.htm" class="variable">k</a>)(<a href="../h_src/57859188.htm" class="localvar">L</a>, <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>, <a href="../h_src/57858644.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650580.htm" class="variable">ctx</a>); <a  class="comments">/* call continuation */</a>
<a id=802></a>        <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=803></a>        <a href="../h_src/57637660.htm" class="macro">api_checknelems</a>(<a href="../h_src/57859188.htm" class="localvar">L</a>, n);
      }
<a id=805></a>      <a href="../h_src/57632900.htm" class="function">luaD_poscall</a>(<a href="../h_src/57859188.htm" class="localvar">L</a>, <a href="../h_src/57858644.htm" class="localvar">ci</a>, <a href="../h_src/57858916.htm" class="localvar">n</a>);  <a  class="comments">/* finish 'luaD_call' */</a>
    }
<a id=807></a>    <a href="../h_src/57861092.htm" class="function">unroll</a>(<a href="../h_src/57859188.htm" class="localvar">L</a>, NULL);  <a  class="comments">/* run continuation */</a>
  }
}


<a id=812></a><a  class="comments">/*</a>
<a id=813></a><a  class="comments">** Unrolls a coroutine in protected mode while there are recoverable</a>
<a id=814></a><a  class="comments">** errors, that is, errors inside a protected call. (Any error</a>
<a id=815></a><a  class="comments">** interrupts 'unroll', and this loop protects it again so it can</a>
<a id=816></a><a  class="comments">** continue.) Stops with a normal end (status == LUA_OK), an yield</a>
<a id=817></a><a  class="comments">** (status == LUA_YIELD), or an unprotected error ('findpcall' doesn't</a>
<a id=818></a><a  class="comments">** find a recover point).</a>
<a id=819></a><a  class="comments">*/</a>
<a id=820></a>static int <a href="../h_src/57858508.htm" class="function">precover</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57858372.htm" class="localvar">L</a>, int <a href="../h_src/57858236.htm" class="localvar">status</a>) {
<a id=821></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57858100.htm" class="localvar">ci</a>;
<a id=822></a>  while (<a href="../h_src/57884144.htm" class="macro">errorstatus</a>(<a href="../h_src/57858236.htm" class="localvar">status</a>) &amp;&amp; (<a href="../h_src/57858100.htm" class="localvar">ci</a> = <a href="../h_src/57860548.htm" class="function">findpcall</a>(<a href="../h_src/57858372.htm" class="localvar">L</a>)) != NULL) {
<a id=823></a>    <a href="../h_src/57858372.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/57858100.htm" class="localvar">ci</a>;  <a  class="comments">/* go down to recovery functions */</a>
<a id=824></a>    <a href="../h_src/57647588.htm" class="macro">setcistrecst</a>(<a href="../h_src/57858100.htm" class="localvar">ci</a>, <a href="../h_src/57858236.htm" class="localvar">status</a>);  <a  class="comments">/* status to finish 'pcall' */</a>
<a id=825></a>    <a href="../h_src/57858236.htm" class="localvar">status</a> = <a href="../h_src/57632492.htm" class="function">luaD_rawrunprotected</a>(<a href="../h_src/57858372.htm" class="localvar">L</a>, <a href="../h_src/57861092.htm" class="function">unroll</a>, NULL);
  }
<a id=827></a>  return <a href="../h_src/57858236.htm" class="localvar">status</a>;
}


<a id=831></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> int <a href="../h_src/57432420.htm" class="function">lua_resume</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57857964.htm" class="localvar">L</a>, <a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57857828.htm" class="localvar">from</a>, int <a href="../h_src/57857692.htm" class="localvar">nargs</a>,
<a id=832></a>                                      int *<a href="../h_src/57857556.htm" class="localvar">nresults</a>) {
<a id=833></a>  int <a href="../h_src/57857420.htm" class="localvar">status</a>;
<a id=834></a>  <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=835></a>  if (<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642828.htm" class="variable">status</a> == <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>) {  <a  class="comments">/* may be starting a coroutine */</a>
<a id=836></a>    if (<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> != &amp;<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641740.htm" class="variable">base_ci</a>)  <a  class="comments">/* not in base level? */</a>
<a id=837></a>      return <a href="../h_src/57860140.htm" class="function">resume_error</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, &quot;cannot resume non-suspended coroutine&quot;, <a href="../h_src/57857692.htm" class="localvar">nargs</a>);
<a id=838></a>    else if (<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - (<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + 1) == <a href="../h_src/57857692.htm" class="localvar">nargs</a>)  <a  class="comments">/* no function? */</a>
<a id=839></a>      return <a href="../h_src/57860140.htm" class="function">resume_error</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, &quot;cannot resume dead coroutine&quot;, <a href="../h_src/57857692.htm" class="localvar">nargs</a>);
  }
<a id=841></a>  else if (<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642828.htm" class="variable">status</a> != <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>)  <a  class="comments">/* ended with errors? */</a>
<a id=842></a>    return <a href="../h_src/57860140.htm" class="function">resume_error</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, &quot;cannot resume dead coroutine&quot;, <a href="../h_src/57857692.htm" class="localvar">nargs</a>);
<a id=843></a>  <a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641536.htm" class="variable">nCcalls</a> = (<a href="../h_src/57857828.htm" class="localvar">from</a>) ? <a href="../h_src/57653640.htm" class="macro">getCcalls</a>(<a href="../h_src/57857828.htm" class="localvar">from</a>) : 0;
<a id=844></a>  if (<a href="../h_src/57653640.htm" class="macro">getCcalls</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>) &gt;= <a href="../h_src/57543680.htm" class="macro">LUAI_MAXCCALLS</a>)
<a id=845></a>    return <a href="../h_src/57860140.htm" class="function">resume_error</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, &quot;C stack overflow&quot;, <a href="../h_src/57857692.htm" class="localvar">nargs</a>);
<a id=846></a>  <a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641536.htm" class="variable">nCcalls</a>++;
<a id=847></a>  <a href="../h_src/57541640.htm" class="macro">luai_userstateresume</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, nargs);
<a id=848></a>  <a href="../h_src/57637660.htm" class="macro">api_checknelems</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, (L-&gt;status == <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>) ? nargs + 1 : nargs);
<a id=849></a>  <a href="../h_src/57857420.htm" class="localvar">status</a> = <a href="../h_src/57632492.htm" class="function">luaD_rawrunprotected</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, <a href="../h_src/57859324.htm" class="function">resume</a>, &amp;<a href="../h_src/57857692.htm" class="localvar">nargs</a>);
<a id=850></a>   <a  class="comments">/* continue running after recoverable errors */</a>
<a id=851></a>  <a href="../h_src/57857420.htm" class="localvar">status</a> = <a href="../h_src/57858508.htm" class="function">precover</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, <a href="../h_src/57857420.htm" class="localvar">status</a>);
<a id=852></a>  if (<a href="../h_src/57551704.htm" class="macro">l_likely</a>(!<a href="../h_src/57884144.htm" class="macro">errorstatus</a>(<a href="../h_src/57857420.htm" class="localvar">status</a>)))
<a id=853></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(status == L-&gt;status);  <a  class="comments">/* normal end or yield */</a>
<a id=854></a>  else {  <a  class="comments">/* unrecoverable error */</a>
<a id=855></a>    <a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642828.htm" class="variable">status</a> = <a href="../h_src/57546944.htm" class="macro">cast_byte</a>(<a href="../h_src/57857420.htm" class="localvar">status</a>);  <a  class="comments">/* mark thread as 'dead' */</a>
<a id=856></a>    <a href="../h_src/57633648.htm" class="function">luaD_seterrorobj</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>, <a href="../h_src/57857420.htm" class="localvar">status</a>, <a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>);  <a  class="comments">/* push error message */</a>
<a id=857></a>    <a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57651464.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> = <a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>;
  }
<a id=859></a>  *<a href="../h_src/57857556.htm" class="localvar">nresults</a> = (<a href="../h_src/57857420.htm" class="localvar">status</a> == <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>) ? <a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650104.htm" class="variable">nyield</a>
<a id=860></a>                                    : <a href="../h_src/57547216.htm" class="macro">cast_int</a>(<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a> - (<a href="../h_src/57857964.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>-&gt;<a href="../h_src/57651532.htm" class="variable">func</a>.<a href="../h_src/57531984.htm" class="variable">p</a> + 1));
<a id=861></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=862></a>  return <a href="../h_src/57857420.htm" class="localvar">status</a>;
}


<a id=866></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> int <a href="../h_src/57432284.htm" class="function">lua_isyieldable</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57857284.htm" class="localvar">L</a>) {
<a id=867></a>  return <a href="../h_src/57653776.htm" class="macro">yieldable</a>(<a href="../h_src/57857284.htm" class="localvar">L</a>);
}


<a id=871></a><a href="../h_src/57551840.htm" class="macro">LUA_API</a> int <a href="../h_src/57432488.htm" class="function">lua_yieldk</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57857148.htm" class="localvar">L</a>, int <a href="../h_src/57857012.htm" class="localvar">nresults</a>, <a href="../h_src/57441940.htm" class="type">lua_KContext</a> <a href="../h_src/57856876.htm" class="localvar">ctx</a>,
<a id=872></a>                        <a href="../h_src/57441464.htm" class="type">lua_KFunction</a> <a href="../h_src/57856740.htm" class="localvar">k</a>) {
<a id=873></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57856604.htm" class="localvar">ci</a>;
<a id=874></a>  <a href="../h_src/57541368.htm" class="macro">luai_userstateyield</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>, nresults);
<a id=875></a>  <a href="../h_src/57543408.htm" class="macro">lua_lock</a>(L);
<a id=876></a>  <a href="../h_src/57856604.htm" class="localvar">ci</a> = <a href="../h_src/57857148.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=877></a>  <a href="../h_src/57637660.htm" class="macro">api_checknelems</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>, nresults);
<a id=878></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(!<a href="../h_src/57653776.htm" class="macro">yieldable</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>))) {
<a id=879></a>    if (<a href="../h_src/57857148.htm" class="localvar">L</a> != <a href="../h_src/57641196.htm" class="macro">G</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>)-&gt;<a href="../h_src/57643848.htm" class="variable">mainthread</a>)
<a id=880></a>      <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>, &quot;attempt to yield across a C-call boundary&quot;);
    else
<a id=882></a>      <a href="../h_src/57635280.htm" class="function">luaG_runerror</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>, &quot;attempt to yield from outside a coroutine&quot;);
  }
<a id=884></a>  <a href="../h_src/57857148.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642828.htm" class="variable">status</a> = <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>;
<a id=885></a>  <a href="../h_src/57856604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57649560.htm" class="variable">u2</a>.<a href="../h_src/57650104.htm" class="variable">nyield</a> = <a href="../h_src/57857012.htm" class="localvar">nresults</a>;  <a  class="comments">/* save number of results */</a>
<a id=886></a>  if (<a href="../h_src/57647452.htm" class="macro">isLua</a>(<a href="../h_src/57856604.htm" class="localvar">ci</a>)) {  <a  class="comments">/* inside a hook? */</a>
<a id=887></a>    <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(!<a href="../h_src/57647316.htm" class="macro">isLuacode</a>(ci));
<a id=888></a>    <a href="../h_src/57548168.htm" class="macro">api_check</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>, nresults == 0, &quot;hooks cannot yield values&quot;);
<a id=889></a>    <a href="../h_src/57548168.htm" class="macro">api_check</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>, k == NULL, &quot;hooks cannot continue after yielding&quot;);
  }
  else {
<a id=892></a>    if ((<a href="../h_src/57856604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650716.htm" class="variable">k</a> = <a href="../h_src/57856740.htm" class="localvar">k</a>) != NULL)  <a  class="comments">/* is there a continuation? */</a>
<a id=893></a>      <a href="../h_src/57856604.htm" class="localvar">ci</a>-&gt;<a href="../h_src/57650308.htm" class="variable">u</a>.<a href="../h_src/57650444.htm" class="variable">c</a>.<a href="../h_src/57650580.htm" class="variable">ctx</a> = <a href="../h_src/57856876.htm" class="localvar">ctx</a>;  <a  class="comments">/* save context */</a>
<a id=894></a>    <a href="../h_src/57632560.htm" class="function">luaD_throw</a>(<a href="../h_src/57857148.htm" class="localvar">L</a>, <a href="../h_src/57445068.htm" class="macro">LUA_YIELD</a>);
  }
<a id=896></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(ci-&gt;callstatus &amp; <a href="../h_src/57648948.htm" class="macro">CIST_HOOKED</a>);  <a  class="comments">/* must be inside a hook */</a>
<a id=897></a>  <a href="../h_src/57543272.htm" class="macro">lua_unlock</a>(L);
<a id=898></a>  return 0;  <a  class="comments">/* return to 'luaD_hook' */</a>
}


<a id=902></a><a  class="comments">/*</a>
<a id=903></a><a  class="comments">** Auxiliary structure to call 'luaF_close' in protected mode.</a>
<a id=904></a><a  class="comments">*/</a>
<a id=905></a>struct <a href="../h_src/57856468.htm" class="class">CloseP</a> {
<a id=906></a>  <a href="../h_src/57532188.htm" class="type">StkId</a> <a href="../h_src/57856332.htm" class="variable">level</a>;
<a id=907></a>  int <a href="../h_src/57856264.htm" class="variable">status</a>;
};


<a id=911></a><a  class="comments">/*</a>
<a id=912></a><a  class="comments">** Auxiliary function to call 'luaF_close' in protected mode.</a>
<a id=913></a><a  class="comments">*/</a>
<a id=914></a>static void <a href="../h_src/57856196.htm" class="function">closepaux</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57856060.htm" class="localvar">L</a>, void *<a href="../h_src/57855924.htm" class="localvar">ud</a>) {
<a id=915></a>  struct <a href="../h_src/57856468.htm" class="class">CloseP</a> *<a href="../h_src/57855652.htm" class="localvar">pcl</a> = <a href="../h_src/57547760.htm" class="macro">cast</a>(struct <a href="../h_src/57856468.htm" class="class">CloseP</a> *, <a href="../h_src/57855924.htm" class="localvar">ud</a>);
<a id=916></a>  <a href="../h_src/57630384.htm" class="function">luaF_close</a>(<a href="../h_src/57856060.htm" class="localvar">L</a>, <a href="../h_src/57855652.htm" class="localvar">pcl</a>-&gt;<a href="../h_src/57856332.htm" class="variable">level</a>, <a href="../h_src/57855652.htm" class="localvar">pcl</a>-&gt;<a href="../h_src/57856264.htm" class="variable">status</a>, 0);
}


<a id=920></a><a  class="comments">/*</a>
<a id=921></a><a  class="comments">** Calls 'luaF_close' in protected mode. Return the original status</a>
<a id=922></a><a  class="comments">** or, in case of errors, the new status.</a>
<a id=923></a><a  class="comments">*/</a>
<a id=924></a>int <a href="../h_src/57633036.htm" class="function">luaD_closeprotected</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57855516.htm" class="localvar">L</a>, <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/57855380.htm" class="localvar">level</a>, int <a href="../h_src/57855244.htm" class="localvar">status</a>) {
<a id=925></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57855108.htm" class="localvar">old_ci</a> = <a href="../h_src/57855516.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=926></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/57854972.htm" class="localvar">old_allowhooks</a> = <a href="../h_src/57855516.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a>;
<a id=927></a>  for (;;) {  <a  class="comments">/* keep closing upvalues until no more errors */</a>
<a id=928></a>    struct <a href="../h_src/57856468.htm" class="class">CloseP</a> <a href="../h_src/57854836.htm" class="localvar">pcl</a>;
<a id=929></a>    <a href="../h_src/57854836.htm" class="localvar">pcl</a>.<a href="../h_src/57856332.htm" class="variable">level</a> = <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57855516.htm" class="localvar">L</a>, <a href="../h_src/57855380.htm" class="localvar">level</a>); <a href="../h_src/57854836.htm" class="localvar">pcl</a>.<a href="../h_src/57856264.htm" class="variable">status</a> = <a href="../h_src/57855244.htm" class="localvar">status</a>;
<a id=930></a>    <a href="../h_src/57855244.htm" class="localvar">status</a> = <a href="../h_src/57632492.htm" class="function">luaD_rawrunprotected</a>(<a href="../h_src/57855516.htm" class="localvar">L</a>, &amp;<a href="../h_src/57856196.htm" class="function">closepaux</a>, &amp;<a href="../h_src/57854836.htm" class="localvar">pcl</a>);
<a id=931></a>    if (<a href="../h_src/57551704.htm" class="macro">l_likely</a>(<a href="../h_src/57855244.htm" class="localvar">status</a> == <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>))  <a  class="comments">/* no more errors? */</a>
<a id=932></a>      return <a href="../h_src/57854836.htm" class="localvar">pcl</a>.<a href="../h_src/57856264.htm" class="variable">status</a>;
<a id=933></a>    else {  <a  class="comments">/* an error occurred; restore saved state and repeat */</a>
<a id=934></a>      <a href="../h_src/57855516.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/57855108.htm" class="localvar">old_ci</a>;
<a id=935></a>      <a href="../h_src/57855516.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a> = <a href="../h_src/57854972.htm" class="localvar">old_allowhooks</a>;
    }
  }
}


<a id=941></a><a  class="comments">/*</a>
<a id=942></a><a  class="comments">** Call the C function 'func' in protected mode, restoring basic</a>
<a id=943></a><a  class="comments">** thread information ('allowhook', etc.) and in particular</a>
<a id=944></a><a  class="comments">** its stack level in case of errors.</a>
<a id=945></a><a  class="comments">*/</a>
<a id=946></a>int <a href="../h_src/57632968.htm" class="function">luaD_pcall</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57854700.htm" class="localvar">L</a>, <a href="../h_src/57633716.htm" class="type">Pfunc</a> <a href="../h_src/57854564.htm" class="localvar">func</a>, void *<a href="../h_src/57854428.htm" class="localvar">u</a>,
<a id=947></a>                <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/57854292.htm" class="localvar">old_top</a>, <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/57854156.htm" class="localvar">ef</a>) {
<a id=948></a>  int <a href="../h_src/57854020.htm" class="localvar">status</a>;
<a id=949></a>  <a href="../h_src/57537764.htm" class="type">CallInfo</a> *<a href="../h_src/57853884.htm" class="localvar">old_ci</a> = <a href="../h_src/57854700.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a>;
<a id=950></a>  <a href="../h_src/57550480.htm" class="type">lu_byte</a> <a href="../h_src/57853748.htm" class="localvar">old_allowhooks</a> = <a href="../h_src/57854700.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a>;
<a id=951></a>  <a href="../h_aa/57441872.htm" class="type">ptrdiff_t</a> <a href="../h_src/57853612.htm" class="localvar">old_errfunc</a> = <a href="../h_src/57854700.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641604.htm" class="variable">errfunc</a>;
<a id=952></a>  <a href="../h_src/57854700.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641604.htm" class="variable">errfunc</a> = <a href="../h_src/57854156.htm" class="localvar">ef</a>;
<a id=953></a>  <a href="../h_src/57854020.htm" class="localvar">status</a> = <a href="../h_src/57632492.htm" class="function">luaD_rawrunprotected</a>(<a href="../h_src/57854700.htm" class="localvar">L</a>, <a href="../h_src/57854564.htm" class="localvar">func</a>, <a href="../h_src/57854428.htm" class="localvar">u</a>);
<a id=954></a>  if (<a href="../h_src/57551568.htm" class="macro">l_unlikely</a>(<a href="../h_src/57854020.htm" class="localvar">status</a> != <a href="../h_src/57445204.htm" class="macro">LUA_OK</a>)) {  <a  class="comments">/* an error occurred? */</a>
<a id=955></a>    <a href="../h_src/57854700.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642420.htm" class="variable">ci</a> = <a href="../h_src/57853884.htm" class="localvar">old_ci</a>;
<a id=956></a>    <a href="../h_src/57854700.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642760.htm" class="variable">allowhook</a> = <a href="../h_src/57853748.htm" class="localvar">old_allowhooks</a>;
<a id=957></a>    <a href="../h_src/57854020.htm" class="localvar">status</a> = <a href="../h_src/57633036.htm" class="function">luaD_closeprotected</a>(<a href="../h_src/57854700.htm" class="localvar">L</a>, <a href="../h_src/57854292.htm" class="localvar">old_top</a>, <a href="../h_src/57854020.htm" class="localvar">status</a>);
<a id=958></a>    <a href="../h_src/57633648.htm" class="function">luaD_seterrorobj</a>(<a href="../h_src/57854700.htm" class="localvar">L</a>, <a href="../h_src/57854020.htm" class="localvar">status</a>, <a href="../h_src/57634260.htm" class="macro">restorestack</a>(<a href="../h_src/57854700.htm" class="localvar">L</a>, <a href="../h_src/57854292.htm" class="localvar">old_top</a><a href="../h_src/57531984.htm" class="variable">p</a>));
<a id=959></a>    <a href="../h_src/57632696.htm" class="function">luaD_shrinkstack</a>(<a href="../h_src/57854700.htm" class="localvar">L</a>);   <a  class="comments">/* restore stack size in case of overflow */</a>
  }
<a id=961></a>  <a href="../h_src/57854700.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641604.htm" class="variable">errfunc</a> = <a href="../h_src/57853612.htm" class="localvar">old_errfunc</a>;
<a id=962></a>  return <a href="../h_src/57854020.htm" class="localvar">status</a>;
}



<a id=967></a><a  class="comments">/*</a>
<a id=968></a><a  class="comments">** Execute a protected parser.</a>
<a id=969></a><a  class="comments">*/</a>
<a id=970></a>struct <a href="../h_src/57853476.htm" class="class">SParser</a> {  <a  class="comments">/* data to 'f_parser' */</a>
<a id=971></a>  <a href="../h_src/57656088.htm" class="type">ZIO</a> *<a href="../h_src/57853340.htm" class="variable">z</a>;
<a id=972></a>  <a href="../h_src/57655544.htm" class="type">Mbuffer</a> <a href="../h_src/57853272.htm" class="variable">buff</a>;  <a  class="comments">/* dynamic structure used by the scanner */</a>
<a id=973></a>  <a href="../h_src/57676256.htm" class="type">Dyndata</a> <a href="../h_src/57853204.htm" class="variable">dyd</a>;  <a  class="comments">/* dynamic structures used by the parser */</a>
<a id=974></a>  const char *<a href="../h_src/57853136.htm" class="variable">mode</a>;
<a id=975></a>  const char *<a href="../h_src/57853068.htm" class="variable">name</a>;
};


<a id=979></a>static void <a href="../h_src/57853000.htm" class="function">checkmode</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57852864.htm" class="localvar">L</a>, const char *<a href="../h_src/57852728.htm" class="localvar">mode</a>, const char *<a href="../h_src/57852592.htm" class="localvar">x</a>) {
<a id=980></a>  if (<a href="../h_src/57852728.htm" class="localvar">mode</a> &amp;&amp; <a href="../h_aa/57565916.htm" class="libfunc">strchr</a>(<a href="../h_src/57852728.htm" class="localvar">mode</a>, <a href="../h_src/57852592.htm" class="localvar">x</a>[0]) == NULL) {
<a id=981></a>    <a href="../h_src/57501384.htm" class="function">luaO_pushfstring</a>(<a href="../h_src/57852864.htm" class="localvar">L</a>,
<a id=982></a>       &quot;attempt to load a %s chunk (mode is '%s')&quot;, <a href="../h_src/57852592.htm" class="localvar">x</a>, <a href="../h_src/57852728.htm" class="localvar">mode</a>);
<a id=983></a>    <a href="../h_src/57632560.htm" class="function">luaD_throw</a>(<a href="../h_src/57852864.htm" class="localvar">L</a>, <a href="../h_src/57444796.htm" class="macro">LUA_ERRSYNTAX</a>);
  }
}


<a id=988></a>static void <a href="../h_src/57852456.htm" class="function">f_parser</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57852320.htm" class="localvar">L</a>, void *<a href="../h_src/57852184.htm" class="localvar">ud</a>) {
<a id=989></a>  <a href="../h_src/57507980.htm" class="type">LClosure</a> *<a href="../h_src/57852048.htm" class="localvar">cl</a>;
<a id=990></a>  struct <a href="../h_src/57853476.htm" class="class">SParser</a> *<a href="../h_src/57851776.htm" class="localvar">p</a> = <a href="../h_src/57547760.htm" class="macro">cast</a>(struct <a href="../h_src/57853476.htm" class="class">SParser</a> *, <a href="../h_src/57852184.htm" class="localvar">ud</a>);
<a id=991></a>  int <a href="../h_src/57851640.htm" class="localvar">c</a> = <a href="../h_src/57656020.htm" class="macro">zgetc</a>(<a href="../h_src/57654116.htm" class="variable">p</a>-&gt;<a href="../h_src/57853340.htm" class="variable">z</a>);  <a  class="comments">/* read first character */</a>
<a id=992></a>  if (<a href="../h_src/57851640.htm" class="localvar">c</a> == <a href="../h_src/57445748.htm" class="macro">LUA_SIGNATURE</a>[0]) {
<a id=993></a>    <a href="../h_src/57853000.htm" class="function">checkmode</a>(<a href="../h_src/57852320.htm" class="localvar">L</a>, <a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853136.htm" class="variable">mode</a>, &quot;binary&quot;);
<a id=994></a>    <a href="../h_src/57852048.htm" class="localvar">cl</a> = <a href="../h_src/57614812.htm" class="function">luaU_undump</a>(<a href="../h_src/57852320.htm" class="localvar">L</a>, <a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853340.htm" class="variable">z</a>, <a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853068.htm" class="variable">name</a>);
  }
  else {
<a id=997></a>    <a href="../h_src/57853000.htm" class="function">checkmode</a>(<a href="../h_src/57852320.htm" class="localvar">L</a>, <a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853136.htm" class="variable">mode</a>, &quot;text&quot;);
<a id=998></a>    <a href="../h_src/57852048.htm" class="localvar">cl</a> = <a href="../h_src/57674420.htm" class="function">luaY_parser</a>(<a href="../h_src/57852320.htm" class="localvar">L</a>, <a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853340.htm" class="variable">z</a>, &amp;<a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853272.htm" class="variable">buff</a>, &amp;<a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853204.htm" class="variable">dyd</a>, <a href="../h_src/57851776.htm" class="localvar">p</a>-&gt;<a href="../h_src/57853068.htm" class="variable">name</a>, <a href="../h_src/57851640.htm" class="localvar">c</a>);
  }
<a id=1000></a>  <a href="../h_src/57548848.htm" class="macro">lua_assert</a>(cl-&gt;nupvalues == cl-&gt;p-&gt;sizeupvalues);
<a id=1001></a>  <a href="../h_src/57630656.htm" class="function">luaF_initupvals</a>(<a href="../h_src/57852320.htm" class="localvar">L</a>, <a href="../h_src/57852048.htm" class="localvar">cl</a>);
}


<a id=1005></a>int <a href="../h_src/57633580.htm" class="function">luaD_protectedparser</a> (<a href="../h_src/57444252.htm" class="type">lua_State</a> *<a href="../h_src/57851504.htm" class="localvar">L</a>, <a href="../h_src/57656088.htm" class="type">ZIO</a> *<a href="../h_src/57851368.htm" class="localvar">z</a>, const char *<a href="../h_src/57851232.htm" class="localvar">name</a>,
<a id=1006></a>                                        const char *<a href="../h_src/57851096.htm" class="localvar">mode</a>) {
<a id=1007></a>  struct <a href="../h_src/57853476.htm" class="class">SParser</a> <a href="../h_src/57850960.htm" class="localvar">p</a>;
<a id=1008></a>  int <a href="../h_src/57850824.htm" class="localvar">status</a>;
<a id=1009></a>  <a href="../h_src/57653504.htm" class="macro">incnny</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>);  <a  class="comments">/* cannot yield during parsing */</a>
<a id=1010></a>  <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853340.htm" class="variable">z</a> = <a href="../h_src/57851368.htm" class="localvar">z</a>; <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853068.htm" class="variable">name</a> = <a href="../h_src/57851232.htm" class="localvar">name</a>; <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853136.htm" class="variable">mode</a> = <a href="../h_src/57851096.htm" class="localvar">mode</a>;
<a id=1011></a>  <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676732.htm" class="variable">arr</a> = NULL; <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676596.htm" class="variable">size</a> = 0;
<a id=1012></a>  <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677140.htm" class="variable">arr</a> = NULL; <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677004.htm" class="variable">size</a> = 0;
<a id=1013></a>  <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677140.htm" class="variable">arr</a> = NULL; <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677004.htm" class="variable">size</a> = 0;
<a id=1014></a>  <a href="../h_src/57655476.htm" class="macro">luaZ_initbuffer</a>(L, &amp;<a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853272.htm" class="variable">buff</a>);
<a id=1015></a>  <a href="../h_src/57850824.htm" class="localvar">status</a> = <a href="../h_src/57632968.htm" class="function">luaD_pcall</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>, <a href="../h_src/57852456.htm" class="function">f_parser</a>, &amp;<a href="../h_src/57850960.htm" class="localvar">p</a>, <a href="../h_src/57634396.htm" class="macro">savestack</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>, <a href="../h_src/57851504.htm" class="localvar">L</a>-&gt;<a href="../h_src/57642624.htm" class="variable">top</a>.<a href="../h_src/57531984.htm" class="variable">p</a>), <a href="../h_src/57851504.htm" class="localvar">L</a>-&gt;<a href="../h_src/57641604.htm" class="variable">errfunc</a>);
<a id=1016></a>  <a href="../h_src/57654524.htm" class="macro">luaZ_freebuffer</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>, &amp;<a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853272.htm" class="variable">buff</a>);
<a id=1017></a>  <a href="../h_src/57495604.htm" class="macro">luaM_freearray</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>, <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676732.htm" class="variable">arr</a>, <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676460.htm" class="variable">actvar</a>.<a href="../h_src/57676596.htm" class="variable">size</a>);
<a id=1018></a>  <a href="../h_src/57495604.htm" class="macro">luaM_freearray</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>, <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677140.htm" class="variable">arr</a>, <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676392.htm" class="variable">gt</a>.<a href="../h_src/57677004.htm" class="variable">size</a>);
<a id=1019></a>  <a href="../h_src/57495604.htm" class="macro">luaM_freearray</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>, <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677140.htm" class="variable">arr</a>, <a href="../h_src/57850960.htm" class="localvar">p</a>.<a href="../h_src/57853204.htm" class="variable">dyd</a>.<a href="../h_src/57676324.htm" class="variable">label</a>.<a href="../h_src/57677004.htm" class="variable">size</a>);
<a id=1020></a>  <a href="../h_src/57653368.htm" class="macro">decnny</a>(<a href="../h_src/57851504.htm" class="localvar">L</a>);
<a id=1021></a>  return <a href="../h_src/57850824.htm" class="localvar">status</a>;
}


</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

