<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>utf8_decode</h2>

<div class="notebook">
<ul>
<li><a href="../h_aa/143417168.htm" class="function" target="_self">Info</a></li>
<li><a href="../h_rx/143417168.htm" class="function" target="_self">Calling Hierarchy</a></li>
<li><a href="../h_nf/143417168.htm" class="function" target="_self">Flow Chart</a></li>
<li id="current"><a href="../h_src/143417168.htm" class="function" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_src/143417168.htm" class="function" target="_self">Definition</a></li>
<li><a href="../h_sc/143417168.htm" class="function" target="_self">Source Checks</a></li>
<li><a href="../h_src/143418664.htm#61" class="function" target="_self">Source File</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<h4>Source Code</h4>
<pre class=src>
static const char *<a href="../h_src/143417168.htm" class="function">utf8_decode</a> (const char *<a href="../h_src/143417032.htm" class="localvar">s</a>, <a href="../h_src/143417916.htm" class="type">utfint</a> *<a href="../h_src/143416828.htm" class="localvar">val</a>, int <a href="../h_src/143416692.htm" class="localvar">strict</a>) {
  static const <a href="../h_src/143417916.htm" class="type">utfint</a> <a href="../h_src/143416488.htm" class="localvar">limits</a>[] =
        {~(<a href="../h_src/143417916.htm" class="type">utfint</a>)0, 0x80, 0x800, 0x10000u, 0x200000u, 0x4000000u};
  unsigned int <a href="../h_src/143416352.htm" class="localvar">c</a> = (unsigned char)<a href="../h_src/143417032.htm" class="localvar">s</a>[0];
  <a href="../h_src/143417916.htm" class="type">utfint</a> <a href="../h_src/143416216.htm" class="localvar">res</a> = 0;  <a  class="comments">/* final result */</a>
  if (<a href="../h_src/143416352.htm" class="localvar">c</a> &lt; 0x80)  <a  class="comments">/* ascii? */</a>
    <a href="../h_src/143416216.htm" class="localvar">res</a> = <a href="../h_src/143416352.htm" class="localvar">c</a>;
  else {
    int <a href="../h_src/143416080.htm" class="localvar">count</a> = 0;  <a  class="comments">/* to count number of continuation bytes */</a>
    for (; <a href="../h_src/143416352.htm" class="localvar">c</a> &amp; 0x40; <a href="../h_src/143416352.htm" class="localvar">c</a> &lt;&lt;= 1) {  <a  class="comments">/* while it needs continuation bytes... */</a>
      unsigned int <a href="../h_src/143415944.htm" class="localvar">cc</a> = (unsigned char)<a href="../h_src/143417032.htm" class="localvar">s</a>[++<a href="../h_src/143416080.htm" class="localvar">count</a>];  <a  class="comments">/* read next byte */</a>
      if (!<a href="../h_src/143417848.htm" class="macro">iscont</a>(<a href="../h_src/143415944.htm" class="localvar">cc</a>))  <a  class="comments">/* not a continuation byte? */</a>
        return NULL;  <a  class="comments">/* invalid byte sequence */</a>
      <a href="../h_src/143416216.htm" class="localvar">res</a> = (<a href="../h_src/143416216.htm" class="localvar">res</a> &lt;&lt; 6) | (<a href="../h_src/143415944.htm" class="localvar">cc</a> &amp; 0x3F);  <a  class="comments">/* add lower 6 bits from cont. byte */</a>
    }
    <a href="../h_src/143416216.htm" class="localvar">res</a> |= ((<a href="../h_src/143417916.htm" class="type">utfint</a>)(<a href="../h_src/143416352.htm" class="localvar">c</a> &amp; 0x7F) &lt;&lt; (<a href="../h_src/143416080.htm" class="localvar">count</a> * 5));  <a  class="comments">/* add first byte */</a>
    if (<a href="../h_src/143416080.htm" class="localvar">count</a> &gt; 5 || <a href="../h_src/143416216.htm" class="localvar">res</a> &gt; <a href="../h_src/143418188.htm" class="macro">MAXUTF</a> || <a href="../h_src/143416216.htm" class="localvar">res</a> &lt; <a href="../h_src/143416488.htm" class="localvar">limits</a>[<a href="../h_src/143416080.htm" class="localvar">count</a>])
      return NULL;  <a  class="comments">/* invalid byte sequence */</a>
    <a href="../h_src/143417032.htm" class="localvar">s</a> += <a href="../h_src/143416080.htm" class="localvar">count</a>;  <a  class="comments">/* skip continuation bytes read */</a>
  }
  if (<a href="../h_src/143416692.htm" class="localvar">strict</a>) {
    <a  class="comments">/* check for invalid code points; too large or surrogates */</a>
    if (<a href="../h_src/143416216.htm" class="localvar">res</a> &gt; <a href="../h_src/143418324.htm" class="macro">MAXUNICODE</a> || (0xD800u &lt;= <a href="../h_src/143416216.htm" class="localvar">res</a> &amp;&amp; <a href="../h_src/143416216.htm" class="localvar">res</a> &lt;= 0xDFFFu))
      return NULL;
  }
  if (<a href="../h_src/143416828.htm" class="localvar">val</a>) *<a href="../h_src/143416828.htm" class="localvar">val</a> = <a href="../h_src/143416216.htm" class="localvar">res</a>;
  return <a href="../h_src/143417032.htm" class="localvar">s</a> + 1;  <a  class="comments">/* +1 to include first byte */</a>
}
</pre>
<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</body>
</html>

