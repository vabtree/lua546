<html>
<head>
<!-- This html document was created by Imagix 4D -->
<link href="../htm/symbol.css" rel="stylesheet" type="text/css">
<link href="../htm/symcolors.css" rel="stylesheet" type="text/css">
<link href="../htm/notebook.css" rel="stylesheet" type="text/css">
<base target="symbol">
</head>
<body>

<h2>t</h2>

<div class="notebook">
<ul>
<li id="current"><a href="../h_aa/58091324.htm" class="variable" target="_self">Info</a></li>
<li><a href="../h_ri/58091324.htm" class="variable" target="_self">Usage</a></li>
<li><a href="../h_src/58091324.htm" class="variable" target="_self">Source Code</a></li>
</ul>
</div>
<div class="notebook">
<ul>
<li id="current"><a href="../h_aa/58091324.htm" class="variable" target="_self">General Info</a></li>
<li><a href="../h_am/58091324.htm" class="variable" target="_self">Metrics</a></li>
</ul>
</div>
<div class="nb_clear">
</div>
<h4>General Info</h4>
<table cellpadding=0 cellspacing=0 border=0>
<tr><td>category:</td><td>variable</td></tr>
<tr><td>type:</td><td>Table*</td></tr>
<tr><td>scope:</td><td>parameter</td></tr>
<tr><th width=180></th></tr>
</table>
<pre>
</pre>
<h4>Location</h4>
<table cellpadding=0 cellspacing=0 border=0>
<tr><td>file:</td><td>g:/lua-5.4.6/src/<a href="../h_aa/58121924.htm" class=file>ltable.c</a></td></tr>
<tr><td>line:</td><td>923</td></tr>
<tr><td>owner:</td><td></td></tr>
<tr><td>mod date:</td><td>03 May 2023 (02:32)</td></tr>
<tr><th width=180></th></tr>
</table>
<pre>
</pre>
<h4>Comments</h4>
<pre>
/*
** Try to find a boundary in table 't'. (A 'boundary' is an integer index
** such that t[i] is present and t[i+1] is absent, or 0 if t[1] is absent
** and 'maxinteger' if t[maxinteger] is present.)
** (In the next explanation, we use Lua indices, that is, with base 1.
** The code itself uses base 0 when indexing the array part of the table.)
** The code starts with 'limit = t->alimit', a position in the array
** part that may be a boundary.
**
** (1) If 't[limit]' is empty, there must be a boundary before it.
** As a common case (e.g., after 't[#t]=nil'), check whether 'limit-1'
** is present. If so, it is a boundary. Otherwise, do a binary search
** between 0 and limit to find a boundary. In both cases, try to
** use this boundary as the new 'alimit', as a hint for the next call.
**
** (2) If 't[limit]' is not empty and the array has more elements
** after 'limit', try to find a boundary there. Again, try first
** the special case (which should be quite frequent) where 'limit+1'
** is empty, so that 'limit' is a boundary. Otherwise, check the
** last element of the array part. If it is empty, there must be a
** boundary between the old limit (present) and the last element
** (absent), which is found with a binary search. (This boundary always
** can be a new limit.)
**
** (3) The last case is when there are no elements in the array part
** (limit == 0) or its last element (the new limit) is present.
** In this case, must check the hash part. If there is no hash part
** or 'limit+1' is absent, 'limit' is a boundary.  Otherwise, call
** 'hash_search' to find a boundary in the hash part of the table.
** (In those cases, the boundary is not inside the array part, and
** therefore cannot be used as a new limit.)
*/

<div class="footer">
Generated on 13 Dec 2023 (09:27) by <a class="footer" href="http://www.imagix.com">Imagix 4D</a>
</div>
</pre>
</body>
</html>

